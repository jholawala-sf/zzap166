{"version":3,"file":"service-worker.js","sources":["../../../../../../../node_modules/idb-keyval/dist/index.js","../../../../client/default/js/qlabs/service-worker.ts"],"sourcesContent":["function promisifyRequest(request) {\n    return new Promise((resolve, reject) => {\n        // @ts-ignore - file size hacks\n        request.oncomplete = request.onsuccess = () => resolve(request.result);\n        // @ts-ignore - file size hacks\n        request.onabort = request.onerror = () => reject(request.error);\n    });\n}\nfunction createStore(dbName, storeName) {\n    const request = indexedDB.open(dbName);\n    request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n    const dbp = promisifyRequest(request);\n    return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));\n}\nlet defaultGetStoreFunc;\nfunction defaultGetStore() {\n    if (!defaultGetStoreFunc) {\n        defaultGetStoreFunc = createStore('keyval-store', 'keyval');\n    }\n    return defaultGetStoreFunc;\n}\n/**\n * Get a value by its key.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction get(key, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => promisifyRequest(store.get(key)));\n}\n/**\n * Set a value with a key.\n *\n * @param key\n * @param value\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction set(key, value, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.put(value, key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Set multiple values at once. This is faster than calling set() multiple times.\n * It's also atomic â€“ if one of the pairs can't be added, none will be added.\n *\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction setMany(entries, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        entries.forEach((entry) => store.put(entry[1], entry[0]));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Get multiple values by their keys\n *\n * @param keys\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction getMany(keys, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => Promise.all(keys.map((key) => promisifyRequest(store.get(key)))));\n}\n/**\n * Update a value. This lets you see the old value and update it as an atomic operation.\n *\n * @param key\n * @param updater A callback that takes the old value and returns a new value.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction update(key, updater, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => \n    // Need to create the promise manually.\n    // If I try to chain promises, the transaction closes in browsers\n    // that use a promise polyfill (IE10/11).\n    new Promise((resolve, reject) => {\n        store.get(key).onsuccess = function () {\n            try {\n                store.put(updater(this.result), key);\n                resolve(promisifyRequest(store.transaction));\n            }\n            catch (err) {\n                reject(err);\n            }\n        };\n    }));\n}\n/**\n * Delete a particular key from the store.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction del(key, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.delete(key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Delete multiple keys at once.\n *\n * @param keys List of keys to delete.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction delMany(keys, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        keys.forEach((key) => store.delete(key));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Clear all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction clear(customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.clear();\n        return promisifyRequest(store.transaction);\n    });\n}\nfunction eachCursor(store, callback) {\n    store.openCursor().onsuccess = function () {\n        if (!this.result)\n            return;\n        callback(this.result);\n        this.result.continue();\n    };\n    return promisifyRequest(store.transaction);\n}\n/**\n * Get all keys in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction keys(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        if (store.getAllKeys) {\n            return promisifyRequest(store.getAllKeys());\n        }\n        const items = [];\n        return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);\n    });\n}\n/**\n * Get all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction values(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        if (store.getAll) {\n            return promisifyRequest(store.getAll());\n        }\n        const items = [];\n        return eachCursor(store, (cursor) => items.push(cursor.value)).then(() => items);\n    });\n}\n/**\n * Get all entries in the store. Each entry is an array of `[key, value]`.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction entries(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        // (although, hopefully we'll get a simpler path some day)\n        if (store.getAll && store.getAllKeys) {\n            return Promise.all([\n                promisifyRequest(store.getAllKeys()),\n                promisifyRequest(store.getAll()),\n            ]).then(([keys, values]) => keys.map((key, i) => [key, values[i]]));\n        }\n        const items = [];\n        return customStore('readonly', (store) => eachCursor(store, (cursor) => items.push([cursor.key, cursor.value])).then(() => items));\n    });\n}\n\nexport { clear, createStore, del, delMany, entries, get, getMany, keys, promisifyRequest, set, setMany, update, values };\n","import { get, set } from \"idb-keyval\";\n\ninterface WorkerConfig {\n    keepaliveUrl: string;\n    companionUrl: string;\n    clientSettings: any;\n}\n\ndeclare var CONFIG: WorkerConfig;\ndeclare const self: ServiceWorkerGlobalScope;\n\nasync function installServiceWorker(config: WorkerConfig) {\n    console.log(\"[QLABS] Service Worker installed\");\n}\n\nself.addEventListener(\"fetch\", (event) => {\n    const url = new URL(event.request.url);\n    // business manager intercept jquery to load the companion plugin\n    if (url.pathname.includes(\"jscript/jquery.min.js\")) {\n        event.respondWith(\n            fetch(event.request).then((response) => {\n                // Clone the response to avoid consuming it\n                const clonedResponse = response.clone();\n\n                return clonedResponse.blob().then((blob) => {\n                    // Convert blob to text\n                    return blob.text().then((originalText) => {\n                        // Add preamble to the beginning of the file\n                        const preamble = `\n// load qlabs support script\nwindow.__qlabsConfig = ${JSON.stringify(CONFIG)};\nwindow._clientSettings = ${JSON.stringify(CONFIG.clientSettings)};\nvar script = document.createElement('script');\nscript.type = 'module';\nscript.src = '${CONFIG.companionUrl}';\ndocument.head.appendChild(script);\n                            `;\n                        const modifiedText = preamble + originalText;\n\n                        // Create a new response with the modified content\n                        const modifiedResponse = new Response(modifiedText, {\n                            status: response.status,\n                            statusText: response.statusText,\n                            headers: response.headers,\n                        });\n\n                        return modifiedResponse;\n                    });\n                });\n            }),\n        );\n    }\n\n    // if url is to https://api-js.mixpanel.com/track/ then change the data if we're in business manager\n    // and the request is mangled by the BM javascript\n    if (url.hostname === \"api-js.mixpanel.com\") {\n        event.respondWith(\n            (async function () {\n                // Clone the request\n                const originalRequest = event.request.clone();\n\n                try {\n                    // Read the original body\n                    const originalBody = await originalRequest.formData();\n                    const data = originalBody.get(\"data\") as string;\n\n                    // if data starts with a double quote it is double encoded and will\n                    // fail with a mixpanel error\n                    if (data.startsWith('\"')) {\n                        // double un-encode to get the original JSON\n                        const eventData = JSON.parse(JSON.parse(data));\n                        const newFormData =\n                            \"data=\" +\n                            encodeURIComponent(JSON.stringify(eventData));\n                        const newRequest = new Request(originalRequest.url, {\n                            method: originalRequest.method,\n                            headers: originalRequest.headers,\n                            body: newFormData,\n                            mode: originalRequest.mode,\n                            credentials: originalRequest.credentials,\n                            cache: originalRequest.cache,\n                            redirect: originalRequest.redirect,\n                            referrer: originalRequest.referrer,\n                            integrity: originalRequest.integrity,\n                        });\n\n                        // Forward the new request\n                        return fetch(newRequest);\n                    } else {\n                        return fetch(event.request);\n                    }\n                } catch (error) {\n                    console.error(\"Error modifying request:\", error);\n                    return fetch(event.request);\n                }\n            })(),\n        );\n    }\n});\n\nasync function activateServiceWorker(config: WorkerConfig) {\n    console.log(\"[QLABS] Service Worker Activated\");\n}\n\nself.addEventListener(\"install\", (event: ExtendableEvent) => {\n    event.waitUntil(installServiceWorker(CONFIG));\n    event.waitUntil(self.skipWaiting());\n});\nself.addEventListener(\"activate\", (event: ExtendableEvent) => {\n    event.waitUntil(activateServiceWorker(CONFIG));\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    event.waitUntil(clients.claim());\n});\n\n// simple key value config exchange\nself.addEventListener(\"message\", async (ev) => {\n    const command = ev.data?.command;\n\n    switch (command) {\n        case \"SET_CONFIG\":\n            const configKey = ev.data?.configKey;\n            const configVal = ev.data?.configVal;\n            await set(configKey, configVal);\n            await activateServiceWorker(CONFIG);\n            break;\n        case \"PING\":\n            console.log(\"[QLABS] PING\");\n            break;\n        default:\n            console.error(`[QLABS] invalid command ${command}`);\n    }\n});\n"],"names":["installServiceWorker","config","console","log","self","addEventListener","event","url","URL","request","pathname","includes","respondWith","fetch","then","response","clonedResponse","clone","blob","text","originalText","preamble","JSON","stringify","CONFIG","clientSettings","companionUrl","modifiedText","modifiedResponse","Response","status","statusText","headers","hostname","originalRequest","originalBody","formData","data","get","startsWith","eventData","parse","newFormData","encodeURIComponent","newRequest","Request","method","body","mode","credentials","cache","redirect","referrer","integrity","error","activateServiceWorker","waitUntil","skipWaiting","clients","claim","ev","command","configKey","configVal","set"],"mappings":"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","x_google_ignoreList":[0]}