var X0 = Object.defineProperty
var Y0 = (n, e, t) =>
  e in n
    ? X0(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t })
    : (n[e] = t)
var Zn = (n, e, t) => (Y0(n, typeof e != 'symbol' ? e + '' : e, t), t)
import {
  g as Qn,
  c as Yn,
  R as $,
  P as p,
  r as Te,
  a as Xh,
  j as z,
  _ as I0,
  b as Of,
  d as N0
} from './objectWithoutPropertiesLoose.js'
var $g = { exports: {} },
  yo = 1
function M0() {
  return (yo = (yo * 9301 + 49297) % 233280), yo / 233280
}
function V0(n) {
  yo = n
}
var W0 = {
    nextValue: M0,
    seed: V0
  },
  Xc = W0,
  hi = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-',
  In,
  Yh,
  Xr
function Yc() {
  Xr = !1
}
function Pg(n) {
  if (!n) {
    In !== hi && ((In = hi), Yc())
    return
  }
  if (n !== In) {
    if (n.length !== hi.length)
      throw new Error(
        'Custom alphabet for shortid must be ' +
          hi.length +
          ' unique characters. You submitted ' +
          n.length +
          ' characters: ' +
          n
      )
    var e = n.split('').filter(function (t, i, r) {
      return i !== r.lastIndexOf(t)
    })
    if (e.length)
      throw new Error(
        'Custom alphabet for shortid must be ' +
          hi.length +
          ' unique characters. These characters were not unique: ' +
          e.join(', ')
      )
    ;(In = n), Yc()
  }
}
function j0(n) {
  return Pg(n), In
}
function B0(n) {
  Xc.seed(n), Yh !== n && (Yc(), (Yh = n))
}
function L0() {
  In || Pg(hi)
  for (var n = In.split(''), e = [], t = Xc.nextValue(), i; n.length > 0; )
    (t = Xc.nextValue()),
      (i = Math.floor(t * n.length)),
      e.push(n.splice(i, 1)[0])
  return e.join('')
}
function Qg() {
  return Xr || ((Xr = L0()), Xr)
}
function U0(n) {
  var e = Qg()
  return e[n]
}
function q0() {
  return In || hi
}
var gf = {
    get: q0,
    characters: j0,
    seed: B0,
    lookup: U0,
    shuffled: Qg
  },
  jl = typeof window == 'object' && (window.crypto || window.msCrypto),
  Ic
!jl || !jl.getRandomValues
  ? (Ic = function (n) {
      for (var e = [], t = 0; t < n; t++)
        e.push(Math.floor(Math.random() * 256))
      return e
    })
  : (Ic = function (n) {
      return jl.getRandomValues(new Uint8Array(n))
    })
var z0 = Ic,
  F0 = function (n, e, t) {
    for (
      var i = (2 << (Math.log(e.length - 1) / Math.LN2)) - 1,
        r = -~((1.6 * i * t) / e.length),
        s = '';
      ;

    )
      for (var o = n(r), a = r; a--; )
        if (((s += e[o[a] & i] || ''), s.length === +t)) return s
  },
  G0 = gf,
  H0 = z0,
  K0 = F0
function J0(n) {
  for (var e = 0, t, i = ''; !t; )
    (i = i + K0(H0, G0.get(), 1)), (t = n < Math.pow(16, e + 1)), e++
  return i
}
var ex = J0,
  Ls = ex,
  tx = 1567752802062,
  nx = 7,
  Us,
  Ih
function ix(n) {
  var e = '',
    t = Math.floor((Date.now() - tx) * 1e-3)
  return (
    t === Ih ? Us++ : ((Us = 0), (Ih = t)),
    (e = e + Ls(nx)),
    (e = e + Ls(n)),
    Us > 0 && (e = e + Ls(Us)),
    (e = e + Ls(t)),
    e
  )
}
var rx = ix,
  sx = gf
function ox(n) {
  if (!n || typeof n != 'string' || n.length < 6) return !1
  var e = new RegExp(
    '[^' + sx.get().replace(/[|\\{}()[\]^$+*?.-]/g, '\\$&') + ']'
  )
  return !e.test(n)
}
var ax = ox
;(function (n) {
  var e = gf,
    t = rx,
    i = ax,
    r = 0
  function s(c) {
    return e.seed(c), n.exports
  }
  function o(c) {
    return (r = c), n.exports
  }
  function a(c) {
    return c !== void 0 && e.characters(c), e.shuffled()
  }
  function l() {
    return t(r)
  }
  ;(n.exports = l),
    (n.exports.generate = l),
    (n.exports.seed = s),
    (n.exports.worker = o),
    (n.exports.characters = a),
    (n.exports.isValid = i)
})($g)
var lx = $g.exports,
  cx = lx
const bi = /* @__PURE__ */ Qn(cx)
var kg = { exports: {} }
/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/
;(function (n) {
  ;(function () {
    var e = {}.hasOwnProperty
    function t() {
      for (var i = [], r = 0; r < arguments.length; r++) {
        var s = arguments[r]
        if (s) {
          var o = typeof s
          if (o === 'string' || o === 'number') i.push(s)
          else if (Array.isArray(s)) {
            if (s.length) {
              var a = t.apply(null, s)
              a && i.push(a)
            }
          } else if (o === 'object') {
            if (
              s.toString !== Object.prototype.toString &&
              !s.toString.toString().includes('[native code]')
            ) {
              i.push(s.toString())
              continue
            }
            for (var l in s) e.call(s, l) && s[l] && i.push(l)
          }
        }
      }
      return i.join(' ')
    }
    n.exports ? ((t.default = t), (n.exports = t)) : (window.classNames = t)
  })()
})(kg)
var ux = kg.exports
const ae = /* @__PURE__ */ Qn(ux)
var fx = '[object AsyncFunction]',
  hx = '[object Function]',
  dx = '[object GeneratorFunction]',
  px = '[object Null]',
  Ox = '[object Proxy]',
  gx = '[object Undefined]',
  mx = typeof Yn == 'object' && Yn && Yn.Object === Object && Yn,
  yx = typeof self == 'object' && self && self.Object === Object && self,
  bx = mx || yx || Function('return this')(),
  Tg = Object.prototype,
  vx = Tg.hasOwnProperty,
  Cg = Tg.toString,
  Nh = bx.Symbol,
  di = Nh ? Nh.toStringTag : void 0
function Sx(n) {
  return n == null
    ? n === void 0
      ? gx
      : px
    : di && di in Object(n)
      ? xx(n)
      : wx(n)
}
function xx(n) {
  var e = vx.call(n, di),
    t = n[di]
  try {
    n[di] = void 0
    var i = !0
  } catch {}
  var r = Cg.call(n)
  return i && (e ? (n[di] = t) : delete n[di]), r
}
function wx(n) {
  return Cg.call(n)
}
function $x(n) {
  if (!Px(n)) return !1
  var e = Sx(n)
  return e == hx || e == dx || e == fx || e == Ox
}
function Px(n) {
  var e = typeof n
  return n != null && (e == 'object' || e == 'function')
}
var Qx = $x
const _g = /* @__PURE__ */ Qn(Qx)
var Zg = 'SLDSAlert',
  kx = 'SLDSAlertContainer',
  mf = 'SLDSButton',
  Tx = 'SLDSButtonGroup',
  Cx = 'SLDSButtonStateful',
  Ag = 'SLDSButtonIcon',
  _x = 'SLDSDatePicker',
  Zx = 'SLDSDialog',
  Ax = 'SLDSExpandableSection',
  Rx = 'SLDSCheckbox',
  il = 'SLDSInput',
  Rg = 'SLDSTextarea',
  Ex = 'SLDSSearch',
  Eg = 'SLDSIcon',
  Dx = 'SLDSIconSettings',
  Xx = 'SLDSIconInput',
  Yx = 'SLDSLookup',
  Ix = 'SLDSMenuDropdown',
  Dg = 'SLDSPopoverTooltip',
  Xg = 'SLDSSpinner',
  Nx = 'SLDSTab',
  Mx = 'SLDSTabPanel',
  Vx = 'SLDSTabs',
  Wx = 'SLDSTabsList',
  jx = 'SLDSTabsPanel',
  Bx = 'SLDSTimepicker',
  Yg = 'SLDSToast',
  Lx = 'SLDSToastContainer',
  yf = function (e) {
    var t = e.id,
      i = e.className,
      r = e.children,
      s = e.variant
    return /* @__PURE__ */ $.createElement(
      'ul',
      {
        id: ''.concat(t, '-slds-tabs__nav'),
        className: ae(i, {
          'slds-tabs_default__nav': s === 'default',
          'slds-tabs_scoped__nav': s === 'scoped',
          'slds-vertical-tabs__nav': s === 'vertical'
        }),
        role: 'tablist',
        'aria-orientation': s === 'vertical' ? 'vertical' : void 0
      },
      r
    )
  }
yf.displayName = Wx
yf.propTypes = {
  /**
   * Inherits the `id` from the parent `<Tabs />` component and appends `-tabs__nav`. Becomes the HTML `id` attribute of UL element that has the class `.slds-tabs_default__nav` on it.
   */
  id: p.string,
  /**
   * Class names to be added to the tabs list element.
   */
  className: p.oneOfType([p.array, p.object, p.string]),
  /**
   * The `children` are the actual tabs to be rendered as `li` elements. They get created by [tabs/index.jsx](./index.jsx) in the `renderTabsList` function.
   */
  children: p.oneOfType([p.object, p.array]),
  /**
   * If the Tabs should be scoped, vertical, or default (default value)
   */
  variant: p.oneOf(['default', 'scoped', 'vertical'])
}
const Ux = yf
var qx = process.env.NODE_ENV !== 'production',
  Ig = function () {}
if (qx) {
  var zx = function (e, t) {
    var i = arguments.length
    t = new Array(i > 1 ? i - 1 : 0)
    for (var r = 1; r < i; r++) t[r - 1] = arguments[r]
    var s = 0,
      o =
        'Warning: ' +
        e.replace(/%s/g, function () {
          return t[s++]
        })
    typeof console < 'u' && console.error(o)
    try {
      throw new Error(o)
    } catch {}
  }
  Ig = function (n, e, t) {
    var i = arguments.length
    t = new Array(i > 2 ? i - 2 : 0)
    for (var r = 2; r < i; r++) t[r - 2] = arguments[r]
    if (e === void 0)
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning message argument'
      )
    n || zx.apply(null, [e].concat(t))
  }
}
var Fx = Ig
const wi = /* @__PURE__ */ Qn(Fx)
var Ng = function () {}
if (process.env.NODE_ENV !== 'production') {
  var Mh = {}
  Ng = function (e, t, i, r) {
    var s = r ? ' '.concat(r) : ''
    Mh[e + i] ||
      (wi(
        !t,
        '[Design System React] `'
          .concat(
            i,
            '` has reached End-of-Life and has been removed from the API of '
          )
          .concat(e, '. Please update your API.')
          .concat(s)
      ),
      (Mh[e + i] = !!t))
  }
}
const _e = Ng
var Mg = function () {},
  Gx = 'https://react.lightningdesignsystem.com'
process.env.NODE_ENV !== 'production' &&
  (Mg = function (e) {
    var t = ''.concat(
      Gx + (e && e['url-slug'] ? '/components/'.concat(e['url-slug']) : '')
    )
    return function (i) {
      return 'Please check the current documentation at: '.concat(
        i ? ''.concat(t, '#prop-').concat(i) : t
      )
    }
  })
const ei = Mg
var Vg = function () {}
process.env.NODE_ENV !== 'production' &&
  (Vg = function (e, t, i) {
    if (typeof t.assistiveText == 'string') {
      var r = ei(i)
      _e(
        e,
        t.assistiveText,
        'assistiveText',
        '`assistiveText` as a string has been deprecated and is now an object to allow for multiple uses in the component. Please use `assistiveText.label` instead. '.concat(
          r('assistiveText')
        )
      )
    }
  })
const Hx = Vg,
  Kx = 'icon',
  Jx = 'prod',
  ew = 'Icon',
  tw = {
    component: Kx,
    status: Jx,
    'display-name': 'Icons',
    classKey: ew,
    'last-accessibility-review': {
      'date-iso-8601': '2018/01/18',
      'commit-sha': 'ad6b6c6523ee21cada11be5f7ea4d99abc530726'
    },
    'SLDS-component-path': '/components/icons',
    'site-stories': [
      {
        heading: 'Category Options',
        path: '/__examples__/categories.jsx'
      },
      {
        heading: 'Color Options',
        path: '/__examples__/colors.jsx'
      },
      {
        heading: 'Size Options',
        path: '/__examples__/sizes.jsx'
      }
    ],
    'url-slug': 'icons'
  }
var nw = function () {
  var e = ae.apply(void 0, arguments)
  return e === '' ? void 0 : e
}
const Gi = nw
var Nc = function () {}
if (process.env.NODE_ENV !== 'production') {
  var Vh = {},
    Wh,
    jh = function (e, t, i) {
      return function (r) {
        if (((Wh = !0), r.status === 404)) {
          var s = i ? ' '.concat(i) : ''
          wi(
            !t,
            'The icon asset was not found at '
              .concat(
                t,
                '. Make sure the path to the icon asset is correct. You can set the icon path by importing the IconSettings component, `<IconSettings iconPath=[/assets/icons]>` from `components/iconSettings`, and wrap that component around your entire app or around individual components using icons. If you are using the `<Icon>` component, you can also pass the url to `this.props.path`.'
              )
              .concat(s)
          ),
            (Vh[''.concat(e, '-path')] = !!t)
        }
      }
    },
    Bh = function (e) {
      return (
        !Wh &&
        !Vh[''.concat(e, '-path')] &&
        typeof window < 'u' &&
        process.env.NODE_ENV !== 'test'
      )
    }
  typeof fetch == 'function'
    ? (Nc = function (e, t, i) {
        Bh(e) && fetch(t).then(jh(e, t, i))
      })
    : (Nc = function (e, t, i) {
        if (Bh(e) && XMLHttpRequest) {
          var r = new XMLHttpRequest()
          r.open('GET', t, !1), r.send(), jh(e, t, i)(r)
        }
      })
}
const iw = Nc
var Un = {}
Un.LTR = 'ltr'
Un.RTL = 'rtl'
var Wg = /* @__PURE__ */ $.createContext('ltr'),
  jg = function () {}
process.env.NODE_ENV !== 'production' &&
  (jg = function (e, t) {
    if (
      !t.context[''.concat(t.category, 'Sprite')] &&
      !t.context.onRequestIconPath
    ) {
      var i = t.path || t.context.iconPath,
        r = t.direction === Un.RTL ? 'symbols-rtl.svg' : 'symbols.svg'
      iw(
        e,
        ''
          .concat(i, '/')
          .concat(t.category, '-sprite/svg/')
          .concat(r, '#')
          .concat(t.name)
      )
    }
  })
const rw = jg
function bo(n) {
  '@babel/helpers - typeof'
  return (
    typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol'
      ? (bo = function (t) {
          return typeof t
        })
      : (bo = function (t) {
          return t &&
            typeof Symbol == 'function' &&
            t.constructor === Symbol &&
            t !== Symbol.prototype
            ? 'symbol'
            : typeof t
        }),
    bo(n)
  )
}
function Lh(n, e) {
  if (n == null) return {}
  var t = sw(n, e),
    i,
    r
  if (Object.getOwnPropertySymbols) {
    var s = Object.getOwnPropertySymbols(n)
    for (r = 0; r < s.length; r++)
      (i = s[r]),
        !(e.indexOf(i) >= 0) &&
          Object.prototype.propertyIsEnumerable.call(n, i) &&
          (t[i] = n[i])
  }
  return t
}
function sw(n, e) {
  if (n == null) return {}
  var t = {},
    i = Object.keys(n),
    r,
    s
  for (s = 0; s < i.length; s++)
    (r = i[s]), !(e.indexOf(r) >= 0) && (t[r] = n[r])
  return t
}
function Yi() {
  return (
    (Yi =
      Object.assign ||
      function (n) {
        for (var e = 1; e < arguments.length; e++) {
          var t = arguments[e]
          for (var i in t)
            Object.prototype.hasOwnProperty.call(t, i) && (n[i] = t[i])
        }
        return n
      }),
    Yi.apply(this, arguments)
  )
}
function ow(n, e) {
  if (!(n instanceof e))
    throw new TypeError('Cannot call a class as a function')
}
function Uh(n, e) {
  for (var t = 0; t < e.length; t++) {
    var i = e[t]
    ;(i.enumerable = i.enumerable || !1),
      (i.configurable = !0),
      'value' in i && (i.writable = !0),
      Object.defineProperty(n, i.key, i)
  }
}
function aw(n, e, t) {
  return e && Uh(n.prototype, e), t && Uh(n, t), n
}
function lw(n, e) {
  if (typeof e != 'function' && e !== null)
    throw new TypeError('Super expression must either be null or a function')
  ;(n.prototype = Object.create(e && e.prototype, {
    constructor: { value: n, writable: !0, configurable: !0 }
  })),
    e && Mc(n, e)
}
function Mc(n, e) {
  return (
    (Mc =
      Object.setPrototypeOf ||
      function (i, r) {
        return (i.__proto__ = r), i
      }),
    Mc(n, e)
  )
}
function cw(n) {
  var e = fw()
  return function () {
    var i = Jo(n),
      r
    if (e) {
      var s = Jo(this).constructor
      r = Reflect.construct(i, arguments, s)
    } else r = i.apply(this, arguments)
    return uw(this, r)
  }
}
function uw(n, e) {
  return e && (bo(e) === 'object' || typeof e == 'function') ? e : ci(n)
}
function ci(n) {
  if (n === void 0)
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    )
  return n
}
function fw() {
  if (typeof Reflect > 'u' || !Reflect.construct || Reflect.construct.sham)
    return !1
  if (typeof Proxy == 'function') return !0
  try {
    return (
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      ),
      !0
    )
  } catch {
    return !1
  }
}
function Jo(n) {
  return (
    (Jo = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function (t) {
          return t.__proto__ || Object.getPrototypeOf(t)
        }),
    Jo(n)
  )
}
function ui(n, e, t) {
  return (
    e in n
      ? Object.defineProperty(n, e, {
          value: t,
          enumerable: !0,
          configurable: !0,
          writable: !0
        })
      : (n[e] = t),
    n
  )
}
var Bg = /* @__PURE__ */ (function (n) {
  lw(t, n)
  var e = cw(t)
  function t() {
    var i
    ow(this, t)
    for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
      s[o] = arguments[o]
    return (
      (i = e.call.apply(e, [this].concat(s))),
      ui(ci(i), 'getPaths', function (a) {
        return a instanceof Array
          ? a.map(function (l, c) {
              return /* @__PURE__ */ $.createElement(
                'path',
                Yi(
                  {
                    key: c
                  },
                  l
                )
              )
            })
          : /* @__PURE__ */ $.createElement(
              'path',
              Yi(
                {
                  key: 'pathSVG'
                },
                a
              )
            )
      }),
      ui(ci(i), 'getCircles', function (a) {
        return a instanceof Array
          ? a.map(function (l) {
              return /* @__PURE__ */ $.createElement('circle', l)
            })
          : /* @__PURE__ */ $.createElement(
              'circle',
              Yi(
                {
                  key: 'circleSVG'
                },
                a
              )
            )
      }),
      ui(ci(i), 'getEllipses', function (a) {
        return a instanceof Array
          ? a.map(function (l) {
              return /* @__PURE__ */ $.createElement('ellipse', l)
            })
          : /* @__PURE__ */ $.createElement(
              'ellipse',
              Yi(
                {
                  key: 'ellipseSVG'
                },
                a
              )
            )
      }),
      ui(ci(i), 'getGroups', function (a) {
        return a instanceof Array
          ? a.map(function (l) {
              return /* @__PURE__ */ $.createElement('g', null, i.getShapes(l))
            })
          : /* @__PURE__ */ $.createElement(
              'g',
              {
                key: 'groupsSVG'
              },
              i.getShapes(a)
            )
      }),
      ui(ci(i), 'getShapes', function (a) {
        var l = []
        return (
          a &&
            (a.g && l.push(i.getGroups(a.g)),
            a.ellipse && l.push(i.getEllipses(a.ellipse)),
            a.circle && l.push(i.getCircles(a.circle)),
            a.path && l.push(i.getPaths(a.path))),
          l
        )
      }),
      ui(ci(i), 'getSVG', function (a, l) {
        var c = a.viewBox,
          u = Lh(a, ['viewBox'])
        return /* @__PURE__ */ $.createElement(
          'svg',
          {
            'aria-hidden': l['aria-hidden'],
            className: l.className,
            viewBox: c,
            name: l.name,
            style: l.style
          },
          i.getShapes(u)
        )
      }),
      i
    )
  }
  return (
    aw(t, [
      {
        key: 'render',
        value: function () {
          var r = this.props,
            s = r.data,
            o = Lh(r, ['data'])
          return s ? this.getSVG(s, o) : null
        }
      }
    ]),
    t
  )
})($.Component)
ui(Bg, 'displayName', 'Svg')
const hw = Bg
var dw = {}
const pw = dw
var Ow = {}
const gw = Ow
var mw = {}
const yw = mw
var bw = {}
const vw = bw
var Sw = {}
const xw = Sw
function vo(n) {
  '@babel/helpers - typeof'
  return (
    typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol'
      ? (vo = function (t) {
          return typeof t
        })
      : (vo = function (t) {
          return t &&
            typeof Symbol == 'function' &&
            t.constructor === Symbol &&
            t !== Symbol.prototype
            ? 'symbol'
            : typeof t
        }),
    vo(n)
  )
}
function Vc() {
  return (
    (Vc =
      Object.assign ||
      function (n) {
        for (var e = 1; e < arguments.length; e++) {
          var t = arguments[e]
          for (var i in t)
            Object.prototype.hasOwnProperty.call(t, i) && (n[i] = t[i])
        }
        return n
      }),
    Vc.apply(this, arguments)
  )
}
function ww(n, e) {
  if (!(n instanceof e))
    throw new TypeError('Cannot call a class as a function')
}
function qh(n, e) {
  for (var t = 0; t < e.length; t++) {
    var i = e[t]
    ;(i.enumerable = i.enumerable || !1),
      (i.configurable = !0),
      'value' in i && (i.writable = !0),
      Object.defineProperty(n, i.key, i)
  }
}
function $w(n, e, t) {
  return e && qh(n.prototype, e), t && qh(n, t), n
}
function Pw(n, e) {
  if (typeof e != 'function' && e !== null)
    throw new TypeError('Super expression must either be null or a function')
  ;(n.prototype = Object.create(e && e.prototype, {
    constructor: { value: n, writable: !0, configurable: !0 }
  })),
    e && Wc(n, e)
}
function Wc(n, e) {
  return (
    (Wc =
      Object.setPrototypeOf ||
      function (i, r) {
        return (i.__proto__ = r), i
      }),
    Wc(n, e)
  )
}
function Qw(n) {
  var e = Tw()
  return function () {
    var i = ea(n),
      r
    if (e) {
      var s = ea(this).constructor
      r = Reflect.construct(i, arguments, s)
    } else r = i.apply(this, arguments)
    return kw(this, r)
  }
}
function kw(n, e) {
  return e && (vo(e) === 'object' || typeof e == 'function') ? e : Lg(n)
}
function Lg(n) {
  if (n === void 0)
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    )
  return n
}
function Tw() {
  if (typeof Reflect > 'u' || !Reflect.construct || Reflect.construct.sham)
    return !1
  if (typeof Proxy == 'function') return !0
  try {
    return (
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      ),
      !0
    )
  } catch {
    return !1
  }
}
function ea(n) {
  return (
    (ea = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function (t) {
          return t.__proto__ || Object.getPrototypeOf(t)
        }),
    ea(n)
  )
}
function zh(n, e, t) {
  return (
    e in n
      ? Object.defineProperty(n, e, {
          value: t,
          enumerable: !0,
          configurable: !0,
          writable: !0
        })
      : (n[e] = t),
    n
  )
}
var Cw = function (e) {
  var t,
    i,
    r = e.displayName || e.name || 'Component'
  return (
    (i = t =
      /* @__PURE__ */ (function (s) {
        Pw(a, s)
        var o = Qw(a)
        function a() {
          var l
          ww(this, a)
          for (var c = arguments.length, u = new Array(c), f = 0; f < c; f++)
            u[f] = arguments[f]
          return (
            (l = o.call.apply(o, [this].concat(u))),
            zh(Lg(l), 'getWrappedComponent', function (h) {
              return /* @__PURE__ */ $.createElement(
                e,
                Vc({}, l.props, {
                  direction: h
                })
              )
            }),
            l
          )
        }
        return (
          $w(a, [
            {
              key: 'render',
              value: function () {
                return (
                  // eslint-disable-next-line react/jsx-pascal-case
                  /* @__PURE__ */ $.createElement(
                    Wg.Consumer,
                    null,
                    this.getWrappedComponent
                  )
                )
              }
            }
          ]),
          a
        )
      })(Te.Component)),
    zh(t, 'displayName', 'LanguageDirection('.concat(r, ')')),
    i
  )
}
const Ug = Cw
var rl = function (e) {
  var t = e.iconPath,
    i = e.onRequestIconPath,
    r = e.actionSprite,
    s = e.customSprite,
    o = e.doctypeSprite,
    a = e.standardSprite,
    l = e.utilitySprite,
    c = e.children
  return /* @__PURE__ */ $.createElement(
    sl.Provider,
    {
      value: {
        iconPath: t,
        onRequestIconPath: i,
        actionSprite: r,
        customSprite: s,
        doctypeSprite: o,
        standardSprite: a,
        utilitySprite: l
      }
    },
    c
  )
}
rl.displayName = Dx
rl.propTypes = {
  /**
   * Path to the root icon folder
   * example: `/assets/icons`
   */
  iconPath: p.string,
  /**
   * Function to allow developers to return a custom icon path--for instance, on the same page with a local anchor (`#down`). This is helpful for when there are Cross-Origin Resource Sharing (CORS) issues with SVGs that are located on another domain such as a CDN. `({category, name}) => { return \`#${name}\` }`
   */
  onRequestIconPath: p.func,
  /**
   * Path to the action sprite
   * example: '@salesforce-ux/design-system/assets/icons/action-sprite/svg/symbols.svg';
   */
  actionSprite: p.string,
  /**
   * Path to the custom sprite
   * example: '@salesforce-ux/design-system/assets/icons/custom-sprite/svg/symbols.svg';
   */
  customSprite: p.string,
  /**
   * Path to the doctype sprite
   * example: '@salesforce-ux/design-system/assets/icons/doctype-sprite/svg/symbols.svg';
   */
  doctypeSprite: p.string,
  /**
   * Path to the standard sprite
   * example: '@salesforce-ux/design-system/assets/icons/standard-sprite/svg/symbols.svg';
   */
  standardSprite: p.string,
  /**
   * Path to the utility sprite
   * example: '@salesforce-ux/design-system/assets/icons/utility-sprite/svg/symbols.svg';
   */
  utilitySprite: p.string
}
var sl = /* @__PURE__ */ $.createContext({})
function ta() {
  return (
    (ta =
      Object.assign ||
      function (n) {
        for (var e = 1; e < arguments.length; e++) {
          var t = arguments[e]
          for (var i in t)
            Object.prototype.hasOwnProperty.call(t, i) && (n[i] = t[i])
        }
        return n
      }),
    ta.apply(this, arguments)
  )
}
function _w(n, e) {
  if (n == null) return {}
  var t = Zw(n, e),
    i,
    r
  if (Object.getOwnPropertySymbols) {
    var s = Object.getOwnPropertySymbols(n)
    for (r = 0; r < s.length; r++)
      (i = s[r]),
        !(e.indexOf(i) >= 0) &&
          Object.prototype.propertyIsEnumerable.call(n, i) &&
          (t[i] = n[i])
  }
  return t
}
function Zw(n, e) {
  if (n == null) return {}
  var t = {},
    i = Object.keys(n),
    r,
    s
  for (s = 0; s < i.length; s++)
    (r = i[s]), !(e.indexOf(r) >= 0) && (t[r] = n[r])
  return t
}
var ol = function (e) {
  var t = e.name,
    i = t === void 0 ? '' : t
  e.assistiveText
  var r = e.category,
    s = e.icon,
    o = e.path,
    a = e.direction,
    l = _w(e, [
      'name',
      'assistiveText',
      'category',
      'icon',
      'path',
      'direction'
    ]),
    c = Te.useContext(sl)
  rw('UtilityIcon', {
    name: i,
    category: r,
    path: o,
    context: c
  })
  var u = {
      action: gw,
      custom: yw,
      doctype: vw,
      standard: xw,
      utility: pw
    },
    f
  s
    ? (f = s)
    : Object.keys(u[r]).length &&
      ((f = u[r][i.toLowerCase()]), (f.viewBox = u[r].viewBox))
  var h
  if (o) h = o
  else if (c.onRequestIconPath)
    h = c.onRequestIconPath({
      category: r,
      name: i
    })
  else if (c[''.concat(r, 'Sprite')])
    h = ''.concat(c[''.concat(r, 'Sprite')], '#').concat(i)
  else {
    var d = a === Un.RTL ? 'symbols-rtl.svg' : 'symbols.svg'
    h =
      c.iconPath &&
      ''
        .concat(c.iconPath, '/')
        .concat(r, '-sprite/svg/')
        .concat(d, '#')
        .concat(i)
  }
  return f
    ? /* @__PURE__ */ $.createElement(
        hw,
        ta(
          {
            data: f,
            name: i
          },
          l
        )
      )
    : /* @__PURE__ */ $.createElement(
        'svg',
        ta(
          {
            key: ''.concat(i, '_').concat(r)
          },
          l
        ),
        /* @__PURE__ */ $.createElement('use', {
          href: h
        })
      )
}
ol.displayName = 'UtilityIcon'
ol.propTypes = {
  assistiveText: p.object,
  category: p.oneOf(['action', 'custom', 'doctype', 'standard', 'utility']),
  /**
   * An SVG object to use instead of name / category, look in `design-system-react/icons` for examples
   */
  icon: p.object,
  /**
   * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to reference icon names.
   */
  name: p.string,
  /**
   * Path to the icon. This will override any global icon settings.
   */
  path: p.string
}
ol.defaultProps = {
  category: 'utility'
}
const na = Ug(ol)
var Aw = {
  'global-setup': '#2A739E',
  'service-cloud': '#7f2443',
  'industry-cloud': '#4c2248',
  'sales-cloud': '#00857d',
  'commerce-cloud': '#41693d',
  'community-cloud': '#ffc20e',
  'marketing-cloud': '#ea7600',
  quip: '#cf451d'
}
const Rw = /* @__PURE__ */ Qn(Aw)
function Fh(n, e) {
  var t = Object.keys(n)
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(n)
    e &&
      (i = i.filter(function (r) {
        return Object.getOwnPropertyDescriptor(n, r).enumerable
      })),
      t.push.apply(t, i)
  }
  return t
}
function Bl(n) {
  for (var e = 1; e < arguments.length; e++) {
    var t = arguments[e] != null ? arguments[e] : {}
    e % 2
      ? Fh(Object(t), !0).forEach(function (i) {
          qg(n, i, t[i])
        })
      : Object.getOwnPropertyDescriptors
        ? Object.defineProperties(n, Object.getOwnPropertyDescriptors(t))
        : Fh(Object(t)).forEach(function (i) {
            Object.defineProperty(n, i, Object.getOwnPropertyDescriptor(t, i))
          })
  }
  return n
}
function qg(n, e, t) {
  return (
    e in n
      ? Object.defineProperty(n, e, {
          value: t,
          enumerable: !0,
          configurable: !0,
          writable: !0
        })
      : (n[e] = t),
    n
  )
}
var zg = {
    assistiveText: {},
    category: 'standard',
    colorVariant: 'default',
    size: 'medium'
  },
  Ve = function (e) {
    Hx(Eg, e, tw)
    var t = e.category,
      i = e.className,
      r = e.colorVariant,
      s = e.containerClassName,
      o = e.containerStyle,
      a = e.icon,
      l = e.inverse,
      c = e.name,
      u = e.path,
      f = e.size,
      h = e.title,
      d = e.productTheme,
      O = e.style
    d &&
      (O = Bl(
        {
          backgroundColor: Rw[d]
        },
        O
      ))
    var m =
        typeof e.assistiveText == 'string'
          ? e.assistiveText
          : Bl(Bl({}, zg.assistiveText), e.assistiveText).label,
      b = c ? c.replace(/_/g, '-') : ''
    return /* @__PURE__ */ $.createElement(
      'span',
      {
        className: Gi(
          qg(
            {
              'slds-icon_container': t !== 'utility',
              'slds-icon_container_circle': t === 'action'
            },
            'slds-icon-'.concat(t, '-').concat(b),
            t !== 'utility' && t !== 'doctype' && !u
          ),
          s
        ),
        style: o,
        title: h
      },
      /* @__PURE__ */ $.createElement(na, {
        'aria-hidden': 'true',
        category: t,
        className: Gi(i, 'slds-icon', {
          'slds-icon_xx-small': f === 'xx-small',
          'slds-icon_x-small': f === 'x-small',
          'slds-icon_small': f === 'small',
          // medium intentially not present
          'slds-icon_large': f === 'large',
          // if category is `utility` and `inverse` is false (default), icon will be dark // return true
          // if category is `utility` and `inverse` is true, icon will be light // return false
          // if category is NOT `utility` and `inverse` is false (default), icon will be light // return false
          // if category is NOT `utility` and `inverse` is true, icon will be dark // return true
          'slds-icon-text-default': r === 'default' && t === 'utility' ? !l : l,
          'slds-icon-text-success': r === 'success',
          'slds-icon-text-warning': r === 'warning',
          'slds-icon-text-error': r === 'error',
          'slds-icon-text-light': r === 'light'
        }),
        icon: a,
        name: c,
        path: u,
        style: O
      }),
      m
        ? /* @__PURE__ */ $.createElement(
            'span',
            {
              className: 'slds-assistive-text'
            },
            m
          )
        : ''
    )
  }
Ve.displayName = Eg
Ve.propTypes = {
  /**
   * **Assistive text for accessibility.**
   * This object is merged with the default props object on every render.
   * * `label`: Text that is visually hidden but read aloud by screenreaders to tell the user what the icon means. Naked icons must have assistive text, however, if you also have visible descriptive text with the icon, declare this prop as <code>assistiveText=''</code>.
   */
  assistiveText: p.shape({
    label: p.string
  }),
  /**
   * Icon category from [lightningdesignsystem.com/icons/](https://www.lightningdesignsystem.com/icons/)
   */
  category: p.oneOf(['action', 'custom', 'doctype', 'standard', 'utility'])
    .isRequired,
  /**
   * CSS classes that are applied to the SVG.
   */
  className: p.oneOfType([p.array, p.object, p.string]),
  /**
   * CSS classes that are applied to the span.
   */
  containerClassName: p.oneOfType([p.array, p.object, p.string]),
  /**
   * Styles that are applied to the span.
   */
  containerStyle: p.object,
  /**
   * Icon color variants
   */
  colorVariant: p.oneOf([
    'base',
    'default',
    'error',
    'light',
    'warning',
    'success'
  ]),
  /**
   * A custom SVG object to use instead of the supplied SLDS icons, look in `design-system-react/icons` for examples and syntax.
   */
  icon: p.object,
  /**
   * Setting `inverse` to true will switch the color of the icon: light to dark, dark to light.
   */
  inverse: p.bool,
  /**
   * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to reference icon names.
   */
  name: p.string,
  /**
   * Path to the icon. This will override any global icon settings
   */
  path: p.string,
  /**
   * Background theme color for the icon. **Only compatible with icon category `standard`**
   */
  productTheme: p.oneOf([
    'global-setup',
    'service-cloud',
    'industry-cloud',
    'sales-cloud',
    'commerce-cloud',
    'community-cloud',
    'marketing-cloud',
    'quip'
  ]),
  /**
   * Size of the icon. Visit [lightningdesignsystem.com/components/icons/#flavor-sizes](https://www.lightningdesignsystem.com/components/icons/#flavor-sizes)
   */
  size: p.oneOf(['xx-small', 'x-small', 'small', 'medium', 'large']),
  /**
   * Custom styles to be passed to the SVG. Could be used to change icon or background color.
   */
  style: p.object,
  /**
   * Title attribute for the icon container
   */
  title: p.string
}
Ve.defaultProps = zg
function So(n) {
  '@babel/helpers - typeof'
  return (
    typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol'
      ? (So = function (t) {
          return typeof t
        })
      : (So = function (t) {
          return t &&
            typeof Symbol == 'function' &&
            t.constructor === Symbol &&
            t !== Symbol.prototype
            ? 'symbol'
            : typeof t
        }),
    So(n)
  )
}
function Ew(n, e) {
  if (!(n instanceof e))
    throw new TypeError('Cannot call a class as a function')
}
function Gh(n, e) {
  for (var t = 0; t < e.length; t++) {
    var i = e[t]
    ;(i.enumerable = i.enumerable || !1),
      (i.configurable = !0),
      'value' in i && (i.writable = !0),
      Object.defineProperty(n, i.key, i)
  }
}
function Dw(n, e, t) {
  return e && Gh(n.prototype, e), t && Gh(n, t), n
}
function Xw(n, e) {
  if (typeof e != 'function' && e !== null)
    throw new TypeError('Super expression must either be null or a function')
  ;(n.prototype = Object.create(e && e.prototype, {
    constructor: { value: n, writable: !0, configurable: !0 }
  })),
    e && jc(n, e)
}
function jc(n, e) {
  return (
    (jc =
      Object.setPrototypeOf ||
      function (i, r) {
        return (i.__proto__ = r), i
      }),
    jc(n, e)
  )
}
function Yw(n) {
  var e = Nw()
  return function () {
    var i = ia(n),
      r
    if (e) {
      var s = ia(this).constructor
      r = Reflect.construct(i, arguments, s)
    } else r = i.apply(this, arguments)
    return Iw(this, r)
  }
}
function Iw(n, e) {
  return e && (So(e) === 'object' || typeof e == 'function') ? e : Fg(n)
}
function Fg(n) {
  if (n === void 0)
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    )
  return n
}
function Nw() {
  if (typeof Reflect > 'u' || !Reflect.construct || Reflect.construct.sham)
    return !1
  if (typeof Proxy == 'function') return !0
  try {
    return (
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      ),
      !0
    )
  } catch {
    return !1
  }
}
function ia(n) {
  return (
    (ia = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function (t) {
          return t.__proto__ || Object.getPrototypeOf(t)
        }),
    ia(n)
  )
}
function lt(n, e, t) {
  return (
    e in n
      ? Object.defineProperty(n, e, {
          value: t,
          enumerable: !0,
          configurable: !0,
          writable: !0
        })
      : (n[e] = t),
    n
  )
}
var al = /* @__PURE__ */ (function (n) {
  Xw(t, n)
  var e = Yw(t)
  function t() {
    var i
    Ew(this, t)
    for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
      s[o] = arguments[o]
    return (
      (i = e.call.apply(e, [this].concat(s))),
      lt(Fg(i), 'checkFocus', function () {
        i.props.selected && i.props.focus && i.node && i.node.focus()
      }),
      i
    )
  }
  return (
    Dw(t, [
      {
        key: 'componentDidMount',
        value: function () {
          this.checkFocus()
        }
      },
      {
        key: 'componentDidUpdate',
        value: function () {
          this.checkFocus()
        }
      },
      {
        key: 'render',
        value: function () {
          var r,
            s,
            o = this,
            a = this.props,
            l = a.selected,
            c = a.disabled,
            u = a.panelId,
            f = a.activeTabClassName,
            h = a.disabledTabClassName,
            d = a.className,
            O = a.children,
            m = a.id,
            b = a.variant,
            x = a.hasError,
            w
          return (
            l ? (w = '0') : (w = '-1'),
            /* @__PURE__ */ $.createElement(
              'li',
              {
                className: ae(
                  d,
                  ((r = {}),
                  lt(r, f, l),
                  lt(r, h, c),
                  lt(r, 'slds-tabs_default__item', b === 'default'),
                  lt(r, 'slds-tabs_scoped__item', b === 'scoped'),
                  lt(r, 'slds-vertical-tabs__nav-item', b === 'vertical'),
                  r)
                ),
                role: 'presentation',
                id: m,
                title: typeof O == 'string' ? O : null
              },
              /* @__PURE__ */ $.createElement(
                'a',
                {
                  className: ae(
                    ((s = {}),
                    lt(s, f, l),
                    lt(s, h, c),
                    lt(s, 'slds-tabs_default__link', b === 'default'),
                    lt(s, 'slds-tabs_scoped__link', b === 'scoped'),
                    lt(s, 'slds-vertical-tabs__link', b === 'vertical'),
                    s)
                  ),
                  href: '#',
                  role: 'tab',
                  ref: function (Q) {
                    o.node = Q
                  },
                  tabIndex: w,
                  'aria-controls': u,
                  'aria-disabled': c,
                  'aria-selected': l ? 'true' : 'false',
                  onClick: function (Q) {
                    return Q.preventDefault()
                  }
                },
                O,
                x &&
                  /* @__PURE__ */ $.createElement(
                    'span',
                    {
                      className: ae({
                        'slds-tabs__right-icon': b !== 'vertical',
                        'slds-vertical-tabs__right-icon': b === 'vertical'
                      })
                    },
                    /* @__PURE__ */ $.createElement(Ve, {
                      assistiveText: {
                        label: this.props.assistiveText.withErrorIcon
                      },
                      category: 'utility',
                      containerClassName:
                        'slds-icon_container slds-icon-utility-error',
                      size: 'x-small',
                      name: 'error',
                      colorVariant: 'error',
                      title: this.props.assistiveText.withErrorIcon
                    })
                  )
              )
            )
          )
        }
      }
    ]),
    t
  )
})($.Component)
lt(al, 'displayName', Nx)
lt(al, 'propTypes', {
  /**
   * CSS classes to be added to the tab.
   */
  className: p.string,
  /**
   * The HTML ID of this tab. Also used by the `<TabPanel />` it controls as `tabId`.
   */
  id: p.string,
  /**
   * Whether to apply focus to this tab.
   */
  focus: p.bool,
  /**
   * When `true`, the class `.slds-is-active` is applied.
   */
  selected: p.bool,
  /**
   * When `true`, the HTML attribute `aria-disabled` will be applied. Disabled Tab CSS has been removed. If you'd like to use the styling, please import it in your module bundler. `import 'css-loader!/node_modules/design-system-react/styles/tabs/tab.css';` This feature may be removed in the future due to disabled tabs being inaccessible.
   */
  disabled: p.bool,
  /**
   * The CSS class to be applied when this tab is selected. Defaults to `.slds-is-active`. If another class is desired, it should be passed in _along with_ `.slds-is-active`, not _instead_ of it.
   */
  activeTabClassName: p.string,
  /**
   * The CSS class to be applied when this tab is disabled. Defaults to `.slds-disabled`. If another class is desired, it should be passed in _along with_ `.slds-disabled`, not _instead_ of it.
   */
  disabledTabClassName: p.string,
  /**
   * The HTML ID of `<TabPanel />` this tab controls.
   */
  panelId: p.string,
  /**
   * The string or element that is shown as both the title and the label for this tab.
   */
  children: p.oneOfType([p.string, p.element]),
  /**
   * If the Tabs should be scoped, vertical, or default (default value)
   */
  variant: p.oneOf(['default', 'scoped', 'vertical']),
  /**
   * Show an icon that can be used to communicate when a tab contains a validation error that needs attention
   */
  hasError: p.bool,
  /**
   * **Assistive text for accessibility**
   * This object is merged with the default props object on every render.
   * * `withErrorIcon`: This text is for the error icon that will be placed next to the `<Tab />` title
   */
  assistiveText: p.shape({
    withErrorIcon: p.string
  })
})
lt(al, 'defaultProps', {
  focus: !1,
  selected: !1,
  activeTabClassName: 'slds-is-active',
  disabledTabClassName: 'slds-disabled',
  variant: 'default',
  hasError: !1,
  assistiveText: {
    withErrorIcon: 'This item has an error'
  }
})
const Mw = al
function Vw(n, e) {
  if (n == null) return {}
  var t = Ww(n, e),
    i,
    r
  if (Object.getOwnPropertySymbols) {
    var s = Object.getOwnPropertySymbols(n)
    for (r = 0; r < s.length; r++)
      (i = s[r]),
        !(e.indexOf(i) >= 0) &&
          Object.prototype.propertyIsEnumerable.call(n, i) &&
          (t[i] = n[i])
  }
  return t
}
function Ww(n, e) {
  if (n == null) return {}
  var t = {},
    i = Object.keys(n),
    r,
    s
  for (s = 0; s < i.length; s++)
    (r = i[s]), !(e.indexOf(r) >= 0) && (t[r] = n[r])
  return t
}
var ll = function (e) {
  var t = e.className,
    i = e.children,
    r = e.variant,
    s = e.selected,
    o = e.id,
    a = e.tabId
  return (
    Vw(e, ['className', 'children', 'variant', 'selected', 'id', 'tabId']),
    /* @__PURE__ */ $.createElement(
      'div',
      {
        'aria-labelledby': a,
        className: ae(t, {
          'slds-show': s,
          'slds-hide': !s,
          'slds-tabs_default__content': r === 'default',
          'slds-tabs_scoped__content': r === 'scoped',
          'slds-vertical-tabs__content': r === 'vertical'
        }),
        id: o,
        role: 'tabpanel'
      },
      i.props.children
    )
  )
}
ll.displayName = Mx
ll.propTypes = {
  /**
   * The `children` are the contents of the tab panel.
   *
   * Note that the structure of the `<Tabs />` component **does not** correspond to the DOM structure that is rendered. The `<Tabs />` component requires one or more children of type `<TabsPanel />`, which themselves require a `label` property which will be what shows in the `<Tab />` and has `children`, which end up being the _contents of the tab's corresponding panel_.
   *
   * The component iterates through each `<TabsPanel />` and rendering one `<Tab />` and one `<TabPanel />` for each of them. The tab(s) end up being children of the `<TabsList />`.
   *
   * The tab panel component actually returns the _children_ of the _children_ which were provided by the `<TabsPanel />` component.
   *
   * Due to React's nature, the `<TabsPanel />` component wraps its children in a `div` element which we don't need nor want in our rendered DOM structure, so we just bypass it and get its kids via `{children.props.children}` in the render method below.
   * ```
   * <Tabs>
   * 	<TabsPanel label="Tab 1">
   * 		<h2 className="slds-text-heading_medium">This is my tab 1 contents!</h2>
   * 		<p>They show when you click the first tab.</p>
   * 	</TabsPanel>
   * 	<TabsPanel label="Tab 2">
   * 		<h2 className="slds-text-heading_medium">This is my tab 2 contents!</h2>
   * 		<p>They show when you click the second tab.</p>
   * 	</TabsPanel>
   * </Tabs>
   * ```
   */
  children: p.oneOfType([p.array, p.object, p.string]),
  /**
   * CSS classes to be added to the tab panel.
   */
  className: p.string,
  /**
   * The HTML ID of this tab panel. Also used by the `<Tab />`that controls it as `panelId`.
   */
  id: p.string,
  /**
   * Whether this panel is hidden or shown. Uses the `.slds-show` and `.slds-hide` classes.
   */
  selected: p.bool,
  /**
   * If the Tabs should be scoped, vertical, or default (default value)
   */
  variant: p.oneOf(['default', 'scoped', 'vertical']),
  /**
   * The HTML ID of the `<Tab />` that controls this panel.
   */
  tabId: p.string
}
ll.defaultProps = {
  variant: 'default',
  selected: !1
}
const jw = ll
var Bw = {
  ENTER: 13,
  ESCAPE: 27,
  SPACE: 32,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
  TAB: 9,
  DELETE: 46,
  BACKSPACE: 8
}
const Ii = Bw
var xo = {
  trapEvent: function (e) {
    e &&
      (e.preventDefault(),
      e.stopPropagation(),
      e.nativeEvent &&
        e.nativeEvent.preventDefault &&
        e.nativeEvent.preventDefault(),
      e.nativeEvent &&
        e.nativeEvent.stopPropagation &&
        e.nativeEvent.stopPropagation())
  },
  trap: function (e) {
    return xo.trapEvent(e)
  },
  trapImmediate: function (e) {
    e.stopImmediatePropagation && e.stopImmediatePropagation(),
      e.nativeEvent &&
        e.nativeEvent.stopImmediatePropagation &&
        e.nativeEvent.stopImmediatePropagation(),
      xo.trap(e)
  },
  trappedHandler: function (e) {
    return function (t) {
      xo.trap(t), e && e(t)
    }
  }
}
const gs = xo
function wo(n) {
  '@babel/helpers - typeof'
  return (
    typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol'
      ? (wo = function (t) {
          return typeof t
        })
      : (wo = function (t) {
          return t &&
            typeof Symbol == 'function' &&
            t.constructor === Symbol &&
            t !== Symbol.prototype
            ? 'symbol'
            : typeof t
        }),
    wo(n)
  )
}
function Lw(n, e) {
  if (!(n instanceof e))
    throw new TypeError('Cannot call a class as a function')
}
function Hh(n, e) {
  for (var t = 0; t < e.length; t++) {
    var i = e[t]
    ;(i.enumerable = i.enumerable || !1),
      (i.configurable = !0),
      'value' in i && (i.writable = !0),
      Object.defineProperty(n, i.key, i)
  }
}
function Uw(n, e, t) {
  return e && Hh(n.prototype, e), t && Hh(n, t), n
}
function qw(n, e) {
  if (typeof e != 'function' && e !== null)
    throw new TypeError('Super expression must either be null or a function')
  ;(n.prototype = Object.create(e && e.prototype, {
    constructor: { value: n, writable: !0, configurable: !0 }
  })),
    e && Bc(n, e)
}
function Bc(n, e) {
  return (
    (Bc =
      Object.setPrototypeOf ||
      function (i, r) {
        return (i.__proto__ = r), i
      }),
    Bc(n, e)
  )
}
function zw(n) {
  var e = Gw()
  return function () {
    var i = ra(n),
      r
    if (e) {
      var s = ra(this).constructor
      r = Reflect.construct(i, arguments, s)
    } else r = i.apply(this, arguments)
    return Fw(this, r)
  }
}
function Fw(n, e) {
  return e && (wo(e) === 'object' || typeof e == 'function') ? e : Lc(n)
}
function Lc(n) {
  if (n === void 0)
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    )
  return n
}
function Gw() {
  if (typeof Reflect > 'u' || !Reflect.construct || Reflect.construct.sham)
    return !1
  if (typeof Proxy == 'function') return !0
  try {
    return (
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      ),
      !0
    )
  } catch {
    return !1
  }
}
function ra(n) {
  return (
    (ra = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function (t) {
          return t.__proto__ || Object.getPrototypeOf(t)
        }),
    ra(n)
  )
}
function Kh(n, e, t) {
  return (
    e in n
      ? Object.defineProperty(n, e, {
          value: t,
          enumerable: !0,
          configurable: !0,
          writable: !0
        })
      : (n[e] = t),
    n
  )
}
function Hw(n) {
  return (
    (n.nodeName === 'A' && n.getAttribute('role') === 'tab') ||
    (n.nodeName === 'LI' &&
      (n.classList.contains('slds-tabs_default__item') ||
        n.classList.contains('slds-tabs_scoped__item') ||
        n.classList.contains('slds-vertical-tabs__nav-item')))
  )
}
function Pr(n) {
  return n.classList && n.classList.contains('slds-disabled')
    ? !0
    : n.getAttribute
      ? n.getAttribute('aria-disabled') === 'true'
      : !!n.props.disabled
}
var Kw = Vx,
  Jw = {
    /**
     * HTML `id` attribute of primary element that has `.slds-tabs_default` on it. Optional: If one is not supplied, a `shortid` will be created.
     */
    id: p.string,
    /**
     * The `children` are the actual tabs and panels to be displayed.
     *
     * Note that the structure of the `<Tabs />` component **does not** correspond to the DOM structure that is rendered. The `<Tabs />` component requires one or more children of type `<TabsPanel />`, which themselves require a `label` property which will be what shows in the `<Tab />` and has `children`, which end up being the _contents of the tab's corresponding panel_.
     *
     * The component iterates through each `<TabsPanel />` and rendering one `<Tab />` and one `<TabPanel />` for each of them. The tab(s) end up being children of the `<TabsList />`.
     *
     * ```
     * <Tabs>
     * 	<TabsPanel label="Tab 1">
     * 		<div>
     * 			<h2 className="slds-text-heading_medium">This is my tab 1 contents!</h2>
     * 			<p>They show when you click the first tab.</p>
     * 		</div>
     * 	</TabsPanel>
     * 	<TabsPanel label="Tab 2">
     * 		<div>
     * 			<h2 className="slds-text-heading_medium">This is my tab 2 contents!</h2>
     * 			<p>They show when you click the second tab.</p>
     * 		</div>
     * 	</TabsPanel>
     * </Tabs>
     * ```
     */
    children: p.oneOfType([p.arrayOf(p.node), p.node, p.element]).isRequired,
    /**
     * Class names to be added to the container element and is passed along to its children.
     */
    className: p.oneOfType([p.array, p.object, p.string]),
    /**
     * The Tab (and corresponding TabPanel) that is selected when the component first renders. Defaults to `0`.
     */
    defaultSelectedIndex: p.number,
    /**
     * This function triggers when a tab is selected.
     */
    onSelect: p.func,
    /**
     * If the Tabs should be scoped, vertical, or default (default value)
     */
    variant: p.oneOf(['default', 'scoped', 'vertical']),
    /**
     * The Tab (and corresponding TabPanel) that is currently selected.
     */
    selectedIndex: p.number
  },
  e1 = {
    defaultSelectedIndex: 0,
    variant: 'default'
  },
  ms = /* @__PURE__ */ (function (n) {
    qw(t, n)
    var e = zw(t)
    function t(i) {
      var r
      return (
        Lw(this, t),
        (r = e.call(this, i)),
        Kh(Lc(r), 'handleClick', function (s) {
          var o = s.target
          do
            if (r.isTabFromContainer(o)) {
              if (Pr(o)) return
              var a = o.parentNode
              a.nodeName === 'LI' && ((o = o.parentNode), (a = o.parentNode))
              var l = [].slice.call(a.children).indexOf(o)
              r.setSelected(l)
              return
            }
          while ((o = o.parentNode) !== null)
        }),
        Kh(Lc(r), 'handleKeyDown', function (s) {
          if (r.isTabFromContainer(s.target)) {
            var o = r.getSelectedIndex(),
              a = !1
            s.keyCode === Ii.LEFT || s.keyCode === Ii.UP
              ? ((o = r.getPrevTab(o)), (a = !0))
              : (s.keyCode === Ii.RIGHT || s.keyCode === Ii.DOWN) &&
                ((o = r.getNextTab(o)), (a = !0)),
              a && gs.trap(s),
              r.setSelected(o, !0)
          }
        }),
        (r.tabs = []),
        (r.generatedId = bi.generate()),
        (r.flavor = r.getVariant()),
        (r.state = {
          selectedIndex: i.defaultSelectedIndex
        }),
        r
      )
    }
    return (
      Uw(t, [
        {
          key: 'getNextTab',
          value: function (r) {
            for (var s = this.getTabsCount(), o = r + 1; o < s; o++) {
              var a = this.getTab(o)
              if (!Pr(a)) return o
            }
            for (var l = 0; l < r; l++) {
              var c = this.getTab(l)
              if (!Pr(c)) return l
            }
            return r
          }
        },
        {
          key: 'getPanelsCount',
          value: function () {
            return this.props.children
              ? $.Children.count(this.props.children)
              : 0
          }
        },
        {
          key: 'getPrevTab',
          value: function (r) {
            for (var s = r; s--; ) {
              var o = this.getTab(s)
              if (!Pr(o)) return s
            }
            for (s = this.getTabsCount(); s-- > r; ) {
              var a = this.getTab(s)
              if (!Pr(a)) return s
            }
            return r
          }
        },
        {
          key: 'getSelectedIndex',
          value: function () {
            return Number.isInteger(this.props.selectedIndex)
              ? this.props.selectedIndex
              : this.state.selectedIndex
          }
        },
        {
          key: 'getTab',
          value: function (r) {
            return this.tabs[r].tab
          }
        },
        {
          key: 'getTabNode',
          value: function (r) {
            return this.tabs[r].node
          }
        },
        {
          key: 'getTabsCount',
          value: function () {
            return this.props.children
              ? $.Children.count(this.props.children)
              : 0
          }
        },
        {
          key: 'getVariant',
          value: function () {
            return this.props.variant || 'default'
          }
        },
        {
          key: 'setSelected',
          value: function (r, s) {
            if (!(r < 0 || r >= this.getTabsCount())) {
              var o = this.getSelectedIndex(),
                a
              _g(this.props.onSelect) && (a = this.props.onSelect(r, o)),
                a !== !1 &&
                  r !== this.state.selectedIndex &&
                  this.setState({
                    selectedIndex: r,
                    focus: s === !0
                  })
            }
          }
        },
        {
          key: 'isTabFromContainer',
          value:
            /**
             * Determine if a node from event.target is a Tab element for the current Tabs container.
             * If the clicked element is not a Tab, it returns false.
             * If it finds another Tabs container between the Tab and `this`, it returns false.
             */
            function (r) {
              if (!Hw(r)) return !1
              var s = r.parentElement
              do {
                if (s === this.tabsNode) return !0
                if (s.getAttribute('data-tabs')) break
                s = s.parentElement
              } while (s)
              return !1
            }
        },
        {
          key: 'renderTabPanels',
          value: function (r) {
            var s = this,
              o = $.Children.toArray(this.props.children),
              a = this.getSelectedIndex(),
              l = null
            return (
              (l = o.map(function (c, u) {
                var f = ''.concat(r, '-slds-tabs_tab-').concat(u),
                  h = ''.concat(r, '-slds-tabs_panel-').concat(u),
                  d = a === u,
                  O = s.getVariant()
                return /* @__PURE__ */ $.createElement(
                  jw,
                  {
                    key: c.key,
                    selected: d,
                    id: h,
                    tabId: f,
                    variant: O
                  },
                  o[u]
                )
              })),
              l
            )
          }
        },
        {
          key: 'renderTabsList',
          value: function (r) {
            var s = this,
              o = $.Children.toArray(this.props.children)
            return (
              // `parentId` gets consumed by TabsList, adding a suffix of `-tabs__nav`
              /* @__PURE__ */ $.createElement(
                Ux,
                {
                  id: r,
                  variant: this.getVariant()
                },
                o.map(function (a, l) {
                  var c = ''.concat(r, '-slds-tabs_tab-').concat(l),
                    u = ''.concat(r, '-slds-tabs_panel-').concat(l),
                    f = s.getSelectedIndex() === l,
                    h = f && s.state.focus,
                    d = s.getVariant()
                  return /* @__PURE__ */ $.createElement(
                    Mw,
                    {
                      key: a.key,
                      ref: function (m) {
                        ;(s.tabs[l] = {
                          tab: a,
                          node: m
                        }),
                          s.state.focus &&
                            s.setState({
                              focus: !1
                            })
                      },
                      focus: h,
                      selected: f,
                      id: c,
                      panelId: u,
                      disabled: a.props.disabled,
                      variant: d,
                      hasError: a.props.hasError,
                      assistiveText: a.props.assistiveText
                    },
                    a.props.label
                  )
                })
              )
            )
          }
        },
        {
          key: 'render',
          value: function () {
            var r = this,
              s = this.props,
              o = s.className,
              a = s.id,
              l = a === void 0 ? this.generatedId : a,
              c = s.variant,
              u = c === void 0 ? this.getVariant : c
            return (
              /* eslint-disable jsx-a11y/no-static-element-interactions */
              /* @__PURE__ */ $.createElement(
                'div',
                {
                  id: l,
                  className: ae(
                    {
                      'slds-tabs_default': u === 'default',
                      'slds-tabs_scoped': u === 'scoped',
                      'slds-vertical-tabs': u === 'vertical'
                    },
                    o
                  ),
                  onClick: this.handleClick,
                  onKeyDown: this.handleKeyDown,
                  'data-tabs': !0,
                  ref: function (h) {
                    r.tabsNode = h
                  }
                },
                this.renderTabsList(l),
                this.renderTabPanels(l)
              )
            )
          }
        }
      ]),
      t
    )
  })($.Component)
ms.displayName = Kw
ms.propTypes = Jw
ms.defaultProps = e1
var Hi = function (e) {
  var t = e.children
  return /* @__PURE__ */ $.createElement('div', null, $.Children.toArray(t))
}
Hi.displayName = jx
Hi.propTypes = {
  /**
   * The string or element that is handed off to the `<Tab />` component, ends up being the title and the label for the tab associated with its tab panel.
   */
  label: p.oneOfType([p.string, p.element]).isRequired,
  /**
   * The `children` are the actual tab panels to be rendered. They get created by [tabs/index.jsx](./index.jsx) in the `renderTabPanels` function.
   *
   * Note that the `<TabsPanel />` component inserts a `div` element around the children, because React requires exactly one "parent" element returned. The `<TabPanel />` component simply dips down into `children` to get the children of this wrapping `div` so that it does not get rendered in the DOM.
   */
  children: p.oneOfType([p.arrayOf(p.node), p.node, p.element]).isRequired,
  /**
   * Show an icon on the `<Tab />` next to the title that can be used to communicate when a tab contains a validation error that needs attention
   */
  hasError: p.bool,
  // deepscan-disable-line REACT_USELESS_PROP_TYPES
  /**
   * **Assistive text for accessibility**
   * This object is merged with the default props object on every render.
   * * `withErrorIcon`: This text is for the error icon that will be placed next to the `<Tab />` title
   */
  /* deepscan-disable REACT_USELESS_PROP_TYPES */
  assistiveText: p.shape({
    withErrorIcon: p.string
  })
  /* deepscan-enable REACT_USELESS_PROP_TYPES */
}
var ys = (n) => n.type === 'checkbox',
  Ni = (n) => n instanceof Date,
  rt = (n) => n == null
const Gg = (n) => typeof n == 'object'
var Ie = (n) => !rt(n) && !Array.isArray(n) && Gg(n) && !Ni(n),
  Hg = (n) =>
    Ie(n) && n.target ? (ys(n.target) ? n.target.checked : n.target.value) : n,
  t1 = (n) => n.substring(0, n.search(/\.\d+(\.|$)/)) || n,
  Kg = (n, e) => n.has(t1(e)),
  n1 = (n) => {
    const e = n.constructor && n.constructor.prototype
    return Ie(e) && e.hasOwnProperty('isPrototypeOf')
  },
  bf =
    typeof window < 'u' &&
    typeof window.HTMLElement < 'u' &&
    typeof document < 'u'
function Yt(n) {
  let e
  const t = Array.isArray(n)
  if (n instanceof Date) e = new Date(n)
  else if (n instanceof Set) e = new Set(n)
  else if (
    !(bf && (n instanceof Blob || n instanceof FileList)) &&
    (t || Ie(n))
  )
    if (((e = t ? [] : {}), !t && !n1(n))) e = n
    else for (const i in n) n.hasOwnProperty(i) && (e[i] = Yt(n[i]))
  else return n
  return e
}
var bs = (n) => (Array.isArray(n) ? n.filter(Boolean) : []),
  Ce = (n) => n === void 0,
  V = (n, e, t) => {
    if (!e || !Ie(n)) return t
    const i = bs(e.split(/[,[\].]+?/)).reduce((r, s) => (rt(r) ? r : r[s]), n)
    return Ce(i) || i === n ? (Ce(n[e]) ? t : n[e]) : i
  },
  Kt = (n) => typeof n == 'boolean'
const sa = {
    BLUR: 'blur',
    FOCUS_OUT: 'focusout',
    CHANGE: 'change'
  },
  It = {
    onBlur: 'onBlur',
    onChange: 'onChange',
    onSubmit: 'onSubmit',
    onTouched: 'onTouched',
    all: 'all'
  },
  gn = {
    max: 'max',
    min: 'min',
    maxLength: 'maxLength',
    minLength: 'minLength',
    pattern: 'pattern',
    required: 'required',
    validate: 'validate'
  },
  i1 = $.createContext(null),
  vf = () => $.useContext(i1)
var Jg = (n, e, t, i = !0) => {
    const r = {
      defaultValues: e._defaultValues
    }
    for (const s in n)
      Object.defineProperty(r, s, {
        get: () => {
          const o = s
          return (
            e._proxyFormState[o] !== It.all &&
              (e._proxyFormState[o] = !i || It.all),
            t && (t[o] = !0),
            n[o]
          )
        }
      })
    return r
  },
  Tt = (n) => Ie(n) && !Object.keys(n).length,
  em = (n, e, t, i) => {
    t(n)
    const { name: r, ...s } = n
    return (
      Tt(s) ||
      Object.keys(s).length >= Object.keys(e).length ||
      Object.keys(s).find((o) => e[o] === (!i || It.all))
    )
  },
  $o = (n) => (Array.isArray(n) ? n : [n]),
  tm = (n, e, t) =>
    !n ||
    !e ||
    n === e ||
    $o(n).some((i) => i && (t ? i === e : i.startsWith(e) || e.startsWith(i)))
function Sf(n) {
  const e = $.useRef(n)
  ;(e.current = n),
    $.useEffect(() => {
      const t =
        !n.disabled &&
        e.current.subject &&
        e.current.subject.subscribe({
          next: e.current.next
        })
      return () => {
        t && t.unsubscribe()
      }
    }, [n.disabled])
}
function r1(n) {
  const e = vf(),
    { control: t = e.control, disabled: i, name: r, exact: s } = n || {},
    [o, a] = $.useState(t._formState),
    l = $.useRef(!0),
    c = $.useRef({
      isDirty: !1,
      isLoading: !1,
      dirtyFields: !1,
      touchedFields: !1,
      isValidating: !1,
      isValid: !1,
      errors: !1
    }),
    u = $.useRef(r)
  return (
    (u.current = r),
    Sf({
      disabled: i,
      next: (f) =>
        l.current &&
        tm(u.current, f.name, s) &&
        em(f, c.current, t._updateFormState) &&
        a({
          ...t._formState,
          ...f
        }),
      subject: t._subjects.state
    }),
    $.useEffect(
      () => (
        (l.current = !0),
        c.current.isValid && t._updateValid(!0),
        () => {
          l.current = !1
        }
      ),
      [t]
    ),
    Jg(o, t, c.current, !1)
  )
}
var tn = (n) => typeof n == 'string',
  nm = (n, e, t, i, r) =>
    tn(n)
      ? (i && e.watch.add(n), V(t, n, r))
      : Array.isArray(n)
        ? n.map((s) => (i && e.watch.add(s), V(t, s)))
        : (i && (e.watchAll = !0), t)
function s1(n) {
  const e = vf(),
    {
      control: t = e.control,
      name: i,
      defaultValue: r,
      disabled: s,
      exact: o
    } = n || {},
    a = $.useRef(i)
  ;(a.current = i),
    Sf({
      disabled: s,
      subject: t._subjects.values,
      next: (u) => {
        tm(a.current, u.name, o) &&
          c(Yt(nm(a.current, t._names, u.values || t._formValues, !1, r)))
      }
    })
  const [l, c] = $.useState(t._getWatch(i, r))
  return $.useEffect(() => t._removeUnmounted()), l
}
var xf = (n) => /^\w*$/.test(n),
  im = (n) => bs(n.replace(/["|']|\]/g, '').split(/\.|\[/))
function Oe(n, e, t) {
  let i = -1
  const r = xf(e) ? [e] : im(e),
    s = r.length,
    o = s - 1
  for (; ++i < s; ) {
    const a = r[i]
    let l = t
    if (i !== o) {
      const c = n[a]
      l = Ie(c) || Array.isArray(c) ? c : isNaN(+r[i + 1]) ? {} : []
    }
    ;(n[a] = l), (n = n[a])
  }
  return n
}
function o1(n) {
  const e = vf(),
    { name: t, disabled: i, control: r = e.control, shouldUnregister: s } = n,
    o = Kg(r._names.array, t),
    a = s1({
      control: r,
      name: t,
      defaultValue: V(r._formValues, t, V(r._defaultValues, t, n.defaultValue)),
      exact: !0
    }),
    l = r1({
      control: r,
      name: t
    }),
    c = $.useRef(
      r.register(t, {
        ...n.rules,
        value: a
      })
    )
  return (
    (c.current = r.register(t, n.rules)),
    $.useEffect(() => {
      const u = r._options.shouldUnregister || s,
        f = (h, d) => {
          const O = V(r._fields, h)
          O && (O._f.mount = d)
        }
      if ((f(t, !0), u)) {
        const h = Yt(V(r._options.defaultValues, t))
        Oe(r._defaultValues, t, h),
          Ce(V(r._formValues, t)) && Oe(r._formValues, t, h)
      }
      return () => {
        ;(o ? u && !r._state.action : u) ? r.unregister(t) : f(t, !1)
      }
    }, [t, r, o, s]),
    $.useEffect(() => {
      V(r._fields, t) &&
        r._updateDisabledField({
          disabled: i,
          fields: r._fields,
          name: t,
          value: V(r._fields, t)._f.value
        })
    }, [i, t, r]),
    {
      field: {
        name: t,
        value: a,
        ...(Kt(i) || Kt(l.disabled) ? { disabled: l.disabled || i } : {}),
        onChange: $.useCallback(
          (u) =>
            c.current.onChange({
              target: {
                value: Hg(u),
                name: t
              },
              type: sa.CHANGE
            }),
          [t]
        ),
        onBlur: $.useCallback(
          () =>
            c.current.onBlur({
              target: {
                value: V(r._formValues, t),
                name: t
              },
              type: sa.BLUR
            }),
          [t, r]
        ),
        ref: (u) => {
          const f = V(r._fields, t)
          f &&
            u &&
            (f._f.ref = {
              focus: () => u.focus(),
              select: () => u.select(),
              setCustomValidity: (h) => u.setCustomValidity(h),
              reportValidity: () => u.reportValidity()
            })
        }
      },
      formState: l,
      fieldState: Object.defineProperties(
        {},
        {
          invalid: {
            enumerable: !0,
            get: () => !!V(l.errors, t)
          },
          isDirty: {
            enumerable: !0,
            get: () => !!V(l.dirtyFields, t)
          },
          isTouched: {
            enumerable: !0,
            get: () => !!V(l.touchedFields, t)
          },
          error: {
            enumerable: !0,
            get: () => V(l.errors, t)
          }
        }
      )
    }
  )
}
const Jh = (n) => n.render(o1(n))
var a1 = (n, e, t, i, r) =>
    e
      ? {
          ...t[n],
          types: {
            ...(t[n] && t[n].types ? t[n].types : {}),
            [i]: r || !0
          }
        }
      : {},
  ed = (n) => ({
    isOnSubmit: !n || n === It.onSubmit,
    isOnBlur: n === It.onBlur,
    isOnChange: n === It.onChange,
    isOnAll: n === It.all,
    isOnTouch: n === It.onTouched
  }),
  td = (n, e, t) =>
    !t &&
    (e.watchAll ||
      e.watch.has(n) ||
      [...e.watch].some(
        (i) => n.startsWith(i) && /^\.\w+/.test(n.slice(i.length))
      ))
const Po = (n, e, t, i) => {
  for (const r of t || Object.keys(n)) {
    const s = V(n, r)
    if (s) {
      const { _f: o, ...a } = s
      if (o) {
        if (o.refs && o.refs[0] && e(o.refs[0], r) && !i) break
        if (o.ref && e(o.ref, o.name) && !i) break
      } else Ie(a) && Po(a, e)
    }
  }
}
var l1 = (n, e, t) => {
    const i = bs(V(n, t))
    return Oe(i, 'root', e[t]), Oe(n, t, i), n
  },
  wf = (n) => n.type === 'file',
  Nn = (n) => typeof n == 'function',
  oa = (n) => {
    if (!bf) return !1
    const e = n ? n.ownerDocument : 0
    return (
      n instanceof
      (e && e.defaultView ? e.defaultView.HTMLElement : HTMLElement)
    )
  },
  Qo = (n) => tn(n),
  $f = (n) => n.type === 'radio',
  aa = (n) => n instanceof RegExp
const nd = {
    value: !1,
    isValid: !1
  },
  id = { value: !0, isValid: !0 }
var rm = (n) => {
  if (Array.isArray(n)) {
    if (n.length > 1) {
      const e = n
        .filter((t) => t && t.checked && !t.disabled)
        .map((t) => t.value)
      return { value: e, isValid: !!e.length }
    }
    return n[0].checked && !n[0].disabled
      ? // @ts-expect-error expected to work in the browser
        n[0].attributes && !Ce(n[0].attributes.value)
        ? Ce(n[0].value) || n[0].value === ''
          ? id
          : { value: n[0].value, isValid: !0 }
        : id
      : nd
  }
  return nd
}
const rd = {
  isValid: !1,
  value: null
}
var sm = (n) =>
  Array.isArray(n)
    ? n.reduce(
        (e, t) =>
          t && t.checked && !t.disabled
            ? {
                isValid: !0,
                value: t.value
              }
            : e,
        rd
      )
    : rd
function sd(n, e, t = 'validate') {
  if (Qo(n) || (Array.isArray(n) && n.every(Qo)) || (Kt(n) && !n))
    return {
      type: t,
      message: Qo(n) ? n : '',
      ref: e
    }
}
var Ai = (n) =>
    Ie(n) && !aa(n)
      ? n
      : {
          value: n,
          message: ''
        },
  od = async (n, e, t, i, r) => {
    const {
        ref: s,
        refs: o,
        required: a,
        maxLength: l,
        minLength: c,
        min: u,
        max: f,
        pattern: h,
        validate: d,
        name: O,
        valueAsNumber: m,
        mount: b,
        disabled: x
      } = n._f,
      w = V(e, O)
    if (!b || x) return {}
    const T = o ? o[0] : s,
      Q = (E) => {
        i &&
          T.reportValidity &&
          (T.setCustomValidity(Kt(E) ? '' : E || ''), T.reportValidity())
      },
      P = {},
      C = $f(s),
      A = ys(s),
      j = C || A,
      X =
        ((m || wf(s)) && Ce(s.value) && Ce(w)) ||
        (oa(s) && s.value === '') ||
        w === '' ||
        (Array.isArray(w) && !w.length),
      L = a1.bind(null, O, t, P),
      U = (E, I, B, ee = gn.maxLength, ie = gn.minLength) => {
        const te = E ? I : B
        P[O] = {
          type: E ? ee : ie,
          message: te,
          ref: s,
          ...L(E ? ee : ie, te)
        }
      }
    if (
      r
        ? !Array.isArray(w) || !w.length
        : a &&
          ((!j && (X || rt(w))) ||
            (Kt(w) && !w) ||
            (A && !rm(o).isValid) ||
            (C && !sm(o).isValid))
    ) {
      const { value: E, message: I } = Qo(a)
        ? { value: !!a, message: a }
        : Ai(a)
      if (
        E &&
        ((P[O] = {
          type: gn.required,
          message: I,
          ref: T,
          ...L(gn.required, I)
        }),
        !t)
      )
        return Q(I), P
    }
    if (!X && (!rt(u) || !rt(f))) {
      let E, I
      const B = Ai(f),
        ee = Ai(u)
      if (!rt(w) && !isNaN(w)) {
        const ie = s.valueAsNumber || (w && +w)
        rt(B.value) || (E = ie > B.value), rt(ee.value) || (I = ie < ee.value)
      } else {
        const ie = s.valueAsDate || new Date(w),
          te = (he) =>
            /* @__PURE__ */ new Date(
              /* @__PURE__ */ new Date().toDateString() + ' ' + he
            ),
          ce = s.type == 'time',
          ye = s.type == 'week'
        tn(B.value) &&
          w &&
          (E = ce
            ? te(w) > te(B.value)
            : ye
              ? w > B.value
              : ie > new Date(B.value)),
          tn(ee.value) &&
            w &&
            (I = ce
              ? te(w) < te(ee.value)
              : ye
                ? w < ee.value
                : ie < new Date(ee.value))
      }
      if ((E || I) && (U(!!E, B.message, ee.message, gn.max, gn.min), !t))
        return Q(P[O].message), P
    }
    if ((l || c) && !X && (tn(w) || (r && Array.isArray(w)))) {
      const E = Ai(l),
        I = Ai(c),
        B = !rt(E.value) && w.length > +E.value,
        ee = !rt(I.value) && w.length < +I.value
      if ((B || ee) && (U(B, E.message, I.message), !t))
        return Q(P[O].message), P
    }
    if (h && !X && tn(w)) {
      const { value: E, message: I } = Ai(h)
      if (
        aa(E) &&
        !w.match(E) &&
        ((P[O] = {
          type: gn.pattern,
          message: I,
          ref: s,
          ...L(gn.pattern, I)
        }),
        !t)
      )
        return Q(I), P
    }
    if (d) {
      if (Nn(d)) {
        const E = await d(w, e),
          I = sd(E, T)
        if (
          I &&
          ((P[O] = {
            ...I,
            ...L(gn.validate, I.message)
          }),
          !t)
        )
          return Q(I.message), P
      } else if (Ie(d)) {
        let E = {}
        for (const I in d) {
          if (!Tt(E) && !t) break
          const B = sd(await d[I](w, e), T, I)
          B &&
            ((E = {
              ...B,
              ...L(I, B.message)
            }),
            Q(B.message),
            t && (P[O] = E))
        }
        if (
          !Tt(E) &&
          ((P[O] = {
            ref: T,
            ...E
          }),
          !t)
        )
          return P
      }
    }
    return Q(!0), P
  }
function c1(n, e) {
  const t = e.slice(0, -1).length
  let i = 0
  for (; i < t; ) n = Ce(n) ? i++ : n[e[i++]]
  return n
}
function u1(n) {
  for (const e in n) if (n.hasOwnProperty(e) && !Ce(n[e])) return !1
  return !0
}
function Be(n, e) {
  const t = Array.isArray(e) ? e : xf(e) ? [e] : im(e),
    i = t.length === 1 ? n : c1(n, t),
    r = t.length - 1,
    s = t[r]
  return (
    i && delete i[s],
    r !== 0 &&
      ((Ie(i) && Tt(i)) || (Array.isArray(i) && u1(i))) &&
      Be(n, t.slice(0, -1)),
    n
  )
}
function Ll() {
  let n = []
  return {
    get observers() {
      return n
    },
    next: (r) => {
      for (const s of n) s.next && s.next(r)
    },
    subscribe: (r) => (
      n.push(r),
      {
        unsubscribe: () => {
          n = n.filter((s) => s !== r)
        }
      }
    ),
    unsubscribe: () => {
      n = []
    }
  }
}
var la = (n) => rt(n) || !Gg(n)
function gi(n, e) {
  if (la(n) || la(e)) return n === e
  if (Ni(n) && Ni(e)) return n.getTime() === e.getTime()
  const t = Object.keys(n),
    i = Object.keys(e)
  if (t.length !== i.length) return !1
  for (const r of t) {
    const s = n[r]
    if (!i.includes(r)) return !1
    if (r !== 'ref') {
      const o = e[r]
      if (
        (Ni(s) && Ni(o)) ||
        (Ie(s) && Ie(o)) ||
        (Array.isArray(s) && Array.isArray(o))
          ? !gi(s, o)
          : s !== o
      )
        return !1
    }
  }
  return !0
}
var om = (n) => n.type === 'select-multiple',
  f1 = (n) => $f(n) || ys(n),
  Ul = (n) => oa(n) && n.isConnected,
  am = (n) => {
    for (const e in n) if (Nn(n[e])) return !0
    return !1
  }
function ca(n, e = {}) {
  const t = Array.isArray(n)
  if (Ie(n) || t)
    for (const i in n)
      Array.isArray(n[i]) || (Ie(n[i]) && !am(n[i]))
        ? ((e[i] = Array.isArray(n[i]) ? [] : {}), ca(n[i], e[i]))
        : rt(n[i]) || (e[i] = !0)
  return e
}
function lm(n, e, t) {
  const i = Array.isArray(n)
  if (Ie(n) || i)
    for (const r in n)
      Array.isArray(n[r]) || (Ie(n[r]) && !am(n[r]))
        ? Ce(e) || la(t[r])
          ? (t[r] = Array.isArray(n[r]) ? ca(n[r], []) : { ...ca(n[r]) })
          : lm(n[r], rt(e) ? {} : e[r], t[r])
        : (t[r] = !gi(n[r], e[r]))
  return t
}
var ql = (n, e) => lm(n, e, ca(e)),
  cm = (n, { valueAsNumber: e, valueAsDate: t, setValueAs: i }) =>
    Ce(n)
      ? n
      : e
        ? n === ''
          ? NaN
          : n && +n
        : t && tn(n)
          ? new Date(n)
          : i
            ? i(n)
            : n
function zl(n) {
  const e = n.ref
  if (!(n.refs ? n.refs.every((t) => t.disabled) : e.disabled))
    return wf(e)
      ? e.files
      : $f(e)
        ? sm(n.refs).value
        : om(e)
          ? [...e.selectedOptions].map(({ value: t }) => t)
          : ys(e)
            ? rm(n.refs).value
            : cm(Ce(e.value) ? n.ref.value : e.value, n)
}
var h1 = (n, e, t, i) => {
    const r = {}
    for (const s of n) {
      const o = V(e, s)
      o && Oe(r, s, o._f)
    }
    return {
      criteriaMode: t,
      names: [...n],
      fields: r,
      shouldUseNativeValidation: i
    }
  },
  Qr = (n) =>
    Ce(n)
      ? n
      : aa(n)
        ? n.source
        : Ie(n)
          ? aa(n.value)
            ? n.value.source
            : n.value
          : n,
  d1 = (n) =>
    n.mount &&
    (n.required ||
      n.min ||
      n.max ||
      n.maxLength ||
      n.minLength ||
      n.pattern ||
      n.validate)
function ad(n, e, t) {
  const i = V(n, t)
  if (i || xf(t))
    return {
      error: i,
      name: t
    }
  const r = t.split('.')
  for (; r.length; ) {
    const s = r.join('.'),
      o = V(e, s),
      a = V(n, s)
    if (o && !Array.isArray(o) && t !== s) return { name: t }
    if (a && a.type)
      return {
        name: s,
        error: a
      }
    r.pop()
  }
  return {
    name: t
  }
}
var p1 = (n, e, t, i, r) =>
    r.isOnAll
      ? !1
      : !t && r.isOnTouch
        ? !(e || n)
        : (t ? i.isOnBlur : r.isOnBlur)
          ? !n
          : (t ? i.isOnChange : r.isOnChange)
            ? n
            : !0,
  O1 = (n, e) => !bs(V(n, e)).length && Be(n, e)
const g1 = {
  mode: It.onSubmit,
  reValidateMode: It.onChange,
  shouldFocusError: !0
}
function m1(n = {}, e) {
  let t = {
      ...g1,
      ...n
    },
    i = {
      submitCount: 0,
      isDirty: !1,
      isLoading: Nn(t.defaultValues),
      isValidating: !1,
      isSubmitted: !1,
      isSubmitting: !1,
      isSubmitSuccessful: !1,
      isValid: !1,
      touchedFields: {},
      dirtyFields: {},
      errors: {},
      disabled: !1
    },
    r = {},
    s =
      Ie(t.defaultValues) || Ie(t.values)
        ? Yt(t.defaultValues || t.values) || {}
        : {},
    o = t.shouldUnregister ? {} : Yt(s),
    a = {
      action: !1,
      mount: !1,
      watch: !1
    },
    l = {
      mount: /* @__PURE__ */ new Set(),
      unMount: /* @__PURE__ */ new Set(),
      array: /* @__PURE__ */ new Set(),
      watch: /* @__PURE__ */ new Set()
    },
    c,
    u = 0
  const f = {
      isDirty: !1,
      dirtyFields: !1,
      touchedFields: !1,
      isValidating: !1,
      isValid: !1,
      errors: !1
    },
    h = {
      values: Ll(),
      array: Ll(),
      state: Ll()
    },
    d = n.resetOptions && n.resetOptions.keepDirtyValues,
    O = ed(t.mode),
    m = ed(t.reValidateMode),
    b = t.criteriaMode === It.all,
    x = (v) => (k) => {
      clearTimeout(u), (u = setTimeout(v, k))
    },
    w = async (v) => {
      if (f.isValid || v) {
        const k = t.resolver ? Tt((await X()).errors) : await U(r, !0)
        k !== i.isValid &&
          h.state.next({
            isValid: k
          })
      }
    },
    T = (v) =>
      f.isValidating &&
      h.state.next({
        isValidating: v
      }),
    Q = (v, k = [], Z, F, N = !0, D = !0) => {
      if (F && Z) {
        if (((a.action = !0), D && Array.isArray(V(r, v)))) {
          const J = Z(V(r, v), F.argA, F.argB)
          N && Oe(r, v, J)
        }
        if (D && Array.isArray(V(i.errors, v))) {
          const J = Z(V(i.errors, v), F.argA, F.argB)
          N && Oe(i.errors, v, J), O1(i.errors, v)
        }
        if (f.touchedFields && D && Array.isArray(V(i.touchedFields, v))) {
          const J = Z(V(i.touchedFields, v), F.argA, F.argB)
          N && Oe(i.touchedFields, v, J)
        }
        f.dirtyFields && (i.dirtyFields = ql(s, o)),
          h.state.next({
            name: v,
            isDirty: I(v, k),
            dirtyFields: i.dirtyFields,
            errors: i.errors,
            isValid: i.isValid
          })
      } else Oe(o, v, k)
    },
    P = (v, k) => {
      Oe(i.errors, v, k),
        h.state.next({
          errors: i.errors
        })
    },
    C = (v, k, Z, F) => {
      const N = V(r, v)
      if (N) {
        const D = V(o, v, Ce(Z) ? V(s, v) : Z)
        Ce(D) || (F && F.defaultChecked) || k
          ? Oe(o, v, k ? D : zl(N._f))
          : ie(v, D),
          a.mount && w()
      }
    },
    A = (v, k, Z, F, N) => {
      let D = !1,
        J = !1
      const de = {
        name: v
      }
      if (!Z || F) {
        f.isDirty &&
          ((J = i.isDirty),
          (i.isDirty = de.isDirty = I()),
          (D = J !== de.isDirty))
        const be = gi(V(s, v), k)
        ;(J = V(i.dirtyFields, v)),
          be ? Be(i.dirtyFields, v) : Oe(i.dirtyFields, v, !0),
          (de.dirtyFields = i.dirtyFields),
          (D = D || (f.dirtyFields && J !== !be))
      }
      if (Z) {
        const be = V(i.touchedFields, v)
        be ||
          (Oe(i.touchedFields, v, Z),
          (de.touchedFields = i.touchedFields),
          (D = D || (f.touchedFields && be !== Z)))
      }
      return D && N && h.state.next(de), D ? de : {}
    },
    j = (v, k, Z, F) => {
      const N = V(i.errors, v),
        D = f.isValid && Kt(k) && i.isValid !== k
      if (
        (n.delayError && Z
          ? ((c = x(() => P(v, Z))), c(n.delayError))
          : (clearTimeout(u),
            (c = null),
            Z ? Oe(i.errors, v, Z) : Be(i.errors, v)),
        (Z ? !gi(N, Z) : N) || !Tt(F) || D)
      ) {
        const J = {
          ...F,
          ...(D && Kt(k) ? { isValid: k } : {}),
          errors: i.errors,
          name: v
        }
        ;(i = {
          ...i,
          ...J
        }),
          h.state.next(J)
      }
      T(!1)
    },
    X = async (v) =>
      t.resolver(
        o,
        t.context,
        h1(v || l.mount, r, t.criteriaMode, t.shouldUseNativeValidation)
      ),
    L = async (v) => {
      const { errors: k } = await X(v)
      if (v)
        for (const Z of v) {
          const F = V(k, Z)
          F ? Oe(i.errors, Z, F) : Be(i.errors, Z)
        }
      else i.errors = k
      return k
    },
    U = async (
      v,
      k,
      Z = {
        valid: !0
      }
    ) => {
      for (const F in v) {
        const N = v[F]
        if (N) {
          const { _f: D, ...J } = N
          if (D) {
            const de = l.array.has(D.name),
              be = await od(N, o, b, t.shouldUseNativeValidation && !k, de)
            if (be[D.name] && ((Z.valid = !1), k)) break
            !k &&
              (V(be, D.name)
                ? de
                  ? l1(i.errors, be, D.name)
                  : Oe(i.errors, D.name, be[D.name])
                : Be(i.errors, D.name))
          }
          J && (await U(J, k, Z))
        }
      }
      return Z.valid
    },
    E = () => {
      for (const v of l.unMount) {
        const k = V(r, v)
        k &&
          (k._f.refs ? k._f.refs.every((Z) => !Ul(Z)) : !Ul(k._f.ref)) &&
          gr(v)
      }
      l.unMount = /* @__PURE__ */ new Set()
    },
    I = (v, k) => (v && k && Oe(o, v, k), !gi(it(), s)),
    B = (v, k, Z) =>
      nm(
        v,
        l,
        {
          ...(a.mount ? o : Ce(k) ? s : tn(v) ? { [v]: k } : k)
        },
        Z,
        k
      ),
    ee = (v) =>
      bs(V(a.mount ? o : s, v, n.shouldUnregister ? V(s, v, []) : [])),
    ie = (v, k, Z = {}) => {
      const F = V(r, v)
      let N = k
      if (F) {
        const D = F._f
        D &&
          (!D.disabled && Oe(o, v, cm(k, D)),
          (N = oa(D.ref) && rt(k) ? '' : k),
          om(D.ref)
            ? [...D.ref.options].forEach(
                (J) => (J.selected = N.includes(J.value))
              )
            : D.refs
              ? ys(D.ref)
                ? D.refs.length > 1
                  ? D.refs.forEach(
                      (J) =>
                        (!J.defaultChecked || !J.disabled) &&
                        (J.checked = Array.isArray(N)
                          ? !!N.find((de) => de === J.value)
                          : N === J.value)
                    )
                  : D.refs[0] && (D.refs[0].checked = !!N)
                : D.refs.forEach((J) => (J.checked = J.value === N))
              : wf(D.ref)
                ? (D.ref.value = '')
                : ((D.ref.value = N),
                  D.ref.type ||
                    h.values.next({
                      name: v,
                      values: { ...o }
                    })))
      }
      ;(Z.shouldDirty || Z.shouldTouch) &&
        A(v, N, Z.shouldTouch, Z.shouldDirty, !0),
        Z.shouldValidate && Ne(v)
    },
    te = (v, k, Z) => {
      for (const F in k) {
        const N = k[F],
          D = `${v}.${F}`,
          J = V(r, D)
        ;(l.array.has(v) || !la(N) || (J && !J._f)) && !Ni(N)
          ? te(D, N, Z)
          : ie(D, N, Z)
      }
    },
    ce = (v, k, Z = {}) => {
      const F = V(r, v),
        N = l.array.has(v),
        D = Yt(k)
      Oe(o, v, D),
        N
          ? (h.array.next({
              name: v,
              values: { ...o }
            }),
            (f.isDirty || f.dirtyFields) &&
              Z.shouldDirty &&
              h.state.next({
                name: v,
                dirtyFields: ql(s, o),
                isDirty: I(v, D)
              }))
          : F && !F._f && !rt(D)
            ? te(v, D, Z)
            : ie(v, D, Z),
        td(v, l) && h.state.next({ ...i }),
        h.values.next({
          name: v,
          values: { ...o }
        }),
        !a.mount && e()
    },
    ye = async (v) => {
      const k = v.target
      let Z = k.name,
        F = !0
      const N = V(r, Z),
        D = () => (k.type ? zl(N._f) : Hg(v)),
        J = (de) => {
          F = Number.isNaN(de) || de === V(o, Z, de)
        }
      if (N) {
        let de, be
        const kn = D(),
          dn = v.type === sa.BLUR || v.type === sa.FOCUS_OUT,
          $t =
            (!d1(N._f) && !t.resolver && !V(i.errors, Z) && !N._f.deps) ||
            p1(dn, V(i.touchedFields, Z), i.isSubmitted, m, O),
          Ti = td(Z, l, dn)
        Oe(o, Z, kn),
          dn
            ? (N._f.onBlur && N._f.onBlur(v), c && c(0))
            : N._f.onChange && N._f.onChange(v)
        const Ci = A(Z, kn, dn, !1),
          Xl = !Tt(Ci) || Ti
        if (
          (!dn &&
            h.values.next({
              name: Z,
              type: v.type,
              values: { ...o }
            }),
          $t)
        )
          return (
            f.isValid && w(), Xl && h.state.next({ name: Z, ...(Ti ? {} : Ci) })
          )
        if ((!dn && Ti && h.state.next({ ...i }), T(!0), t.resolver)) {
          const { errors: br } = await X([Z])
          if ((J(kn), F)) {
            const _i = ad(i.errors, r, Z),
              vr = ad(br, r, _i.name || Z)
            ;(de = vr.error), (Z = vr.name), (be = Tt(br))
          }
        } else
          (de = (await od(N, o, b, t.shouldUseNativeValidation))[Z]),
            J(kn),
            F && (de ? (be = !1) : f.isValid && (be = await U(r, !0)))
        F && (N._f.deps && Ne(N._f.deps), j(Z, be, de, Ci))
      }
    },
    he = (v, k) => {
      if (V(i.errors, k) && v.focus) return v.focus(), 1
    },
    Ne = async (v, k = {}) => {
      let Z, F
      const N = $o(v)
      if ((T(!0), t.resolver)) {
        const D = await L(Ce(v) ? v : N)
        ;(Z = Tt(D)), (F = v ? !N.some((J) => V(D, J)) : Z)
      } else
        v
          ? ((F = (
              await Promise.all(
                N.map(async (D) => {
                  const J = V(r, D)
                  return await U(J && J._f ? { [D]: J } : J)
                })
              )
            ).every(Boolean)),
            !(!F && !i.isValid) && w())
          : (F = Z = await U(r))
      return (
        h.state.next({
          ...(!tn(v) || (f.isValid && Z !== i.isValid) ? {} : { name: v }),
          ...(t.resolver || !v ? { isValid: Z } : {}),
          errors: i.errors,
          isValidating: !1
        }),
        k.shouldFocus && !F && Po(r, he, v ? N : l.mount),
        F
      )
    },
    it = (v) => {
      const k = {
        ...s,
        ...(a.mount ? o : {})
      }
      return Ce(v) ? k : tn(v) ? V(k, v) : v.map((Z) => V(k, Z))
    },
    xt = (v, k) => ({
      invalid: !!V((k || i).errors, v),
      isDirty: !!V((k || i).dirtyFields, v),
      isTouched: !!V((k || i).touchedFields, v),
      error: V((k || i).errors, v)
    }),
    jt = (v) => {
      v && $o(v).forEach((k) => Be(i.errors, k)),
        h.state.next({
          errors: v ? i.errors : {}
        })
    },
    le = (v, k, Z) => {
      const F = (V(r, v, { _f: {} })._f || {}).ref
      Oe(i.errors, v, {
        ...k,
        ref: F
      }),
        h.state.next({
          name: v,
          errors: i.errors,
          isValid: !1
        }),
        Z && Z.shouldFocus && F && F.focus && F.focus()
    },
    ni = (v, k) =>
      Nn(v)
        ? h.values.subscribe({
            next: (Z) => v(B(void 0, k), Z)
          })
        : B(v, k, !0),
    gr = (v, k = {}) => {
      for (const Z of v ? $o(v) : l.mount)
        l.mount.delete(Z),
          l.array.delete(Z),
          k.keepValue || (Be(r, Z), Be(o, Z)),
          !k.keepError && Be(i.errors, Z),
          !k.keepDirty && Be(i.dirtyFields, Z),
          !k.keepTouched && Be(i.touchedFields, Z),
          !t.shouldUnregister && !k.keepDefaultValue && Be(s, Z)
      h.values.next({
        values: { ...o }
      }),
        h.state.next({
          ...i,
          ...(k.keepDirty ? { isDirty: I() } : {})
        }),
        !k.keepIsValid && w()
    },
    wt = ({ disabled: v, name: k, field: Z, fields: F, value: N }) => {
      if (Kt(v)) {
        const D = v ? void 0 : Ce(N) ? zl(Z ? Z._f : V(F, k)._f) : N
        Oe(o, k, D), A(k, D, !1, !1, !0)
      }
    },
    Qi = (v, k = {}) => {
      let Z = V(r, v)
      const F = Kt(k.disabled)
      return (
        Oe(r, v, {
          ...(Z || {}),
          _f: {
            ...(Z && Z._f ? Z._f : { ref: { name: v } }),
            name: v,
            mount: !0,
            ...k
          }
        }),
        l.mount.add(v),
        Z
          ? wt({
              field: Z,
              disabled: k.disabled,
              name: v
            })
          : C(v, !0, k.value),
        {
          ...(F ? { disabled: k.disabled } : {}),
          ...(t.progressive
            ? {
                required: !!k.required,
                min: Qr(k.min),
                max: Qr(k.max),
                minLength: Qr(k.minLength),
                maxLength: Qr(k.maxLength),
                pattern: Qr(k.pattern)
              }
            : {}),
          name: v,
          onChange: ye,
          onBlur: ye,
          ref: (N) => {
            if (N) {
              Qi(v, k), (Z = V(r, v))
              const D =
                  (Ce(N.value) &&
                    N.querySelectorAll &&
                    N.querySelectorAll('input,select,textarea')[0]) ||
                  N,
                J = f1(D),
                de = Z._f.refs || []
              if (J ? de.find((be) => be === D) : D === Z._f.ref) return
              Oe(r, v, {
                _f: {
                  ...Z._f,
                  ...(J
                    ? {
                        refs: [
                          ...de.filter(Ul),
                          D,
                          ...(Array.isArray(V(s, v)) ? [{}] : [])
                        ],
                        ref: { type: D.type, name: v }
                      }
                    : { ref: D })
                }
              }),
                C(v, !1, void 0, D)
            } else
              (Z = V(r, v, {})),
                Z._f && (Z._f.mount = !1),
                (t.shouldUnregister || k.shouldUnregister) &&
                  !(Kg(l.array, v) && a.action) &&
                  l.unMount.add(v)
          }
        }
      )
    },
    mr = () => t.shouldFocusError && Po(r, he, l.mount),
    Xs = (v) => {
      Kt(v) &&
        (h.state.next({ disabled: v }),
        Po(
          r,
          (k) => {
            k.disabled = v
          },
          0,
          !1
        ))
    },
    ki = (v, k) => async (Z) => {
      Z && (Z.preventDefault && Z.preventDefault(), Z.persist && Z.persist())
      let F = Yt(o)
      if (
        (h.state.next({
          isSubmitting: !0
        }),
        t.resolver)
      ) {
        const { errors: N, values: D } = await X()
        ;(i.errors = N), (F = D)
      } else await U(r)
      Be(i.errors, 'root'),
        Tt(i.errors)
          ? (h.state.next({
              errors: {}
            }),
            await v(F, Z))
          : (k && (await k({ ...i.errors }, Z)), mr(), setTimeout(mr)),
        h.state.next({
          isSubmitted: !0,
          isSubmitting: !1,
          isSubmitSuccessful: Tt(i.errors),
          submitCount: i.submitCount + 1,
          errors: i.errors
        })
    },
    Ys = (v, k = {}) => {
      V(r, v) &&
        (Ce(k.defaultValue)
          ? ce(v, V(s, v))
          : (ce(v, k.defaultValue), Oe(s, v, k.defaultValue)),
        k.keepTouched || Be(i.touchedFields, v),
        k.keepDirty ||
          (Be(i.dirtyFields, v),
          (i.isDirty = k.defaultValue ? I(v, V(s, v)) : I())),
        k.keepError || (Be(i.errors, v), f.isValid && w()),
        h.state.next({ ...i }))
    },
    yr = (v, k = {}) => {
      const Z = v ? Yt(v) : s,
        F = Yt(Z),
        N = v && !Tt(v) ? F : s
      if ((k.keepDefaultValues || (s = Z), !k.keepValues)) {
        if (k.keepDirtyValues || d)
          for (const D of l.mount)
            V(i.dirtyFields, D) ? Oe(N, D, V(o, D)) : ce(D, V(N, D))
        else {
          if (bf && Ce(v))
            for (const D of l.mount) {
              const J = V(r, D)
              if (J && J._f) {
                const de = Array.isArray(J._f.refs) ? J._f.refs[0] : J._f.ref
                if (oa(de)) {
                  const be = de.closest('form')
                  if (be) {
                    be.reset()
                    break
                  }
                }
              }
            }
          r = {}
        }
        ;(o = n.shouldUnregister ? (k.keepDefaultValues ? Yt(s) : {}) : Yt(N)),
          h.array.next({
            values: { ...N }
          }),
          h.values.next({
            values: { ...N }
          })
      }
      ;(l = {
        mount: /* @__PURE__ */ new Set(),
        unMount: /* @__PURE__ */ new Set(),
        array: /* @__PURE__ */ new Set(),
        watch: /* @__PURE__ */ new Set(),
        watchAll: !1,
        focus: ''
      }),
        !a.mount && e(),
        (a.mount = !f.isValid || !!k.keepIsValid),
        (a.watch = !!n.shouldUnregister),
        h.state.next({
          submitCount: k.keepSubmitCount ? i.submitCount : 0,
          isDirty: k.keepDirty
            ? i.isDirty
            : !!(k.keepDefaultValues && !gi(v, s)),
          isSubmitted: k.keepIsSubmitted ? i.isSubmitted : !1,
          dirtyFields: k.keepDirtyValues
            ? i.dirtyFields
            : k.keepDefaultValues && v
              ? ql(s, v)
              : {},
          touchedFields: k.keepTouched ? i.touchedFields : {},
          errors: k.keepErrors ? i.errors : {},
          isSubmitSuccessful: k.keepIsSubmitSuccessful
            ? i.isSubmitSuccessful
            : !1,
          isSubmitting: !1
        })
    },
    Is = (v, k) => yr(Nn(v) ? v(o) : v, k)
  return {
    control: {
      register: Qi,
      unregister: gr,
      getFieldState: xt,
      handleSubmit: ki,
      setError: le,
      _executeSchema: X,
      _getWatch: B,
      _getDirty: I,
      _updateValid: w,
      _removeUnmounted: E,
      _updateFieldArray: Q,
      _updateDisabledField: wt,
      _getFieldArray: ee,
      _reset: yr,
      _resetDefaultValues: () =>
        Nn(t.defaultValues) &&
        t.defaultValues().then((v) => {
          Is(v, t.resetOptions),
            h.state.next({
              isLoading: !1
            })
        }),
      _updateFormState: (v) => {
        i = {
          ...i,
          ...v
        }
      },
      _disableForm: Xs,
      _subjects: h,
      _proxyFormState: f,
      get _fields() {
        return r
      },
      get _formValues() {
        return o
      },
      get _state() {
        return a
      },
      set _state(v) {
        a = v
      },
      get _defaultValues() {
        return s
      },
      get _names() {
        return l
      },
      set _names(v) {
        l = v
      },
      get _formState() {
        return i
      },
      set _formState(v) {
        i = v
      },
      get _options() {
        return t
      },
      set _options(v) {
        t = {
          ...t,
          ...v
        }
      }
    },
    trigger: Ne,
    register: Qi,
    handleSubmit: ki,
    watch: ni,
    setValue: ce,
    getValues: it,
    reset: Is,
    resetField: Ys,
    clearErrors: jt,
    unregister: gr,
    setError: le,
    setFocus: (v, k = {}) => {
      const Z = V(r, v),
        F = Z && Z._f
      if (F) {
        const N = F.refs ? F.refs[0] : F.ref
        N.focus && (N.focus(), k.shouldSelect && N.select())
      }
    },
    getFieldState: xt
  }
}
function y1(n = {}) {
  const e = $.useRef(),
    t = $.useRef(),
    [i, r] = $.useState({
      isDirty: !1,
      isValidating: !1,
      isLoading: Nn(n.defaultValues),
      isSubmitted: !1,
      isSubmitting: !1,
      isSubmitSuccessful: !1,
      isValid: !1,
      submitCount: 0,
      dirtyFields: {},
      touchedFields: {},
      errors: {},
      disabled: !1,
      defaultValues: Nn(n.defaultValues) ? void 0 : n.defaultValues
    })
  e.current ||
    (e.current = {
      ...m1(n, () => r((o) => ({ ...o }))),
      formState: i
    })
  const s = e.current.control
  return (
    (s._options = n),
    Sf({
      subject: s._subjects.state,
      next: (o) => {
        em(o, s._proxyFormState, s._updateFormState, !0) &&
          r({ ...s._formState })
      }
    }),
    $.useEffect(() => s._disableForm(n.disabled), [s, n.disabled]),
    $.useEffect(() => {
      if (s._proxyFormState.isDirty) {
        const o = s._getDirty()
        o !== i.isDirty &&
          s._subjects.state.next({
            isDirty: o
          })
      }
    }, [s, i.isDirty]),
    $.useEffect(() => {
      n.values && !gi(n.values, t.current)
        ? (s._reset(n.values, s._options.resetOptions), (t.current = n.values))
        : s._resetDefaultValues()
    }, [n.values, s]),
    $.useEffect(() => {
      s._state.mount || (s._updateValid(), (s._state.mount = !0)),
        s._state.watch &&
          ((s._state.watch = !1), s._subjects.state.next({ ...s._formState })),
        s._removeUnmounted()
    }),
    (e.current.formState = Jg(i, s)),
    e.current
  )
}
var b1 = function (e, t) {
  return function (i, r, s) {
    if (typeof e != 'function')
      return new Error(
        'Invalid react-required-if prop type supplied to ' +
          s +
          '. Validation failed.'
      )
    if (typeof t != 'function')
      return new Error(
        'Invalid react-required-if condition supplied to ' +
          s +
          '. Validation failed.'
      )
    var o = t(i) ? e.isRequired : e
    return o.apply(this, arguments)
  }
}
const v1 = /* @__PURE__ */ Qn(b1)
var um = function () {}
process.env.NODE_ENV !== 'production' &&
  (um = function (e, t) {
    _e(
      e,
      t.assistiveText,
      'assistiveText',
      'The wrapping span and assistive text has been removed from this component in order to make it a more pure "higher-level component" of `UtilityIcon`.'
    )
  })
const S1 = um
function qs(n, e, t) {
  return (
    e in n
      ? Object.defineProperty(n, e, {
          value: t,
          enumerable: !0,
          configurable: !0,
          writable: !0
        })
      : (n[e] = t),
    n
  )
}
var cl = function (e) {
    var t
    return (
      S1(Ag, e),
      /* @__PURE__ */ $.createElement(na, {
        'aria-hidden': 'true',
        category: e.category,
        className: ae(
          'slds-button__icon',
          ((t = {}),
          qs(
            t,
            'slds-button__icon_'.concat(e.size),
            e.size && e.size !== 'medium'
          ),
          qs(t, 'slds-button__icon_inverse-hint', e.inverse && e.hint),
          qs(t, 'slds-button__icon_hint', e.hint && !e.inverse),
          qs(t, 'slds-button__icon_'.concat(e.position), e.position),
          t),
          e.className
        ),
        icon: e.icon,
        name: e.name,
        path: e.path
      })
    )
  },
  x1 = {
    /**
     * Icon category from [lightningdesignsystem.com/icons/](https://www.lightningdesignsystem.com/icons/)
     */
    category: p.oneOf(['action', 'custom', 'doctype', 'standard', 'utility'])
      .isRequired,
    /**
     * Associates an icon button with another element on the page by changes the color of the SVG. Please reference <a href="http://www.lightningdesignsystem.com/components/buttons/#hint">Lightning Design System Buttons > Hint</a>.
     */
    hint: p.bool,
    /**
     * An SVG object to use instead of name / category, look in `design-system-react/icons` for examples
     */
    icon: p.object,
    /**
     * Class names to be added to the SVG.
     */
    className: p.oneOfType([p.array, p.object, p.string]),
    /**
     * Setting `inverse` to true will switch the color of the icon: light to dark, dark to light.
     */
    inverse: p.bool,
    /**
     * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to reference icon names.
     */
    name: p.string,
    /**
     * Path to the icon. This will override any global icon settings.
     */
    path: p.string,
    /**
     * Adds additional spacing on the opposite side specified between button icon and the button label
     */
    position: p.oneOf(['left', 'right']),
    /**
     * Size of the icon. Visit [lightningdesignsystem.com/components/icons/#flavor-sizes](https://www.lightningdesignsystem.com/components/icons/#flavor-sizes)
     */
    size: p.oneOf(['x-small', 'small', 'medium', 'large'])
  },
  w1 = {
    category: 'utility',
    size: 'medium'
  }
cl.displayName = Ag
cl.propTypes = x1
cl.defaultProps = w1
const ld = cl
var Uc
if (process.env.NODE_ENV !== 'production') {
  var cd = {}
  Uc = function (e, t, i, r) {
    var s = r ? ' '.concat(r) : '',
      o = !1,
      a = Object.keys(i),
      l = a.map(function (f) {
        return i[f]
      }),
      c = l.every(function (f) {
        return !!f
      }),
      u = l.every(function (f) {
        return !f
      })
    ;(o = c || u),
      cd[e] ||
        (wi(
          o,
          '[Design System React] If one of the following props are used, then both of the following properties are required by '
            .concat(e, ': [')
            .concat(a.join(), '].')
            .concat(s)
        ),
        (cd[e] = !!i))
  }
} else Uc = function () {}
const $1 = Uc
var fm = function () {}
process.env.NODE_ENV !== 'production' &&
  (fm = function (e, t, i) {
    var r = ei(i)
    $1(
      e,
      t,
      {
        iconName: t.iconName,
        iconCategory: t.iconCategory
      },
      r('iconCategory')
    ),
      typeof t.assistiveText == 'string' &&
        _e(
          e,
          t.assistiveText,
          'assistiveText',
          '`assistiveText` as a string has been deprecated and is now an object to allow for multiple uses in the component. Please use `assistiveText.icon` instead. '.concat(
            r('assistiveText')
          )
        )
  })
const P1 = fm,
  Q1 = 'button',
  k1 = 'prod',
  T1 = 'Button',
  C1 = {
    component: Q1,
    status: k1,
    'display-name': 'Buttons',
    classKey: T1,
    'last-accessibility-review': {
      'date-iso-8601': '2018/01/18',
      'commit-sha': 'ad6b6c6523ee21cada11be5f7ea4d99abc530726'
    },
    'SLDS-component-path': '/components/buttons',
    'site-stories': [
      {
        heading: 'Base Neutral',
        path: '/__examples__/base-neutral.jsx'
      },
      {
        heading: 'Variants',
        path: '/__examples__/brand-disabled-destructive-inverse.jsx'
      },
      {
        heading: 'Button Icons',
        path: '/__examples__/button-icons.jsx'
      }
    ],
    'url-slug': 'buttons'
  }
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var vs = typeof window < 'u' && typeof document < 'u' && typeof navigator < 'u',
  _1 = (function () {
    for (var n = ['Edge', 'Trident', 'Firefox'], e = 0; e < n.length; e += 1)
      if (vs && navigator.userAgent.indexOf(n[e]) >= 0) return 1
    return 0
  })()
function Z1(n) {
  var e = !1
  return function () {
    e ||
      ((e = !0),
      window.Promise.resolve().then(function () {
        ;(e = !1), n()
      }))
  }
}
function A1(n) {
  var e = !1
  return function () {
    e ||
      ((e = !0),
      setTimeout(function () {
        ;(e = !1), n()
      }, _1))
  }
}
var R1 = vs && window.Promise,
  E1 = R1 ? Z1 : A1
function hm(n) {
  var e = {}
  return n && e.toString.call(n) === '[object Function]'
}
function $i(n, e) {
  if (n.nodeType !== 1) return []
  var t = n.ownerDocument.defaultView,
    i = t.getComputedStyle(n, null)
  return e ? i[e] : i
}
function Pf(n) {
  return n.nodeName === 'HTML' ? n : n.parentNode || n.host
}
function Ss(n) {
  if (!n) return document.body
  switch (n.nodeName) {
    case 'HTML':
    case 'BODY':
      return n.ownerDocument.body
    case '#document':
      return n.body
  }
  var e = $i(n),
    t = e.overflow,
    i = e.overflowX,
    r = e.overflowY
  return /(auto|scroll|overlay)/.test(t + r + i) ? n : Ss(Pf(n))
}
function dm(n) {
  return n && n.referenceNode ? n.referenceNode : n
}
var ud = vs && !!(window.MSInputMethodContext && document.documentMode),
  fd = vs && /MSIE 10/.test(navigator.userAgent)
function ur(n) {
  return n === 11 ? ud : n === 10 ? fd : ud || fd
}
function Ki(n) {
  if (!n) return document.documentElement
  for (
    var e = ur(10) ? document.body : null, t = n.offsetParent || null;
    t === e && n.nextElementSibling;

  )
    t = (n = n.nextElementSibling).offsetParent
  var i = t && t.nodeName
  return !i || i === 'BODY' || i === 'HTML'
    ? n
      ? n.ownerDocument.documentElement
      : document.documentElement
    : ['TH', 'TD', 'TABLE'].indexOf(t.nodeName) !== -1 &&
        $i(t, 'position') === 'static'
      ? Ki(t)
      : t
}
function D1(n) {
  var e = n.nodeName
  return e === 'BODY' ? !1 : e === 'HTML' || Ki(n.firstElementChild) === n
}
function qc(n) {
  return n.parentNode !== null ? qc(n.parentNode) : n
}
function ua(n, e) {
  if (!n || !n.nodeType || !e || !e.nodeType) return document.documentElement
  var t = n.compareDocumentPosition(e) & Node.DOCUMENT_POSITION_FOLLOWING,
    i = t ? n : e,
    r = t ? e : n,
    s = document.createRange()
  s.setStart(i, 0), s.setEnd(r, 0)
  var o = s.commonAncestorContainer
  if ((n !== o && e !== o) || i.contains(r)) return D1(o) ? o : Ki(o)
  var a = qc(n)
  return a.host ? ua(a.host, e) : ua(n, qc(e).host)
}
function Ji(n) {
  var e =
      arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'top',
    t = e === 'top' ? 'scrollTop' : 'scrollLeft',
    i = n.nodeName
  if (i === 'BODY' || i === 'HTML') {
    var r = n.ownerDocument.documentElement,
      s = n.ownerDocument.scrollingElement || r
    return s[t]
  }
  return n[t]
}
function X1(n, e) {
  var t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1,
    i = Ji(e, 'top'),
    r = Ji(e, 'left'),
    s = t ? -1 : 1
  return (
    (n.top += i * s),
    (n.bottom += i * s),
    (n.left += r * s),
    (n.right += r * s),
    n
  )
}
function hd(n, e) {
  var t = e === 'x' ? 'Left' : 'Top',
    i = t === 'Left' ? 'Right' : 'Bottom'
  return (
    parseFloat(n['border' + t + 'Width']) +
    parseFloat(n['border' + i + 'Width'])
  )
}
function dd(n, e, t, i) {
  return Math.max(
    e['offset' + n],
    e['scroll' + n],
    t['client' + n],
    t['offset' + n],
    t['scroll' + n],
    ur(10)
      ? parseInt(t['offset' + n]) +
          parseInt(i['margin' + (n === 'Height' ? 'Top' : 'Left')]) +
          parseInt(i['margin' + (n === 'Height' ? 'Bottom' : 'Right')])
      : 0
  )
}
function pm(n) {
  var e = n.body,
    t = n.documentElement,
    i = ur(10) && getComputedStyle(t)
  return {
    height: dd('Height', e, t, i),
    width: dd('Width', e, t, i)
  }
}
var Y1 = function (n, e) {
    if (!(n instanceof e))
      throw new TypeError('Cannot call a class as a function')
  },
  I1 = (function () {
    function n(e, t) {
      for (var i = 0; i < t.length; i++) {
        var r = t[i]
        ;(r.enumerable = r.enumerable || !1),
          (r.configurable = !0),
          'value' in r && (r.writable = !0),
          Object.defineProperty(e, r.key, r)
      }
    }
    return function (e, t, i) {
      return t && n(e.prototype, t), i && n(e, i), e
    }
  })(),
  er = function (n, e, t) {
    return (
      e in n
        ? Object.defineProperty(n, e, {
            value: t,
            enumerable: !0,
            configurable: !0,
            writable: !0
          })
        : (n[e] = t),
      n
    )
  },
  _t =
    Object.assign ||
    function (n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e]
        for (var i in t)
          Object.prototype.hasOwnProperty.call(t, i) && (n[i] = t[i])
      }
      return n
    }
function qn(n) {
  return _t({}, n, {
    right: n.left + n.width,
    bottom: n.top + n.height
  })
}
function zc(n) {
  var e = {}
  try {
    if (ur(10)) {
      e = n.getBoundingClientRect()
      var t = Ji(n, 'top'),
        i = Ji(n, 'left')
      ;(e.top += t), (e.left += i), (e.bottom += t), (e.right += i)
    } else e = n.getBoundingClientRect()
  } catch {}
  var r = {
      left: e.left,
      top: e.top,
      width: e.right - e.left,
      height: e.bottom - e.top
    },
    s = n.nodeName === 'HTML' ? pm(n.ownerDocument) : {},
    o = s.width || n.clientWidth || r.width,
    a = s.height || n.clientHeight || r.height,
    l = n.offsetWidth - o,
    c = n.offsetHeight - a
  if (l || c) {
    var u = $i(n)
    ;(l -= hd(u, 'x')), (c -= hd(u, 'y')), (r.width -= l), (r.height -= c)
  }
  return qn(r)
}
function Qf(n, e) {
  var t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1,
    i = ur(10),
    r = e.nodeName === 'HTML',
    s = zc(n),
    o = zc(e),
    a = Ss(n),
    l = $i(e),
    c = parseFloat(l.borderTopWidth),
    u = parseFloat(l.borderLeftWidth)
  t && r && ((o.top = Math.max(o.top, 0)), (o.left = Math.max(o.left, 0)))
  var f = qn({
    top: s.top - o.top - c,
    left: s.left - o.left - u,
    width: s.width,
    height: s.height
  })
  if (((f.marginTop = 0), (f.marginLeft = 0), !i && r)) {
    var h = parseFloat(l.marginTop),
      d = parseFloat(l.marginLeft)
    ;(f.top -= c - h),
      (f.bottom -= c - h),
      (f.left -= u - d),
      (f.right -= u - d),
      (f.marginTop = h),
      (f.marginLeft = d)
  }
  return (
    (i && !t ? e.contains(a) : e === a && a.nodeName !== 'BODY') &&
      (f = X1(f, e)),
    f
  )
}
function N1(n) {
  var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1,
    t = n.ownerDocument.documentElement,
    i = Qf(n, t),
    r = Math.max(t.clientWidth, window.innerWidth || 0),
    s = Math.max(t.clientHeight, window.innerHeight || 0),
    o = e ? 0 : Ji(t),
    a = e ? 0 : Ji(t, 'left'),
    l = {
      top: o - i.top + i.marginTop,
      left: a - i.left + i.marginLeft,
      width: r,
      height: s
    }
  return qn(l)
}
function Om(n) {
  var e = n.nodeName
  if (e === 'BODY' || e === 'HTML') return !1
  if ($i(n, 'position') === 'fixed') return !0
  var t = Pf(n)
  return t ? Om(t) : !1
}
function gm(n) {
  if (!n || !n.parentElement || ur()) return document.documentElement
  for (var e = n.parentElement; e && $i(e, 'transform') === 'none'; )
    e = e.parentElement
  return e || document.documentElement
}
function kf(n, e, t, i) {
  var r = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1,
    s = { top: 0, left: 0 },
    o = r ? gm(n) : ua(n, dm(e))
  if (i === 'viewport') s = N1(o, r)
  else {
    var a = void 0
    i === 'scrollParent'
      ? ((a = Ss(Pf(e))),
        a.nodeName === 'BODY' && (a = n.ownerDocument.documentElement))
      : i === 'window'
        ? (a = n.ownerDocument.documentElement)
        : (a = i)
    var l = Qf(a, o, r)
    if (a.nodeName === 'HTML' && !Om(o)) {
      var c = pm(n.ownerDocument),
        u = c.height,
        f = c.width
      ;(s.top += l.top - l.marginTop),
        (s.bottom = u + l.top),
        (s.left += l.left - l.marginLeft),
        (s.right = f + l.left)
    } else s = l
  }
  t = t || 0
  var h = typeof t == 'number'
  return (
    (s.left += h ? t : t.left || 0),
    (s.top += h ? t : t.top || 0),
    (s.right -= h ? t : t.right || 0),
    (s.bottom -= h ? t : t.bottom || 0),
    s
  )
}
function M1(n) {
  var e = n.width,
    t = n.height
  return e * t
}
function mm(n, e, t, i, r) {
  var s = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 0
  if (n.indexOf('auto') === -1) return n
  var o = kf(t, i, s, r),
    a = {
      top: {
        width: o.width,
        height: e.top - o.top
      },
      right: {
        width: o.right - e.right,
        height: o.height
      },
      bottom: {
        width: o.width,
        height: o.bottom - e.bottom
      },
      left: {
        width: e.left - o.left,
        height: o.height
      }
    },
    l = Object.keys(a)
      .map(function (h) {
        return _t(
          {
            key: h
          },
          a[h],
          {
            area: M1(a[h])
          }
        )
      })
      .sort(function (h, d) {
        return d.area - h.area
      }),
    c = l.filter(function (h) {
      var d = h.width,
        O = h.height
      return d >= t.clientWidth && O >= t.clientHeight
    }),
    u = c.length > 0 ? c[0].key : l[0].key,
    f = n.split('-')[1]
  return u + (f ? '-' + f : '')
}
function ym(n, e, t) {
  var i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null,
    r = i ? gm(e) : ua(e, dm(t))
  return Qf(t, r, i)
}
function bm(n) {
  var e = n.ownerDocument.defaultView,
    t = e.getComputedStyle(n),
    i = parseFloat(t.marginTop || 0) + parseFloat(t.marginBottom || 0),
    r = parseFloat(t.marginLeft || 0) + parseFloat(t.marginRight || 0),
    s = {
      width: n.offsetWidth + r,
      height: n.offsetHeight + i
    }
  return s
}
function fa(n) {
  var e = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' }
  return n.replace(/left|right|bottom|top/g, function (t) {
    return e[t]
  })
}
function vm(n, e, t) {
  t = t.split('-')[0]
  var i = bm(n),
    r = {
      width: i.width,
      height: i.height
    },
    s = ['right', 'left'].indexOf(t) !== -1,
    o = s ? 'top' : 'left',
    a = s ? 'left' : 'top',
    l = s ? 'height' : 'width',
    c = s ? 'width' : 'height'
  return (
    (r[o] = e[o] + e[l] / 2 - i[l] / 2),
    t === a ? (r[a] = e[a] - i[c]) : (r[a] = e[fa(a)]),
    r
  )
}
function xs(n, e) {
  return Array.prototype.find ? n.find(e) : n.filter(e)[0]
}
function V1(n, e, t) {
  if (Array.prototype.findIndex)
    return n.findIndex(function (r) {
      return r[e] === t
    })
  var i = xs(n, function (r) {
    return r[e] === t
  })
  return n.indexOf(i)
}
function Sm(n, e, t) {
  var i = t === void 0 ? n : n.slice(0, V1(n, 'name', t))
  return (
    i.forEach(function (r) {
      r.function &&
        console.warn('`modifier.function` is deprecated, use `modifier.fn`!')
      var s = r.function || r.fn
      r.enabled &&
        hm(s) &&
        ((e.offsets.popper = qn(e.offsets.popper)),
        (e.offsets.reference = qn(e.offsets.reference)),
        (e = s(e, r)))
    }),
    e
  )
}
function W1() {
  if (!this.state.isDestroyed) {
    var n = {
      instance: this,
      styles: {},
      arrowStyles: {},
      attributes: {},
      flipped: !1,
      offsets: {}
    }
    ;(n.offsets.reference = ym(
      this.state,
      this.popper,
      this.reference,
      this.options.positionFixed
    )),
      (n.placement = mm(
        this.options.placement,
        n.offsets.reference,
        this.popper,
        this.reference,
        this.options.modifiers.flip.boundariesElement,
        this.options.modifiers.flip.padding
      )),
      (n.originalPlacement = n.placement),
      (n.positionFixed = this.options.positionFixed),
      (n.offsets.popper = vm(this.popper, n.offsets.reference, n.placement)),
      (n.offsets.popper.position = this.options.positionFixed
        ? 'fixed'
        : 'absolute'),
      (n = Sm(this.modifiers, n)),
      this.state.isCreated
        ? this.options.onUpdate(n)
        : ((this.state.isCreated = !0), this.options.onCreate(n))
  }
}
function xm(n, e) {
  return n.some(function (t) {
    var i = t.name,
      r = t.enabled
    return r && i === e
  })
}
function Tf(n) {
  for (
    var e = [!1, 'ms', 'Webkit', 'Moz', 'O'],
      t = n.charAt(0).toUpperCase() + n.slice(1),
      i = 0;
    i < e.length;
    i++
  ) {
    var r = e[i],
      s = r ? '' + r + t : n
    if (typeof document.body.style[s] < 'u') return s
  }
  return null
}
function j1() {
  return (
    (this.state.isDestroyed = !0),
    xm(this.modifiers, 'applyStyle') &&
      (this.popper.removeAttribute('x-placement'),
      (this.popper.style.position = ''),
      (this.popper.style.top = ''),
      (this.popper.style.left = ''),
      (this.popper.style.right = ''),
      (this.popper.style.bottom = ''),
      (this.popper.style.willChange = ''),
      (this.popper.style[Tf('transform')] = '')),
    this.disableEventListeners(),
    this.options.removeOnDestroy &&
      this.popper.parentNode.removeChild(this.popper),
    this
  )
}
function wm(n) {
  var e = n.ownerDocument
  return e ? e.defaultView : window
}
function $m(n, e, t, i) {
  var r = n.nodeName === 'BODY',
    s = r ? n.ownerDocument.defaultView : n
  s.addEventListener(e, t, { passive: !0 }),
    r || $m(Ss(s.parentNode), e, t, i),
    i.push(s)
}
function B1(n, e, t, i) {
  ;(t.updateBound = i),
    wm(n).addEventListener('resize', t.updateBound, { passive: !0 })
  var r = Ss(n)
  return (
    $m(r, 'scroll', t.updateBound, t.scrollParents),
    (t.scrollElement = r),
    (t.eventsEnabled = !0),
    t
  )
}
function L1() {
  this.state.eventsEnabled ||
    (this.state = B1(
      this.reference,
      this.options,
      this.state,
      this.scheduleUpdate
    ))
}
function U1(n, e) {
  return (
    wm(n).removeEventListener('resize', e.updateBound),
    e.scrollParents.forEach(function (t) {
      t.removeEventListener('scroll', e.updateBound)
    }),
    (e.updateBound = null),
    (e.scrollParents = []),
    (e.scrollElement = null),
    (e.eventsEnabled = !1),
    e
  )
}
function q1() {
  this.state.eventsEnabled &&
    (cancelAnimationFrame(this.scheduleUpdate),
    (this.state = U1(this.reference, this.state)))
}
function Cf(n) {
  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n)
}
function Fc(n, e) {
  Object.keys(e).forEach(function (t) {
    var i = ''
    ;['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(t) !== -1 &&
      Cf(e[t]) &&
      (i = 'px'),
      (n.style[t] = e[t] + i)
  })
}
function z1(n, e) {
  Object.keys(e).forEach(function (t) {
    var i = e[t]
    i !== !1 ? n.setAttribute(t, e[t]) : n.removeAttribute(t)
  })
}
function F1(n) {
  return (
    Fc(n.instance.popper, n.styles),
    z1(n.instance.popper, n.attributes),
    n.arrowElement &&
      Object.keys(n.arrowStyles).length &&
      Fc(n.arrowElement, n.arrowStyles),
    n
  )
}
function G1(n, e, t, i, r) {
  var s = ym(r, e, n, t.positionFixed),
    o = mm(
      t.placement,
      s,
      e,
      n,
      t.modifiers.flip.boundariesElement,
      t.modifiers.flip.padding
    )
  return (
    e.setAttribute('x-placement', o),
    Fc(e, { position: t.positionFixed ? 'fixed' : 'absolute' }),
    t
  )
}
function H1(n, e) {
  var t = n.offsets,
    i = t.popper,
    r = t.reference,
    s = Math.round,
    o = Math.floor,
    a = function (x) {
      return x
    },
    l = s(r.width),
    c = s(i.width),
    u = ['left', 'right'].indexOf(n.placement) !== -1,
    f = n.placement.indexOf('-') !== -1,
    h = l % 2 === c % 2,
    d = l % 2 === 1 && c % 2 === 1,
    O = e ? (u || f || h ? s : o) : a,
    m = e ? s : a
  return {
    left: O(d && !f && e ? i.left - 1 : i.left),
    top: m(i.top),
    bottom: m(i.bottom),
    right: O(i.right)
  }
}
var K1 = vs && /Firefox/i.test(navigator.userAgent)
function J1(n, e) {
  var t = e.x,
    i = e.y,
    r = n.offsets.popper,
    s = xs(n.instance.modifiers, function (T) {
      return T.name === 'applyStyle'
    }).gpuAcceleration
  s !== void 0 &&
    console.warn(
      'WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!'
    )
  var o = s !== void 0 ? s : e.gpuAcceleration,
    a = Ki(n.instance.popper),
    l = zc(a),
    c = {
      position: r.position
    },
    u = H1(n, window.devicePixelRatio < 2 || !K1),
    f = t === 'bottom' ? 'top' : 'bottom',
    h = i === 'right' ? 'left' : 'right',
    d = Tf('transform'),
    O = void 0,
    m = void 0
  if (
    (f === 'bottom'
      ? a.nodeName === 'HTML'
        ? (m = -a.clientHeight + u.bottom)
        : (m = -l.height + u.bottom)
      : (m = u.top),
    h === 'right'
      ? a.nodeName === 'HTML'
        ? (O = -a.clientWidth + u.right)
        : (O = -l.width + u.right)
      : (O = u.left),
    o && d)
  )
    (c[d] = 'translate3d(' + O + 'px, ' + m + 'px, 0)'),
      (c[f] = 0),
      (c[h] = 0),
      (c.willChange = 'transform')
  else {
    var b = f === 'bottom' ? -1 : 1,
      x = h === 'right' ? -1 : 1
    ;(c[f] = m * b), (c[h] = O * x), (c.willChange = f + ', ' + h)
  }
  var w = {
    'x-placement': n.placement
  }
  return (
    (n.attributes = _t({}, w, n.attributes)),
    (n.styles = _t({}, c, n.styles)),
    (n.arrowStyles = _t({}, n.offsets.arrow, n.arrowStyles)),
    n
  )
}
function Pm(n, e, t) {
  var i = xs(n, function (a) {
      var l = a.name
      return l === e
    }),
    r =
      !!i &&
      n.some(function (a) {
        return a.name === t && a.enabled && a.order < i.order
      })
  if (!r) {
    var s = '`' + e + '`',
      o = '`' + t + '`'
    console.warn(
      o +
        ' modifier is required by ' +
        s +
        ' modifier in order to work, be sure to include it before ' +
        s +
        '!'
    )
  }
  return r
}
function e$(n, e) {
  var t
  if (!Pm(n.instance.modifiers, 'arrow', 'keepTogether')) return n
  var i = e.element
  if (typeof i == 'string') {
    if (((i = n.instance.popper.querySelector(i)), !i)) return n
  } else if (!n.instance.popper.contains(i))
    return (
      console.warn(
        'WARNING: `arrow.element` must be child of its popper element!'
      ),
      n
    )
  var r = n.placement.split('-')[0],
    s = n.offsets,
    o = s.popper,
    a = s.reference,
    l = ['left', 'right'].indexOf(r) !== -1,
    c = l ? 'height' : 'width',
    u = l ? 'Top' : 'Left',
    f = u.toLowerCase(),
    h = l ? 'left' : 'top',
    d = l ? 'bottom' : 'right',
    O = bm(i)[c]
  a[d] - O < o[f] && (n.offsets.popper[f] -= o[f] - (a[d] - O)),
    a[f] + O > o[d] && (n.offsets.popper[f] += a[f] + O - o[d]),
    (n.offsets.popper = qn(n.offsets.popper))
  var m = a[f] + a[c] / 2 - O / 2,
    b = $i(n.instance.popper),
    x = parseFloat(b['margin' + u]),
    w = parseFloat(b['border' + u + 'Width']),
    T = m - n.offsets.popper[f] - x - w
  return (
    (T = Math.max(Math.min(o[c] - O, T), 0)),
    (n.arrowElement = i),
    (n.offsets.arrow = ((t = {}), er(t, f, Math.round(T)), er(t, h, ''), t)),
    n
  )
}
function t$(n) {
  return n === 'end' ? 'start' : n === 'start' ? 'end' : n
}
var Qm = [
    'auto-start',
    'auto',
    'auto-end',
    'top-start',
    'top',
    'top-end',
    'right-start',
    'right',
    'right-end',
    'bottom-end',
    'bottom',
    'bottom-start',
    'left-end',
    'left',
    'left-start'
  ],
  Fl = Qm.slice(3)
function pd(n) {
  var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1,
    t = Fl.indexOf(n),
    i = Fl.slice(t + 1).concat(Fl.slice(0, t))
  return e ? i.reverse() : i
}
var Gl = {
  FLIP: 'flip',
  CLOCKWISE: 'clockwise',
  COUNTERCLOCKWISE: 'counterclockwise'
}
function n$(n, e) {
  if (
    xm(n.instance.modifiers, 'inner') ||
    (n.flipped && n.placement === n.originalPlacement)
  )
    return n
  var t = kf(
      n.instance.popper,
      n.instance.reference,
      e.padding,
      e.boundariesElement,
      n.positionFixed
    ),
    i = n.placement.split('-')[0],
    r = fa(i),
    s = n.placement.split('-')[1] || '',
    o = []
  switch (e.behavior) {
    case Gl.FLIP:
      o = [i, r]
      break
    case Gl.CLOCKWISE:
      o = pd(i)
      break
    case Gl.COUNTERCLOCKWISE:
      o = pd(i, !0)
      break
    default:
      o = e.behavior
  }
  return (
    o.forEach(function (a, l) {
      if (i !== a || o.length === l + 1) return n
      ;(i = n.placement.split('-')[0]), (r = fa(i))
      var c = n.offsets.popper,
        u = n.offsets.reference,
        f = Math.floor,
        h =
          (i === 'left' && f(c.right) > f(u.left)) ||
          (i === 'right' && f(c.left) < f(u.right)) ||
          (i === 'top' && f(c.bottom) > f(u.top)) ||
          (i === 'bottom' && f(c.top) < f(u.bottom)),
        d = f(c.left) < f(t.left),
        O = f(c.right) > f(t.right),
        m = f(c.top) < f(t.top),
        b = f(c.bottom) > f(t.bottom),
        x =
          (i === 'left' && d) ||
          (i === 'right' && O) ||
          (i === 'top' && m) ||
          (i === 'bottom' && b),
        w = ['top', 'bottom'].indexOf(i) !== -1,
        T =
          !!e.flipVariations &&
          ((w && s === 'start' && d) ||
            (w && s === 'end' && O) ||
            (!w && s === 'start' && m) ||
            (!w && s === 'end' && b)),
        Q =
          !!e.flipVariationsByContent &&
          ((w && s === 'start' && O) ||
            (w && s === 'end' && d) ||
            (!w && s === 'start' && b) ||
            (!w && s === 'end' && m)),
        P = T || Q
      ;(h || x || P) &&
        ((n.flipped = !0),
        (h || x) && (i = o[l + 1]),
        P && (s = t$(s)),
        (n.placement = i + (s ? '-' + s : '')),
        (n.offsets.popper = _t(
          {},
          n.offsets.popper,
          vm(n.instance.popper, n.offsets.reference, n.placement)
        )),
        (n = Sm(n.instance.modifiers, n, 'flip')))
    }),
    n
  )
}
function i$(n) {
  var e = n.offsets,
    t = e.popper,
    i = e.reference,
    r = n.placement.split('-')[0],
    s = Math.floor,
    o = ['top', 'bottom'].indexOf(r) !== -1,
    a = o ? 'right' : 'bottom',
    l = o ? 'left' : 'top',
    c = o ? 'width' : 'height'
  return (
    t[a] < s(i[l]) && (n.offsets.popper[l] = s(i[l]) - t[c]),
    t[l] > s(i[a]) && (n.offsets.popper[l] = s(i[a])),
    n
  )
}
function r$(n, e, t, i) {
  var r = n.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),
    s = +r[1],
    o = r[2]
  if (!s) return n
  if (o.indexOf('%') === 0) {
    var a = void 0
    switch (o) {
      case '%p':
        a = t
        break
      case '%':
      case '%r':
      default:
        a = i
    }
    var l = qn(a)
    return (l[e] / 100) * s
  } else if (o === 'vh' || o === 'vw') {
    var c = void 0
    return (
      o === 'vh'
        ? (c = Math.max(
            document.documentElement.clientHeight,
            window.innerHeight || 0
          ))
        : (c = Math.max(
            document.documentElement.clientWidth,
            window.innerWidth || 0
          )),
      (c / 100) * s
    )
  } else return s
}
function s$(n, e, t, i) {
  var r = [0, 0],
    s = ['right', 'left'].indexOf(i) !== -1,
    o = n.split(/(\+|\-)/).map(function (u) {
      return u.trim()
    }),
    a = o.indexOf(
      xs(o, function (u) {
        return u.search(/,|\s/) !== -1
      })
    )
  o[a] &&
    o[a].indexOf(',') === -1 &&
    console.warn(
      'Offsets separated by white space(s) are deprecated, use a comma (,) instead.'
    )
  var l = /\s*,\s*|\s+/,
    c =
      a !== -1
        ? [
            o.slice(0, a).concat([o[a].split(l)[0]]),
            [o[a].split(l)[1]].concat(o.slice(a + 1))
          ]
        : [o]
  return (
    (c = c.map(function (u, f) {
      var h = (f === 1 ? !s : s) ? 'height' : 'width',
        d = !1
      return u
        .reduce(function (O, m) {
          return O[O.length - 1] === '' && ['+', '-'].indexOf(m) !== -1
            ? ((O[O.length - 1] = m), (d = !0), O)
            : d
              ? ((O[O.length - 1] += m), (d = !1), O)
              : O.concat(m)
        }, [])
        .map(function (O) {
          return r$(O, h, e, t)
        })
    })),
    c.forEach(function (u, f) {
      u.forEach(function (h, d) {
        Cf(h) && (r[f] += h * (u[d - 1] === '-' ? -1 : 1))
      })
    }),
    r
  )
}
function o$(n, e) {
  var t = e.offset,
    i = n.placement,
    r = n.offsets,
    s = r.popper,
    o = r.reference,
    a = i.split('-')[0],
    l = void 0
  return (
    Cf(+t) ? (l = [+t, 0]) : (l = s$(t, s, o, a)),
    a === 'left'
      ? ((s.top += l[0]), (s.left -= l[1]))
      : a === 'right'
        ? ((s.top += l[0]), (s.left += l[1]))
        : a === 'top'
          ? ((s.left += l[0]), (s.top -= l[1]))
          : a === 'bottom' && ((s.left += l[0]), (s.top += l[1])),
    (n.popper = s),
    n
  )
}
function a$(n, e) {
  var t = e.boundariesElement || Ki(n.instance.popper)
  n.instance.reference === t && (t = Ki(t))
  var i = Tf('transform'),
    r = n.instance.popper.style,
    s = r.top,
    o = r.left,
    a = r[i]
  ;(r.top = ''), (r.left = ''), (r[i] = '')
  var l = kf(
    n.instance.popper,
    n.instance.reference,
    e.padding,
    t,
    n.positionFixed
  )
  ;(r.top = s), (r.left = o), (r[i] = a), (e.boundaries = l)
  var c = e.priority,
    u = n.offsets.popper,
    f = {
      primary: function (d) {
        var O = u[d]
        return (
          u[d] < l[d] && !e.escapeWithReference && (O = Math.max(u[d], l[d])),
          er({}, d, O)
        )
      },
      secondary: function (d) {
        var O = d === 'right' ? 'left' : 'top',
          m = u[O]
        return (
          u[d] > l[d] &&
            !e.escapeWithReference &&
            (m = Math.min(u[O], l[d] - (d === 'right' ? u.width : u.height))),
          er({}, O, m)
        )
      }
    }
  return (
    c.forEach(function (h) {
      var d = ['left', 'top'].indexOf(h) !== -1 ? 'primary' : 'secondary'
      u = _t({}, u, f[d](h))
    }),
    (n.offsets.popper = u),
    n
  )
}
function l$(n) {
  var e = n.placement,
    t = e.split('-')[0],
    i = e.split('-')[1]
  if (i) {
    var r = n.offsets,
      s = r.reference,
      o = r.popper,
      a = ['bottom', 'top'].indexOf(t) !== -1,
      l = a ? 'left' : 'top',
      c = a ? 'width' : 'height',
      u = {
        start: er({}, l, s[l]),
        end: er({}, l, s[l] + s[c] - o[c])
      }
    n.offsets.popper = _t({}, o, u[i])
  }
  return n
}
function c$(n) {
  if (!Pm(n.instance.modifiers, 'hide', 'preventOverflow')) return n
  var e = n.offsets.reference,
    t = xs(n.instance.modifiers, function (i) {
      return i.name === 'preventOverflow'
    }).boundaries
  if (
    e.bottom < t.top ||
    e.left > t.right ||
    e.top > t.bottom ||
    e.right < t.left
  ) {
    if (n.hide === !0) return n
    ;(n.hide = !0), (n.attributes['x-out-of-boundaries'] = '')
  } else {
    if (n.hide === !1) return n
    ;(n.hide = !1), (n.attributes['x-out-of-boundaries'] = !1)
  }
  return n
}
function u$(n) {
  var e = n.placement,
    t = e.split('-')[0],
    i = n.offsets,
    r = i.popper,
    s = i.reference,
    o = ['left', 'right'].indexOf(t) !== -1,
    a = ['top', 'left'].indexOf(t) === -1
  return (
    (r[o ? 'left' : 'top'] = s[t] - (a ? r[o ? 'width' : 'height'] : 0)),
    (n.placement = fa(e)),
    (n.offsets.popper = qn(r)),
    n
  )
}
var f$ = {
    /**
     * Modifier used to shift the popper on the start or end of its reference
     * element.<br />
     * It will read the variation of the `placement` property.<br />
     * It can be one either `-end` or `-start`.
     * @memberof modifiers
     * @inner
     */
    shift: {
      /** @prop {number} order=100 - Index used to define the order of execution */
      order: 100,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: !0,
      /** @prop {ModifierFn} */
      fn: l$
    },
    /**
     * The `offset` modifier can shift your popper on both its axis.
     *
     * It accepts the following units:
     * - `px` or unit-less, interpreted as pixels
     * - `%` or `%r`, percentage relative to the length of the reference element
     * - `%p`, percentage relative to the length of the popper element
     * - `vw`, CSS viewport width unit
     * - `vh`, CSS viewport height unit
     *
     * For length is intended the main axis relative to the placement of the popper.<br />
     * This means that if the placement is `top` or `bottom`, the length will be the
     * `width`. In case of `left` or `right`, it will be the `height`.
     *
     * You can provide a single value (as `Number` or `String`), or a pair of values
     * as `String` divided by a comma or one (or more) white spaces.<br />
     * The latter is a deprecated method because it leads to confusion and will be
     * removed in v2.<br />
     * Additionally, it accepts additions and subtractions between different units.
     * Note that multiplications and divisions aren't supported.
     *
     * Valid examples are:
     * ```
     * 10
     * '10%'
     * '10, 10'
     * '10%, 10'
     * '10 + 10%'
     * '10 - 5vh + 3%'
     * '-10px + 5vh, 5px - 6%'
     * ```
     * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
     * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
     * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
     *
     * @memberof modifiers
     * @inner
     */
    offset: {
      /** @prop {number} order=200 - Index used to define the order of execution */
      order: 200,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: !0,
      /** @prop {ModifierFn} */
      fn: o$,
      /** @prop {Number|String} offset=0
       * The offset value as described in the modifier description
       */
      offset: 0
    },
    /**
     * Modifier used to prevent the popper from being positioned outside the boundary.
     *
     * A scenario exists where the reference itself is not within the boundaries.<br />
     * We can say it has "escaped the boundaries" — or just "escaped".<br />
     * In this case we need to decide whether the popper should either:
     *
     * - detach from the reference and remain "trapped" in the boundaries, or
     * - if it should ignore the boundary and "escape with its reference"
     *
     * When `escapeWithReference` is set to`true` and reference is completely
     * outside its boundaries, the popper will overflow (or completely leave)
     * the boundaries in order to remain attached to the edge of the reference.
     *
     * @memberof modifiers
     * @inner
     */
    preventOverflow: {
      /** @prop {number} order=300 - Index used to define the order of execution */
      order: 300,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: !0,
      /** @prop {ModifierFn} */
      fn: a$,
      /**
       * @prop {Array} [priority=['left','right','top','bottom']]
       * Popper will try to prevent overflow following these priorities by default,
       * then, it could overflow on the left and on top of the `boundariesElement`
       */
      priority: ['left', 'right', 'top', 'bottom'],
      /**
       * @prop {number} padding=5
       * Amount of pixel used to define a minimum distance between the boundaries
       * and the popper. This makes sure the popper always has a little padding
       * between the edges of its container
       */
      padding: 5,
      /**
       * @prop {String|HTMLElement} boundariesElement='scrollParent'
       * Boundaries used by the modifier. Can be `scrollParent`, `window`,
       * `viewport` or any DOM element.
       */
      boundariesElement: 'scrollParent'
    },
    /**
     * Modifier used to make sure the reference and its popper stay near each other
     * without leaving any gap between the two. Especially useful when the arrow is
     * enabled and you want to ensure that it points to its reference element.
     * It cares only about the first axis. You can still have poppers with margin
     * between the popper and its reference element.
     * @memberof modifiers
     * @inner
     */
    keepTogether: {
      /** @prop {number} order=400 - Index used to define the order of execution */
      order: 400,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: !0,
      /** @prop {ModifierFn} */
      fn: i$
    },
    /**
     * This modifier is used to move the `arrowElement` of the popper to make
     * sure it is positioned between the reference element and its popper element.
     * It will read the outer size of the `arrowElement` node to detect how many
     * pixels of conjunction are needed.
     *
     * It has no effect if no `arrowElement` is provided.
     * @memberof modifiers
     * @inner
     */
    arrow: {
      /** @prop {number} order=500 - Index used to define the order of execution */
      order: 500,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: !0,
      /** @prop {ModifierFn} */
      fn: e$,
      /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
      element: '[x-arrow]'
    },
    /**
     * Modifier used to flip the popper's placement when it starts to overlap its
     * reference element.
     *
     * Requires the `preventOverflow` modifier before it in order to work.
     *
     * **NOTE:** this modifier will interrupt the current update cycle and will
     * restart it if it detects the need to flip the placement.
     * @memberof modifiers
     * @inner
     */
    flip: {
      /** @prop {number} order=600 - Index used to define the order of execution */
      order: 600,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: !0,
      /** @prop {ModifierFn} */
      fn: n$,
      /**
       * @prop {String|Array} behavior='flip'
       * The behavior used to change the popper's placement. It can be one of
       * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
       * placements (with optional variations)
       */
      behavior: 'flip',
      /**
       * @prop {number} padding=5
       * The popper will flip if it hits the edges of the `boundariesElement`
       */
      padding: 5,
      /**
       * @prop {String|HTMLElement} boundariesElement='viewport'
       * The element which will define the boundaries of the popper position.
       * The popper will never be placed outside of the defined boundaries
       * (except if `keepTogether` is enabled)
       */
      boundariesElement: 'viewport',
      /**
       * @prop {Boolean} flipVariations=false
       * The popper will switch placement variation between `-start` and `-end` when
       * the reference element overlaps its boundaries.
       *
       * The original placement should have a set variation.
       */
      flipVariations: !1,
      /**
       * @prop {Boolean} flipVariationsByContent=false
       * The popper will switch placement variation between `-start` and `-end` when
       * the popper element overlaps its reference boundaries.
       *
       * The original placement should have a set variation.
       */
      flipVariationsByContent: !1
    },
    /**
     * Modifier used to make the popper flow toward the inner of the reference element.
     * By default, when this modifier is disabled, the popper will be placed outside
     * the reference element.
     * @memberof modifiers
     * @inner
     */
    inner: {
      /** @prop {number} order=700 - Index used to define the order of execution */
      order: 700,
      /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
      enabled: !1,
      /** @prop {ModifierFn} */
      fn: u$
    },
    /**
     * Modifier used to hide the popper when its reference element is outside of the
     * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
     * be used to hide with a CSS selector the popper when its reference is
     * out of boundaries.
     *
     * Requires the `preventOverflow` modifier before it in order to work.
     * @memberof modifiers
     * @inner
     */
    hide: {
      /** @prop {number} order=800 - Index used to define the order of execution */
      order: 800,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: !0,
      /** @prop {ModifierFn} */
      fn: c$
    },
    /**
     * Computes the style that will be applied to the popper element to gets
     * properly positioned.
     *
     * Note that this modifier will not touch the DOM, it just prepares the styles
     * so that `applyStyle` modifier can apply it. This separation is useful
     * in case you need to replace `applyStyle` with a custom implementation.
     *
     * This modifier has `850` as `order` value to maintain backward compatibility
     * with previous versions of Popper.js. Expect the modifiers ordering method
     * to change in future major versions of the library.
     *
     * @memberof modifiers
     * @inner
     */
    computeStyle: {
      /** @prop {number} order=850 - Index used to define the order of execution */
      order: 850,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: !0,
      /** @prop {ModifierFn} */
      fn: J1,
      /**
       * @prop {Boolean} gpuAcceleration=true
       * If true, it uses the CSS 3D transformation to position the popper.
       * Otherwise, it will use the `top` and `left` properties
       */
      gpuAcceleration: !0,
      /**
       * @prop {string} [x='bottom']
       * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
       * Change this if your popper should grow in a direction different from `bottom`
       */
      x: 'bottom',
      /**
       * @prop {string} [x='left']
       * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
       * Change this if your popper should grow in a direction different from `right`
       */
      y: 'right'
    },
    /**
     * Applies the computed styles to the popper element.
     *
     * All the DOM manipulations are limited to this modifier. This is useful in case
     * you want to integrate Popper.js inside a framework or view library and you
     * want to delegate all the DOM manipulations to it.
     *
     * Note that if you disable this modifier, you must make sure the popper element
     * has its position set to `absolute` before Popper.js can do its work!
     *
     * Just disable this modifier and define your own to achieve the desired effect.
     *
     * @memberof modifiers
     * @inner
     */
    applyStyle: {
      /** @prop {number} order=900 - Index used to define the order of execution */
      order: 900,
      /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
      enabled: !0,
      /** @prop {ModifierFn} */
      fn: F1,
      /** @prop {Function} */
      onLoad: G1,
      /**
       * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
       * @prop {Boolean} gpuAcceleration=true
       * If true, it uses the CSS 3D transformation to position the popper.
       * Otherwise, it will use the `top` and `left` properties
       */
      gpuAcceleration: void 0
    }
  },
  h$ = {
    /**
     * Popper's placement.
     * @prop {Popper.placements} placement='bottom'
     */
    placement: 'bottom',
    /**
     * Set this to true if you want popper to position it self in 'fixed' mode
     * @prop {Boolean} positionFixed=false
     */
    positionFixed: !1,
    /**
     * Whether events (resize, scroll) are initially enabled.
     * @prop {Boolean} eventsEnabled=true
     */
    eventsEnabled: !0,
    /**
     * Set to true if you want to automatically remove the popper when
     * you call the `destroy` method.
     * @prop {Boolean} removeOnDestroy=false
     */
    removeOnDestroy: !1,
    /**
     * Callback called when the popper is created.<br />
     * By default, it is set to no-op.<br />
     * Access Popper.js instance with `data.instance`.
     * @prop {onCreate}
     */
    onCreate: function () {},
    /**
     * Callback called when the popper is updated. This callback is not called
     * on the initialization/creation of the popper, but only on subsequent
     * updates.<br />
     * By default, it is set to no-op.<br />
     * Access Popper.js instance with `data.instance`.
     * @prop {onUpdate}
     */
    onUpdate: function () {},
    /**
     * List of modifiers used to modify the offsets before they are applied to the popper.
     * They provide most of the functionalities of Popper.js.
     * @prop {modifiers}
     */
    modifiers: f$
  },
  ul = (function () {
    function n(e, t) {
      var i = this,
        r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}
      Y1(this, n),
        (this.scheduleUpdate = function () {
          return requestAnimationFrame(i.update)
        }),
        (this.update = E1(this.update.bind(this))),
        (this.options = _t({}, n.Defaults, r)),
        (this.state = {
          isDestroyed: !1,
          isCreated: !1,
          scrollParents: []
        }),
        (this.reference = e && e.jquery ? e[0] : e),
        (this.popper = t && t.jquery ? t[0] : t),
        (this.options.modifiers = {}),
        Object.keys(_t({}, n.Defaults.modifiers, r.modifiers)).forEach(
          function (o) {
            i.options.modifiers[o] = _t(
              {},
              n.Defaults.modifiers[o] || {},
              r.modifiers ? r.modifiers[o] : {}
            )
          }
        ),
        (this.modifiers = Object.keys(this.options.modifiers)
          .map(function (o) {
            return _t(
              {
                name: o
              },
              i.options.modifiers[o]
            )
          })
          .sort(function (o, a) {
            return o.order - a.order
          })),
        this.modifiers.forEach(function (o) {
          o.enabled &&
            hm(o.onLoad) &&
            o.onLoad(i.reference, i.popper, i.options, o, i.state)
        }),
        this.update()
      var s = this.options.eventsEnabled
      s && this.enableEventListeners(), (this.state.eventsEnabled = s)
    }
    return (
      I1(n, [
        {
          key: 'update',
          value: function () {
            return W1.call(this)
          }
        },
        {
          key: 'destroy',
          value: function () {
            return j1.call(this)
          }
        },
        {
          key: 'enableEventListeners',
          value: function () {
            return L1.call(this)
          }
        },
        {
          key: 'disableEventListeners',
          value: function () {
            return q1.call(this)
          }
          /**
           * Schedules an update. It will run on the next UI update available.
           * @method scheduleUpdate
           * @memberof Popper
           */
          /**
           * Collection of utilities useful when writing custom modifiers.
           * Starting from version 1.7, this method is available only if you
           * include `popper-utils.js` before `popper.js`.
           *
           * **DEPRECATION**: This way to access PopperUtils is deprecated
           * and will be removed in v2! Use the PopperUtils module directly instead.
           * Due to the high instability of the methods contained in Utils, we can't
           * guarantee them to follow semver. Use them at your own risk!
           * @static
           * @private
           * @type {Object}
           * @deprecated since version 1.8
           * @member Utils
           * @memberof Popper
           */
        }
      ]),
      n
    )
  })()
ul.Utils = (typeof window < 'u' ? window : global).PopperUtils
ul.placements = Qm
ul.Defaults = h$
const d$ = ul
var ha = { exports: {} }
ha.exports
;(function (n, e) {
  var t = 200,
    i = '__lodash_hash_undefined__',
    r = 1,
    s = 2,
    o = 9007199254740991,
    a = '[object Arguments]',
    l = '[object Array]',
    c = '[object AsyncFunction]',
    u = '[object Boolean]',
    f = '[object Date]',
    h = '[object Error]',
    d = '[object Function]',
    O = '[object GeneratorFunction]',
    m = '[object Map]',
    b = '[object Number]',
    x = '[object Null]',
    w = '[object Object]',
    T = '[object Promise]',
    Q = '[object Proxy]',
    P = '[object RegExp]',
    C = '[object Set]',
    A = '[object String]',
    j = '[object Symbol]',
    X = '[object Undefined]',
    L = '[object WeakMap]',
    U = '[object ArrayBuffer]',
    E = '[object DataView]',
    I = '[object Float32Array]',
    B = '[object Float64Array]',
    ee = '[object Int8Array]',
    ie = '[object Int16Array]',
    te = '[object Int32Array]',
    ce = '[object Uint8Array]',
    ye = '[object Uint8ClampedArray]',
    he = '[object Uint16Array]',
    Ne = '[object Uint32Array]',
    it = /[\\^$.*+?()[\]{}|]/g,
    xt = /^\[object .+?Constructor\]$/,
    jt = /^(?:0|[1-9]\d*)$/,
    le = {}
  ;(le[I] =
    le[B] =
    le[ee] =
    le[ie] =
    le[te] =
    le[ce] =
    le[ye] =
    le[he] =
    le[Ne] =
      !0),
    (le[a] =
      le[l] =
      le[U] =
      le[u] =
      le[E] =
      le[f] =
      le[h] =
      le[d] =
      le[m] =
      le[b] =
      le[w] =
      le[P] =
      le[C] =
      le[A] =
      le[L] =
        !1)
  var ni = typeof Yn == 'object' && Yn && Yn.Object === Object && Yn,
    gr = typeof self == 'object' && self && self.Object === Object && self,
    wt = ni || gr || Function('return this')(),
    Qi = e && !e.nodeType && e,
    mr = Qi && !0 && n && !n.nodeType && n,
    Xs = mr && mr.exports === Qi,
    ki = Xs && ni.process,
    Ys = (function () {
      try {
        return ki && ki.binding && ki.binding('util')
      } catch {}
    })(),
    yr = Ys && Ys.isTypedArray
  function Is(y, S) {
    for (var R = -1, W = y == null ? 0 : y.length, ve = 0, re = []; ++R < W; ) {
      var ke = y[R]
      S(ke, R, y) && (re[ve++] = ke)
    }
    return re
  }
  function vh(y, S) {
    for (var R = -1, W = S.length, ve = y.length; ++R < W; ) y[ve + R] = S[R]
    return y
  }
  function Sh(y, S) {
    for (var R = -1, W = y == null ? 0 : y.length; ++R < W; )
      if (S(y[R], R, y)) return !0
    return !1
  }
  function xh(y, S) {
    for (var R = -1, W = Array(y); ++R < y; ) W[R] = S(R)
    return W
  }
  function v(y) {
    return function (S) {
      return y(S)
    }
  }
  function k(y, S) {
    return y.has(S)
  }
  function Z(y, S) {
    return y == null ? void 0 : y[S]
  }
  function F(y) {
    var S = -1,
      R = Array(y.size)
    return (
      y.forEach(function (W, ve) {
        R[++S] = [ve, W]
      }),
      R
    )
  }
  function N(y, S) {
    return function (R) {
      return y(S(R))
    }
  }
  function D(y) {
    var S = -1,
      R = Array(y.size)
    return (
      y.forEach(function (W) {
        R[++S] = W
      }),
      R
    )
  }
  var J = Array.prototype,
    de = Function.prototype,
    be = Object.prototype,
    kn = wt['__core-js_shared__'],
    dn = de.toString,
    $t = be.hasOwnProperty,
    Ti = (function () {
      var y = /[^.]+$/.exec((kn && kn.keys && kn.keys.IE_PROTO) || '')
      return y ? 'Symbol(src)_1.' + y : ''
    })(),
    Ci = be.toString,
    Xl = RegExp(
      '^' +
        dn
          .call($t)
          .replace(it, '\\$&')
          .replace(
            /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
            '$1.*?'
          ) +
        '$'
    ),
    br = Xs ? wt.Buffer : void 0,
    _i = wt.Symbol,
    vr = wt.Uint8Array,
    wh = be.propertyIsEnumerable,
    NS = J.splice,
    ii = _i ? _i.toStringTag : void 0,
    $h = Object.getOwnPropertySymbols,
    MS = br ? br.isBuffer : void 0,
    VS = N(Object.keys, Object),
    Yl = Zi(wt, 'DataView'),
    Sr = Zi(wt, 'Map'),
    Il = Zi(wt, 'Promise'),
    Nl = Zi(wt, 'Set'),
    Ml = Zi(wt, 'WeakMap'),
    xr = Zi(Object, 'create'),
    WS = oi(Yl),
    jS = oi(Sr),
    BS = oi(Il),
    LS = oi(Nl),
    US = oi(Ml),
    Ph = _i ? _i.prototype : void 0,
    Vl = Ph ? Ph.valueOf : void 0
  function ri(y) {
    var S = -1,
      R = y == null ? 0 : y.length
    for (this.clear(); ++S < R; ) {
      var W = y[S]
      this.set(W[0], W[1])
    }
  }
  function qS() {
    ;(this.__data__ = xr ? xr(null) : {}), (this.size = 0)
  }
  function zS(y) {
    var S = this.has(y) && delete this.__data__[y]
    return (this.size -= S ? 1 : 0), S
  }
  function FS(y) {
    var S = this.__data__
    if (xr) {
      var R = S[y]
      return R === i ? void 0 : R
    }
    return $t.call(S, y) ? S[y] : void 0
  }
  function GS(y) {
    var S = this.__data__
    return xr ? S[y] !== void 0 : $t.call(S, y)
  }
  function HS(y, S) {
    var R = this.__data__
    return (
      (this.size += this.has(y) ? 0 : 1),
      (R[y] = xr && S === void 0 ? i : S),
      this
    )
  }
  ;(ri.prototype.clear = qS),
    (ri.prototype.delete = zS),
    (ri.prototype.get = FS),
    (ri.prototype.has = GS),
    (ri.prototype.set = HS)
  function pn(y) {
    var S = -1,
      R = y == null ? 0 : y.length
    for (this.clear(); ++S < R; ) {
      var W = y[S]
      this.set(W[0], W[1])
    }
  }
  function KS() {
    ;(this.__data__ = []), (this.size = 0)
  }
  function JS(y) {
    var S = this.__data__,
      R = Ms(S, y)
    if (R < 0) return !1
    var W = S.length - 1
    return R == W ? S.pop() : NS.call(S, R, 1), --this.size, !0
  }
  function e0(y) {
    var S = this.__data__,
      R = Ms(S, y)
    return R < 0 ? void 0 : S[R][1]
  }
  function t0(y) {
    return Ms(this.__data__, y) > -1
  }
  function n0(y, S) {
    var R = this.__data__,
      W = Ms(R, y)
    return W < 0 ? (++this.size, R.push([y, S])) : (R[W][1] = S), this
  }
  ;(pn.prototype.clear = KS),
    (pn.prototype.delete = JS),
    (pn.prototype.get = e0),
    (pn.prototype.has = t0),
    (pn.prototype.set = n0)
  function si(y) {
    var S = -1,
      R = y == null ? 0 : y.length
    for (this.clear(); ++S < R; ) {
      var W = y[S]
      this.set(W[0], W[1])
    }
  }
  function i0() {
    ;(this.size = 0),
      (this.__data__ = {
        hash: new ri(),
        map: new (Sr || pn)(),
        string: new ri()
      })
  }
  function r0(y) {
    var S = Vs(this, y).delete(y)
    return (this.size -= S ? 1 : 0), S
  }
  function s0(y) {
    return Vs(this, y).get(y)
  }
  function o0(y) {
    return Vs(this, y).has(y)
  }
  function a0(y, S) {
    var R = Vs(this, y),
      W = R.size
    return R.set(y, S), (this.size += R.size == W ? 0 : 1), this
  }
  ;(si.prototype.clear = i0),
    (si.prototype.delete = r0),
    (si.prototype.get = s0),
    (si.prototype.has = o0),
    (si.prototype.set = a0)
  function Ns(y) {
    var S = -1,
      R = y == null ? 0 : y.length
    for (this.__data__ = new si(); ++S < R; ) this.add(y[S])
  }
  function l0(y) {
    return this.__data__.set(y, i), this
  }
  function c0(y) {
    return this.__data__.has(y)
  }
  ;(Ns.prototype.add = Ns.prototype.push = l0), (Ns.prototype.has = c0)
  function Tn(y) {
    var S = (this.__data__ = new pn(y))
    this.size = S.size
  }
  function u0() {
    ;(this.__data__ = new pn()), (this.size = 0)
  }
  function f0(y) {
    var S = this.__data__,
      R = S.delete(y)
    return (this.size = S.size), R
  }
  function h0(y) {
    return this.__data__.get(y)
  }
  function d0(y) {
    return this.__data__.has(y)
  }
  function p0(y, S) {
    var R = this.__data__
    if (R instanceof pn) {
      var W = R.__data__
      if (!Sr || W.length < t - 1)
        return W.push([y, S]), (this.size = ++R.size), this
      R = this.__data__ = new si(W)
    }
    return R.set(y, S), (this.size = R.size), this
  }
  ;(Tn.prototype.clear = u0),
    (Tn.prototype.delete = f0),
    (Tn.prototype.get = h0),
    (Tn.prototype.has = d0),
    (Tn.prototype.set = p0)
  function O0(y, S) {
    var R = Ws(y),
      W = !R && _0(y),
      ve = !R && !W && Wl(y),
      re = !R && !W && !ve && Eh(y),
      ke = R || W || ve || re,
      Me = ke ? xh(y.length, String) : [],
      je = Me.length
    for (var $e in y)
      (S || $t.call(y, $e)) &&
        !(
          ke && // Safari 9 has enumerable `arguments.length` in strict mode.
          ($e == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
            (ve && ($e == 'offset' || $e == 'parent')) || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            (re &&
              ($e == 'buffer' || $e == 'byteLength' || $e == 'byteOffset')) || // Skip index properties.
            P0($e, je))
        ) &&
        Me.push($e)
    return Me
  }
  function Ms(y, S) {
    for (var R = y.length; R--; ) if (_h(y[R][0], S)) return R
    return -1
  }
  function g0(y, S, R) {
    var W = S(y)
    return Ws(y) ? W : vh(W, R(y))
  }
  function wr(y) {
    return y == null
      ? y === void 0
        ? X
        : x
      : ii && ii in Object(y)
        ? w0(y)
        : C0(y)
  }
  function Qh(y) {
    return $r(y) && wr(y) == a
  }
  function kh(y, S, R, W, ve) {
    return y === S
      ? !0
      : y == null || S == null || (!$r(y) && !$r(S))
        ? y !== y && S !== S
        : m0(y, S, R, W, kh, ve)
  }
  function m0(y, S, R, W, ve, re) {
    var ke = Ws(y),
      Me = Ws(S),
      je = ke ? l : Cn(y),
      $e = Me ? l : Cn(S)
    ;(je = je == a ? w : je), ($e = $e == a ? w : $e)
    var dt = je == w,
      Xt = $e == w,
      Ge = je == $e
    if (Ge && Wl(y)) {
      if (!Wl(S)) return !1
      ;(ke = !0), (dt = !1)
    }
    if (Ge && !dt)
      return (
        re || (re = new Tn()),
        ke || Eh(y) ? Th(y, S, R, W, ve, re) : S0(y, S, je, R, W, ve, re)
      )
    if (!(R & r)) {
      var Pt = dt && $t.call(y, '__wrapped__'),
        Qt = Xt && $t.call(S, '__wrapped__')
      if (Pt || Qt) {
        var _n = Pt ? y.value() : y,
          On = Qt ? S.value() : S
        return re || (re = new Tn()), ve(_n, On, R, W, re)
      }
    }
    return Ge ? (re || (re = new Tn()), x0(y, S, R, W, ve, re)) : !1
  }
  function y0(y) {
    if (!Rh(y) || k0(y)) return !1
    var S = Zh(y) ? Xl : xt
    return S.test(oi(y))
  }
  function b0(y) {
    return $r(y) && Ah(y.length) && !!le[wr(y)]
  }
  function v0(y) {
    if (!T0(y)) return VS(y)
    var S = []
    for (var R in Object(y)) $t.call(y, R) && R != 'constructor' && S.push(R)
    return S
  }
  function Th(y, S, R, W, ve, re) {
    var ke = R & r,
      Me = y.length,
      je = S.length
    if (Me != je && !(ke && je > Me)) return !1
    var $e = re.get(y)
    if ($e && re.get(S)) return $e == S
    var dt = -1,
      Xt = !0,
      Ge = R & s ? new Ns() : void 0
    for (re.set(y, S), re.set(S, y); ++dt < Me; ) {
      var Pt = y[dt],
        Qt = S[dt]
      if (W) var _n = ke ? W(Qt, Pt, dt, S, y, re) : W(Pt, Qt, dt, y, S, re)
      if (_n !== void 0) {
        if (_n) continue
        Xt = !1
        break
      }
      if (Ge) {
        if (
          !Sh(S, function (On, ai) {
            if (!k(Ge, ai) && (Pt === On || ve(Pt, On, R, W, re)))
              return Ge.push(ai)
          })
        ) {
          Xt = !1
          break
        }
      } else if (!(Pt === Qt || ve(Pt, Qt, R, W, re))) {
        Xt = !1
        break
      }
    }
    return re.delete(y), re.delete(S), Xt
  }
  function S0(y, S, R, W, ve, re, ke) {
    switch (R) {
      case E:
        if (y.byteLength != S.byteLength || y.byteOffset != S.byteOffset)
          return !1
        ;(y = y.buffer), (S = S.buffer)
      case U:
        return !(y.byteLength != S.byteLength || !re(new vr(y), new vr(S)))
      case u:
      case f:
      case b:
        return _h(+y, +S)
      case h:
        return y.name == S.name && y.message == S.message
      case P:
      case A:
        return y == S + ''
      case m:
        var Me = F
      case C:
        var je = W & r
        if ((Me || (Me = D), y.size != S.size && !je)) return !1
        var $e = ke.get(y)
        if ($e) return $e == S
        ;(W |= s), ke.set(y, S)
        var dt = Th(Me(y), Me(S), W, ve, re, ke)
        return ke.delete(y), dt
      case j:
        if (Vl) return Vl.call(y) == Vl.call(S)
    }
    return !1
  }
  function x0(y, S, R, W, ve, re) {
    var ke = R & r,
      Me = Ch(y),
      je = Me.length,
      $e = Ch(S),
      dt = $e.length
    if (je != dt && !ke) return !1
    for (var Xt = je; Xt--; ) {
      var Ge = Me[Xt]
      if (!(ke ? Ge in S : $t.call(S, Ge))) return !1
    }
    var Pt = re.get(y)
    if (Pt && re.get(S)) return Pt == S
    var Qt = !0
    re.set(y, S), re.set(S, y)
    for (var _n = ke; ++Xt < je; ) {
      Ge = Me[Xt]
      var On = y[Ge],
        ai = S[Ge]
      if (W) var Dh = ke ? W(ai, On, Ge, S, y, re) : W(On, ai, Ge, y, S, re)
      if (!(Dh === void 0 ? On === ai || ve(On, ai, R, W, re) : Dh)) {
        Qt = !1
        break
      }
      _n || (_n = Ge == 'constructor')
    }
    if (Qt && !_n) {
      var js = y.constructor,
        Bs = S.constructor
      js != Bs &&
        'constructor' in y &&
        'constructor' in S &&
        !(
          typeof js == 'function' &&
          js instanceof js &&
          typeof Bs == 'function' &&
          Bs instanceof Bs
        ) &&
        (Qt = !1)
    }
    return re.delete(y), re.delete(S), Qt
  }
  function Ch(y) {
    return g0(y, R0, $0)
  }
  function Vs(y, S) {
    var R = y.__data__
    return Q0(S) ? R[typeof S == 'string' ? 'string' : 'hash'] : R.map
  }
  function Zi(y, S) {
    var R = Z(y, S)
    return y0(R) ? R : void 0
  }
  function w0(y) {
    var S = $t.call(y, ii),
      R = y[ii]
    try {
      y[ii] = void 0
      var W = !0
    } catch {}
    var ve = Ci.call(y)
    return W && (S ? (y[ii] = R) : delete y[ii]), ve
  }
  var $0 = $h
      ? function (y) {
          return y == null
            ? []
            : ((y = Object(y)),
              Is($h(y), function (S) {
                return wh.call(y, S)
              }))
        }
      : E0,
    Cn = wr
  ;((Yl && Cn(new Yl(new ArrayBuffer(1))) != E) ||
    (Sr && Cn(new Sr()) != m) ||
    (Il && Cn(Il.resolve()) != T) ||
    (Nl && Cn(new Nl()) != C) ||
    (Ml && Cn(new Ml()) != L)) &&
    (Cn = function (y) {
      var S = wr(y),
        R = S == w ? y.constructor : void 0,
        W = R ? oi(R) : ''
      if (W)
        switch (W) {
          case WS:
            return E
          case jS:
            return m
          case BS:
            return T
          case LS:
            return C
          case US:
            return L
        }
      return S
    })
  function P0(y, S) {
    return (
      (S = S ?? o),
      !!S &&
        (typeof y == 'number' || jt.test(y)) &&
        y > -1 &&
        y % 1 == 0 &&
        y < S
    )
  }
  function Q0(y) {
    var S = typeof y
    return S == 'string' || S == 'number' || S == 'symbol' || S == 'boolean'
      ? y !== '__proto__'
      : y === null
  }
  function k0(y) {
    return !!Ti && Ti in y
  }
  function T0(y) {
    var S = y && y.constructor,
      R = (typeof S == 'function' && S.prototype) || be
    return y === R
  }
  function C0(y) {
    return Ci.call(y)
  }
  function oi(y) {
    if (y != null) {
      try {
        return dn.call(y)
      } catch {}
      try {
        return y + ''
      } catch {}
    }
    return ''
  }
  function _h(y, S) {
    return y === S || (y !== y && S !== S)
  }
  var _0 = Qh(
      (function () {
        return arguments
      })()
    )
      ? Qh
      : function (y) {
          return $r(y) && $t.call(y, 'callee') && !wh.call(y, 'callee')
        },
    Ws = Array.isArray
  function Z0(y) {
    return y != null && Ah(y.length) && !Zh(y)
  }
  var Wl = MS || D0
  function A0(y, S) {
    return kh(y, S)
  }
  function Zh(y) {
    if (!Rh(y)) return !1
    var S = wr(y)
    return S == d || S == O || S == c || S == Q
  }
  function Ah(y) {
    return typeof y == 'number' && y > -1 && y % 1 == 0 && y <= o
  }
  function Rh(y) {
    var S = typeof y
    return y != null && (S == 'object' || S == 'function')
  }
  function $r(y) {
    return y != null && typeof y == 'object'
  }
  var Eh = yr ? v(yr) : b0
  function R0(y) {
    return Z0(y) ? O0(y) : v0(y)
  }
  function E0() {
    return []
  }
  function D0() {
    return !1
  }
  n.exports = A0
})(ha, ha.exports)
var p$ = ha.exports
const O$ = /* @__PURE__ */ Qn(p$)
p.string
var g$ = /* @__PURE__ */ $.createContext({})
function ko(n) {
  '@babel/helpers - typeof'
  return (
    typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol'
      ? (ko = function (t) {
          return typeof t
        })
      : (ko = function (t) {
          return t &&
            typeof Symbol == 'function' &&
            t.constructor === Symbol &&
            t !== Symbol.prototype
            ? 'symbol'
            : typeof t
        }),
    ko(n)
  )
}
function m$(n, e) {
  return S$(n) || v$(n, e) || b$(n, e) || y$()
}
function y$() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)
}
function b$(n, e) {
  if (n) {
    if (typeof n == 'string') return Od(n, e)
    var t = Object.prototype.toString.call(n).slice(8, -1)
    if (
      (t === 'Object' && n.constructor && (t = n.constructor.name),
      t === 'Map' || t === 'Set')
    )
      return Array.from(n)
    if (t === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))
      return Od(n, e)
  }
}
function Od(n, e) {
  ;(e == null || e > n.length) && (e = n.length)
  for (var t = 0, i = new Array(e); t < e; t++) i[t] = n[t]
  return i
}
function v$(n, e) {
  var t = n && ((typeof Symbol < 'u' && n[Symbol.iterator]) || n['@@iterator'])
  if (t != null) {
    var i = [],
      r = !0,
      s = !1,
      o,
      a
    try {
      for (
        t = t.call(n);
        !(r = (o = t.next()).done) && (i.push(o.value), !(e && i.length === e));
        r = !0
      );
    } catch (l) {
      ;(s = !0), (a = l)
    } finally {
      try {
        !r && t.return != null && t.return()
      } finally {
        if (s) throw a
      }
    }
    return i
  }
}
function S$(n) {
  if (Array.isArray(n)) return n
}
function x$(n, e) {
  if (!(n instanceof e))
    throw new TypeError('Cannot call a class as a function')
}
function gd(n, e) {
  for (var t = 0; t < e.length; t++) {
    var i = e[t]
    ;(i.enumerable = i.enumerable || !1),
      (i.configurable = !0),
      'value' in i && (i.writable = !0),
      Object.defineProperty(n, i.key, i)
  }
}
function w$(n, e, t) {
  return e && gd(n.prototype, e), t && gd(n, t), n
}
function $$(n, e) {
  if (typeof e != 'function' && e !== null)
    throw new TypeError('Super expression must either be null or a function')
  ;(n.prototype = Object.create(e && e.prototype, {
    constructor: { value: n, writable: !0, configurable: !0 }
  })),
    e && Gc(n, e)
}
function Gc(n, e) {
  return (
    (Gc =
      Object.setPrototypeOf ||
      function (i, r) {
        return (i.__proto__ = r), i
      }),
    Gc(n, e)
  )
}
function P$(n) {
  var e = T$()
  return function () {
    var i = da(n),
      r
    if (e) {
      var s = da(this).constructor
      r = Reflect.construct(i, arguments, s)
    } else r = i.apply(this, arguments)
    return Q$(this, r)
  }
}
function Q$(n, e) {
  return e && (ko(e) === 'object' || typeof e == 'function') ? e : k$(n)
}
function k$(n) {
  if (n === void 0)
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    )
  return n
}
function T$() {
  if (typeof Reflect > 'u' || !Reflect.construct || Reflect.construct.sham)
    return !1
  if (typeof Proxy == 'function') return !0
  try {
    return (
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      ),
      !0
    )
  } catch {
    return !1
  }
}
function da(n) {
  return (
    (da = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function (t) {
          return t.__proto__ || Object.getPrototypeOf(t)
        }),
    da(n)
  )
}
var Hl = typeof document < 'u',
  ws = /* @__PURE__ */ (function (n) {
    $$(t, n)
    var e = P$(t)
    function t(i) {
      var r
      return (
        x$(this, t),
        (r = e.call(this, i)),
        (r.portalNode = null),
        (r.state = {
          isOpen: !1
        }),
        r
      )
    }
    return (
      w$(t, [
        {
          key: 'componentDidMount',
          value: function () {
            this.renderPortal()
          }
        },
        {
          key: 'componentDidUpdate',
          value: function () {
            this.renderPortal()
          }
        },
        {
          key: 'componentWillUnmount',
          value: function () {
            this.unmountPortal()
          }
        },
        {
          key: 'getChildren',
          value: function () {
            return Te.Children.only(this.props.children)
          }
        },
        {
          key: 'getPortalParentNode',
          value: function () {
            var r
            if (typeof this.props.renderTo == 'string')
              r = document.querySelector(this.props.renderTo)
            else if (
              this.context &&
              typeof this.context.renderTo == 'string' &&
              document.querySelectorAll(this.context.renderTo) &&
              document.querySelectorAll(this.context.renderTo)[0]
            ) {
              var s = document.querySelectorAll(this.context.renderTo),
                o = m$(s, 1)
              r = o[0]
            } else r = this.props.renderTo || (Hl && document.body)
            return r
          }
        },
        {
          key: 'setupPortalNode',
          value: function () {
            var r = this.getPortalParentNode()
            ;(this.portalNode = {}),
              Hl &&
                ((this.portalNode = document.createElement(
                  this.props.renderTag
                )),
                this.portalNode.setAttribute(
                  'style',
                  'display: block; height: 0px; width: 0px;'
                ),
                this.portalNode.setAttribute(
                  'className',
                  'design-system-react-portal'
                ),
                r.appendChild(this.portalNode),
                (this.portalNodeInstance = this.props.onMount
                  ? this.props.onMount(void 0, {
                      portal: this.portalNode
                    })
                  : this.portalNode))
          }
        },
        {
          key: 'unmountPortal',
          value: function () {
            this.portalNode &&
              (Xh.unmountComponentAtNode(this.portalNode),
              this.portalNode.parentNode.removeChild(this.portalNode)),
              (this.portalNode = null)
          }
        },
        {
          key: 'updatePortal',
          value: function () {
            var r = this
            this.props.id && (this.portalNode.id = this.props.id),
              this.props.className &&
                (this.portalNode.className = this.props.className),
              this.props.style &&
                Object.keys(this.props.style).forEach(function (s) {
                  r.portalNode.style[s] = r.props.style[s]
                }),
              this.props.onUpdate &&
                (this.portalNodeInstance = this.props.onUpdate(
                  this.portalNodeInstance
                ))
          }
        },
        {
          key: 'renderPortal',
          value: function () {
            var r = this
            if (!this.getChildren() || !Hl) {
              this.unmountPortal()
              return
            }
            this.portalNode || this.setupPortalNode(),
              this.props.portalMount
                ? this.props.portalMount({
                    instance: this,
                    reactElement: this.getChildren(),
                    domContainerNode: this.portalNode,
                    updateCallback: function () {
                      r.updatePortal()
                    }
                  })
                : Xh.unstable_renderSubtreeIntoContainer(
                    this,
                    this.getChildren(),
                    this.portalNode,
                    function () {
                      r.updatePortal(),
                        r.state.isOpen === !1 &&
                          (r.props.onOpen &&
                            r.props.onOpen(void 0, {
                              portal: r.getChildren()
                            }),
                          r.setState({
                            isOpen: !0
                          }))
                    }
                  )
          }
        },
        {
          key: 'render',
          value: function () {
            return null
          }
        }
      ]),
      t
    )
  })(Te.Component)
ws.displayName = 'Portal'
ws.propTypes = {
  /*
   * What tag to use for the portal, defaults to `div`.
   */
  renderTag: p.string,
  /*
   * What node the portal is rendered to, defaults to `document.body`.
   */
  renderTo: p.any,
  /*
   * React id prop.
   */
  id: p.string,
  /*
   * Accepts a _single_ element or component.
   */
  children: p.node,
  /*
   * ClassName added to .
   */
  className: p.any,
  /*
   * An object of styles that are applied to the portal.
   */
  style: p.object,
  /*
   * Triggers when Portal render tree mounts. Pass in an undefined event and `{ portal: [node] }``
   */
  onMount: p.func,
  /*
   * Triggers when the portal is mounted.
   */
  onOpen: p.func,
  /*
   * Triggers when Portal re-renders its tree.
   */
  onUpdate: p.func,
  /**
   * If a dialog is `positione="overflowBoundaryElement"`, it will be rendered in a portal or separate render tree. This `portalMount` callback will be triggered instead of the the default `ReactDOM.unstable_renderSubtreeIntoContainer` and the function will mount the portal itself. Consider the following code that bypasses the internal mount and uses an Enzyme wrapper to mount the React root tree to the DOM.
   *
   * ```
   * <Popover
   *   isOpen
   *   portalMount={({ instance, reactElement, domContainerNode }) => {
   *     portalWrapper = Enzyme.mount(reactElement, { attachTo: domContainerNode });
   *   }}
   *   onOpen={() => {
   *     expect(portalWrapper.find(`#my-heading`)).to.exist;
   *     done();
   *   }}
   * />
   * ```
   */
  portalMount: p.func
}
ws.defaultProps = {
  renderTag: 'span',
  renderTo: null,
  onMount: function () {
    return null
  },
  onOpen: function () {
    return null
  },
  onUpdate: function () {
    return null
  },
  onUnmount: function () {
    return null
  }
}
ws.contextType = g$
const C$ = ws
/*!
 * Adapted from jQuery UI core
 *
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */
function _$(n, e) {
  var t = n.nodeName.toLowerCase()
  return /input|select|textarea|button|object/.test(t)
    ? !n.disabled
    : (t === 'a' && n.href) || e
}
function Z$(n) {
  var e = n.getAttribute('tabindex')
  e === null && (e = void 0)
  var t = isNaN(e)
  return (t || e >= 0) && _$(n, !t)
}
function A$(n) {
  return [].slice.call(n.querySelectorAll('*'), 0).filter(function (e) {
    return Z$(e)
  })
}
var Ei = !!(
    typeof window < 'u' &&
    window.document &&
    window.document.createElement
  ),
  yn = null,
  zs = null,
  md = function (e) {
    if (!(!Ei || !yn || e.keyCode !== Ii.TAB)) {
      var t = A$(yn),
        i = t[e.shiftKey ? 0 : t.length - 1],
        r =
          i === document.activeElement || // handle immediate shift+tab after opening with mouse
          yn === document.activeElement
      if (r) {
        e.preventDefault()
        var s = t[e.shiftKey ? t.length - 1 : 0]
        s.focus()
      }
    }
  },
  R$ = {
    focusAncestor: function (e) {
      var t = e.isPortal
      if (Ei)
        if (t) {
          var i = window.pageYOffset
          yn.focus({
            preventScroll: !0
          }),
            window.scrollTo(window.pageXOffset, i)
        } else yn.focus()
    },
    hasOrAncestorHasFocus: function () {
      return (
        Ei &&
        (document.activeElement === yn || yn.contains(document.activeElement))
      )
    },
    returnFocusToStoredElement: function () {
      if (Ei) {
        try {
          zs.focus()
        } catch {
          console.warn(
            'You tried to return focus to '.concat(
              zs,
              ' but it is not in the DOM anymore'
            )
          )
        }
        zs = null
      }
    },
    setupScopedFocus: function (e) {
      var t = e.ancestorElement
      ;(yn = t), window.addEventListener('keydown', md, !1)
    },
    storeActiveElement: function () {
      zs = Ei ? document.activeElement : null
    },
    teardownScopedFocus: function () {
      ;(yn = null), Ei && window.removeEventListener('keydown', md)
    }
  }
const Gt = R$
var E$ = function (e, t) {
    var i
    switch (e) {
      case 'top left':
        i = 'top-start'
        break
      case 'top right':
        i = 'top-end'
        break
      case 'right top':
        i = 'right-start'
        break
      case 'right bottom':
        i = 'right-end'
        break
      case 'bottom left':
        i = 'bottom-start'
        break
      case 'bottom right':
        i = 'bottom-end'
        break
      case 'left top':
        i = 'left-start'
        break
      case 'left bottom':
        i = 'left-end'
        break
      default:
        i = e
    }
    return (
      t === Un.RTL &&
        (i.indexOf('left') > -1
          ? (i = i.replace('left', 'right'))
          : i.indexOf('right') > -1
            ? (i = i.replace('right', 'left'))
            : i.indexOf('start') > -1
              ? (i = i.replace('start', 'end'))
              : i.indexOf('end') > -1 && (i = i.replace('end', 'start'))),
      i
    )
  },
  D$ = function (e) {
    var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}
    return t.flipped
      ? ae({
          'slds-nubbin_top': e === 'top',
          'slds-nubbin_top-left': e === 'top left',
          'slds-nubbin_top-right': e === 'top right',
          'slds-nubbin_bottom': e === 'bottom',
          'slds-nubbin_bottom-left': e === 'bottom left',
          'slds-nubbin_bottom-right': e === 'bottom right',
          'slds-nubbin_left': e === 'left',
          'slds-nubbin_left-bottom': e === 'left bottom',
          'slds-nubbin_left-top': e === 'left top',
          'slds-nubbin_right': e === 'right',
          'slds-nubbin_right-bottom': e === 'right bottom',
          'slds-nubbin_right-top': e === 'right top'
        })
      : ae({
          'slds-nubbin_top': e === 'bottom',
          'slds-nubbin_top-left': e === 'bottom left',
          'slds-nubbin_top-right': e === 'bottom right',
          'slds-nubbin_bottom': e === 'top',
          'slds-nubbin_bottom-left': e === 'top left',
          'slds-nubbin_bottom-right': e === 'top right',
          'slds-nubbin_left': e === 'right',
          'slds-nubbin_left-bottom': e === 'right bottom',
          'slds-nubbin_left-top': e === 'right top',
          'slds-nubbin_right': e === 'left',
          'slds-nubbin_right-bottom': e === 'left bottom',
          'slds-nubbin_right-top': e === 'left top'
        })
  },
  X$ = 1.5,
  Y$ = 1,
  I$ = Y$ / Math.sqrt(2),
  N$ = function () {
    var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {},
      t = e.placement,
      i = 0,
      r = 0,
      s = 16 * X$,
      o = 16 * I$,
      a = e.offsets.reference.width * 0.5,
      l = e.offsets.reference.height * 0.5
    return (
      t === 'top'
        ? (i = o * -1)
        : t === 'top-end'
          ? ((i = o * -1), (r = s - a))
          : t === 'top-start' && ((i = o * -1), (r = a - s)),
      t === 'bottom'
        ? (i = o)
        : t === 'bottom-end'
          ? ((i = o), (r = s - a))
          : t === 'bottom-start' && ((i = o), (r = a - s)),
      t === 'right'
        ? (r = o)
        : t === 'right-end'
          ? ((r = o), (i = s - l))
          : t === 'right-start' && ((r = o), (i = l - s)),
      t === 'left'
        ? (r = o * -1)
        : t === 'left-end'
          ? ((r = o * -1), (i = s - l))
          : t === 'left-start' && ((r = o * -1), (i = l - s)),
      {
        left: r,
        top: i
      }
    )
  }
function To(n) {
  '@babel/helpers - typeof'
  return (
    typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol'
      ? (To = function (t) {
          return typeof t
        })
      : (To = function (t) {
          return t &&
            typeof Symbol == 'function' &&
            t.constructor === Symbol &&
            t !== Symbol.prototype
            ? 'symbol'
            : typeof t
        }),
    To(n)
  )
}
function yd(n, e) {
  var t = Object.keys(n)
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(n)
    e &&
      (i = i.filter(function (r) {
        return Object.getOwnPropertyDescriptor(n, r).enumerable
      })),
      t.push.apply(t, i)
  }
  return t
}
function mn(n) {
  for (var e = 1; e < arguments.length; e++) {
    var t = arguments[e] != null ? arguments[e] : {}
    e % 2
      ? yd(Object(t), !0).forEach(function (i) {
          Le(n, i, t[i])
        })
      : Object.getOwnPropertyDescriptors
        ? Object.defineProperties(n, Object.getOwnPropertyDescriptors(t))
        : yd(Object(t)).forEach(function (i) {
            Object.defineProperty(n, i, Object.getOwnPropertyDescriptor(t, i))
          })
  }
  return n
}
function M$(n, e) {
  if (!(n instanceof e))
    throw new TypeError('Cannot call a class as a function')
}
function bd(n, e) {
  for (var t = 0; t < e.length; t++) {
    var i = e[t]
    ;(i.enumerable = i.enumerable || !1),
      (i.configurable = !0),
      'value' in i && (i.writable = !0),
      Object.defineProperty(n, i.key, i)
  }
}
function V$(n, e, t) {
  return e && bd(n.prototype, e), t && bd(n, t), n
}
function W$(n, e) {
  if (typeof e != 'function' && e !== null)
    throw new TypeError('Super expression must either be null or a function')
  ;(n.prototype = Object.create(e && e.prototype, {
    constructor: { value: n, writable: !0, configurable: !0 }
  })),
    e && Hc(n, e)
}
function Hc(n, e) {
  return (
    (Hc =
      Object.setPrototypeOf ||
      function (i, r) {
        return (i.__proto__ = r), i
      }),
    Hc(n, e)
  )
}
function j$(n) {
  var e = L$()
  return function () {
    var i = pa(n),
      r
    if (e) {
      var s = pa(this).constructor
      r = Reflect.construct(i, arguments, s)
    } else r = i.apply(this, arguments)
    return B$(this, r)
  }
}
function B$(n, e) {
  return e && (To(e) === 'object' || typeof e == 'function') ? e : kt(n)
}
function kt(n) {
  if (n === void 0)
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    )
  return n
}
function L$() {
  if (typeof Reflect > 'u' || !Reflect.construct || Reflect.construct.sham)
    return !1
  if (typeof Proxy == 'function') return !0
  try {
    return (
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      ),
      !0
    )
  } catch {
    return !1
  }
}
function pa(n) {
  return (
    (pa = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function (t) {
          return t.__proto__ || Object.getPrototypeOf(t)
        }),
    pa(n)
  )
}
function Le(n, e, t) {
  return (
    e in n
      ? Object.defineProperty(n, e, {
          value: t,
          enumerable: !0,
          configurable: !0,
          writable: !0
        })
      : (n[e] = t),
    n
  )
}
var $s = /* @__PURE__ */ (function (n) {
  W$(t, n)
  var e = j$(t)
  function t() {
    var i
    M$(this, t)
    for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)
      s[o] = arguments[o]
    return (
      (i = e.call.apply(e, [this].concat(s))),
      Le(kt(i), 'state', {
        triggerPopperJS: !1,
        isOpen: !1
      }),
      Le(kt(i), 'getPropOffsetsInPixels', function (a) {
        var l = a.split(' ')
        return {
          vertical: parseInt(l[0], 10),
          horizontal: parseInt(l[1], 10)
        }
      }),
      Le(kt(i), 'getPopperStyles', function () {
        var a = i.state.popperData
        if (!i.popper || !a)
          return {
            position: 'absolute',
            pointerEvents: 'none'
          }
        var l = a.offsets.popper.position,
          c = i.getPropOffsetsInPixels(i.props.offset),
          u = i.props.hasNubbin
            ? N$(i.state.popperData)
            : {
                left: 0,
                top: 0
              },
          f = a.offsets.popper.left + u.left + c.horizontal,
          h = a.offsets.popper.top + u.top + c.vertical,
          d = 'inherit'
        return mn(
          mn({}, a.style),
          {},
          {
            left: isNaN(f) ? 0 : f,
            top: isNaN(h) ? 0 : h,
            right: d,
            position: l
          }
        )
      }),
      Le(kt(i), 'setDialogContent', function (a) {
        ;(i.dialogContent = a),
          i.state.triggerPopperJS ||
            i.setState({
              triggerPopperJS: !0
            })
      }),
      Le(kt(i), 'handleClickOutside', function () {
        i.handleClose()
      }),
      Le(kt(i), 'handleClose', function (a) {
        var l =
          arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}
        l.componentWillUnmount ||
          i.setState({
            triggerPopperJS: !0
          }),
          i.props.onClose && i.props.onClose(a, l)
      }),
      Le(kt(i), 'handleClick', function (a) {
        a.nativeEvent &&
          (a.nativeEvent.preventDefault(), a.nativeEvent.stopPropagation())
      }),
      Le(kt(i), 'handleKeyDown', function (a) {
        a.keyCode === Ii.TAB &&
          i.props.closeOnTabKey &&
          (gs.trap(a), i.handleClose(a)),
          i.props.onKeyDown && i.props.onKeyDown(a)
      }),
      Le(kt(i), 'handleOpen', function () {
        i.props.variant === 'popover' &&
          i.dialogContent &&
          (Gt.storeActiveElement(),
          Gt.setupScopedFocus({
            ancestorElement: i.dialogContent
          }),
          Gt.hasOrAncestorHasFocus() ||
            Gt.focusAncestor({
              isPortal: i.props.position === 'overflowBoundaryElement'
            })),
          i.props.onOpen &&
            i.props.onOpen(void 0, {
              portal: i.dialogContent
            })
      }),
      Le(kt(i), 'createPopper', function () {
        var a = i.props.onRequestTargetElement(),
          l = i.dialogContent,
          c = E$(i.props.align, i.props.direction),
          u = !0,
          f = {
            applyStyle: {
              enabled: !1
            },
            // moves dialog in order to not extend a boundary element such as a scrolling parent or a window/viewpoint.
            preventOverflow: {
              enabled: !i.props.hasStaticAlignment,
              boundariesElement:
                i.props.position === 'absolute' ? 'scrollParent' : 'viewport'
            },
            hide: {
              enabled: !1
            },
            // By default, dialogs will flip their alignment if they extend beyond a boundary element such as a scrolling parent or a window/viewpoint
            flip: {
              enabled: !i.props.hasStaticAlignment
            },
            removeOnDestroy: !0,
            updateState: {
              enabled: !0,
              order: 900,
              fn: function (d) {
                return (
                  ((i.state.popperData &&
                    !O$(d.offsets, i.state.popperData.offsets)) ||
                    !i.state.popperData) &&
                    i.setState({
                      popperData: d
                    }),
                  d
                )
              }
            }
            // arrow property can also point to an element
          }
        a || console.error('Target node not found!', a),
          l || console.error('Popper node not found!', l),
          (i.popper = new d$(a, l, {
            placement: c,
            eventsEnabled: u,
            modifiers: f
          })),
          i.popper.scheduleUpdate()
      }),
      Le(kt(i), 'destroyPopper', function () {
        i.popper && i.popper.destroy()
      }),
      i
    )
  }
  return (
    V$(t, [
      {
        key: 'componentDidMount',
        value: function () {
          ;(this.props.position === 'absolute' ||
            this.props.position === 'relative') &&
            this.handleOpen()
        }
      },
      {
        key: 'componentDidUpdate',
        value: function (r, s) {
          this.popper && this.popper.scheduleUpdate(),
            this.state.triggerPopperJS === !0 &&
              s.triggerPopperJS === !1 &&
              (this.props.position === 'absolute' ||
                this.props.position === 'overflowBoundaryElement') &&
              this.dialogContent &&
              this.props.onRequestTargetElement() &&
              this.createPopper()
        }
      },
      {
        key: 'componentWillUnmount',
        value: function () {
          this.props.variant === 'popover' &&
            (Gt.teardownScopedFocus(), Gt.returnFocusToStoredElement()),
            (this.props.position === 'absolute' ||
              this.props.position === 'overflowBoundaryElement') &&
              this.destroyPopper(),
            this.handleClose(void 0, {
              componentWillUnmount: !0
            })
        }
      },
      {
        key: 'render',
        value: function () {
          var r = this,
            s = {},
            o = this.props.variant === 'popover' ? 'dialog' : this.props.variant
          ;(this.props.position === 'absolute' ||
            this.props.position === 'overflowBoundaryElement') &&
            (s = mn(
              mn({}, s),
              {},
              {
                outline: 0
              },
              this.getPopperStyles()
            )),
            this.props.inheritWidthOf === 'target' &&
            this.props.onRequestTargetElement()
              ? (s.width = this.props
                  .onRequestTargetElement()
                  .getBoundingClientRect().width)
              : this.props.inheritWidthOf === 'menu' &&
                this.dialogContent &&
                this.dialogContent.querySelector('.slds-listbox') &&
                (s.width = this.dialogContent
                  .querySelector('.slds-listbox')
                  .getBoundingClientRect().width),
            (s = mn(mn({}, s), this.props.style))
          var a = this.props.variant === 'popover' ? 'section' : 'div',
            l = /* @__PURE__ */ $.createElement(
              a,
              mn(
                {
                  className:
                    ae(
                      Le(
                        {
                          'absolute-positioned':
                            this.props.position === 'absolute',
                          'portal-positioned':
                            this.props.position === 'overflowBoundaryElement'
                        },
                        ''.concat(this.props.outsideClickIgnoreClass),
                        this.props.position === 'overflowBoundaryElement'
                      ),
                      this.props.hasNubbin &&
                        D$(this.props.align, this.state.popperData),
                      this.props.contentsClassName
                    ) || void 0,
                  style: s,
                  onMouseDown: this.props.onMouseDown,
                  onKeyDown: this.handleKeyDown,
                  onMouseEnter: this.props.onMouseEnter,
                  onMouseLeave: this.props.onMouseLeave,
                  ref: this.setDialogContent,
                  role: o,
                  tabIndex: this.props.variant === 'popover' ? '-1' : void 0
                },
                this.props.containerProps
              ),
              this.props.children
            ),
            c = {
              absolute: function () {
                return l
              },
              relative: function () {
                return l
              },
              overflowBoundaryElement: function () {
                var f = Object.keys(r.context)
                    .filter(function (d) {
                      return !!r.context[d]
                    })
                    .reduce(function (d, O) {
                      return mn(mn({}, d), Le({}, O, r.context[O]))
                    }, {}),
                  h =
                    // eslint-disable-next-line
                    /* @__PURE__ */ $.createElement(
                      Wg.Provider,
                      {
                        value: r.props.direction
                      },
                      /* @__PURE__ */ $.createElement(rl, f, l)
                    )
                return /* @__PURE__ */ $.createElement(
                  C$,
                  {
                    onOpen: r.handleOpen,
                    portalMount: r.props.portalMount
                  },
                  h
                )
              }
            }
          return c[this.props.position] && c[this.props.position]()
        }
      }
    ]),
    t
  )
})($.Component)
Le($s, 'displayName', Zx)
Le($s, 'propTypes', {
  /**
   * Alignment of the dialog with respect to the target (assuming left-to-right language direction). For example,
   * a value of 'left bottom' indicates that the dialog will be rendered below and left-aligned with the target.
   * Note that setting the direction prop to "rtl" will flip the resulting dialog alignment.
   */
  align: p.oneOf([
    'top',
    'top left',
    'top right',
    'right',
    'right top',
    'right bottom',
    'bottom',
    'bottom left',
    'bottom right',
    'left',
    'left top',
    'left bottom'
  ]),
  /**
   * CSS classes to be added to the absolutely positioned element.
   */
  className: p.oneOfType([p.array, p.object, p.string]),
  /**
   * CSS classes to be added to the wrapping `div` of the contents of the dialog.
   */
  contentsClassName: p.oneOfType([p.array, p.object, p.string]),
  /**
   * Contents of dialog
   */
  children: p.node.isRequired,
  /**
   * Closes dialog when tab key is pressed
   */
  closeOnTabKey: p.bool,
  /**
   * Props passed along to wrapping div. This allows one less wrapping `div` to be in the markup. dialog children are expected to be wrapper in a single `div`.
   */
  containerProps: p.object,
  /**
   * Establishes directional context for component. Defaults to left-to-right.
   */
  direction: p.oneOf([Un.LTR, Un.RTL]),
  /**
   * Will show the nubbin pointing from the dialog to the reference element. Positioning and offsets will be handled.
   */
  hasNubbin: p.bool,
  /**
   * By default, dialogs will flip their alignment (such as bottom to top) if they extend beyond a boundary element such as a scrolling parent or a window/viewpoint. `hasStaticAlignment` disables this behavior and allows this component to extend beyond boundary elements.
   */
  hasStaticAlignment: p.bool,
  /**
   * Sets the dialog width to the width of either 'target' (Menus attached to `input` typically follow this UX pattern), 'menu' or 'none.
   */
  inheritWidthOf: p.oneOf(['target', 'menu', 'none']),
  /**
   * DEPRECATED - do not add checkProp deprecation message at this level. It is handled at higher level components.
   * TODO - to be removed.
   * Offset adds pixels to the absolutely positioned dropdown menu in the format: ([vertical]px [horizontal]px). SHOULD BE OBJECT -----------
   */
  offset: p.string,
  /**
   * Called when dialog closes and unmounts.
   */
  onClose: p.func,
  /**
   * Called when a key pressed.
   */
  onKeyDown: p.func,
  /**
   * Called when mouse hovers over the trigger button. This is only called if `this.props.openOn` is set to `hover`.
   */
  onMouseEnter: p.func,
  /**
   * Called when mouse hover leaves the trigger button. This is only called if `this.props.openOn` is set to `hover`.
   */
  onMouseLeave: p.func,
  /**
   * Called when dialog opens (that is mounts). The parameters are `undefined, { portal: this.portal }`.
   */
  onOpen: p.func,
  /**
   * React component to be aligned with. Function should return a DOM `ref` from the parent component.
   */
  onRequestTargetElement: p.func.isRequired,
  /**
   * Triggered when an item in the menu is clicked.
   */
  outsideClickIgnoreClass: p.string,
  /**
   * If a dialog is `positione="overflowBoundaryElement"`, it will be rendered in a portal or separate render tree. This `portalMount` callback will be triggered instead of the the default `ReactDOM.unstable_renderSubtreeIntoContainer` and the function will mount the portal itself. Consider the following code that bypasses the internal mount and uses an Enzyme wrapper to mount the React root tree to the DOM.
   *
   * ```
   * <Popover
   *   isOpen
   *   portalMount={({ instance, reactElement, domContainerNode }) => {
   *     portalWrapper = Enzyme.mount(reactElement, { attachTo: domContainerNode });
   *   }}
   *   onOpen={() => {
   *     expect(portalWrapper.find(`#my-heading`)).to.exist;
   *     done();
   *   }}
   *   />
   * ```
   */
  portalMount: p.func,
  /**
   * Please select one of the following:
   * * `absolute` - (default) The dialog will use `position: absolute` and style attributes to position itself. This allows inverted placement or flipping of the dialog.
   * * `overflowBoundaryElement` - The dialog will overflow scrolling parents. Use on elements that are aligned to the left or right of their target and don't care about the target being within a scrolling parent. Typically this is a popover or tooltip. Dropdown menus can usually open up and down if no room exists. In order to achieve this a portal element will be created and attached to `body`. This element will render into that detached render tree.
   * * `relative` - No styling or portals will be used. Menus will be positioned relative to their triggers. This is a great choice for HTML snapshot testing.
   */
  position: p.oneOf(['absolute', 'overflowBoundaryElement', 'relative'])
    .isRequired,
  /**
   * An object of CSS styles that are applied to the immediate parent `div` of the contents. Use this instead of margin props.
   */
  style: p.object,
  /**
   * Sets which focus UX pattern to follow. For instance, popovers trap focus and must be exited to regain focus. Dropdowns and Tooltips never have focus.
   */
  variant: p.oneOf(['dropdown', 'popover', 'tooltip'])
})
Le($s, 'defaultProps', {
  align: 'bottom left',
  direction: Un.LTR,
  offset: '0px 0px',
  outsideClickIgnoreClass: 'ignore-react-onclickoutside'
})
$s.contextType = sl
const U$ = Ug($s)
var km = function () {}
if (process.env.NODE_ENV !== 'production') {
  var vd = {}
  km = function (e, t, i, r, s, o) {
    var a = s ? ' '.concat(s) : '',
      l = r ? 'Use `'.concat(r, '`') : '',
      c = r ? ' '.concat(l, ' instead.') : ''
    !o &&
      !vd[e + i] &&
      (wi(
        t === void 0,
        '[Design System React] `'
          .concat(i, '` will be removed in the next major version of ')
          .concat(e, '.')
          .concat(c)
          .concat(a)
      ),
      (vd[e + i] = t !== void 0))
  }
}
const bn = km
var Tm = function () {}
if (process.env.NODE_ENV !== 'production') {
  var Sd = {}
  Tm = function (e, t, i) {
    var r = t.propAsString,
      s = t.propValue,
      o = t.deprecatedPropValue,
      a = t.replacementPropAsString,
      l = t.replacementPropAsValue,
      c = t.log,
      u = i ? ' '.concat(i) : '',
      f = e + r + o,
      h = s === o,
      d =
        o && a && l
          ? ' Replace `'
              .concat(r, '="')
              .concat(o, '"` with `')
              .concat(a, '="')
              .concat(l, '"`.')
          : ''
    if (!Sd[f]) {
      var O = '[Design System React] The value of `'
        .concat(o, '`, for prop `')
        .concat(r, '` will be removed in the next major version of ')
        .concat(e, '. Please update your props.')
        .concat(d)
        .concat(u)
      h && c
        ? c({
            message: O
          })
        : wi(
            !h,
            // false value triggers warning
            O
          ),
        (Sd[f] = h)
    }
  }
}
const xd = Tm
var Cm = function () {}
if (process.env.NODE_ENV !== 'production') {
  var wd = {}
  Cm = function (e, t, i, r) {
    var s = i ? ' '.concat(i) : '',
      o = t.props.tabIndex,
      a = !0
    // Silencing prop for special cases
    !r && // List of "native" HTML elements that are tabbable by default
      t.type !== 'button' &&
      t.type !== 'input' &&
      t.type !== 'select' &&
      t.type !== 'textarea' &&
      t.type !== 'a' && // List of components that are tabbable by default
      t.type.displayName !== mf &&
      t.type.displayName !== Cx &&
      t.type.displayName !== Tx &&
      t.type.displayName !== Rx &&
      t.type.displayName !== _x &&
      t.type.displayName !== il &&
      t.type.displayName !== Yx &&
      t.type.displayName !== Ix &&
      t.type.displayName !== Bx &&
      (o === '-1' || o === void 0) &&
      ((a = !1),
      wd[e] ||
        (wi(
          a,
          '[Design System React] The element that triggers '
            .concat(
              e,
              ' must be tabbable for keyboard users. Elements such as anchor, button, input or a DOM element with tabIndex="0" specified are tabbable. '
            )
            .concat(s)
        ),
        (wd[e] = !!a)))
  }
}
const q$ = Cm
var _m = function () {}
process.env.NODE_ENV !== 'production' &&
  (_m = function (e, t, i) {
    var r = ei(i)
    t.variant === 'base' &&
      $.Children.count(t.children) !== 0 &&
      q$(e, t.children, r(), t.silenceTriggerTabbableWarning),
      xd(
        e,
        {
          propAsString: 'variant',
          propValue: t.variant,
          deprecatedPropValue: 'info',
          replacementPropAsString: 'theme',
          replacementPropAsValue: 'info'
        },
        r('theme')
      ),
      xd(
        e,
        {
          propAsString: 'variant',
          propValue: t.variant,
          deprecatedPropValue: 'error',
          replacementPropAsString: 'theme',
          replacementPropAsValue: 'error'
        },
        r('theme')
      ),
      bn(e, t.openByDefault, 'openByDefault', 'isOpen', r('isOpen')),
      bn(
        e,
        t.target,
        'target',
        void 0,
        'A new positioning library is being implmented under the hood. Please trigger tooltips to appear on their triggers with `isOpen` and not on other DOM elements. '.concat(
          r('isOpen')
        )
        // eslint-disable-line max-len
      ),
      bn(e, t.isInline, 'isInline', 'position="relative"', r('position'))
  })
const z$ = _m,
  F$ = 'tooltip',
  G$ = 'prod',
  H$ = 'Tooltip',
  K$ = {
    component: F$,
    status: G$,
    'display-name': 'Tooltips',
    classKey: H$,
    'SLDS-component-path': '/components/tooltips',
    'site-stories': [
      {
        heading: 'Base',
        path: '/__examples__/base.jsx'
      },
      {
        heading: 'Button Trigger',
        path: '/__examples__/button.jsx'
      },
      {
        heading: 'Button Group Trigger',
        path: '/__examples__/button-group.jsx'
      },
      {
        heading: 'Learn more',
        path: '/__examples__/learn-more.jsx'
      }
    ],
    'url-slug': 'tooltips'
  }
function Co(n) {
  '@babel/helpers - typeof'
  return (
    typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol'
      ? (Co = function (t) {
          return typeof t
        })
      : (Co = function (t) {
          return t &&
            typeof Symbol == 'function' &&
            t.constructor === Symbol &&
            t !== Symbol.prototype
            ? 'symbol'
            : typeof t
        }),
    Co(n)
  )
}
function $d(n, e) {
  var t = Object.keys(n)
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(n)
    e &&
      (i = i.filter(function (r) {
        return Object.getOwnPropertyDescriptor(n, r).enumerable
      })),
      t.push.apply(t, i)
  }
  return t
}
function J$(n) {
  for (var e = 1; e < arguments.length; e++) {
    var t = arguments[e] != null ? arguments[e] : {}
    e % 2
      ? $d(Object(t), !0).forEach(function (i) {
          Ir(n, i, t[i])
        })
      : Object.getOwnPropertyDescriptors
        ? Object.defineProperties(n, Object.getOwnPropertyDescriptors(t))
        : $d(Object(t)).forEach(function (i) {
            Object.defineProperty(n, i, Object.getOwnPropertyDescriptor(t, i))
          })
  }
  return n
}
function eP(n, e) {
  if (!(n instanceof e))
    throw new TypeError('Cannot call a class as a function')
}
function Pd(n, e) {
  for (var t = 0; t < e.length; t++) {
    var i = e[t]
    ;(i.enumerable = i.enumerable || !1),
      (i.configurable = !0),
      'value' in i && (i.writable = !0),
      Object.defineProperty(n, i.key, i)
  }
}
function tP(n, e, t) {
  return e && Pd(n.prototype, e), t && Pd(n, t), n
}
function nP(n, e) {
  if (typeof e != 'function' && e !== null)
    throw new TypeError('Super expression must either be null or a function')
  ;(n.prototype = Object.create(e && e.prototype, {
    constructor: { value: n, writable: !0, configurable: !0 }
  })),
    e && Kc(n, e)
}
function Kc(n, e) {
  return (
    (Kc =
      Object.setPrototypeOf ||
      function (i, r) {
        return (i.__proto__ = r), i
      }),
    Kc(n, e)
  )
}
function iP(n) {
  var e = sP()
  return function () {
    var i = Oa(n),
      r
    if (e) {
      var s = Oa(this).constructor
      r = Reflect.construct(i, arguments, s)
    } else r = i.apply(this, arguments)
    return rP(this, r)
  }
}
function rP(n, e) {
  return e && (Co(e) === 'object' || typeof e == 'function') ? e : Yr(n)
}
function Yr(n) {
  if (n === void 0)
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    )
  return n
}
function sP() {
  if (typeof Reflect > 'u' || !Reflect.construct || Reflect.construct.sham)
    return !1
  if (typeof Proxy == 'function') return !0
  try {
    return (
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      ),
      !0
    )
  } catch {
    return !1
  }
}
function Oa(n) {
  return (
    (Oa = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function (t) {
          return t.__proto__ || Object.getPrototypeOf(t)
        }),
    Oa(n)
  )
}
function Ir(n, e, t) {
  return (
    e in n
      ? Object.defineProperty(n, e, {
          value: t,
          enumerable: !0,
          configurable: !0,
          writable: !0
        })
      : (n[e] = t),
    n
  )
}
var oP = Dg,
  aP = {
    /**
     * Alignment of the Tooltip relative to the element that triggers it.
     */
    align: p.oneOf([
      'top',
      'top left',
      'top right',
      'right',
      'right top',
      'right bottom',
      'bottom',
      'bottom left',
      'bottom right',
      'left',
      'left top',
      'left bottom'
    ]).isRequired,
    /**
     * **Assistive text for accessibility**
     * This object is merged with the default props object on every render.
     * * `tooltipTipLearnMoreIcon`: This text is inside the info icon within the tooltip content and exists to "complete the sentence" for assistive tech users.
     * * `triggerLearnMoreIcon`: This text is inside the info icon that triggers the tooltip in order to have text within the link.
     */
    assistiveText: p.shape({
      tooltipTipLearnMoreIcon: p.string,
      triggerLearnMoreIcon: p.string
    }),
    /**
     * Pass the one element that triggers the Tooltip as a child. It must be an element with `tabIndex` or an element that already has a `tabIndex` set such as an anchor or a button, so that keyboard users can tab to it.
     */
    children: p.node,
    /**
     * Content inside Tooltip.
     */
    content: p.node.isRequired,
    /**
     * CSS classes to be added to the popover dialog. That is the element with `.slds-popover` on it.
     */
    dialogClassName: p.oneOfType([p.array, p.object, p.string]),
    /**
     * Enabling this hides the default nubbin, replacing it with one attached directly to the tooltip trigger. Note: `hasStaticAlignment` should be set to `true` if using this feature as auto-flipping anchored nubbins are not currently supported.
     */
    hasAnchoredNubbin: p.bool,
    /**
     * By default, dialogs will flip their alignment (such as bottom to top) if they extend beyond a boundary element such as a scrolling parent or a window/viewpoint. `hasStaticAlignment` disables this behavior and allows this component to extend beyond boundary elements. _Not tested._
     */
    hasStaticAlignment: p.bool,
    /**
     * Delay on Tooltip closing in milliseconds. Defaults to 50
     */
    hoverCloseDelay: p.number,
    /**
     * Delay on Tooltip opening in milliseconds. Defaults to 0
     */
    hoverOpenDelay: p.number,
    /**
     * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the popover to the triggering element.
     */
    id: p.string,
    /**
     * **Text labels for internationalization**
     * This object is merged with the default props object on every render.
     * * `learnMoreAfter`: This label appears in the tooltip after the info icon.
     * * `learnMoreBefore`: This label appears in the tooltip before the info icon.
     */
    labels: p.shape({
      learnMoreAfter: p.string,
      learnMoreBefore: p.string
    }),
    /**
     * Forces tooltip to be open. A value of `false` will disable any interaction with the tooltip.
     */
    isOpen: p.bool,
    /**
     * Callback that returns an element or React `ref` to align the Tooltip with.
     */
    onRequestTargetElement: p.func,
    /**
     * CSS classes to be added to tag with `slds-tooltip-trigger`.
     */
    triggerClassName: p.oneOfType([p.array, p.object, p.string]),
    /**
     * Please select one of the following:
     * * `absolute` - (default) The dialog will use `position: absolute` and style attributes to position itself. This allows inverted placement or flipping of the dialog.
     * * `overflowBoundaryElement` - The dialog will overflow scrolling parents. Use on elements that are aligned to the left or right of their target and don't care about the target being within a scrolling parent. Typically this is a popover or tooltip. Dropdown menus can usually open up and down if no room exists. In order to achieve this a portal element will be created and attached to `body`. This element will render into that detached render tree.
     * * `relative` - No styling or portals will be used. Menus will be positioned relative to their triggers. This is a great choice for HTML snapshot testing.
     */
    position: p.oneOf(['absolute', 'overflowBoundaryElement', 'relative']),
    /**
     * Custom styles to be added to wrapping triggering `div`.
     */
    triggerStyle: p.object,
    /**
     * Determines the theme of tooltip: for informative purpose (blue background) or warning purpose (red background). This used to be `variant`.
     */
    theme: p.oneOf(['info', 'error']),
    /**
     * Determines the type of the tooltip.
     */
    variant: p.oneOf(['base', 'learnMore', 'list-item'])
  },
  lP = {
    assistiveText: {
      tooltipTipLearnMoreIcon: 'this link',
      triggerLearnMoreIcon: 'Help'
    },
    align: 'top',
    // eslint-disable-next-line react/jsx-curly-brace-presence
    content: /* @__PURE__ */ $.createElement('span', null, 'Tooltip'),
    labels: {
      learnMoreAfter: 'to learn more.',
      learnMoreBefore: 'Click'
    },
    hoverCloseDelay: 50,
    hoverOpenDelay: 0,
    position: 'absolute',
    theme: 'info',
    variant: 'base'
  },
  Ps = /* @__PURE__ */ (function (n) {
    nP(t, n)
    var e = iP(t)
    function t(i) {
      var r
      return (
        eP(this, t),
        (r = e.call(this, i)),
        Ir(Yr(r), 'handleCancel', function () {
          clearTimeout(r.tooltipTimeout),
            r.setState({
              isOpen: !1
            })
        }),
        Ir(Yr(r), 'handleMouseEnter', function () {
          clearTimeout(r.tooltipTimeout),
            (r.tooltipTimeout = setTimeout(function () {
              r.isUnmounting ||
                r.setState({
                  isOpen: !0
                })
            }, r.props.hoverOpenDelay))
        }),
        Ir(Yr(r), 'handleMouseLeave', function () {
          clearTimeout(r.tooltipTimeout),
            (r.tooltipTimeout = setTimeout(function () {
              r.isUnmounting ||
                r.setState({
                  isOpen: !1
                })
            }, r.props.hoverCloseDelay))
        }),
        Ir(Yr(r), 'saveTriggerRef', function (s) {
          ;(r.trigger = s),
            r.state.triggerRendered ||
              r.setState({
                triggerRendered: !0
              })
        }),
        (r.state = {
          isOpen: !1
        }),
        (r.tooltipTimeout = {}),
        z$(Dg, i, K$),
        (r.generatedId = bi.generate()),
        r
      )
    }
    return (
      tP(t, [
        {
          key: 'componentWillUnmount',
          value: function () {
            this.isUnmounting = !0
          }
        },
        {
          key: 'getAnchoredNubbinStyles',
          value: function () {
            if (this.props.hasAnchoredNubbin) {
              var r = this.props.align.split(' ')[0],
                s = {
                  height: '0',
                  position: 'relative',
                  width: '0'
                },
                o = {
                  backgroundColor: '#16325c',
                  content: '',
                  height: '1rem',
                  position: 'absolute',
                  transform: 'rotate(45deg)',
                  width: '1rem'
                },
                a = {
                  height: this.trigger
                    ? this.trigger.getBoundingClientRect().height
                    : 0,
                  width: this.trigger
                    ? this.trigger.getBoundingClientRect().width
                    : 0
                }
              switch (r) {
                case 'bottom': {
                  ;(s.left = ''.concat(a.width / 2, 'px')),
                    (s.top = ''.concat(a.height, 'px')),
                    (o.left = '-8px'),
                    (o.top = '3px')
                  break
                }
                case 'left': {
                  ;(s.left = '0'),
                    (s.top = ''.concat(a.height / 2, 'px')),
                    (o.left = '-19px'),
                    (o.top = '-9px')
                  break
                }
                case 'right': {
                  ;(s.left = ''.concat(a.width, 'px')),
                    (s.top = ''.concat(a.height / 2, 'px')),
                    (o.left = '3px'),
                    (o.top = '-9px')
                  break
                }
                default:
                  ;(s.left = ''.concat(a.width / 2, 'px')),
                    (s.top = '0'),
                    (o.left = '-8px'),
                    (o.top = '-19px')
              }
              return /* @__PURE__ */ $.createElement(
                $.Fragment,
                null,
                /* @__PURE__ */ $.createElement(
                  'style',
                  null,
                  '#'.concat(this.getId(), ':after, #').concat(
                    this.getId(),
                    `:before {
	display: none;
}`
                  )
                ),
                this.getIsOpen()
                  ? /* @__PURE__ */ $.createElement(
                      'div',
                      {
                        style: s
                      },
                      /* @__PURE__ */ $.createElement('div', {
                        style: o
                      })
                    )
                  : null
              )
            }
            return null
          }
        },
        {
          key: 'getContent',
          value: function () {
            var r = this,
              s,
              o = $.Children.count(this.props.children) === 0
            return (
              o && this.props.onClickTrigger
                ? (s = [
                    /* @__PURE__ */ $.createElement(
                      'a',
                      {
                        href: '#',
                        onClick: gs.trappedHandler(this.props.onClickTrigger)
                      },
                      /* @__PURE__ */ $.createElement(Ve, {
                        category: 'utility',
                        name: 'info',
                        assistiveText: {
                          label: this.props.assistiveText.triggerLearnMoreIcon
                        },
                        size: 'x-small'
                      })
                    )
                  ])
                : o
                  ? (s = [
                      /* @__PURE__ */ $.createElement(ft, {
                        'aria-disabled': !0,
                        assistiveText: {
                          icon: this.props.assistiveText.triggerLearnMoreIcon
                        },
                        iconCategory: 'utility',
                        iconName: 'info',
                        variant: 'icon'
                      })
                    ])
                  : (s = this.props.children),
              $.Children.map(s, function (a, l) {
                return /* @__PURE__ */ $.cloneElement(a, {
                  key: l,
                  // eslint-disable-line react/no-array-index-key
                  'aria-describedby': r.getIsOpen() ? r.getId() : void 0,
                  onBlur: r.handleMouseLeave,
                  onFocus: r.handleMouseEnter,
                  onMouseEnter: r.handleMouseEnter,
                  onMouseLeave: r.handleMouseLeave
                })
              })
            )
          }
        },
        {
          key: 'getId',
          value: function () {
            return this.props.id || this.generatedId
          }
        },
        {
          key: 'getIsOpen',
          value: function () {
            return this.props.isOpen === void 0
              ? this.state.isOpen
              : this.props.isOpen
          }
        },
        {
          key: 'getTooltip',
          value: function () {
            var r = this,
              s = this.getIsOpen(),
              o = this.props.align,
              a = this.props.variant === 'error'
            return s
              ? /* @__PURE__ */ $.createElement(
                  U$,
                  {
                    closeOnTabKey: !0,
                    hasNubbin: !0,
                    contentsClassName: ae(
                      'slds-popover',
                      'slds-popover_tooltip',
                      {
                        'slds-theme_error': this.props.theme === 'error' || a
                      },
                      this.props.dialogClassName
                    ),
                    align: o,
                    context: this.context,
                    hasStaticAlignment: this.props.hasStaticAlignment,
                    onClose: this.handleCancel,
                    onRequestTargetElement: function () {
                      return r.getTooltipTarget()
                    },
                    position: this.props.position,
                    variant: 'tooltip',
                    containerProps: {
                      id: this.getId()
                    }
                  },
                  this.getTooltipContent()
                )
              : /* @__PURE__ */ $.createElement('span', null)
          }
        },
        {
          key: 'getTooltipContent',
          value: function () {
            return /* @__PURE__ */ $.createElement(
              'div',
              {
                className: 'slds-popover__body'
              },
              this.props.content,
              this.props.variant === 'learnMore' && this.props.onClickTrigger
                ? /* @__PURE__ */ $.createElement(
                    'div',
                    {
                      className: 'slds-m-top_x-small',
                      'aria-hidden': 'true'
                    },
                    this.props.labels.learnMoreBefore,
                    ' ',
                    /* @__PURE__ */ $.createElement(Ve, {
                      assistiveText: {
                        label: this.props.assistiveText.tooltipTipLearnMoreIcon
                      },
                      category: 'utility',
                      inverse: !0,
                      name: 'info',
                      size: 'x-small'
                    }),
                    ' ',
                    this.props.labels.learnMoreAfter,
                    ' '
                  )
                : null
            )
          }
        },
        {
          key: 'getTooltipTarget',
          value: function () {
            return this.props.onRequestTargetElement
              ? this.props.onRequestTargetElement()
              : this.props.target
                ? this.props.target
                : this.trigger
          }
        },
        {
          key: 'render',
          value: function () {
            var r = J$(
              {
                display: 'inline-block',
                lineHeight: '1'
              },
              this.props.triggerStyle
            )
            return /* @__PURE__ */ $.createElement(
              'div',
              {
                className: ae(
                  'slds-tooltip-trigger',
                  this.props.triggerClassName
                ),
                style: r,
                ref: this.saveTriggerRef
              },
              this.getAnchoredNubbinStyles(),
              this.getContent(),
              this.getTooltip()
            )
          }
        }
      ]),
      t
    )
  })($.Component)
Ps.contextType = sl
Ps.displayName = oP
Ps.propTypes = aP
Ps.defaultProps = lP
const Zm = Ps
function _f(n) {
  return Object.keys(n).reduce(function (e, t) {
    return t.substr(0, 5) === 'aria-' && (e[t] = n[t]), e
  }, {})
}
function cP(n) {
  return Object.keys(n).reduce(function (e, t) {
    return t.substr(0, 5) === 'data-' && (e[t] = n[t]), e
  }, {})
}
var uP = /* @__PURE__ */ new Set([
  'form',
  'formAction',
  'formEncType',
  'formMethod',
  'formNoValidate',
  'formTarget'
])
function fP(n) {
  return Object.keys(n).reduce(function (e, t) {
    return uP.has(t) && (e[t] = n[t]), e
  }, {})
}
function _o(n) {
  '@babel/helpers - typeof'
  return (
    typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol'
      ? (_o = function (t) {
          return typeof t
        })
      : (_o = function (t) {
          return t &&
            typeof Symbol == 'function' &&
            t.constructor === Symbol &&
            t !== Symbol.prototype
            ? 'symbol'
            : typeof t
        }),
    _o(n)
  )
}
function Jc() {
  return (
    (Jc =
      Object.assign ||
      function (n) {
        for (var e = 1; e < arguments.length; e++) {
          var t = arguments[e]
          for (var i in t)
            Object.prototype.hasOwnProperty.call(t, i) && (n[i] = t[i])
        }
        return n
      }),
    Jc.apply(this, arguments)
  )
}
function Qd(n, e) {
  var t = Object.keys(n)
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(n)
    e &&
      (i = i.filter(function (r) {
        return Object.getOwnPropertyDescriptor(n, r).enumerable
      })),
      t.push.apply(t, i)
  }
  return t
}
function kd(n) {
  for (var e = 1; e < arguments.length; e++) {
    var t = arguments[e] != null ? arguments[e] : {}
    e % 2
      ? Qd(Object(t), !0).forEach(function (i) {
          Ee(n, i, t[i])
        })
      : Object.getOwnPropertyDescriptors
        ? Object.defineProperties(n, Object.getOwnPropertyDescriptors(t))
        : Qd(Object(t)).forEach(function (i) {
            Object.defineProperty(n, i, Object.getOwnPropertyDescriptor(t, i))
          })
  }
  return n
}
function hP(n, e) {
  if (!(n instanceof e))
    throw new TypeError('Cannot call a class as a function')
}
function Td(n, e) {
  for (var t = 0; t < e.length; t++) {
    var i = e[t]
    ;(i.enumerable = i.enumerable || !1),
      (i.configurable = !0),
      'value' in i && (i.writable = !0),
      Object.defineProperty(n, i.key, i)
  }
}
function dP(n, e, t) {
  return e && Td(n.prototype, e), t && Td(n, t), n
}
function pP(n, e) {
  if (typeof e != 'function' && e !== null)
    throw new TypeError('Super expression must either be null or a function')
  ;(n.prototype = Object.create(e && e.prototype, {
    constructor: { value: n, writable: !0, configurable: !0 }
  })),
    e && eu(n, e)
}
function eu(n, e) {
  return (
    (eu =
      Object.setPrototypeOf ||
      function (i, r) {
        return (i.__proto__ = r), i
      }),
    eu(n, e)
  )
}
function OP(n) {
  var e = mP()
  return function () {
    var i = ga(n),
      r
    if (e) {
      var s = ga(this).constructor
      r = Reflect.construct(i, arguments, s)
    } else r = i.apply(this, arguments)
    return gP(this, r)
  }
}
function gP(n, e) {
  return e && (_o(e) === 'object' || typeof e == 'function') ? e : fi(n)
}
function fi(n) {
  if (n === void 0)
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    )
  return n
}
function mP() {
  if (typeof Reflect > 'u' || !Reflect.construct || Reflect.construct.sham)
    return !1
  if (typeof Proxy == 'function') return !0
  try {
    return (
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      ),
      !0
    )
  } catch {
    return !1
  }
}
function ga(n) {
  return (
    (ga = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function (t) {
          return t.__proto__ || Object.getPrototypeOf(t)
        }),
    ga(n)
  )
}
function Ee(n, e, t) {
  return (
    e in n
      ? Object.defineProperty(n, e, {
          value: t,
          enumerable: !0,
          configurable: !0,
          writable: !0
        })
      : (n[e] = t),
    n
  )
}
var Am = {
    assistiveText: {
      icon: ''
    },
    disabled: !1,
    hint: !1,
    iconSize: 'medium',
    responsive: !1,
    type: 'button',
    variant: 'neutral'
  },
  ft = /* @__PURE__ */ (function (n) {
    pP(t, n)
    var e = OP(t)
    function t(i) {
      var r
      return (
        hP(this, t),
        (r = e.call(this, i)),
        Ee(fi(r), 'getClassName', function () {
          var s,
            o = r.props.variant === 'icon',
            a = r.props.iconVariant,
            l = a === 'more',
            c = a === 'border',
            u = a === 'global-header',
            f =
              (r.props.variant !== 'base' &&
                !a &&
                !r.props.inverse &&
                r.props.variant !== 'link') ||
              a === 'bare',
            h = r.props.inverse && !o,
            d = r.props.inverse && o && !l && !c,
            O = r.props.inverse && l,
            m = r.props.inverse && c
          return (
            a === 'global-header' && (a = 'container'),
            ae(
              ((s = {
                'slds-button': r.props.variant !== 'link'
              }),
              Ee(s, 'slds-button_'.concat(r.props.variant), f),
              Ee(s, 'slds-button_inverse', h),
              Ee(s, 'slds-button_icon-inverse', d || O),
              Ee(s, 'slds-button_icon-border-inverse', m),
              Ee(s, 'slds-button_icon-'.concat(a), a && !m),
              Ee(s, 'slds-global-header__button_icon', u),
              Ee(
                s,
                'slds-button_icon-'.concat(r.props.iconSize),
                a && r.props.iconSize !== 'medium'
              ),
              Ee(s, 'slds-button_reset', r.props.variant === 'link'),
              Ee(s, 'slds-text-link', r.props.variant === 'link'),
              s),
              r.props.className
            )
          )
        }),
        Ee(fi(r), 'handleClick', function (s) {
          r.props.onClick && r.props.onClick(s, {})
        }),
        Ee(fi(r), 'renderIcon', function (s) {
          var o =
            !r.props.iconSize || r.props.iconVariant ? null : r.props.iconSize
          return /* @__PURE__ */ $.createElement(ld, {
            category: r.props.iconCategory || 'utility',
            className: ae(
              {
                'slds-global-header__icon':
                  r.props.iconVariant === 'global-header'
              },
              r.props.iconClassName
            ),
            hint: r.props.hint,
            inverse: r.props.inverse,
            name: s,
            path: r.props.iconPath,
            position: r.props.iconPosition,
            size: o
          })
        }),
        Ee(fi(r), 'renderLabel', function () {
          var s = r.props.iconName || r.props.iconPath,
            o =
              typeof r.props.assistiveText == 'string'
                ? r.props.assistiveText
                : kd(kd({}, Am.assistiveText), r.props.assistiveText).icon
          return s && o
            ? /* @__PURE__ */ $.createElement(
                'span',
                {
                  className: 'slds-assistive-text'
                },
                o
              )
            : r.props.label
        }),
        Ee(fi(r), 'renderButton', function () {
          var s = _f(r.props),
            o = cP(r.props),
            a = fP(r.props)
          return (
            // eslint-disable-next-line react/button-has-type
            /* @__PURE__ */ $.createElement(
              'button',
              Jc(
                {
                  className: r.getClassName(),
                  disabled: r.props.disabled,
                  id: r.props.id,
                  onBlur: r.props.onBlur,
                  onClick: r.handleClick,
                  onFocus: r.props.onFocus,
                  onKeyDown: r.props.onKeyDown,
                  onKeyPress: r.props.onKeyPress,
                  onKeyUp: r.props.onKeyUp,
                  onMouseDown: r.props.onMouseDown,
                  onMouseEnter: r.props.onMouseEnter,
                  onMouseLeave: r.props.onMouseLeave,
                  onMouseUp: r.props.onMouseUp,
                  ref: function (c) {
                    r.props.buttonRef && r.props.buttonRef(c),
                      c &&
                        r.props.requestFocus &&
                        r.props.onRequestFocus &&
                        r.props.onRequestFocus(c)
                  },
                  tabIndex: r.props.tabIndex,
                  title: r.props.title,
                  type: r.props.type || 'button',
                  style: r.props.style
                },
                s,
                o,
                a
              ),
              r.props.iconPosition === 'right' ? r.renderLabel() : null,
              r.props.iconName || r.props.iconPath
                ? r.renderIcon(r.props.iconName)
                : null,
              r.props.iconVariant === 'more'
                ? /* @__PURE__ */ $.createElement(ld, {
                    category: 'utility',
                    name: 'down',
                    size: 'x-small',
                    className: r.props.iconClassName
                  })
                : null,
              r.props.iconPosition === 'left' || !r.props.iconPosition
                ? r.renderLabel()
                : null,
              r.props.children
              // eslint-disable-line react/prop-types
            )
          )
        }),
        Ee(fi(r), 'renderTooltip', function () {
          return /* @__PURE__ */ $.createElement(
            Zm,
            {
              content: r.props.tooltip
            },
            r.renderButton
          )
        }),
        P1(mf, i, C1),
        r
      )
    }
    return (
      dP(t, [
        {
          key: 'render',
          value: function () {
            return this.props.tooltip
              ? this.renderTooltip()
              : this.renderButton()
          }
        }
      ]),
      t
    )
  })($.Component)
Ee(ft, 'displayName', mf)
Ee(ft, 'propTypes', {
  /**
   * **Assistive text for accessibility.**
   * This object is merged with the default props object on every render.
   * * `icon`: Text that is visually hidden but read aloud by screenreaders to tell the user what the icon means. If the button has an icon and a visible label, you can omit the <code>assistiveText.icon</code> prop and use the <code>label</code> prop.
   */
  assistiveText: p.shape({
    icon: p.string
  }),
  /**
   * Callback that passes in the DOM reference of the `<button>` DOM node within this component. Primary use is to allow `focus` to be called. You should still test if the node exists, since rendering is asynchronous. `buttonRef={(component) => { if(component) console.log(component); }}`
   */
  buttonRef: p.func,
  /**
   * CSS classes to be added to button.
   */
  className: p.oneOfType([p.array, p.object, p.string]),
  /**
   * Disables the button and adds disabled styling.
   */
  disabled: p.bool,
  /**
   * Associates an icon button with another element on the page by changes the color of the SVG. Please reference <a href="http://www.lightningdesignsystem.com/components/buttons/#hint">Lightning Design System Buttons > Hint</a>.
   */
  hint: p.bool,
  /**
   * Name of the icon category. Visit <a href="http://www.lightningdesignsystem.com/resources/icons">Lightning Design System Icons</a> to reference icon categories.
   */
  iconCategory: v1(
    p.oneOf(['action', 'custom', 'doctype', 'standard', 'utility']),
    function (n) {
      return !!n.iconName
    }
  ),
  /**
   * CSS classes to be added to icon.
   */
  iconClassName: p.oneOfType([p.array, p.object, p.string]),
  /**
   * Name of the icon. Visit <a href="http://www.lightningdesignsystem.com/resources/icons">Lightning Design System Icons</a> to reference icon names.
   */
  iconName: p.string,
  /**
   * Path to the icon. This will override any global icon settings.
   */
  iconPath: p.string,
  /**
   * If omitted, icon position is centered.
   */
  iconPosition: p.oneOf(['left', 'right']),
  /**
   * Determines the size of the icon.
   */
  iconSize: p.oneOf(['x-small', 'small', 'medium', 'large']),
  /**
   * For icon variants, please reference <a href="http://www.lightningdesignsystem.com/components/buttons/#icon">Lightning Design System Icons</a>.
   */
  iconVariant: p.oneOf([
    'bare',
    'container',
    'border',
    'border-filled',
    'brand',
    'more',
    'global-header'
  ]),
  /**
   * Id string applied to button node.
   */
  id: p.string,
  /**
   * If true, button/icon is white. Meant for buttons or utility icons on dark backgrounds.
   */
  inverse: p.bool,
  /**
   * Visible label on the button. If the button is an icon button with no label, you must use the <code>assistiveText.icon</code> prop.
   */
  label: p.oneOfType([p.string, p.node]),
  /**
   * Triggered when focus is removed.
   */
  onBlur: p.func,
  /**
   * Triggered when the button is clicked.
   */
  onClick: p.func,
  /**
   * Triggered when component is focused.
   */
  onFocus: p.func,
  /**
   * Triggered when a key is pressed down
   */
  onKeyDown: p.func,
  /**
   * Triggered when a key is pressed and released
   */
  onKeyPress: p.func,
  /**
   * Triggered when a key is released
   */
  onKeyUp: p.func,
  /**
   * Triggered when a mouse button is pressed down
   */
  onMouseDown: p.func,
  /**
   * Triggered when a mouse arrow hovers
   */
  onMouseEnter: p.func,
  /**
   * Triggered when a mouse arrow no longer hovers
   */
  onMouseLeave: p.func,
  /**
   * Triggered when a mouse button is released
   */
  onMouseUp: p.func,
  /**
   * Triggered to indicate that this component should receive focus.
   */
  onRequestFocus: p.func,
  /**
   * If true, will trigger `onRequestFocus`.
   */
  requestFocus: p.bool,
  /**
   * If true, button scales to 100% width on small form factors.
   */
  responsive: p.bool,
  /**
   * Write <code>"-1"</code> if you don't want the user to tab to the button.
   */
  tabIndex: p.string,
  /**
   * Button type
   */
  type: p.oneOf(['reset', 'submit', 'button']),
  /**
   * HTML title attribute
   */
  title: p.string,
  /**
   * [Deprecated] Tooltip on button. Button should be a child of `Tooltip` instead.
   */
  tooltip: p.node,
  /**
   * Different types of buttons
   */
  variant: p.oneOf([
    'base',
    'link',
    'neutral',
    'brand',
    'outline-brand',
    'destructive',
    'success',
    'text-destructive',
    'icon'
  ]),
  /**
   * Custom styles to be passed to the component
   */
  style: p.object
})
Ee(ft, 'defaultProps', Am)
function Cd(n, e, t) {
  return (
    e in n
      ? Object.defineProperty(n, e, {
          value: t,
          enumerable: !0,
          configurable: !0,
          writable: !0
        })
      : (n[e] = t),
    n
  )
}
function qr() {
  return (
    (qr =
      Object.assign ||
      function (n) {
        for (var e = 1; e < arguments.length; e++) {
          var t = arguments[e]
          for (var i in t)
            Object.prototype.hasOwnProperty.call(t, i) && (n[i] = t[i])
        }
        return n
      }),
    qr.apply(this, arguments)
  )
}
function yP(n, e) {
  if (n == null) return {}
  var t = bP(n, e),
    i,
    r
  if (Object.getOwnPropertySymbols) {
    var s = Object.getOwnPropertySymbols(n)
    for (r = 0; r < s.length; r++)
      (i = s[r]),
        !(e.indexOf(i) >= 0) &&
          Object.prototype.propertyIsEnumerable.call(n, i) &&
          (t[i] = n[i])
  }
  return t
}
function bP(n, e) {
  if (n == null) return {}
  var t = {},
    i = Object.keys(n),
    r,
    s
  for (s = 0; s < i.length; s++)
    (r = i[s]), !(e.indexOf(r) >= 0) && (t[r] = n[r])
  return t
}
var fl = function (e) {
  var t = e.category,
    i = e.iconPosition,
    r = e.name,
    s = e.path,
    o = e.onClick,
    a = e.variant,
    l = yP(e, [
      'category',
      'iconPosition',
      'name',
      'path',
      'onClick',
      'variant'
    ]),
    c = {
      combobox: /* @__PURE__ */ $.createElement(
        'span',
        {
          className:
            'slds-icon_container slds-input__icon slds-input__icon_right'
        },
        /* @__PURE__ */ $.createElement(
          na,
          qr(
            {
              'aria-hidden': !0,
              category: t,
              className: ae(
                'slds-icon slds-icon_x-small slds-icon-text-default'
              ),
              name: r,
              path: s
            },
            l
          )
        )
      ),
      base: /* @__PURE__ */ $.createElement(
        na,
        qr(
          {
            'aria-hidden': !0,
            category: t,
            className: ae(
              'slds-input__icon slds-icon-text-default',
              Cd({}, 'slds-input__icon_'.concat(i), i)
            ),
            name: r,
            path: s
          },
          l
        )
      )
    }
  return _g(o)
    ? /* @__PURE__ */ $.createElement(
        ft,
        qr(
          {
            className: ae(
              'slds-input__icon',
              Cd({}, 'slds-input__icon_'.concat(i), i)
            ),
            iconCategory: t,
            iconName: r,
            iconPath: s,
            onClick: o,
            variant: 'icon'
          },
          l
        )
      )
    : c[a]
}
fl.displayName = Xx
fl.propTypes = {
  /**
   * Icon category from [lightningdesignsystem.com/icons/](https://www.lightningdesignsystem.com/icons/)
   */
  category: p.string,
  /**
   * This is only needed if an input contains two icons, the Input component handles this prop for you.
   */
  iconPosition: p.oneOf(['left', 'right']),
  /**
   * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lightning Design System Icons</a> to reference icon names.
   */
  name: p.string,
  /**
   * Path to the icon. This will override any global icon settings.
   */
  path: p.string,
  /**
   * This event fires when the icon is clicked.
   */
  onClick: p.func,
  /**
   * Changes styles of the InputIcon.
   */
  variant: p.oneOf(['base', 'combobox'])
}
fl.defaultProps = {
  category: 'utility',
  variant: 'base'
}
const vP = fl
var Rm = function () {}
process.env.NODE_ENV !== 'production' &&
  (Rm = function (e, t, i) {
    var r = ei(i)
    typeof t.assistiveText == 'string' &&
      _e(
        e,
        t.assistiveText,
        'assistiveText',
        '`assistiveText` as a string has been deprecated and is now an object to allow for multiple uses in the component. Please use `assistiveText.label` instead. '.concat(
          r('assistiveText')
        )
      )
  })
const SP = Rm,
  xP = 'spinner',
  wP = 'prod',
  $P = 'Spinner',
  PP = {
    component: xP,
    status: wP,
    'display-name': 'Spinners',
    classKey: $P,
    'SLDS-component-path': '/components/spinner',
    'site-stories': [
      {
        heading: 'Default',
        path: '/__examples__/default.jsx'
      }
    ],
    'url-slug': 'spinners'
  }
function _d(n, e) {
  var t = Object.keys(n)
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(n)
    e &&
      (i = i.filter(function (r) {
        return Object.getOwnPropertyDescriptor(n, r).enumerable
      })),
      t.push.apply(t, i)
  }
  return t
}
function Zd(n) {
  for (var e = 1; e < arguments.length; e++) {
    var t = arguments[e] != null ? arguments[e] : {}
    e % 2
      ? _d(Object(t), !0).forEach(function (i) {
          Em(n, i, t[i])
        })
      : Object.getOwnPropertyDescriptors
        ? Object.defineProperties(n, Object.getOwnPropertyDescriptors(t))
        : _d(Object(t)).forEach(function (i) {
            Object.defineProperty(n, i, Object.getOwnPropertyDescriptor(t, i))
          })
  }
  return n
}
function Em(n, e, t) {
  return (
    e in n
      ? Object.defineProperty(n, e, {
          value: t,
          enumerable: !0,
          configurable: !0,
          writable: !0
        })
      : (n[e] = t),
    n
  )
}
var QP = {
    /**
     * **Assistive text for accessibility.**
     * This object is merged with the default props object on every render.
     * * `label`: Assistive text that is read out loud to screen readers.
     */
    assistiveText: p.shape({
      label: p.string
    }),
    /**
     * Custom css classes applied to Spinner container
     */
    containerClassName: p.string,
    /**
     * Custom css properties applied to Spinner container
     */
    containerStyle: p.object,
    /**
     * Render the spinner inside of a container.
     */
    hasContainer: p.bool,
    /**
     * Unique html id placed on div with role="status".
     */
    id: p.string,
    /**
     * Adds delay of 300ms to the spinner
     */
    isDelayed: p.bool,
    /**
     * Add styling to support a spinner inside an input field.
     */
    isInput: p.bool,
    /**
     * Add styling to support an inline spinner inside of the document flow.
     */
    isInline: p.bool,
    /**
     * Determines the size of the spinner
     */
    size: p.oneOf(['xx-small', 'x-small', 'small', 'medium', 'large']),
    /**
     * Determines the color of the spinner: `base` is gray, `brand` is blue, and `inverse` is white.
     */
    variant: p.oneOf(['base', 'brand', 'inverse'])
  },
  Dm = {
    assistiveText: {
      label: 'Loading...'
    },
    isDelayed: !1,
    isInline: !1,
    isInput: !1,
    hasContainer: !0,
    size: 'medium',
    variant: 'base'
  },
  hl = function (e) {
    SP(Xg, e, PP)
    var t = e.containerClassName,
      i = e.containerStyle,
      r = e.id,
      s = e.isDelayed,
      o = e.isInline,
      a = e.isInput,
      l = e.hasContainer,
      c = e.size,
      u = e.variant,
      f =
        typeof e.assistiveText == 'string'
          ? e.assistiveText
          : Zd(Zd({}, Dm.assistiveText), e.assistiveText).label,
      h = ae(
        'slds-spinner',
        Em(
          {
            'slds-spinner_inline': o,
            'slds-input__spinner': a,
            'slds-spinner_brand': u === 'brand',
            'slds-spinner_inverse': u === 'inverse',
            'slds-spinner_delayed': s
          },
          'slds-spinner_'.concat(c),
          c
        )
      ),
      d = /* @__PURE__ */ $.createElement(
        'div',
        {
          'aria-hidden': 'false',
          className: h,
          id: r,
          role: 'status'
        },
        f &&
          /* @__PURE__ */ $.createElement(
            'span',
            {
              className: 'slds-assistive-text'
            },
            f
          ),
        /* @__PURE__ */ $.createElement('div', {
          className: 'slds-spinner__dot-a'
        }),
        /* @__PURE__ */ $.createElement('div', {
          className: 'slds-spinner__dot-b'
        })
      )
    return l
      ? /* @__PURE__ */ $.createElement(
          'div',
          {
            className: ae(t, 'slds-spinner_container'),
            style: i
          },
          d
        )
      : d
  }
hl.displayName = Xg
hl.propTypes = QP
hl.defaultProps = Dm
const kP = hl
function ma() {
  return (
    (ma =
      Object.assign ||
      function (n) {
        for (var e = 1; e < arguments.length; e++) {
          var t = arguments[e]
          for (var i in t)
            Object.prototype.hasOwnProperty.call(t, i) && (n[i] = t[i])
        }
        return n
      }),
    ma.apply(this, arguments)
  )
}
function Ad(n, e) {
  var t = Object.keys(n)
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(n)
    e &&
      (i = i.filter(function (r) {
        return Object.getOwnPropertyDescriptor(n, r).enumerable
      })),
      t.push.apply(t, i)
  }
  return t
}
function Rd(n) {
  for (var e = 1; e < arguments.length; e++) {
    var t = arguments[e] != null ? arguments[e] : {}
    e % 2
      ? Ad(Object(t), !0).forEach(function (i) {
          TP(n, i, t[i])
        })
      : Object.getOwnPropertyDescriptors
        ? Object.defineProperties(n, Object.getOwnPropertyDescriptors(t))
        : Ad(Object(t)).forEach(function (i) {
            Object.defineProperty(n, i, Object.getOwnPropertyDescriptor(t, i))
          })
  }
  return n
}
function TP(n, e, t) {
  return (
    e in n
      ? Object.defineProperty(n, e, {
          value: t,
          enumerable: !0,
          configurable: !0,
          writable: !0
        })
      : (n[e] = t),
    n
  )
}
function CP(n, e) {
  if (n == null) return {}
  var t = _P(n, e),
    i,
    r
  if (Object.getOwnPropertySymbols) {
    var s = Object.getOwnPropertySymbols(n)
    for (r = 0; r < s.length; r++)
      (i = s[r]),
        !(e.indexOf(i) >= 0) &&
          Object.prototype.propertyIsEnumerable.call(n, i) &&
          (t[i] = n[i])
  }
  return t
}
function _P(n, e) {
  if (n == null) return {}
  var t = {},
    i = Object.keys(n),
    r,
    s
  for (s = 0; s < i.length; s++)
    (r = i[s]), !(e.indexOf(r) >= 0) && (t[r] = n[r])
  return t
}
var Nr = 'counter',
  ZP = {
    'aria-activedescendant': p.string,
    'aria-autocomplete': p.string,
    /**
     * An HTML ID that is shared with ARIA-supported devices with the
     * `aria-controls` attribute in order to relate the input with
     * another region of the page. An example would be a select box
     * that shows or hides a panel.
     */
    'aria-controls': p.string,
    'aria-describedby': p.string,
    'aria-expanded': p.bool,
    'aria-haspopup': p.oneOfType([p.bool, p.string]),
    'aria-labelledby': p.string,
    /**
     * An HTML ID that is shared with ARIA-supported devices with the
     * `aria-controls` attribute in order to relate the input with
     * another region of the page. An example would be a search field
     * that shows search results.
     */
    'aria-owns': p.string,
    'aria-required': p.bool,
    /**
     * **Assistive text for accessibility.**
     * This object is merged with the default props object on every render.
     * * `spinner`: Assistive text on the spinner.
     */
    assistiveText: p.shape({
      spinner: p.string
    }),
    /**
     * Disabled brower's autocomplete when "off" is used.
     */
    autoComplete: p.string,
    /**
     * Class names to be added to the `input` element.
     */
    className: p.oneOfType([p.array, p.object, p.string]),
    /**
     * Class names to be added to the outer container `div` of the input.
     */
    containerClassName: p.oneOfType([p.array, p.object, p.string]),
    /**
     * Props to be added to the outer container `div` of the input (excluding `containerClassName`).
     */
    containerProps: p.object,
    /**
     * Disables the input and prevents editing the contents.
     */
    disabled: p.bool,
    /**
     * Displays text or node to the left of the input. This follows the fixed text input UX pattern.
     */
    fixedTextLeft: p.oneOfType([p.node, p.string]),
    /**
     * Displays text or node to the right of the input. This follows the fixed text input UX pattern.
     */
    fixedTextRight: p.oneOfType([p.node, p.string]),
    /**
     * If true, loading spinner appears inside input on right hand side.
     */
    hasSpinner: p.bool,
    /**
     * Left aligned icon, must be instance of `design-system-react/components/icon/input-icon`
     */
    iconLeft: p.node,
    /**
     * Right aligned icon, must be instance of `design-system-react/components/icon/input-icon`
     */
    iconRight: p.node,
    /**
     * Every input must have a unique ID in order to support keyboard navigation and ARIA support.
     */
    id: p.string.isRequired,
    /**
     * This callback exposes the input reference / DOM node to parent components. `<Parent inputRef={(inputComponent) => this.input = inputComponent} />
     */
    inputRef: p.func,
    /**
     * Displays the value of the input statically. This follows the static input UX pattern.
     */
    isStatic: p.bool,
    /**
     * This label appears above the input.
     */
    label: p.string,
    onBlur: p.func,
    /**
     * This callback fires when the input changes. The synthetic React event will be the first parameter to the callback. You will probably want to reference `event.target.value` in your callback. No custom data object is provided.
     */
    onChange: p.func,
    /**
     * This event fires when the input is clicked.
     */
    onClick: p.func,
    onFocus: p.func,
    onInput: p.func,
    onInvalid: p.func,
    onKeyDown: p.func,
    onKeyPress: p.func,
    onKeyUp: p.func,
    onSelect: p.func,
    onSubmit: p.func,
    /**
     * Text that will appear in an empty input.
     */
    placeholder: p.string,
    minLength: p.string,
    /**
     * Specifies minimum accepted value for an input of type "number"
     */
    minValue: p.number,
    maxLength: p.string,
    /**
     * Specifies maximum accepted value for an input of type "number"
     */
    maxValue: p.number,
    /**
     * Name of the submitted form parameter.
     */
    name: p.string,
    /**
     * Specifies `readOnly` for `input` node.
     */
    readOnly: p.bool,
    /**
     * Highlights the input as a required field (does not perform any validation).
     */
    required: p.bool,
    /**
     * `role` to be added to `input` node
     */
    role: p.string,
    /**
     * Determines the step size upon increment or decrement. Can be set to decimal values.
     */
    step: p.number,
    /**
     * Style object to be added to `input` node
     */
    style: p.object,
    /**
     * Specifies `tabIndex` for `input` node
     */
    tabIndex: p.string,
    /**
     * The `<Input>` element includes support for all HTML5 types.
     */
    type: p.oneOf([
      'text',
      'password',
      'datetime',
      'datetime-local',
      'date',
      'month',
      'time',
      'week',
      'number',
      'email',
      'url',
      'search',
      'tel',
      'color'
    ]),
    /**
     * The input is a controlled component, and will always display this value.
     */
    value: p.oneOfType([p.number, p.string]),
    /**
     * Which UX pattern of input? The default is `base` while other option is `counter`
     */
    variant: p.oneOf(['base', Nr]),
    /**
     * This is the initial value of an uncontrolled form element and is present only to provide
     * compatibility with hybrid framework applications that are not entirely React. It should only
     * be used in an application without centralized state (Redux, Flux). "Controlled components"
     * with centralized state is highly recommended.
     * See [Code Overview](https://github.com/salesforce/design-system-react/blob/master/docs/codebase-overview.md#controlled-and-uncontrolled-components) for more information.
     */
    defaultValue: p.oneOfType([p.number, p.string])
  },
  Xm = {
    assistiveText: {
      spinner: 'Loading ...'
    },
    type: 'text'
  },
  dl = function (e) {
    var t = _f(e)
    t['aria-describedby'] = e.hasSpinner
      ? 'loading-status-icon '.concat(e['aria-describedby'])
      : e['aria-describedby']
    var i = e.containerProps,
      r = i.className,
      s = CP(i, ['className']),
      o = Rd(Rd({}, Xm.assistiveText), e.assistiveText)
    return /* @__PURE__ */ $.createElement(
      'div',
      ma(
        {
          className: ae(r, {
            'slds-input-has-icon':
              e.variant !== Nr && (e.iconLeft || e.iconRight),
            'slds-input-has-icon_left': e.iconLeft && !e.iconRight,
            'slds-input-has-icon_right': !e.iconLeft && e.iconRight,
            'slds-input-has-icon_left-right':
              e.variant !== Nr && e.iconLeft && e.iconRight,
            'slds-input-has-fixed-addon': e.fixedTextLeft || e.fixedTextRight,
            'slds-has-divider_bottom': e.isStatic
          })
        },
        s
      ),
      e.iconLeft && e.iconLeft,
      e.fixedTextLeft &&
        /* @__PURE__ */ $.createElement(
          'span',
          {
            className: 'slds-form-element__addon'
          },
          e.fixedTextLeft
        ),
      !e.isStatic &&
        /* @__PURE__ */ $.createElement(
          'input',
          ma(
            {
              autoComplete: e.autoComplete,
              className: ae(
                'slds-input',
                {
                  'slds-text-align_left': e.variant === Nr && e.readOnly
                },
                e.className
              ),
              disabled: e.disabled,
              id: e.id,
              min: e.minValue,
              minLength: e.minLength,
              max: e.maxValue,
              maxLength: e.maxLength,
              name: e.name,
              onBlur: e.onBlur,
              onChange: e.onChange,
              onClick: e.onClick,
              onFocus: e.onFocus,
              onInput: e.onInput,
              onInvalid: e.onInvalid,
              onKeyDown: e.onKeyDown,
              onKeyPress: e.onKeyPress,
              onKeyUp: e.onKeyUp,
              onSelect: e.onSelect,
              onSubmit: e.onSubmit,
              placeholder: e.placeholder,
              readOnly: e.readOnly,
              ref: e.inputRef,
              required: e.required,
              role: e.role,
              step: e.step,
              style: e.style,
              tabIndex: e.tabIndex,
              type: e.type
            },
            t,
            e.value !== void 0
              ? {
                  value: e.value
                }
              : {
                  defaultValue: e.defaultValue
                }
          )
        ),
      e.hasSpinner
        ? /* @__PURE__ */ $.createElement(
            'div',
            {
              className: 'slds-input__icon-group slds-input__icon-group_right'
            },
            /* @__PURE__ */ $.createElement(kP, {
              assistiveText: {
                label: o.spinner
              },
              id: 'loading-status-icon',
              isInput: !0,
              size: 'x-small',
              variant: 'brand'
            }),
            e.iconRight && e.iconRight
          )
        : e.iconRight && e.iconRight,
      e.fixedTextRight &&
        /* @__PURE__ */ $.createElement(
          'span',
          {
            className: 'slds-form-element__addon'
          },
          e.fixedTextRight
        ),
      e.isStatic &&
        /* @__PURE__ */ $.createElement(
          'span',
          {
            className: ae('slds-form-element__static', 'slds-grid', {
              'slds-grid_align-spread': e.variant !== Nr
            }),
            onClick: e.onClick
          },
          e.value,
          e.inlineEditTrigger
        )
    )
  }
dl.displayName = 'SLDSInnerInput'
dl.propTypes = ZP
dl.defaultProps = Xm
const AP = dl
var RP = {
    /*
     * Assistive Text to use instead of a visible label
     */
    assistiveText: p.object,
    /**
     * Class names to be added to the label
     */
    className: p.oneOfType([p.array, p.object, p.string]),
    /*
     * Id of the input associated with this label
     */
    htmlFor: p.string,
    /*
     * Input Label
     */
    label: p.string,
    /*
     * Applies label styling for a required form element
     */
    required: p.bool,
    /**
     * Changes markup of label.
     */
    variant: p.oneOf(['base', 'static'])
  },
  EP = {
    variant: 'base'
  },
  pl = function (e) {
    var t = e.label || (e.assistiveText && e.assistiveText.label),
      i = {
        base: /* @__PURE__ */ $.createElement(
          'label',
          {
            className: ae(
              'slds-form-element__label',
              {
                'slds-assistive-text': e.assistiveText && !e.label
              },
              e.className
            ),
            htmlFor: e.htmlFor
          },
          e.required &&
            /* @__PURE__ */ $.createElement(
              'abbr',
              {
                className: 'slds-required',
                title: 'required'
              },
              '*'
            ),
          t
        ),
        static: /* @__PURE__ */ $.createElement(
          'span',
          {
            className: ae('slds-form-element__label', e.className)
          },
          t
        )
      }
    return t ? i[e.variant] : null
  }
pl.displayName = 'Label'
pl.propTypes = RP
pl.defaultProps = EP
const DP = pl
var Ym = function () {}
if (process.env.NODE_ENV !== 'production') {
  var Ed = {}
  Ym = function (e, t, i) {
    var r = i ? ' '.concat(i) : '',
      s = Object.keys(t)
    ;(s = s.filter(function (o) {
      return t[o]
    })),
      Ed[e] ||
        (wi(
          s.length <= 1,
          '[Design System React] Only one of the following props is needed by '
            .concat(e, ': [')
            .concat(s.join(), '].')
            .concat(r)
        ),
        (Ed[e] = !!t))
  }
}
const tu = Ym
var Im = function () {}
process.env.NODE_ENV !== 'production' &&
  (Im = function (e) {
    var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {},
      i = arguments.length > 2 ? arguments[2] : void 0,
      r = ei(i)
    if (e === il) {
      var s =
        'Please use `iconLeft` and `iconRight` to pass in a customized <Icon> component. '.concat(
          r()
        )
      bn(
        e,
        t.assistiveText && t.assistiveText.fieldLevelHelpButton,
        'assistiveText.fieldLevelHelpButton',
        void 0,
        'Please pass a `Tooltip` component into `fieldLevelHelpTooltip` with `assistiveText.triggerLearnMoreIcon`.'
      ),
        bn(e, t.iconCategory, 'iconCategory', void 0, s),
        bn(e, t.iconName, 'iconName', void 0, s),
        bn(e, t.iconPosition, 'iconPosition', void 0, s),
        bn(e, t.iconAssistiveText, 'iconAssistiveText', void 0, s),
        bn(e, t.onIconClick, 'onIconClick', void 0, s),
        typeof t.assistiveText == 'string' &&
          _e(
            e,
            t.assistiveText,
            'assistiveText',
            'AssistiveText as a string has been deprecated and is now an object to allow for multiple uses in the component. Please use either assistiveText.label or assistiveText.spinner. '.concat(
              r('assistiveText')
            )
          ),
        tu(
          e,
          {
            'assistiveText.label': t.assistiveText && t.assistiveText.label,
            label: t.label
          },
          r('assistiveText')
        ),
        tu(
          e,
          {
            fixedTextLeft: t.fixedTextLeft,
            fixedTextRight: t.fixedTextRight
          },
          r('assistiveText')
        )
    } else
      e === Ex &&
        typeof t.assistiveText == 'string' &&
        _e(
          e,
          t.assistiveText,
          'assistiveText',
          '`assistiveText` as a string has been deprecated and is now an object to allow for multiple uses in the component. Please use `assistiveText.label` instead. '.concat(
            r('assistiveText')
          )
        )
  })
const XP = Im,
  YP = 'input',
  IP = 'prod',
  NP = 'Input',
  MP = [
    {
      component: 'search',
      classKey: 'InputSearch'
    }
  ],
  VP = {
    component: YP,
    status: IP,
    'display-name': 'Inputs',
    classKey: NP,
    'last-accessibility-review': {
      'date-iso-8601': '2017/09/22',
      'commit-sha': 'ad6b6c6523ee21cada11be5f7ea4d99abc530726'
    },
    dependencies: MP,
    'SLDS-component-path': '/components/input',
    'site-stories': [
      {
        heading: 'Default',
        path: '/__examples__/default.jsx'
      },
      {
        heading: 'With Icons',
        path: '/__examples__/icons.jsx'
      },
      {
        heading: 'Error State',
        path: '/__examples__/error.jsx'
      },
      {
        heading: 'Disabled',
        path: '/__examples__/inactiveInputs.jsx'
      },
      {
        heading: 'With Inline Help',
        path: '/__examples__/inline-help.jsx'
      },
      {
        heading: 'With Field Level Help',
        path: '/__examples__/field-level-help.jsx'
      },
      {
        heading: 'Counter',
        path: '/__examples__/counter-input.jsx'
      }
    ],
    'url-slug': 'inputs'
  }
var WP = function (e) {
    var t = {}
    return (
      Object.keys(e).forEach(function (i) {
        typeof e[i] < 'u' && (t[i] = e[i])
      }),
      t
    )
  },
  jP = {
    removeUndefined: WP
  }
const BP = jP
function Dd(n, e) {
  var t = Object.keys(n)
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(n)
    e &&
      (i = i.filter(function (r) {
        return Object.getOwnPropertyDescriptor(n, r).enumerable
      })),
      t.push.apply(t, i)
  }
  return t
}
function kr(n) {
  for (var e = 1; e < arguments.length; e++) {
    var t = arguments[e] != null ? arguments[e] : {}
    e % 2
      ? Dd(Object(t), !0).forEach(function (i) {
          LP(n, i, t[i])
        })
      : Object.getOwnPropertyDescriptors
        ? Object.defineProperties(n, Object.getOwnPropertyDescriptors(t))
        : Dd(Object(t)).forEach(function (i) {
            Object.defineProperty(n, i, Object.getOwnPropertyDescriptor(t, i))
          })
  }
  return n
}
function LP(n, e, t) {
  return (
    e in n
      ? Object.defineProperty(n, e, {
          value: t,
          enumerable: !0,
          configurable: !0,
          writable: !0
        })
      : (n[e] = t),
    n
  )
}
var UP = {
    /*
     * Assistive Text object from parent component such as Input, Combobox, etc.
     */
    assistiveText: p.shape({
      triggerLearnMoreIcon: p.string
    }),
    /*
     * Tooltip from external prop
     */
    fieldLevelHelpTooltip: p.node.isRequired
  },
  qP = {
    triggerClassName: 'slds-form-element__icon',
    // This allows `position: absolute` Tooltips to align properly.
    // If not present, tooltip will always be below the info icon // instead of above it.
    triggerStyle: {
      position: 'static'
    },
    variant: 'learnMore'
  },
  Zf = function (e) {
    var t = e.fieldLevelHelpTooltip,
      i = e.assistiveText,
      r = i === void 0 ? {} : i
    return t
      ? /* @__PURE__ */ $.createElement(
          Zm,
          kr(
            kr(kr({}, qP), t.props),
            {},
            {
              // allow backwards compatibility with Input's
              // assistiveText.fieldLevelHelpButton
              // `Input` used to have an `assistiveText.fieldLevelHelpButton`
              // prop and that prop needs to override the default Tooltip
              // "Help" string.
              assistiveText: kr(
                kr({}, t.props.assistiveText),
                BP.removeUndefined(r)
              )
            }
          )
        )
      : null
  }
Zf.propTypes = UP
Zf.displayName = 'FieldLevelHelpTooltip'
const zP = Zf
function Zo(n) {
  '@babel/helpers - typeof'
  return (
    typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol'
      ? (Zo = function (t) {
          return typeof t
        })
      : (Zo = function (t) {
          return t &&
            typeof Symbol == 'function' &&
            t.constructor === Symbol &&
            t !== Symbol.prototype
            ? 'symbol'
            : typeof t
        }),
    Zo(n)
  )
}
function Xd(n, e) {
  var t = Object.keys(n)
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(n)
    e &&
      (i = i.filter(function (r) {
        return Object.getOwnPropertyDescriptor(n, r).enumerable
      })),
      t.push.apply(t, i)
  }
  return t
}
function Yd(n) {
  for (var e = 1; e < arguments.length; e++) {
    var t = arguments[e] != null ? arguments[e] : {}
    e % 2
      ? Xd(Object(t), !0).forEach(function (i) {
          mt(n, i, t[i])
        })
      : Object.getOwnPropertyDescriptors
        ? Object.defineProperties(n, Object.getOwnPropertyDescriptors(t))
        : Xd(Object(t)).forEach(function (i) {
            Object.defineProperty(n, i, Object.getOwnPropertyDescriptor(t, i))
          })
  }
  return n
}
function nu() {
  return (
    (nu =
      Object.assign ||
      function (n) {
        for (var e = 1; e < arguments.length; e++) {
          var t = arguments[e]
          for (var i in t)
            Object.prototype.hasOwnProperty.call(t, i) && (n[i] = t[i])
        }
        return n
      }),
    nu.apply(this, arguments)
  )
}
function FP(n, e) {
  if (!(n instanceof e))
    throw new TypeError('Cannot call a class as a function')
}
function Id(n, e) {
  for (var t = 0; t < e.length; t++) {
    var i = e[t]
    ;(i.enumerable = i.enumerable || !1),
      (i.configurable = !0),
      'value' in i && (i.writable = !0),
      Object.defineProperty(n, i.key, i)
  }
}
function GP(n, e, t) {
  return e && Id(n.prototype, e), t && Id(n, t), n
}
function HP(n, e) {
  if (typeof e != 'function' && e !== null)
    throw new TypeError('Super expression must either be null or a function')
  ;(n.prototype = Object.create(e && e.prototype, {
    constructor: { value: n, writable: !0, configurable: !0 }
  })),
    e && iu(n, e)
}
function iu(n, e) {
  return (
    (iu =
      Object.setPrototypeOf ||
      function (i, r) {
        return (i.__proto__ = r), i
      }),
    iu(n, e)
  )
}
function KP(n) {
  var e = eQ()
  return function () {
    var i = ya(n),
      r
    if (e) {
      var s = ya(this).constructor
      r = Reflect.construct(i, arguments, s)
    } else r = i.apply(this, arguments)
    return JP(this, r)
  }
}
function JP(n, e) {
  return e && (Zo(e) === 'object' || typeof e == 'function') ? e : qt(n)
}
function qt(n) {
  if (n === void 0)
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    )
  return n
}
function eQ() {
  if (typeof Reflect > 'u' || !Reflect.construct || Reflect.construct.sham)
    return !1
  if (typeof Proxy == 'function') return !0
  try {
    return (
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      ),
      !0
    )
  } catch {
    return !1
  }
}
function ya(n) {
  return (
    (ya = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function (t) {
          return t.__proto__ || Object.getPrototypeOf(t)
        }),
    ya(n)
  )
}
function mt(n, e, t) {
  return (
    e in n
      ? Object.defineProperty(n, e, {
          value: t,
          enumerable: !0,
          configurable: !0,
          writable: !0
        })
      : (n[e] = t),
    n
  )
}
var Ft = 'counter',
  Rn = 'Decrement',
  Mr = 'Increment',
  Nm = {
    assistiveText: {
      decrement: ''.concat(Rn, ' ').concat(Ft),
      increment: ''.concat(Mr, ' ').concat(Ft)
    },
    type: 'text'
  },
  Ol = /* @__PURE__ */ (function (n) {
    HP(t, n)
    var e = KP(t)
    function t(i) {
      var r
      return (
        FP(this, t),
        (r = e.call(this, i)),
        mt(qt(r), 'getId', function () {
          return r.props.id || r.generatedId
        }),
        mt(qt(r), 'getErrorId', function () {
          return r.props['aria-describedby'] || r.generatedErrorId
        }),
        mt(qt(r), 'getValueAsNumber', function () {
          var s = 0
          return (
            r.props.value !== void 0
              ? (s = Number(r.props.value))
              : r.inputRef && (s = Number(r.inputRef.value)),
            s
          )
        }),
        mt(qt(r), 'getCounterButtonIcon', function (s) {
          var o = r.getValueAsNumber(),
            a = !1
          return (
            (r.props.disabled ||
              (s === Mr &&
                r.props.maxValue !== void 0 &&
                o >= r.props.maxValue) ||
              (s === Rn &&
                r.props.minValue !== void 0 &&
                o <= r.props.minValue)) &&
              (a = !0),
            /* @__PURE__ */ $.createElement(ft, {
              assistiveText: {
                icon: r.props.assistiveText[s.toLowerCase()]
              },
              className: ae(
                'slds-button_icon-small',
                'slds-input__button_'.concat(s.toLowerCase())
              ),
              disabled: a,
              iconCategory: 'utility',
              iconName: s === Rn ? 'ban' : 'new',
              onKeyDown: function (c) {
                c.keyCode === 13 && r.performStep(s, c)
              },
              onKeyUp: r.stopStepping,
              onMouseDown: function (c) {
                r.performStep(s, c)
              },
              onMouseLeave: r.stopStepping,
              onMouseUp: r.stopStepping,
              variant: 'icon'
            })
          )
        }),
        mt(qt(r), 'getIconRender', function (s, o) {
          var a,
            l = {
              assistiveText: {
                icon:
                  (r.props[o] && r.props[o].props.assistiveText) ||
                  r.props.iconAssistiveText
              },
              category:
                (r.props[o] && r.props[o].props.category) ||
                r.props.iconCategory,
              name: (r.props[o] && r.props[o].props.name) || r.props.iconName,
              onClick:
                (r.props[o] && r.props[o].props.onClick) || r.props.onIconClick
            }
          return (
            r.props[o] && s && r.props[o]
              ? (a = /* @__PURE__ */ $.cloneElement(r.props[o], {
                  iconPosition: ''.concat(s)
                }))
              : l.name &&
                (a = /* @__PURE__ */ $.createElement(
                  vP,
                  nu(
                    {
                      iconPosition: s
                    },
                    l
                  )
                )),
            a
          )
        }),
        mt(qt(r), 'setInputRef', function (s) {
          ;(r.inputRef = s), r.props.inputRef && r.props.inputRef(s)
        }),
        mt(qt(r), 'handleChange', function (s) {
          if (r.props.onChange) {
            var o = {
              value: s.target.value
            }
            r.props.variant === Ft && (o.number = Number(o.value)),
              r.props.onChange(s, o)
          }
        }),
        mt(qt(r), 'performStep', function (s, o) {
          clearTimeout(r.stepping.timeout)
          var a = r.props.maxValue,
            l = r.props.minValue,
            c = r.props.step !== void 0 ? Number(r.props.step) : 1,
            u = r.getValueAsNumber(),
            f = !1
          if (s === Rn && a !== void 0 && u > a) (u = Number(a)), (f = !0)
          else if (s === Mr && l !== void 0 && u < l) (u = Number(l)), (f = !0)
          else {
            var h =
                String(c).search(/\./) >= 0
                  ? String(c).split('.')[1].length
                  : 0,
              d = 0
            l !== void 0 && (d = (u - l) % c),
              d > 0
                ? (u = s === Rn ? u - d : u + (c - d))
                : (u = s === Rn ? u - c : u + c),
              (u = Number(u.toFixed(h))),
              !(a !== void 0 && u > a) && !(l !== void 0 && u < l) && (f = !0)
          }
          f &&
            (r.props.value === void 0 && r.inputRef
              ? ((r.inputRef.value = String(u)), r.forceUpdate())
              : r.props.onChange &&
                r.props.onChange(o, {
                  number: u,
                  value: String(u)
                })),
            (s === Mr && a !== void 0 && u >= a) ||
            (s === Rn && l !== void 0 && u <= l)
              ? r.stopStepping()
              : (r.stepping.timeout = setTimeout(function () {
                  ;(r.stepping.currentDelay = r.stepping.speedDelay),
                    r.performStep(s)
                }, r.stepping.currentDelay))
        }),
        mt(qt(r), 'stopStepping', function () {
          clearTimeout(r.stepping.timeout),
            (r.stepping.currentDelay = r.stepping.initialDelay)
        }),
        (r.inputRef = null),
        (r.stepping = {
          currentDelay: 500,
          initialDelay: 500,
          speedDelay: 75,
          timeout: {}
        }),
        XP(il, i, VP),
        (r.generatedId = bi.generate()),
        i.errorText && (r.generatedErrorId = bi.generate()),
        r
      )
    }
    return (
      GP(t, [
        {
          key: 'render',
          value: function () {
            var r = Yd(Yd({}, Nm.assistiveText), this.props.assistiveText),
              s =
                this.props.variant === Ft
                  ? this.setInputRef
                  : this.props.inputRef,
              o = null,
              a = null,
              l = this.props.label || (r && r.label)
            return (
              this.props.iconLeft ||
              ((this.props.iconPosition === 'left' ||
                this.props.iconPosition === void 0) &&
                this.props.iconName)
                ? (o = this.getIconRender('left', 'iconLeft'))
                : this.props.variant === Ft &&
                  !this.props.isStatic &&
                  !this.props.readOnly &&
                  (o = this.getCounterButtonIcon(Rn)),
              this.props.iconRight ||
              (this.props.iconPosition === 'right' && this.props.iconName)
                ? (a = this.getIconRender('right', 'iconRight'))
                : this.props.variant === Ft &&
                  !this.props.isStatic &&
                  !this.props.readOnly &&
                  (a = this.getCounterButtonIcon(Mr)),
              /* @__PURE__ */ $.createElement(
                'div',
                {
                  className: ae(
                    'slds-form-element',
                    {
                      'slds-has-error': this.props.errorText
                    },
                    this.props.className
                  ),
                  style: this.props.styleContainer
                },
                /* @__PURE__ */ $.createElement(DP, {
                  assistiveText: r,
                  htmlFor: this.props.isStatic ? void 0 : this.getId(),
                  label: this.props.label,
                  required: this.props.required,
                  variant: this.props.isStatic ? 'static' : 'base'
                }),
                this.props.fieldLevelHelpTooltip && l
                  ? /* @__PURE__ */ $.createElement(zP, {
                      assistiveText: {
                        triggerLearnMoreIcon: r.fieldLevelHelpButton
                      },
                      fieldLevelHelpTooltip: this.props.fieldLevelHelpTooltip
                    })
                  : null,
                /* @__PURE__ */ $.createElement(AP, {
                  'aria-activedescendant': this.props['aria-activedescendant'],
                  'aria-autocomplete': this.props['aria-autocomplete'],
                  'aria-controls': this.props['aria-controls'],
                  'aria-labelledby': this.props['aria-labelledby'],
                  'aria-describedby': this.getErrorId(),
                  'aria-expanded': this.props['aria-expanded'],
                  'aria-owns': this.props['aria-owns'],
                  'aria-required': this.props['aria-required'],
                  autoComplete: this.props.autoComplete,
                  className: ae({
                    'slds-input_counter': this.props.variant === Ft,
                    'slds-p-horizontal_none':
                      this.props.variant === Ft && this.props.readOnly
                  }),
                  containerProps: {
                    className: 'slds-form-element__control'
                  },
                  defaultValue: this.props.defaultValue,
                  disabled: this.props.disabled,
                  fixedTextLeft: this.props.fixedTextLeft,
                  fixedTextRight: this.props.fixedTextRight,
                  hasSpinner: this.props.hasSpinner,
                  id: this.getId(),
                  iconLeft: o,
                  iconRight: a,
                  inlineEditTrigger: this.props.inlineEditTrigger,
                  isStatic: this.props.isStatic,
                  minLength: this.props.minLength,
                  minValue: this.props.minValue,
                  maxLength: this.props.maxLength,
                  maxValue: this.props.maxValue,
                  name: this.props.name,
                  onBlur: this.props.onBlur,
                  onChange: this.handleChange,
                  onClick: this.props.onClick,
                  onFocus: this.props.onFocus,
                  onInput: this.props.onInput,
                  onInvalid: this.props.onInvalid,
                  onKeyDown: this.props.onKeyDown,
                  onKeyPress: this.props.onKeyPress,
                  onKeyUp: this.props.onKeyUp,
                  onSelect: this.props.onSelect,
                  onSubmit: this.props.onSubmit,
                  placeholder: this.props.placeholder,
                  inputRef: s,
                  readOnly: this.props.readOnly,
                  required: this.props.required,
                  role: this.props.role,
                  assistiveText: this.props.assistiveText,
                  type: this.props.variant === Ft ? 'number' : this.props.type,
                  value: this.props.value,
                  variant: this.props.variant,
                  step: this.props.step,
                  style: this.props.styleInput
                }),
                this.props.inlineHelpText &&
                  /* @__PURE__ */ $.createElement(
                    'div',
                    {
                      className: 'slds-form-element__help'
                    },
                    this.props.inlineHelpText
                  ),
                this.props.errorText &&
                  /* @__PURE__ */ $.createElement(
                    'div',
                    {
                      id: this.getErrorId(),
                      className: 'slds-form-element__help'
                    },
                    this.props.errorText
                  ),
                this.props.children
              )
            )
          }
        }
      ]),
      t
    )
  })($.Component)
mt(Ol, 'displayName', il)
mt(Ol, 'propTypes', {
  /**
   * The aria-activedescendant attribute contains the ID of the currently active child object that is part of a composite widget within the Document Object Model. It makes do with the overhead of having all or more than one child focusable. As the name specifies, it helps in managing the current active child of the composite widget.
   */
  'aria-activedescendant': p.string,
  /**
   * Indicates if the suggestions in a composite widget are values that complete the current textbox input.
   */
  'aria-autocomplete': p.string,
  /**
   * An HTML ID that is shared with ARIA-supported devices with the
   * `aria-controls` attribute in order to relate the input with
   * another region of the page. An example would be a select box
   * that shows or hides a panel.
   */
  'aria-controls': p.string,
  /**
   * The `aria-describedby` attribute is used to indicate the IDs of the elements that describe the object. It is used to establish a relationship between widgets or groups and text that described them. This is very similar to aria-labelledby: a label describes the essence of an object, while a description provides more information that the user might need.
   */
  'aria-describedby': p.string,
  /**
   * Use the `aria-expanded` state to indicate whether regions of the content are collapsible, and to expose whether a region is currently expanded or collapsed.
   */
  'aria-expanded': p.bool,
  /**
   * Indicates that the element has a popup context menu or sub-level menu.
   */
  'aria-haspopup': p.bool,
  /**
   * The aria-labelledby attribute contains the element IDs of labels in objects such as input elements, widgets, and groups. The attribute establishes relationships between objects and their labels. Assistive technology, such as screen readers, use this attribute to catalog the objects in a document so that users can navigate between them. Without an element ID, the assistive technology cannot catalog the object.
   */
  'aria-labelledby': p.string,
  /**
   * An HTML ID that is shared with ARIA-supported devices with the
   * `aria-controls` attribute in order to relate the input with
   * another region of the page. An example would be a search field
   * that shows search results.
   */
  'aria-owns': p.string,
  /**
   * The `aria-required` attribute is used to indicate that user input is required on an element before a form can be submitted.
   */
  'aria-required': p.bool,
  /**
   * **Assistive text for accessibility**
   * * `label`: Visually hidden label but read out loud by screen readers.
   * * `spinner`: Text for loading spinner icon.
   */
  assistiveText: p.shape({
    label: p.string,
    spinner: p.string
  }),
  /**
   * Disabled brower's autocomplete when "off" is used.
   */
  autoComplete: p.string,
  /**
   * Elements are added after the `input`.
   */
  children: p.node,
  /**
   * Class names to be added to the outer container of the input.
   */
  className: p.oneOfType([p.array, p.object, p.string]),
  /**
   * This is the initial value of an uncontrolled form element and
   * is present only to provide compatibility with hybrid framework
   * applications that are not entirely React. It should only be used
   * in an application without centralized state (Redux, Flux).
   * "Controlled components" with centralized state is highly recommended.
   * See [Code Overview](https://github.com/salesforce/design-system-react/blob/master/docs/codebase-overview.md#controlled-and-uncontrolled-components) for more information.
   */
  defaultValue: p.oneOfType([p.number, p.string]),
  /**
   * Disables the input and prevents editing the contents.
   */
  disabled: p.bool,
  /**
   * Message to display when the input is in an error state. When this is present, also visually highlights the component as in error.
   */
  errorText: p.oneOfType([p.node, p.string]),
  /**
   * A [Tooltip](https://react.lightningdesignsystem.com/components/tooltips/) component that is displayed next to the label.
   */
  fieldLevelHelpTooltip: p.node,
  /**
   * Displays text or node to the left of the input. This follows the fixed text input UX pattern.
   */
  fixedTextLeft: p.oneOfType([p.node, p.string]),
  /**
   * Displays text or node to the right of the input. This follows the fixed text input UX pattern.
   */
  fixedTextRight: p.oneOfType([p.node, p.string]),
  /**
   * If true, loading spinner appears inside input on right hand side.
   */
  hasSpinner: p.bool,
  /**
   * Left aligned icon, must be instace of `design-system-react/components/icon/input-icon`
   */
  iconLeft: p.node,
  /**
   * Right aligned icon, must be instace of `design-system-react/components/icon/input-icon`
   */
  iconRight: p.node,
  /**
   * Every input must have a unique ID in order to support keyboard navigation and ARIA support.
   */
  id: p.string,
  /**
   * Displays help text under the input.
   */
  inlineHelpText: p.oneOfType([p.node, p.string]),
  /**
   * This callback exposes the input reference / DOM node to parent components. `<Parent inputRef={(inputComponent) => this.input = inputComponent} />
   */
  inputRef: p.func,
  /**
   * Displays the value of the input statically. This follows the static input UX pattern.
   */
  isStatic: p.bool,
  /**
   * This label appears above the input.
   */
  label: p.string,
  /**
   * Triggered when focus is removed.
   */
  onBlur: p.func,
  /**
   * This callback fires when the input changes. Passes in `event, { value }`.
   */
  onChange: p.func,
  /**
   * This event fires when the input is clicked.
   */
  onClick: p.func,
  /**
   * Triggered when component is focused.
   */
  onFocus: p.func,
  /**
   * Similar to `onchange`. Triggered when an element gets user input.
   */
  onInput: p.func,
  /**
   * Triggered when a submittable `<input>` element is invalid.
   */
  onInvalid: p.func,
  /**
   * Triggered when a key is pressed down
   */
  onKeyDown: p.func,
  /**
   * Triggered when a key is pressed and released
   */
  onKeyPress: p.func,
  /**
   * Triggered when a key is released
   */
  onKeyUp: p.func,
  /**
   * Triggered after some text has been selected in an element.
   */
  onSelect: p.func,
  /**
   * Fires when a form is submitted.
   */
  onSubmit: p.func,
  /**
   * Text that will appear in an empty input.
   */
  placeholder: p.string,
  /**
   * Sets the minimum number of characters that an `<input>` can accept.
   */
  minLength: p.string,
  /**
   * Specifies minimum accepted value for a counter input
   */
  minValue: p.number,
  /**
   * Sets the maximum number of characters that an `<input>` can accept.
   */
  maxLength: p.string,
  /**
   * Specifies maximum accepted value for a counter input
   */
  maxValue: p.number,
  /**
   * Name of the submitted form parameter.
   */
  name: p.string,
  /**
   * Displays the value of the input as read-only. This is used in the inline edit UX pattern.
   */
  readOnly: p.bool,
  /**
   * Highlights the input as a required field (does not perform any validation).
   */
  required: p.bool,
  /**
   * ARIA role
   */
  role: p.string,
  /**
   * Determines the step size upon increment or decrement. Can be set to decimal values.
   */
  step: p.number,
  /**
   * styles to be added to input
   */
  styleInput: p.object,
  /**
   * Custom styles to be passed to the component container
   */
  styleContainer: p.object,
  /**
   * The `<Input>` element includes support for all HTML5 types.
   */
  type: p.oneOf([
    'text',
    'password',
    'datetime',
    'datetime-local',
    'date',
    'month',
    'time',
    'week',
    'number',
    'email',
    'url',
    'search',
    'tel',
    'color'
  ]),
  /**
   * The input is a controlled component, and will always display this value.
   */
  value: p.oneOfType([p.number, p.string]),
  /**
   * Which UX pattern of input? The default is `base` while other option is `counter`
   */
  variant: p.oneOf(['base', Ft])
})
mt(Ol, 'defaultProps', Nm)
var Mm = function () {}
process.env.NODE_ENV !== 'production' &&
  (Mm = function (e, t, i) {
    var r = ei(i)
    tu(
      e,
      {
        assistiveText: t.assistiveText,
        label: t.label
      },
      r()
    ),
      typeof t.assistiveText == 'string' &&
        _e(
          e,
          t.assistiveText,
          'assistiveText',
          '`assistiveText` as a string has been deprecated and is now an object to allow for multiple uses in the component. Please use `assistiveText.label` instead. '.concat(
            r('assistiveText')
          )
        )
  })
const tQ = Mm,
  nQ = 'textarea',
  iQ = 'prod',
  rQ = 'Textarea',
  sQ = {
    component: nQ,
    status: iQ,
    'display-name': 'Textareas',
    classKey: rQ,
    'SLDS-component-path': '/components/forms#flavor-textarea',
    'site-stories': [
      {
        heading: 'Default',
        path: '/__examples__/default.jsx'
      },
      {
        heading: 'Error',
        path: '/__examples__/error.jsx'
      },
      {
        heading: 'Disabled',
        path: '/__examples__/disabled.jsx'
      }
    ],
    'url-slug': 'textareas'
  }
function Ao(n) {
  '@babel/helpers - typeof'
  return (
    typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol'
      ? (Ao = function (t) {
          return typeof t
        })
      : (Ao = function (t) {
          return t &&
            typeof Symbol == 'function' &&
            t.constructor === Symbol &&
            t !== Symbol.prototype
            ? 'symbol'
            : typeof t
        }),
    Ao(n)
  )
}
function ru() {
  return (
    (ru =
      Object.assign ||
      function (n) {
        for (var e = 1; e < arguments.length; e++) {
          var t = arguments[e]
          for (var i in t)
            Object.prototype.hasOwnProperty.call(t, i) && (n[i] = t[i])
        }
        return n
      }),
    ru.apply(this, arguments)
  )
}
function Nd(n, e) {
  var t = Object.keys(n)
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(n)
    e &&
      (i = i.filter(function (r) {
        return Object.getOwnPropertyDescriptor(n, r).enumerable
      })),
      t.push.apply(t, i)
  }
  return t
}
function oQ(n) {
  for (var e = 1; e < arguments.length; e++) {
    var t = arguments[e] != null ? arguments[e] : {}
    e % 2
      ? Nd(Object(t), !0).forEach(function (i) {
          Kr(n, i, t[i])
        })
      : Object.getOwnPropertyDescriptors
        ? Object.defineProperties(n, Object.getOwnPropertyDescriptors(t))
        : Nd(Object(t)).forEach(function (i) {
            Object.defineProperty(n, i, Object.getOwnPropertyDescriptor(t, i))
          })
  }
  return n
}
function aQ(n, e) {
  if (!(n instanceof e))
    throw new TypeError('Cannot call a class as a function')
}
function Md(n, e) {
  for (var t = 0; t < e.length; t++) {
    var i = e[t]
    ;(i.enumerable = i.enumerable || !1),
      (i.configurable = !0),
      'value' in i && (i.writable = !0),
      Object.defineProperty(n, i.key, i)
  }
}
function lQ(n, e, t) {
  return e && Md(n.prototype, e), t && Md(n, t), n
}
function cQ(n, e) {
  if (typeof e != 'function' && e !== null)
    throw new TypeError('Super expression must either be null or a function')
  ;(n.prototype = Object.create(e && e.prototype, {
    constructor: { value: n, writable: !0, configurable: !0 }
  })),
    e && su(n, e)
}
function su(n, e) {
  return (
    (su =
      Object.setPrototypeOf ||
      function (i, r) {
        return (i.__proto__ = r), i
      }),
    su(n, e)
  )
}
function uQ(n) {
  var e = hQ()
  return function () {
    var i = ba(n),
      r
    if (e) {
      var s = ba(this).constructor
      r = Reflect.construct(i, arguments, s)
    } else r = i.apply(this, arguments)
    return fQ(this, r)
  }
}
function fQ(n, e) {
  return e && (Ao(e) === 'object' || typeof e == 'function') ? e : ou(n)
}
function ou(n) {
  if (n === void 0)
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    )
  return n
}
function hQ() {
  if (typeof Reflect > 'u' || !Reflect.construct || Reflect.construct.sham)
    return !1
  if (typeof Proxy == 'function') return !0
  try {
    return (
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      ),
      !0
    )
  } catch {
    return !1
  }
}
function ba(n) {
  return (
    (ba = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function (t) {
          return t.__proto__ || Object.getPrototypeOf(t)
        }),
    ba(n)
  )
}
function Kr(n, e, t) {
  return (
    e in n
      ? Object.defineProperty(n, e, {
          value: t,
          enumerable: !0,
          configurable: !0,
          writable: !0
        })
      : (n[e] = t),
    n
  )
}
var Af = /* @__PURE__ */ (function (n) {
  cQ(t, n)
  var e = uQ(t)
  function t(i) {
    var r
    return (
      aQ(this, t),
      (r = e.call(this, i)),
      Kr(ou(r), 'getId', function () {
        return r.props.id || r.generatedId
      }),
      Kr(ou(r), 'getErrorId', function () {
        return r.props['aria-describedby'] || r.generatedErrorId
      }),
      tQ(Rg, i, sQ),
      (r.generatedId = bi.generate()),
      i.errorText && (r.generatedErrorId = bi.generate()),
      r
    )
  }
  return (
    lQ(t, [
      {
        key: 'render',
        value:
          // ### Render
          function () {
            var r = this.props,
              s = r.autoFocus,
              o = r.children,
              a = r.className,
              l = r.classNameContainer,
              c = r.disabled,
              u = r.errorText,
              f = r.textareaRef,
              h = r.label,
              d = r.onBlur,
              O = r.onChange,
              m = r.onClick,
              b = r.onFocus,
              x = r.onInput,
              w = r.onInvalid,
              T = r.onKeyDown,
              Q = r.onKeyPress,
              P = r.onKeyUp,
              C = r.onSelect,
              A = r.onSubmit,
              j = r.maxLength,
              X = r.name,
              L = r.placeholder,
              U = r.required,
              E = r.role,
              I = r.value,
              B = r.defaultValue,
              ee = r.wrap,
              ie = _f(this.props),
              te =
                typeof this.props.assistiveText == 'string'
                  ? this.props.assistiveText
                  : oQ({}, this.props.assistiveText).label,
              ce = h || te
            return /* @__PURE__ */ $.createElement(
              'div',
              {
                className: ae(
                  'slds-form-element',
                  {
                    'slds-has-error': u
                  },
                  l
                )
              },
              ce &&
                /* @__PURE__ */ $.createElement(
                  'label',
                  {
                    className: ae('slds-form-element__label', {
                      'slds-assistive-text': te && !h
                    }),
                    htmlFor: this.getId()
                  },
                  U &&
                    /* @__PURE__ */ $.createElement(
                      'abbr',
                      {
                        className: 'slds-required',
                        title: 'required'
                      },
                      '*'
                    ),
                  ce
                ),
              /* @__PURE__ */ $.createElement(
                'div',
                {
                  className: ae('slds-form-element__control')
                },
                /* @__PURE__ */ $.createElement(
                  'textarea',
                  ru(
                    {
                      className: ae('slds-textarea', a),
                      autoFocus: s,
                      disabled: c,
                      id: this.getId(),
                      maxLength: j,
                      name: X,
                      onBlur: d,
                      onChange: O,
                      onClick: m,
                      onFocus: b,
                      onInput: x,
                      onInvalid: w,
                      onKeyDown: T,
                      onKeyPress: Q,
                      onKeyUp: P,
                      onSelect: C,
                      onSubmit: A,
                      placeholder: L,
                      ref: f,
                      role: E,
                      required: U,
                      wrap: ee,
                      value: I,
                      defaultValue: B
                    },
                    ie
                  )
                )
              ),
              u &&
                /* @__PURE__ */ $.createElement(
                  'div',
                  {
                    id: this.getErrorId(),
                    className: 'slds-form-element__help'
                  },
                  u
                ),
              o
            )
          }
      }
    ]),
    t
  )
})($.Component)
Kr(Af, 'displayName', Rg)
Kr(Af, 'propTypes', {
  /**
   * **Assistive text for accessibility.**
   * * `label`: If present, the label associated with this `textarea` is overwritten by this text and is visually not shown.
   */
  assistiveText: p.shape({
    label: p.string
  }),
  /**
   * The aria-activedescendant attribute contains the ID of the currently active child object that is part of a composite widget within the Document Object Model. It makes do with the overhead of having all or more than one child focusable. As the name specifies, it helps in managing the current active child of the composite widget.
   */
  'aria-activedescendant': p.string,
  /**
   * Indicates if the suggestions in a composite widget are values that complete the current textbox input.
   */
  'aria-autocomplete': p.string,
  /**
   * An HTML ID that is shared with ARIA-supported devices with the
   * `aria-controls` attribute in order to relate the input with
   * another region of the page. An example would be a select box
   * that shows or hides a panel.
   */
  'aria-controls': p.string,
  /**
   * The `aria-describedby` attribute is used to indicate the IDs of the elements that describe the object. It is used to establish a relationship between widgets or groups and text that described them. This is very similar to aria-labelledby: a label describes the essence of an object, while a description provides more information that the user might need.
   */
  'aria-describedby': p.string,
  /**
   * Use the `aria-expanded` state to indicate whether regions of the content are collapsible, and to expose whether a region is currently expanded or collapsed.
   */
  'aria-expanded': p.bool,
  /**
   * Indicates that the element has a popup context menu or sub-level menu.
   */
  'aria-haspopup': p.bool,
  /**
   * The aria-labelledby attribute contains the element IDs of labels in objects such as input elements, widgets, and groups. The attribute establishes relationships between objects and their labels. Assistive technology, such as screen readers, use this attribute to catalog the objects in a document so that users can navigate between them. Without an element ID, the assistive technology cannot catalog the object.
   */
  'aria-labelledby': p.string,
  /**
   * An HTML ID that is shared with ARIA-supported devices with the
   * `aria-controls` attribute in order to relate the input with
   * another region of the page. An example would be a search field
   * that shows search results.
   */
  'aria-owns': p.string,
  /**
   * The `aria-required` attribute is used to indicate that user input is required on an element before a form can be submitted.
   */
  'aria-required': p.bool,
  /**
   * Specifies is the textarea should automatically get focus when the page loads. This is typically a poor user experience.
   */
  autoFocus: p.bool,
  /**
   * Elements are added after the `textarea`.
   */
  children: p.node,
  /**
   * Class names to be added to the textarea component.
   */
  className: p.oneOfType([p.array, p.object, p.string]),
  /** Allows for ability to apply classNames to outer textarea div.
   */
  classNameContainer: p.oneOfType([p.array, p.object, p.string]),
  /**
   * Disables the textarea and prevents editing the contents.
   */
  disabled: p.bool,
  /**
   * Message to display when the textarea is in an error state. When this is present, also visually highlights the component as in error.
   */
  errorText: p.string,
  /**
   * Every textarea must have a unique ID in order to support keyboard navigation and ARIA support.
   */
  id: p.string,
  /**
   * This callback exposes the textarea reference / DOM node to parent components. `<Parent textareaRef={(textareaComponent) => this.textarea = textareaComponent} />
   */
  textareaRef: p.func,
  /**
   * This label appears above the textarea.
   */
  label: p.string,
  /**
   * Triggered when focus is removed.
   */
  onBlur: p.func,
  /**
   * This callback fires when the textarea changes. The synthetic React event will be the first parameter to the callback. You will probably want to reference `event.target.value` in your callback. No custom data object is provided.
   */
  onChange: p.func,
  /**
   * This event fires when the textarea is clicked.
   */
  onClick: p.func,
  /**
   * Triggered when component is focused.
   */
  onFocus: p.func,
  /**
   * Similar to `onchange`. Triggered when an element gets user input.
   */
  onInput: p.func,
  /**
   * Triggered when a submittable <input> element is invalid.
   */
  onInvalid: p.func,
  /**
   * Triggered when a key is pressed down
   */
  onKeyDown: p.func,
  /**
   * Triggered when a key is pressed and released
   */
  onKeyPress: p.func,
  /**
   * Triggered when a key is released
   */
  onKeyUp: p.func,
  /**
   * Triggered after some text has been selected in an element.
   */
  onSelect: p.func,
  /**
   * Fires when a form is submitted.
   */
  onSubmit: p.func,
  /**
   * Maximum number of characters allowed.
   */
  maxLength: p.string,
  /**
   * Name of the submitted form parameter.
   */
  name: p.string,
  /**
   * Text that will appear in an empty textarea.
   */
  placeholder: p.string,
  /**
   * Highlights the textarea as a required field (does not perform any validation).
   */
  required: p.bool,
  /**
   * The textarea is a controlled component, and will always display this value.
   */
  value: p.string,
  /**
   * The textarea is a uncontrolled component, and this will be the initial value.
   */
  defaultValue: p.string,
  /**
   * Specifies how the text in a text area is to be wrapped when submitted in a form.
   */
  wrap: p.oneOf(['soft', 'hard'])
})
const Vd = (n) => {
    let e
    const t = /* @__PURE__ */ new Set(),
      i = (l, c) => {
        const u = typeof l == 'function' ? l(e) : l
        if (!Object.is(u, e)) {
          const f = e
          ;(e = c ?? typeof u != 'object' ? u : Object.assign({}, e, u)),
            t.forEach((h) => h(e, f))
        }
      },
      r = () => e,
      a = {
        setState: i,
        getState: r,
        subscribe: (l) => (t.add(l), () => t.delete(l)),
        destroy: () => {
          t.clear()
        }
      }
    return (e = n(i, r, a)), a
  },
  dQ = (n) => (n ? Vd(n) : Vd)
var au = { exports: {} },
  Kl = {},
  Fs = { exports: {} },
  Jl = {}
/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Wd
function pQ() {
  if (Wd) return Jl
  Wd = 1
  var n = Te
  function e(f, h) {
    return (f === h && (f !== 0 || 1 / f === 1 / h)) || (f !== f && h !== h)
  }
  var t = typeof Object.is == 'function' ? Object.is : e,
    i = n.useState,
    r = n.useEffect,
    s = n.useLayoutEffect,
    o = n.useDebugValue
  function a(f, h) {
    var d = h(),
      O = i({ inst: { value: d, getSnapshot: h } }),
      m = O[0].inst,
      b = O[1]
    return (
      s(
        function () {
          ;(m.value = d), (m.getSnapshot = h), l(m) && b({ inst: m })
        },
        [f, d, h]
      ),
      r(
        function () {
          return (
            l(m) && b({ inst: m }),
            f(function () {
              l(m) && b({ inst: m })
            })
          )
        },
        [f]
      ),
      o(d),
      d
    )
  }
  function l(f) {
    var h = f.getSnapshot
    f = f.value
    try {
      var d = h()
      return !t(f, d)
    } catch {
      return !0
    }
  }
  function c(f, h) {
    return h()
  }
  var u =
    typeof window > 'u' ||
    typeof window.document > 'u' ||
    typeof window.document.createElement > 'u'
      ? c
      : a
  return (
    (Jl.useSyncExternalStore =
      n.useSyncExternalStore !== void 0 ? n.useSyncExternalStore : u),
    Jl
  )
}
var ec = {}
/**
 * @license React
 * use-sync-external-store-shim.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var jd
function OQ() {
  return (
    jd ||
      ((jd = 1),
      process.env.NODE_ENV !== 'production' &&
        (function () {
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < 'u' &&
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ==
              'function' &&
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(
              new Error()
            )
          var n = Te,
            e = n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
          function t(T) {
            {
              for (
                var Q = arguments.length,
                  P = new Array(Q > 1 ? Q - 1 : 0),
                  C = 1;
                C < Q;
                C++
              )
                P[C - 1] = arguments[C]
              i('error', T, P)
            }
          }
          function i(T, Q, P) {
            {
              var C = e.ReactDebugCurrentFrame,
                A = C.getStackAddendum()
              A !== '' && ((Q += '%s'), (P = P.concat([A])))
              var j = P.map(function (X) {
                return String(X)
              })
              j.unshift('Warning: ' + Q),
                Function.prototype.apply.call(console[T], console, j)
            }
          }
          function r(T, Q) {
            return (
              (T === Q && (T !== 0 || 1 / T === 1 / Q)) || (T !== T && Q !== Q)
            )
          }
          var s = typeof Object.is == 'function' ? Object.is : r,
            o = n.useState,
            a = n.useEffect,
            l = n.useLayoutEffect,
            c = n.useDebugValue,
            u = !1,
            f = !1
          function h(T, Q, P) {
            u ||
              (n.startTransition !== void 0 &&
                ((u = !0),
                t(
                  'You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.'
                )))
            var C = Q()
            if (!f) {
              var A = Q()
              s(C, A) ||
                (t(
                  'The result of getSnapshot should be cached to avoid an infinite loop'
                ),
                (f = !0))
            }
            var j = o({
                inst: {
                  value: C,
                  getSnapshot: Q
                }
              }),
              X = j[0].inst,
              L = j[1]
            return (
              l(
                function () {
                  ;(X.value = C),
                    (X.getSnapshot = Q),
                    d(X) &&
                      L({
                        inst: X
                      })
                },
                [T, C, Q]
              ),
              a(
                function () {
                  d(X) &&
                    L({
                      inst: X
                    })
                  var U = function () {
                    d(X) &&
                      L({
                        inst: X
                      })
                  }
                  return T(U)
                },
                [T]
              ),
              c(C),
              C
            )
          }
          function d(T) {
            var Q = T.getSnapshot,
              P = T.value
            try {
              var C = Q()
              return !s(P, C)
            } catch {
              return !0
            }
          }
          function O(T, Q, P) {
            return Q()
          }
          var m =
              typeof window < 'u' &&
              typeof window.document < 'u' &&
              typeof window.document.createElement < 'u',
            b = !m,
            x = b ? O : h,
            w = n.useSyncExternalStore !== void 0 ? n.useSyncExternalStore : x
          ;(ec.useSyncExternalStore = w),
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < 'u' &&
              typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ==
                'function' &&
              __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(
                new Error()
              )
        })()),
    ec
  )
}
var Bd
function Vm() {
  return (
    Bd ||
      ((Bd = 1),
      process.env.NODE_ENV === 'production'
        ? (Fs.exports = pQ())
        : (Fs.exports = OQ())),
    Fs.exports
  )
}
/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Ld
function gQ() {
  if (Ld) return Kl
  Ld = 1
  var n = Te,
    e = Vm()
  function t(c, u) {
    return (c === u && (c !== 0 || 1 / c === 1 / u)) || (c !== c && u !== u)
  }
  var i = typeof Object.is == 'function' ? Object.is : t,
    r = e.useSyncExternalStore,
    s = n.useRef,
    o = n.useEffect,
    a = n.useMemo,
    l = n.useDebugValue
  return (
    (Kl.useSyncExternalStoreWithSelector = function (c, u, f, h, d) {
      var O = s(null)
      if (O.current === null) {
        var m = { hasValue: !1, value: null }
        O.current = m
      } else m = O.current
      O = a(
        function () {
          function x(C) {
            if (!w) {
              if (((w = !0), (T = C), (C = h(C)), d !== void 0 && m.hasValue)) {
                var A = m.value
                if (d(A, C)) return (Q = A)
              }
              return (Q = C)
            }
            if (((A = Q), i(T, C))) return A
            var j = h(C)
            return d !== void 0 && d(A, j) ? A : ((T = C), (Q = j))
          }
          var w = !1,
            T,
            Q,
            P = f === void 0 ? null : f
          return [
            function () {
              return x(u())
            },
            P === null
              ? void 0
              : function () {
                  return x(P())
                }
          ]
        },
        [u, f, h, d]
      )
      var b = r(c, O[0], O[1])
      return (
        o(
          function () {
            ;(m.hasValue = !0), (m.value = b)
          },
          [b]
        ),
        l(b),
        b
      )
    }),
    Kl
  )
}
var tc = {}
/**
 * @license React
 * use-sync-external-store-shim/with-selector.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Ud
function mQ() {
  return (
    Ud ||
      ((Ud = 1),
      process.env.NODE_ENV !== 'production' &&
        (function () {
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < 'u' &&
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ==
              'function' &&
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(
              new Error()
            )
          var n = Te,
            e = Vm()
          function t(u, f) {
            return (
              (u === f && (u !== 0 || 1 / u === 1 / f)) || (u !== u && f !== f)
            )
          }
          var i = typeof Object.is == 'function' ? Object.is : t,
            r = e.useSyncExternalStore,
            s = n.useRef,
            o = n.useEffect,
            a = n.useMemo,
            l = n.useDebugValue
          function c(u, f, h, d, O) {
            var m = s(null),
              b
            m.current === null
              ? ((b = {
                  hasValue: !1,
                  value: null
                }),
                (m.current = b))
              : (b = m.current)
            var x = a(
                function () {
                  var P = !1,
                    C,
                    A,
                    j = function (E) {
                      if (!P) {
                        ;(P = !0), (C = E)
                        var I = d(E)
                        if (O !== void 0 && b.hasValue) {
                          var B = b.value
                          if (O(B, I)) return (A = B), B
                        }
                        return (A = I), I
                      }
                      var ee = C,
                        ie = A
                      if (i(ee, E)) return ie
                      var te = d(E)
                      return O !== void 0 && O(ie, te)
                        ? ie
                        : ((C = E), (A = te), te)
                    },
                    X = h === void 0 ? null : h,
                    L = function () {
                      return j(f())
                    },
                    U =
                      X === null
                        ? void 0
                        : function () {
                            return j(X())
                          }
                  return [L, U]
                },
                [f, h, d, O]
              ),
              w = x[0],
              T = x[1],
              Q = r(u, w, T)
            return (
              o(
                function () {
                  ;(b.hasValue = !0), (b.value = Q)
                },
                [Q]
              ),
              l(Q),
              Q
            )
          }
          ;(tc.useSyncExternalStoreWithSelector = c),
            typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < 'u' &&
              typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ==
                'function' &&
              __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(
                new Error()
              )
        })()),
    tc
  )
}
process.env.NODE_ENV === 'production'
  ? (au.exports = gQ())
  : (au.exports = mQ())
var yQ = au.exports
const bQ = /* @__PURE__ */ Qn(yQ),
  { useDebugValue: vQ } = $,
  { useSyncExternalStoreWithSelector: SQ } = bQ
function xQ(n, e = n.getState, t) {
  const i = SQ(n.subscribe, n.getState, n.getServerState || n.getState, e, t)
  return vQ(i), i
}
const qd = (n) => {
    const e = typeof n == 'function' ? dQ(n) : n,
      t = (i, r) => xQ(e, i, r)
    return Object.assign(t, e), t
  },
  Rf = (n) => (n ? qd(n) : qd),
  Jr = Rf()((n) => ({
    prompt: '',
    componentName: '',
    setPrompt: (e) => n(() => ({ prompt: e })),
    setComponentName: (e) => n(() => ({ componentName: e })),
    setInstruction: (e) =>
      n(() => ({ prompt: e.prompt, componentName: e.componentName }))
  })),
  va = Rf()((n) => ({
    html: '',
    react: '',
    setGeneratedCode: (e, t) => n(() => ({ [t]: e }))
  })),
  Wm = Rf()((n) => ({
    selectedIndex: 0,
    setSelectedIndex: (e) => n(() => ({ selectedIndex: e }))
  }))
function wQ(n) {
  const { control: e, handleSubmit: t } = y1(),
    i = (c) => {
      console.log('submit', c)
    },
    r = n.onSubmit || i,
    { prompt: s, componentName: o, setComponentName: a, setPrompt: l } = Jr()
  return /* @__PURE__ */ z.jsxs('form', {
    onSubmit: t(r),
    className: 'slds-m-bottom_xx-large',
    children: [
      /* @__PURE__ */ z.jsx(Jh, {
        name: 'componentName',
        control: e,
        defaultValue: o,
        rules: { required: !0 },
        render: ({ field: c }) =>
          /* @__PURE__ */ z.jsx(Ol, {
            label: 'Component Name',
            placeholder: 'Banner',
            ...c,
            required: !0,
            onChange: (u) => {
              c.onChange(u)
              const f = u.target.value
              a(f)
            }
          })
      }),
      /* @__PURE__ */ z.jsx(Jh, {
        name: 'prompt',
        control: e,
        defaultValue: s,
        rules: { required: !0 },
        render: ({ field: c }) =>
          /* @__PURE__ */ z.jsx(Af, {
            ...c,
            label: 'Instruction',
            placeholder: 'Create a banner with centered text “Hello World!”',
            required: !0,
            value: s,
            onChange: (u) => {
              c.onChange(u)
              const f = u.target.value
              l(f)
            }
          })
      }),
      /* @__PURE__ */ z.jsx(ft, {
        type: 'submit',
        label: 'Create component',
        variant: 'brand',
        iconCategory: 'utility',
        iconName: 'sparkles',
        iconPosition: 'left'
      })
    ]
  })
}
function Ro(n) {
  '@babel/helpers - typeof'
  return (
    typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol'
      ? (Ro = function (t) {
          return typeof t
        })
      : (Ro = function (t) {
          return t &&
            typeof Symbol == 'function' &&
            t.constructor === Symbol &&
            t !== Symbol.prototype
            ? 'symbol'
            : typeof t
        }),
    Ro(n)
  )
}
function lu() {
  return (
    (lu =
      Object.assign ||
      function (n) {
        for (var e = 1; e < arguments.length; e++) {
          var t = arguments[e]
          for (var i in t)
            Object.prototype.hasOwnProperty.call(t, i) && (n[i] = t[i])
        }
        return n
      }),
    lu.apply(this, arguments)
  )
}
function $Q(n, e) {
  if (!(n instanceof e))
    throw new TypeError('Cannot call a class as a function')
}
function zd(n, e) {
  for (var t = 0; t < e.length; t++) {
    var i = e[t]
    ;(i.enumerable = i.enumerable || !1),
      (i.configurable = !0),
      'value' in i && (i.writable = !0),
      Object.defineProperty(n, i.key, i)
  }
}
function PQ(n, e, t) {
  return e && zd(n.prototype, e), t && zd(n, t), n
}
function QQ(n, e) {
  if (typeof e != 'function' && e !== null)
    throw new TypeError('Super expression must either be null or a function')
  ;(n.prototype = Object.create(e && e.prototype, {
    constructor: { value: n, writable: !0, configurable: !0 }
  })),
    e && cu(n, e)
}
function cu(n, e) {
  return (
    (cu =
      Object.setPrototypeOf ||
      function (i, r) {
        return (i.__proto__ = r), i
      }),
    cu(n, e)
  )
}
function kQ(n) {
  var e = CQ()
  return function () {
    var i = Sa(n),
      r
    if (e) {
      var s = Sa(this).constructor
      r = Reflect.construct(i, arguments, s)
    } else r = i.apply(this, arguments)
    return TQ(this, r)
  }
}
function TQ(n, e) {
  return e && (Ro(e) === 'object' || typeof e == 'function') ? e : uu(n)
}
function uu(n) {
  if (n === void 0)
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    )
  return n
}
function CQ() {
  if (typeof Reflect > 'u' || !Reflect.construct || Reflect.construct.sham)
    return !1
  if (typeof Proxy == 'function') return !0
  try {
    return (
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      ),
      !0
    )
  } catch {
    return !1
  }
}
function Sa(n) {
  return (
    (Sa = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function (t) {
          return t.__proto__ || Object.getPrototypeOf(t)
        }),
    Sa(n)
  )
}
function Fd(n, e, t) {
  return (
    e in n
      ? Object.defineProperty(n, e, {
          value: t,
          enumerable: !0,
          configurable: !0,
          writable: !0
        })
      : (n[e] = t),
    n
  )
}
var _Q = {
    /**
     * **Assistive text for accessibility.**
     * * `toggleSection`: Label for the icon that expands / collapses the section
     */
    assistiveText: p.shape({
      toggleSection: p.string
    }),
    /**
     * Contents of the section
     */
    children: p.node,
    /**
     * Class names to be added to the `slds-section` classed node
     */
    className: p.oneOfType([p.array, p.object, p.string]),
    /**
     * Unique identifier for the expandable section. The id is automatically generated if not provided
     */
    id: p.string,
    /**
     * Specifies whether the section is expanded or collapsed. If not provided, component will use its own state to manage this itself
     */
    isOpen: p.bool,
    /**
     * Specifies whether the section can be expanded or collapsed. Defaults to `false`
     */
    nonCollapsible: p.bool,
    /**
     * Callback for when the section is expanded or collapsed. Passes event object and data object with `isOpen` bool.
     */
    onToggleOpen: p.func,
    /**
     * The title for the section
     */
    title: p.string.isRequired
  },
  ZQ = {
    assistiveText: {
      toggleSection: 'Toggle visibility of section'
    },
    nonCollapsible: !1
  },
  gl = /* @__PURE__ */ (function (n) {
    QQ(t, n)
    var e = kQ(t)
    function t(i) {
      var r
      return (
        $Q(this, t),
        (r = e.call(this, i)),
        Fd(uu(r), 'getId', function () {
          return r.props.id || r.generatedId
        }),
        Fd(uu(r), 'toggleOpen', function (s) {
          r.props.onToggleOpen
            ? r.props.onToggleOpen(s, {
                isOpen: r.props.isOpen
              })
            : r.setState(function (o) {
                return {
                  isOpen: !o.isOpen
                }
              })
        }),
        (r.generatedId = bi.generate()),
        (r.state = {
          isOpen: !0
        }),
        r
      )
    }
    return (
      PQ(t, [
        {
          key: 'render',
          value: function () {
            var r = ''.concat(this.getId(), '-expanded-section-content'),
              s =
                this.props.isOpen !== void 0
                  ? this.props.isOpen
                  : this.state.isOpen,
              o = {
                'aria-controls': r,
                'aria-expanded': !!s
              },
              a = /* @__PURE__ */ $.createElement(
                'span',
                {
                  className: ae('slds-truncate', {
                    'slds-p-horizontal_small': !!this.props.nonCollapsible
                  }),
                  title: this.props.title
                },
                this.props.title
              )
            return /* @__PURE__ */ $.createElement(
              'div',
              {
                className: ae(
                  'slds-section',
                  {
                    'slds-is-open': s
                  },
                  this.props.className
                )
              },
              /* @__PURE__ */ $.createElement(
                'h3',
                {
                  className: ae('slds-section__title', {
                    'slds-theme_shade': !!this.props.nonCollapsible
                  })
                },
                this.props.nonCollapsible
                  ? a
                  : /* @__PURE__ */ $.createElement(
                      ft,
                      lu(
                        {
                          assistiveText: {
                            icon: this.props.assistiveText.toggleSection
                          },
                          iconCategory: 'utility',
                          iconClassName:
                            'slds-section__title-action-icon slds-button__icon_left',
                          iconName: 'switch',
                          onClick: this.toggleOpen,
                          className: 'slds-section__title-action',
                          variant: 'base'
                        },
                        o
                      ),
                      a
                    )
              ),
              /* @__PURE__ */ $.createElement(
                'div',
                {
                  'aria-hidden': !s,
                  className: 'slds-section__content',
                  id: r
                },
                this.props.children
              )
            )
          }
        }
      ]),
      t
    )
  })($.Component)
gl.displayName = Ax
gl.propTypes = _Q
gl.defaultProps = ZQ
function Eo(n) {
  '@babel/helpers - typeof'
  return (
    typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol'
      ? (Eo = function (t) {
          return typeof t
        })
      : (Eo = function (t) {
          return t &&
            typeof Symbol == 'function' &&
            t.constructor === Symbol &&
            t !== Symbol.prototype
            ? 'symbol'
            : typeof t
        }),
    Eo(n)
  )
}
function AQ(n, e) {
  if (!(n instanceof e))
    throw new TypeError('Cannot call a class as a function')
}
function Gd(n, e) {
  for (var t = 0; t < e.length; t++) {
    var i = e[t]
    ;(i.enumerable = i.enumerable || !1),
      (i.configurable = !0),
      'value' in i && (i.writable = !0),
      Object.defineProperty(n, i.key, i)
  }
}
function RQ(n, e, t) {
  return e && Gd(n.prototype, e), t && Gd(n, t), n
}
function EQ(n, e) {
  if (typeof e != 'function' && e !== null)
    throw new TypeError('Super expression must either be null or a function')
  ;(n.prototype = Object.create(e && e.prototype, {
    constructor: { value: n, writable: !0, configurable: !0 }
  })),
    e && fu(n, e)
}
function fu(n, e) {
  return (
    (fu =
      Object.setPrototypeOf ||
      function (i, r) {
        return (i.__proto__ = r), i
      }),
    fu(n, e)
  )
}
function DQ(n) {
  var e = IQ()
  return function () {
    var i = xa(n),
      r
    if (e) {
      var s = xa(this).constructor
      r = Reflect.construct(i, arguments, s)
    } else r = i.apply(this, arguments)
    return XQ(this, r)
  }
}
function XQ(n, e) {
  return e && (Eo(e) === 'object' || typeof e == 'function') ? e : YQ(n)
}
function YQ(n) {
  if (n === void 0)
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    )
  return n
}
function IQ() {
  if (typeof Reflect > 'u' || !Reflect.construct || Reflect.construct.sham)
    return !1
  if (typeof Proxy == 'function') return !0
  try {
    return (
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      ),
      !0
    )
  } catch {
    return !1
  }
}
function xa(n) {
  return (
    (xa = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function (t) {
          return t.__proto__ || Object.getPrototypeOf(t)
        }),
    xa(n)
  )
}
var NQ = {
    /**
     * CSS classes to be added to tag with `.slds-notify-container`. Uses `classNames` [API](https://github.com/JedWatson/classnames).
     */
    className: p.oneOfType([p.array, p.object, p.string]),
    /**
     * Toast components
     */
    children: p.node
  },
  Ef = /* @__PURE__ */ (function (n) {
    EQ(t, n)
    var e = DQ(t)
    function t() {
      return AQ(this, t), e.apply(this, arguments)
    }
    return (
      RQ(t, [
        {
          key: 'render',
          value: function () {
            return /* @__PURE__ */ $.createElement(
              'div',
              {
                className: Gi('slds-notify-container', this.props.className)
              },
              this.props.children
            )
          }
        }
      ]),
      t
    )
  })($.Component)
Ef.displayName = Lx
Ef.propTypes = NQ
var jm = 9007199254740991,
  MQ = '[object Arguments]',
  VQ = '[object Function]',
  WQ = '[object GeneratorFunction]',
  jQ = /^(?:0|[1-9]\d*)$/
function BQ(n, e, t) {
  switch (t.length) {
    case 0:
      return n.call(e)
    case 1:
      return n.call(e, t[0])
    case 2:
      return n.call(e, t[0], t[1])
    case 3:
      return n.call(e, t[0], t[1], t[2])
  }
  return n.apply(e, t)
}
function LQ(n, e) {
  for (var t = -1, i = Array(n); ++t < n; ) i[t] = e(t)
  return i
}
function UQ(n, e) {
  return function (t) {
    return n(e(t))
  }
}
var ml = Object.prototype,
  Qs = ml.hasOwnProperty,
  Bm = ml.toString,
  Lm = ml.propertyIsEnumerable,
  qQ = UQ(Object.keys, Object),
  Hd = Math.max,
  zQ = !Lm.call({ valueOf: 1 }, 'valueOf')
function FQ(n, e) {
  var t = nk(n) || tk(n) ? LQ(n.length, String) : [],
    i = t.length,
    r = !!i
  for (var s in n)
    (e || Qs.call(n, s)) && !(r && (s == 'length' || qm(s, i))) && t.push(s)
  return t
}
function Um(n, e, t) {
  var i = n[e]
  ;(!(Qs.call(n, e) && Fm(i, t)) || (t === void 0 && !(e in n))) && (n[e] = t)
}
function GQ(n) {
  if (!zm(n)) return qQ(n)
  var e = []
  for (var t in Object(n)) Qs.call(n, t) && t != 'constructor' && e.push(t)
  return e
}
function HQ(n, e) {
  return (
    (e = Hd(e === void 0 ? n.length - 1 : e, 0)),
    function () {
      for (
        var t = arguments, i = -1, r = Hd(t.length - e, 0), s = Array(r);
        ++i < r;

      )
        s[i] = t[e + i]
      i = -1
      for (var o = Array(e + 1); ++i < e; ) o[i] = t[i]
      return (o[e] = s), BQ(n, this, o)
    }
  )
}
function KQ(n, e, t, i) {
  t || (t = {})
  for (var r = -1, s = e.length; ++r < s; ) {
    var o = e[r],
      a = i ? i(t[o], n[o], o, t, n) : void 0
    Um(t, o, a === void 0 ? n[o] : a)
  }
  return t
}
function JQ(n) {
  return HQ(function (e, t) {
    var i = -1,
      r = t.length,
      s = r > 1 ? t[r - 1] : void 0,
      o = r > 2 ? t[2] : void 0
    for (
      s = n.length > 3 && typeof s == 'function' ? (r--, s) : void 0,
        o && ek(t[0], t[1], o) && ((s = r < 3 ? void 0 : s), (r = 1)),
        e = Object(e);
      ++i < r;

    ) {
      var a = t[i]
      a && n(e, a, i, s)
    }
    return e
  })
}
function qm(n, e) {
  return (
    (e = e ?? jm),
    !!e && (typeof n == 'number' || jQ.test(n)) && n > -1 && n % 1 == 0 && n < e
  )
}
function ek(n, e, t) {
  if (!Gm(t)) return !1
  var i = typeof e
  return (i == 'number' ? yl(t) && qm(e, t.length) : i == 'string' && e in t)
    ? Fm(t[e], n)
    : !1
}
function zm(n) {
  var e = n && n.constructor,
    t = (typeof e == 'function' && e.prototype) || ml
  return n === t
}
function Fm(n, e) {
  return n === e || (n !== n && e !== e)
}
function tk(n) {
  return (
    ik(n) && Qs.call(n, 'callee') && (!Lm.call(n, 'callee') || Bm.call(n) == MQ)
  )
}
var nk = Array.isArray
function yl(n) {
  return n != null && sk(n.length) && !rk(n)
}
function ik(n) {
  return ok(n) && yl(n)
}
function rk(n) {
  var e = Gm(n) ? Bm.call(n) : ''
  return e == VQ || e == WQ
}
function sk(n) {
  return typeof n == 'number' && n > -1 && n % 1 == 0 && n <= jm
}
function Gm(n) {
  var e = typeof n
  return !!n && (e == 'object' || e == 'function')
}
function ok(n) {
  return !!n && typeof n == 'object'
}
var ak = JQ(function (n, e) {
  if (zQ || zm(e) || yl(e)) {
    KQ(e, lk(e), n)
    return
  }
  for (var t in e) Qs.call(e, t) && Um(n, t, e[t])
})
function lk(n) {
  return yl(n) ? FQ(n) : GQ(n)
}
var ck = ak
const wa = /* @__PURE__ */ Qn(ck)
var Hm = function () {}
process.env.NODE_ENV !== 'production' &&
  (Hm = function (e, t, i) {
    var r = ei(i)
    _e(
      e,
      t.iconCategory,
      'iconCategory',
      'Use `Icon` instead. '.concat(r('icon'))
    ),
      _e(e, t.iconName, 'iconName', 'Use `Icon` instead. '.concat(r('icon'))),
      _e(
        e,
        t.content,
        'content',
        'Use `labels.heading` and `labels.headingLink` instead. '.concat(
          r('labels')
        )
      ),
      _e(
        e,
        t.isOpen,
        'isOpen',
        'Use a conditional outside of alert. '.concat(r())
      ),
      _e(
        e,
        t.isOpen,
        'onDismiss',
        'Use `onRequestClose` instead. '.concat(r('onRequestClose'))
      ),
      _e(e, t.texture, 'texture', r()),
      _e(e, t.theme, 'theme', 'Use `variant` instead. '.concat(r('variant')))
  })
const uk = Hm,
  fk = 'toast',
  hk = 'prod',
  dk = 'Toast',
  pk = [
    {
      component: 'container',
      classKey: 'ToastContainer'
    }
  ],
  Ok = {
    component: fk,
    status: hk,
    'display-name': 'Toasts',
    classKey: dk,
    'last-accessibility-review': {
      'date-iso-8601': '2018/01/18',
      'commit-sha': 'ad6b6c6523ee21cada11be5f7ea4d99abc530726'
    },
    'SLDS-component-path': '/components/toast',
    dependencies: pk,
    'site-stories': [
      {
        heading: 'Informational',
        path: '/__examples__/info.jsx'
      },
      {
        heading: 'Success',
        path: '/__examples__/success.jsx'
      },
      {
        heading: 'Warning',
        path: '/__examples__/warning.jsx'
      },
      {
        heading: 'Error',
        path: '/__examples__/error.jsx'
      },
      {
        heading: 'Error with Details',
        path: '/__examples__/error-with-details.jsx'
      }
    ],
    'url-slug': 'toasts'
  }
function Do(n) {
  '@babel/helpers - typeof'
  return (
    typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol'
      ? (Do = function (t) {
          return typeof t
        })
      : (Do = function (t) {
          return t &&
            typeof Symbol == 'function' &&
            t.constructor === Symbol &&
            t !== Symbol.prototype
            ? 'symbol'
            : typeof t
        }),
    Do(n)
  )
}
function gk(n, e) {
  if (!(n instanceof e))
    throw new TypeError('Cannot call a class as a function')
}
function Kd(n, e) {
  for (var t = 0; t < e.length; t++) {
    var i = e[t]
    ;(i.enumerable = i.enumerable || !1),
      (i.configurable = !0),
      'value' in i && (i.writable = !0),
      Object.defineProperty(n, i.key, i)
  }
}
function mk(n, e, t) {
  return e && Kd(n.prototype, e), t && Kd(n, t), n
}
function yk(n, e) {
  if (typeof e != 'function' && e !== null)
    throw new TypeError('Super expression must either be null or a function')
  ;(n.prototype = Object.create(e && e.prototype, {
    constructor: { value: n, writable: !0, configurable: !0 }
  })),
    e && hu(n, e)
}
function hu(n, e) {
  return (
    (hu =
      Object.setPrototypeOf ||
      function (i, r) {
        return (i.__proto__ = r), i
      }),
    hu(n, e)
  )
}
function bk(n) {
  var e = Sk()
  return function () {
    var i = $a(n),
      r
    if (e) {
      var s = $a(this).constructor
      r = Reflect.construct(i, arguments, s)
    } else r = i.apply(this, arguments)
    return vk(this, r)
  }
}
function vk(n, e) {
  return e && (Do(e) === 'object' || typeof e == 'function') ? e : Xo(n)
}
function Xo(n) {
  if (n === void 0)
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    )
  return n
}
function Sk() {
  if (typeof Reflect > 'u' || !Reflect.construct || Reflect.construct.sham)
    return !1
  if (typeof Proxy == 'function') return !0
  try {
    return (
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      ),
      !0
    )
  } catch {
    return !1
  }
}
function $a(n) {
  return (
    ($a = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function (t) {
          return t.__proto__ || Object.getPrototypeOf(t)
        }),
    $a(n)
  )
}
function nc(n, e, t) {
  return (
    e in n
      ? Object.defineProperty(n, e, {
          value: t,
          enumerable: !0,
          configurable: !0,
          writable: !0
        })
      : (n[e] = t),
    n
  )
}
var xk = {
    /**
     * **Assistive text for accessibility**
     * This object is merged with the default props object on every render.
     * * `closeButton`: This is a visually hidden label for the close button.
     * * `error`: This is a visually hidden label to mark the toast as an error variant
     * * `info`: This is a visually hidden label to mark the toast as an info variant
     * * `success`: This is a visually hidden label to mark the toast as an success variant
     * * `warning`: This is a visually hidden label to mark the toast as an warning variant
     * _Tested with snapshot testing._
     */
    assistiveText: p.shape({
      closeButton: p.oneOfType([p.string, p.node])
    }),
    /**
     * CSS classes to be added to tag with `.slds-notify_toast`. Uses `classNames` [API](https://github.com/JedWatson/classnames).
     * _Tested with snapshot testing._
     */
    className: p.oneOfType([p.array, p.object, p.string]),
    /**
     * If duration exists, the Toast will disappear after that amount of time. Time in milliseconds. _Tested with Mocha testing._
     */
    duration: p.number,
    /**
     * **Text labels for internationalization**
     * This object is merged with the default props object on every render.
     * * `details`: Secondary text below heading
     * * `heading`: text within heading tag
     * * `headingLink`: Text of link that triggers `onClickHeadingLink`. Inline links should pass a keyed array of React components into `labels.heading`.
     *
     * _Tested with snapshot testing._
     */
    labels: p.shape({
      details: p.oneOfType([p.string, p.node]),
      heading: p.oneOfType([p.string, p.node]),
      headingLink: p.oneOfType([p.string, p.node])
    }),
    /**
     * Triggered by link. _Tested with Mocha testing._
     */
    onClickHeadingLink: p.func,
    /**
     * Icon of type `~/components/icon`. This icon will be cloned and additional props appended. The default icons are:
     * * info variant: `utility:info`
     * * error variant: `utility:error`
     * * success variant: `utility:success`
     * * warning variant: `utility:warning`
     *
     * _Tested with snapshot testing._
     */
    icon: p.node,
    /**
     * Triggered by close button. _Tested with Mocha testing._
     */
    onRequestClose: p.func,
    /**
     * Custom styles to be passed to the component. _Tested with Mocha testing._
     */
    style: p.object,
    /**
     * The type of Toast. _Tested with snapshot testing._
     */
    variant: p.oneOf(['error', 'info', 'success', 'warning']).isRequired
  },
  du = {
    assistiveText: {
      closeButton: 'Close',
      error: 'error',
      info: 'info',
      success: 'success',
      warning: 'warning'
    },
    variant: 'info'
  },
  bl = /* @__PURE__ */ (function (n) {
    yk(t, n)
    var e = bk(t)
    function t(i) {
      var r
      return (
        gk(this, t),
        (r = e.call(this, i)),
        nc(Xo(r), 'onClose', function () {
          r.clearTimeout(), r.props.onRequestClose && r.props.onRequestClose()
        }),
        nc(Xo(r), 'clearTimeout', function () {
          r.timeout && (clearTimeout(r.timeout), (r.timeout = null))
        }),
        nc(Xo(r), 'saveToastRef', function (s) {
          ;(r.toast = s),
            r.state.isInitialRender &&
              (Gt.storeActiveElement(),
              r.toast && r.toast.focus(),
              r.setState({
                isInitialRender: !1
              }))
        }),
        (r.state = {
          isInitialRender: !0
        }),
        (r.timeout = null),
        (r.toast = null),
        uk(Yg, i, Ok),
        r
      )
    }
    return (
      mk(t, [
        {
          key: 'componentDidMount',
          value: function () {
            var r = this
            this.props.duration &&
              (this.timeout = setTimeout(function () {
                r.onClose()
              }, this.props.duration))
          }
        },
        {
          key: 'componentWillUnmount',
          value: function () {
            this.clearTimeout(), Gt.returnFocusToStoredElement()
          }
        },
        {
          key: 'render',
          value: function () {
            var r = wa({}, du.assistiveText, this.props.assistiveText),
              s = wa({}, du.labels, this.props.labels),
              o = s.heading || this.props.content,
              a = {
                info: r.info,
                success: r.success,
                warning: r.warning,
                error: r.error
              },
              l = {
                info: /* @__PURE__ */ $.createElement(Ve, {
                  category: 'utility',
                  name: 'info'
                }),
                success: /* @__PURE__ */ $.createElement(Ve, {
                  category: 'utility',
                  name: 'success'
                }),
                warning: /* @__PURE__ */ $.createElement(Ve, {
                  category: 'utility',
                  name: 'warning'
                }),
                error: /* @__PURE__ */ $.createElement(Ve, {
                  category: 'utility',
                  name: 'error'
                })
              },
              c = this.props.icon ? this.props.icon : l[this.props.variant],
              u = /* @__PURE__ */ $.cloneElement(c, {
                containerClassName:
                  'slds-m-right_small slds-no-flex slds-align-top',
                inverse: !0,
                size: 'small'
              })
            return /* @__PURE__ */ $.createElement(
              'div',
              {
                className: Gi(
                  'slds-notify slds-notify_toast',
                  {
                    'slds-theme_info': this.props.variant === 'info',
                    'slds-theme_success': this.props.variant === 'success',
                    'slds-theme_warning': this.props.variant === 'warning',
                    'slds-theme_error': this.props.variant === 'error'
                  },
                  this.props.className
                ),
                ref: this.saveToastRef,
                role: 'status',
                style: this.props.style,
                tabIndex: 0
                // eslint-disable-line jsx-a11y/no-noninteractive-tabindex
              },
              /* @__PURE__ */ $.createElement(
                'span',
                {
                  className: 'slds-assistive-text'
                },
                a[this.props.variant]
              ),
              u,
              /* @__PURE__ */ $.createElement(
                'div',
                {
                  className: 'slds-notify__content'
                },
                /* @__PURE__ */ $.createElement(
                  'h2',
                  {
                    className: 'slds-text-heading_small'
                  },
                  o,
                  ' ',
                  s.headingLink
                    ? /* @__PURE__ */ $.createElement(
                        'a',
                        {
                          onClick: gs.trappedHandler(
                            this.props.onClickHeadingLink
                          ),
                          href: '#'
                        },
                        s.headingLink
                      )
                    : null
                ),
                s.details
                  ? /* @__PURE__ */ $.createElement('p', null, s.details)
                  : null
              ),
              /* @__PURE__ */ $.createElement(ft, {
                assistiveText: {
                  icon: r.closeButton
                },
                className: 'slds-notify__close',
                iconCategory: 'utility',
                iconName: 'close',
                iconSize: 'large',
                inverse: !0,
                onClick: this.props.onRequestClose,
                title: r.closeButton,
                variant: 'icon'
              })
            )
          }
        }
      ]),
      t
    )
  })($.Component)
bl.defaultProps = du
bl.displayName = Yg
bl.propTypes = xk
const wk = [
  {
    element: [
      'Create a ',
      /* @__PURE__ */ z.jsx('b', { children: 'banner component' }),
      ' with centered text “Hello World!'
    ],
    text: 'Create a banner component with centered text “Hello World!”'
  },
  {
    element: [
      'Create a ',
      /* @__PURE__ */ z.jsx('b', { children: 'product tile component' }),
      ' with image, title, and price'
    ],
    text: 'Create a product tile component with image, title, and price'
  },
  {
    element: [
      'Create a ',
      /* @__PURE__ */ z.jsx('b', { children: 'three column layout' }),
      ', each column contains a product image'
    ],
    text: 'Create a three column layout, each column contains a product image'
  }
]
function $k() {
  const [n, e] = Te.useState(!1),
    { prompt: t, setPrompt: i } = Jr(),
    [r, s] = Te.useState(!1),
    o = async (a) => {
      try {
        await navigator.clipboard.writeText(a), s(!0), t || i(a)
      } finally {
        setTimeout(() => {
          s(!1)
        }, 1500)
      }
    }
  return /* @__PURE__ */ z.jsxs(gl, {
    isOpen: n,
    onToggleOpen: () => e(!n),
    title: 'See Example Instructions',
    children: [
      /* @__PURE__ */ z.jsx(Ef, {
        children:
          r &&
          /* @__PURE__ */ z.jsx(bl, {
            variant: 'success',
            labels: {
              heading: 'Copied'
            },
            onRequestClose: () => s(!1)
          })
      }),
      /* @__PURE__ */ z.jsx('p', {
        className: 'slds-m-bottom_xx-small',
        style: { fontStyle: 'italic' },
        children: 'Click text to copy sample instruction into prompt.'
      }),
      /* @__PURE__ */ z.jsx('ul', {
        children: wk.map((a, l) =>
          /* @__PURE__ */ z.jsx(
            'li',
            {
              onClick: () => o(a.text),
              style: { cursor: 'pointer' },
              className: 'slds-card',
              children: /* @__PURE__ */ z.jsx('div', {
                className: 'slds-p-around_small',
                children: /* @__PURE__ */ z.jsxs('div', {
                  className: 'slds-grid slds-gutters',
                  children: [
                    /* @__PURE__ */ z.jsx('div', {
                      className: 'slds-col slds-size_10-of-12',
                      children: /* @__PURE__ */ z.jsx('p', {
                        children: a.element.map((c, u) =>
                          /* @__PURE__ */ z.jsx('span', { children: c }, u)
                        )
                      })
                    }),
                    /* @__PURE__ */ z.jsx('div', {
                      className: 'slds-col slds-size_2-of-12',
                      children: /* @__PURE__ */ z.jsx(Ve, {
                        assistiveText: { label: 'copy' },
                        category: 'utility',
                        name: 'copy',
                        size: 'x-small'
                      })
                    })
                  ]
                })
              })
            },
            l
          )
        )
      })
    ]
  })
}
function Pk() {
  return /* @__PURE__ */ z.jsxs('div', {
    className: 'slds-tabs_scoped__content-container',
    children: [/* @__PURE__ */ z.jsx(wQ, {}), /* @__PURE__ */ z.jsx($k, {})]
  })
}
var Km = function () {}
process.env.NODE_ENV !== 'production' &&
  (Km = function (e, t, i) {
    var r = ei(i)
    _e(
      e,
      t.iconCategory,
      'iconCategory',
      'Use `Icon` instead. '.concat(r('icon'))
    ),
      _e(e, t.iconName, 'iconName', 'Use `Icon` instead. '.concat(r('icon'))),
      _e(
        e,
        t.content,
        'content',
        'Use `labels.heading` and `labels.headingLink` instead.'.concat(
          r('labels')
        )
      ),
      _e(e, t.duration, 'duration', 'Only Toasts can auto-hide. '.concat(r())),
      _e(
        e,
        t.isOpen,
        'isOpen',
        'Use a conditional outside of alert. '.concat(r())
      ),
      _e(
        e,
        t.isOpen,
        'onDismiss',
        'Use `onRequestClose` instead. '.concat(r('onRequestClose'))
      ),
      _e(e, t.texture, 'texture', r()),
      _e(e, t.theme, 'theme', 'Use `variant` instead. '.concat(r('variant')))
  })
const Qk = Km,
  kk = 'alert',
  Tk = 'prod',
  Ck = 'Alert',
  _k = [
    {
      component: 'container',
      classKey: 'AlertContainer'
    }
  ],
  Zk = {
    component: kk,
    status: Tk,
    'display-name': 'Alerts',
    classKey: Ck,
    'last-accessibility-review': {
      'date-iso-8601': '2018/01/18',
      'commit-sha': 'ad6b6c6523ee21cada11be5f7ea4d99abc530726'
    },
    'SLDS-component-path': '/components/alert',
    dependencies: _k,
    'site-stories': [
      {
        heading: 'Informational',
        path: '/__examples__/info.jsx'
      },
      {
        heading: 'Warning',
        path: '/__examples__/warning.jsx'
      },
      {
        heading: 'System Status',
        path: '/__examples__/offline.jsx'
      },
      {
        heading: 'Error',
        path: '/__examples__/error.jsx'
      },
      {
        heading: 'Dismissable',
        path: '/__examples__/dismissable.jsx'
      }
    ],
    'url-slug': 'alerts'
  }
function Yo(n) {
  '@babel/helpers - typeof'
  return (
    typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol'
      ? (Yo = function (t) {
          return typeof t
        })
      : (Yo = function (t) {
          return t &&
            typeof Symbol == 'function' &&
            t.constructor === Symbol &&
            t !== Symbol.prototype
            ? 'symbol'
            : typeof t
        }),
    Yo(n)
  )
}
function Ak(n, e) {
  if (!(n instanceof e))
    throw new TypeError('Cannot call a class as a function')
}
function Jd(n, e) {
  for (var t = 0; t < e.length; t++) {
    var i = e[t]
    ;(i.enumerable = i.enumerable || !1),
      (i.configurable = !0),
      'value' in i && (i.writable = !0),
      Object.defineProperty(n, i.key, i)
  }
}
function Rk(n, e, t) {
  return e && Jd(n.prototype, e), t && Jd(n, t), n
}
function Ek(n, e) {
  if (typeof e != 'function' && e !== null)
    throw new TypeError('Super expression must either be null or a function')
  ;(n.prototype = Object.create(e && e.prototype, {
    constructor: { value: n, writable: !0, configurable: !0 }
  })),
    e && pu(n, e)
}
function pu(n, e) {
  return (
    (pu =
      Object.setPrototypeOf ||
      function (i, r) {
        return (i.__proto__ = r), i
      }),
    pu(n, e)
  )
}
function Dk(n) {
  var e = Yk()
  return function () {
    var i = Pa(n),
      r
    if (e) {
      var s = Pa(this).constructor
      r = Reflect.construct(i, arguments, s)
    } else r = i.apply(this, arguments)
    return Xk(this, r)
  }
}
function Xk(n, e) {
  return e && (Yo(e) === 'object' || typeof e == 'function') ? e : Jm(n)
}
function Jm(n) {
  if (n === void 0)
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    )
  return n
}
function Yk() {
  if (typeof Reflect > 'u' || !Reflect.construct || Reflect.construct.sham)
    return !1
  if (typeof Proxy == 'function') return !0
  try {
    return (
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      ),
      !0
    )
  } catch {
    return !1
  }
}
function Pa(n) {
  return (
    (Pa = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function (t) {
          return t.__proto__ || Object.getPrototypeOf(t)
        }),
    Pa(n)
  )
}
function Ik(n, e, t) {
  return (
    e in n
      ? Object.defineProperty(n, e, {
          value: t,
          enumerable: !0,
          configurable: !0,
          writable: !0
        })
      : (n[e] = t),
    n
  )
}
var Nk = {
    /**
     * **Assistive text for accessibility**
     * This object is merged with the default props object on every render.
     * * `closeButton`: This is a visually hidden label for the close button.
     * _Tested with snapshot testing._
     */
    assistiveText: p.shape({
      closeButton: p.oneOfType([p.string, p.node])
    }),
    /**
     * CSS classes to be added to tag with `.slds-notify_alert`. Uses `classNames` [API](https://github.com/JedWatson/classnames).
     * _Tested with snapshot testing._
     */
    className: p.oneOfType([p.array, p.object, p.string]),
    /**
     * Allows user to click a close button. Banners should be dismissible only if they communicate future impact to the system,
     * _Tested with snapshot testing._
     */
    dismissible: p.bool,
    /**
     * Icon of type `~/components/icon`. This icon will be cloned and additional props appended. The default icons are:
     * * info variant: `utility:info`
     * * error variant: `utility:error`
     * * offline variant: `utility:offline`
     * * warning variant: `utility:warning`
     *
     * _Tested with snapshot testing._
     */
    icon: p.node,
    /**
     * **Text labels for internationalization**
     * This object is merged with the default props object on every render.
     * * `heading`: text within heading tag
     * * `headingLink`: Text of link that triggers `onClickHeadingLink`. Inline links should pass a keyed array of React components into `labels.heading`.
     *
     * _Tested with snapshot testing._
     */
    labels: p.shape({
      heading: p.oneOfType([p.string, p.node]),
      headingLink: p.oneOfType([p.string, p.node])
    }),
    /**
     * Triggered by link. _Tested with Mocha testing._
     */
    onClickHeadingLink: p.func,
    /**
     * Triggered by close button. This is a controlled component. _Tested with Mocha testing._
     */
    onRequestClose: p.func,
    /**
     * Custom styles to be passed to the component. _Tested with Mocha testing._
     */
    style: p.object,
    /**
     * The type of alert. _Tested with snapshot testing._
     */
    variant: p.oneOf(['error', 'info', 'offline', 'warning']).isRequired
  },
  Ou = {
    assistiveText: {
      closeButton: 'Close'
    },
    labels: {},
    variant: 'info'
  },
  vl = /* @__PURE__ */ (function (n) {
    Ek(t, n)
    var e = Dk(t)
    function t(i) {
      var r
      return (
        Ak(this, t),
        (r = e.call(this, i)),
        Ik(Jm(r), 'saveButtonRef', function (s) {
          ;(r.closeButton = s),
            r.state.isInitialRender &&
              (Gt.storeActiveElement(),
              r.closeButton && r.closeButton.focus(),
              r.setState({
                isInitialRender: !1
              }))
        }),
        (r.state = {
          isInitialRender: !0
        }),
        Qk(Zg, i, Zk),
        r
      )
    }
    return (
      Rk(t, [
        {
          key: 'componentWillUnmount',
          value: function () {
            Gt.returnFocusToStoredElement()
          }
        },
        {
          key: 'render',
          value: function () {
            var r = wa({}, Ou.assistiveText, this.props.assistiveText),
              s = wa({}, Ou.labels, this.props.labels),
              o = s.heading || this.props.content,
              a = this.props.onRequestClose || this.props.onDismiss,
              l = {
                info: 'info',
                warning: 'warning',
                error: 'error',
                offline: 'offline'
              },
              c = {
                info: /* @__PURE__ */ $.createElement(Ve, {
                  category: 'utility',
                  name: 'info'
                }),
                offline: /* @__PURE__ */ $.createElement(Ve, {
                  category: 'utility',
                  name: 'offline'
                }),
                warning: /* @__PURE__ */ $.createElement(Ve, {
                  category: 'utility',
                  name: 'warning'
                }),
                error: /* @__PURE__ */ $.createElement(Ve, {
                  category: 'utility',
                  name: 'error'
                })
              },
              u = this.props.icon ? this.props.icon : c[this.props.variant]
            this.props.iconName &&
              this.props.iconCategory &&
              (u = /* @__PURE__ */ $.createElement(Ve, {
                category: this.props.iconCategory,
                name: this.props.iconName
              }))
            var f = /* @__PURE__ */ $.cloneElement(u, {
              containerClassName: 'slds-m-right_x-small',
              inverse: !0,
              size: 'x-small'
            })
            return /* @__PURE__ */ $.createElement(
              'div',
              {
                className: Gi(
                  'slds-notify slds-notify_alert slds-theme_alert-texture',
                  {
                    'slds-theme_info': this.props.variant === 'info',
                    'slds-theme_warning': this.props.variant === 'warning',
                    'slds-theme_error': this.props.variant === 'error',
                    'slds-theme_offline': this.props.variant === 'offline'
                  },
                  this.props.className
                ),
                role: 'alert',
                style: this.props.style
              },
              /* @__PURE__ */ $.createElement(
                'span',
                {
                  className: 'slds-assistive-text'
                },
                l[this.props.variant]
              ),
              f,
              /* @__PURE__ */ $.createElement(
                'h2',
                null,
                o,
                ' ',
                s.headingLink
                  ? /* @__PURE__ */ $.createElement(
                      'a',
                      {
                        onClick: gs.trappedHandler(
                          this.props.onClickHeadingLink
                        ),
                        href: '#'
                      },
                      s.headingLink
                    )
                  : null
              ),
              this.props.dismissible
                ? /* @__PURE__ */ $.createElement(ft, {
                    assistiveText: {
                      icon: r.closeButton
                    },
                    buttonRef: this.saveButtonRef,
                    className: 'slds-notify__close',
                    iconCategory: 'utility',
                    iconName: 'close',
                    iconSize: 'medium',
                    inverse: !0,
                    onClick: a,
                    title: r.closeButton,
                    variant: 'icon'
                  })
                : null
            )
          }
        }
      ]),
      t
    )
  })($.Component)
vl.defaultProps = Ou
vl.displayName = Zg
vl.propTypes = Nk
function Io(n) {
  '@babel/helpers - typeof'
  return (
    typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol'
      ? (Io = function (t) {
          return typeof t
        })
      : (Io = function (t) {
          return t &&
            typeof Symbol == 'function' &&
            t.constructor === Symbol &&
            t !== Symbol.prototype
            ? 'symbol'
            : typeof t
        }),
    Io(n)
  )
}
function Mk(n, e) {
  if (!(n instanceof e))
    throw new TypeError('Cannot call a class as a function')
}
function ep(n, e) {
  for (var t = 0; t < e.length; t++) {
    var i = e[t]
    ;(i.enumerable = i.enumerable || !1),
      (i.configurable = !0),
      'value' in i && (i.writable = !0),
      Object.defineProperty(n, i.key, i)
  }
}
function Vk(n, e, t) {
  return e && ep(n.prototype, e), t && ep(n, t), n
}
function Wk(n, e) {
  if (typeof e != 'function' && e !== null)
    throw new TypeError('Super expression must either be null or a function')
  ;(n.prototype = Object.create(e && e.prototype, {
    constructor: { value: n, writable: !0, configurable: !0 }
  })),
    e && gu(n, e)
}
function gu(n, e) {
  return (
    (gu =
      Object.setPrototypeOf ||
      function (i, r) {
        return (i.__proto__ = r), i
      }),
    gu(n, e)
  )
}
function jk(n) {
  var e = Uk()
  return function () {
    var i = Qa(n),
      r
    if (e) {
      var s = Qa(this).constructor
      r = Reflect.construct(i, arguments, s)
    } else r = i.apply(this, arguments)
    return Bk(this, r)
  }
}
function Bk(n, e) {
  return e && (Io(e) === 'object' || typeof e == 'function') ? e : Lk(n)
}
function Lk(n) {
  if (n === void 0)
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    )
  return n
}
function Uk() {
  if (typeof Reflect > 'u' || !Reflect.construct || Reflect.construct.sham)
    return !1
  if (typeof Proxy == 'function') return !0
  try {
    return (
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      ),
      !0
    )
  } catch {
    return !1
  }
}
function Qa(n) {
  return (
    (Qa = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function (t) {
          return t.__proto__ || Object.getPrototypeOf(t)
        }),
    Qa(n)
  )
}
var qk = {
    /**
     * CSS classes to be added to tag with `.slds-notify_alert`. Uses `classNames` [API](https://github.com/JedWatson/classnames).
     */
    className: p.oneOfType([p.array, p.object, p.string]),
    /**
     * Alert components
     */
    children: p.node
  },
  Df = /* @__PURE__ */ (function (n) {
    Wk(t, n)
    var e = jk(t)
    function t() {
      return Mk(this, t), e.apply(this, arguments)
    }
    return (
      Vk(t, [
        {
          key: 'render',
          value: function () {
            return /* @__PURE__ */ $.createElement(
              'div',
              {
                className: Gi('slds-notify-container', this.props.className)
              },
              this.props.children
            )
          }
        }
      ]),
      t
    )
  })($.Component)
Df.displayName = kx
Df.propTypes = qk
function zk() {
  return /* @__PURE__ */ z.jsx('div', {
    className: 'inline-alert',
    children: /* @__PURE__ */ z.jsx(Df, {
      children: /* @__PURE__ */ z.jsx(vl, {
        variant: 'info',
        icon: /* @__PURE__ */ z.jsx(Ve, {
          category: 'utility',
          name: 'warning'
        }),
        labels: {
          heading:
            'Please review the information in this AI generated preview, as it may contain errors. You may edit code through the input below. If you want to generate a different output, go back to the Instructions tab.'
        }
      })
    })
  })
}
class ue {
  /**
  Get the line description around the given position.
  */
  lineAt(e) {
    if (e < 0 || e > this.length)
      throw new RangeError(
        `Invalid position ${e} in document of length ${this.length}`
      )
    return this.lineInner(e, !1, 1, 0)
  }
  /**
  Get the description for the given (1-based) line number.
  */
  line(e) {
    if (e < 1 || e > this.lines)
      throw new RangeError(
        `Invalid line number ${e} in ${this.lines}-line document`
      )
    return this.lineInner(e, !0, 1, 0)
  }
  /**
  Replace a range of the text with the given content.
  */
  replace(e, t, i) {
    let r = []
    return (
      this.decompose(
        0,
        e,
        r,
        2
        /* Open.To */
      ),
      i.length &&
        i.decompose(
          0,
          i.length,
          r,
          3
          /* Open.To */
        ),
      this.decompose(
        t,
        this.length,
        r,
        1
        /* Open.From */
      ),
      Jt.from(r, this.length - (t - e) + i.length)
    )
  }
  /**
  Append another document to this one.
  */
  append(e) {
    return this.replace(this.length, this.length, e)
  }
  /**
  Retrieve the text between the given points.
  */
  slice(e, t = this.length) {
    let i = []
    return this.decompose(e, t, i, 0), Jt.from(i, t - e)
  }
  /**
  Test whether this text is equal to another instance.
  */
  eq(e) {
    if (e == this) return !0
    if (e.length != this.length || e.lines != this.lines) return !1
    let t = this.scanIdentical(e, 1),
      i = this.length - this.scanIdentical(e, -1),
      r = new zr(this),
      s = new zr(e)
    for (let o = t, a = t; ; ) {
      if (
        (r.next(o),
        s.next(o),
        (o = 0),
        r.lineBreak != s.lineBreak || r.done != s.done || r.value != s.value)
      )
        return !1
      if (((a += r.value.length), r.done || a >= i)) return !0
    }
  }
  /**
  Iterate over the text. When `dir` is `-1`, iteration happens
  from end to start. This will return lines and the breaks between
  them as separate strings.
  */
  iter(e = 1) {
    return new zr(this, e)
  }
  /**
  Iterate over a range of the text. When `from` > `to`, the
  iterator will run in reverse.
  */
  iterRange(e, t = this.length) {
    return new ey(this, e, t)
  }
  /**
  Return a cursor that iterates over the given range of lines,
  _without_ returning the line breaks between, and yielding empty
  strings for empty lines.
  
  When `from` and `to` are given, they should be 1-based line numbers.
  */
  iterLines(e, t) {
    let i
    if (e == null) i = this.iter()
    else {
      t == null && (t = this.lines + 1)
      let r = this.line(e).from
      i = this.iterRange(
        r,
        Math.max(
          r,
          t == this.lines + 1 ? this.length : t <= 1 ? 0 : this.line(t - 1).to
        )
      )
    }
    return new ty(i)
  }
  /**
  Return the document as a string, using newline characters to
  separate lines.
  */
  toString() {
    return this.sliceString(0)
  }
  /**
  Convert the document to an array of lines (which can be
  deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
  */
  toJSON() {
    let e = []
    return this.flatten(e), e
  }
  /**
  @internal
  */
  constructor() {}
  /**
  Create a `Text` instance for the given array of lines.
  */
  static of(e) {
    if (e.length == 0)
      throw new RangeError('A document must have at least one line')
    return e.length == 1 && !e[0]
      ? ue.empty
      : e.length <= 32
        ? new Ae(e)
        : Jt.from(Ae.split(e, []))
  }
}
class Ae extends ue {
  constructor(e, t = Fk(e)) {
    super(), (this.text = e), (this.length = t)
  }
  get lines() {
    return this.text.length
  }
  get children() {
    return null
  }
  lineInner(e, t, i, r) {
    for (let s = 0; ; s++) {
      let o = this.text[s],
        a = r + o.length
      if ((t ? i : a) >= e) return new Gk(r, a, i, o)
      ;(r = a + 1), i++
    }
  }
  decompose(e, t, i, r) {
    let s =
      e <= 0 && t >= this.length
        ? this
        : new Ae(tp(this.text, e, t), Math.min(t, this.length) - Math.max(0, e))
    if (r & 1) {
      let o = i.pop(),
        a = No(s.text, o.text.slice(), 0, s.length)
      if (a.length <= 32) i.push(new Ae(a, o.length + s.length))
      else {
        let l = a.length >> 1
        i.push(new Ae(a.slice(0, l)), new Ae(a.slice(l)))
      }
    } else i.push(s)
  }
  replace(e, t, i) {
    if (!(i instanceof Ae)) return super.replace(e, t, i)
    let r = No(this.text, No(i.text, tp(this.text, 0, e)), t),
      s = this.length + i.length - (t - e)
    return r.length <= 32 ? new Ae(r, s) : Jt.from(Ae.split(r, []), s)
  }
  sliceString(
    e,
    t = this.length,
    i = `
`
  ) {
    let r = ''
    for (let s = 0, o = 0; s <= t && o < this.text.length; o++) {
      let a = this.text[o],
        l = s + a.length
      s > e && o && (r += i),
        e < l && t > s && (r += a.slice(Math.max(0, e - s), t - s)),
        (s = l + 1)
    }
    return r
  }
  flatten(e) {
    for (let t of this.text) e.push(t)
  }
  scanIdentical() {
    return 0
  }
  static split(e, t) {
    let i = [],
      r = -1
    for (let s of e)
      i.push(s),
        (r += s.length + 1),
        i.length == 32 && (t.push(new Ae(i, r)), (i = []), (r = -1))
    return r > -1 && t.push(new Ae(i, r)), t
  }
}
class Jt extends ue {
  constructor(e, t) {
    super(), (this.children = e), (this.length = t), (this.lines = 0)
    for (let i of e) this.lines += i.lines
  }
  lineInner(e, t, i, r) {
    for (let s = 0; ; s++) {
      let o = this.children[s],
        a = r + o.length,
        l = i + o.lines - 1
      if ((t ? l : a) >= e) return o.lineInner(e, t, i, r)
      ;(r = a + 1), (i = l + 1)
    }
  }
  decompose(e, t, i, r) {
    for (let s = 0, o = 0; o <= t && s < this.children.length; s++) {
      let a = this.children[s],
        l = o + a.length
      if (e <= l && t >= o) {
        let c = r & ((o <= e ? 1 : 0) | (l >= t ? 2 : 0))
        o >= e && l <= t && !c ? i.push(a) : a.decompose(e - o, t - o, i, c)
      }
      o = l + 1
    }
  }
  replace(e, t, i) {
    if (i.lines < this.lines)
      for (let r = 0, s = 0; r < this.children.length; r++) {
        let o = this.children[r],
          a = s + o.length
        if (e >= s && t <= a) {
          let l = o.replace(e - s, t - s, i),
            c = this.lines - o.lines + l.lines
          if (l.lines < c >> (5 - 1) && l.lines > c >> (5 + 1)) {
            let u = this.children.slice()
            return (u[r] = l), new Jt(u, this.length - (t - e) + i.length)
          }
          return super.replace(s, a, l)
        }
        s = a + 1
      }
    return super.replace(e, t, i)
  }
  sliceString(
    e,
    t = this.length,
    i = `
`
  ) {
    let r = ''
    for (let s = 0, o = 0; s < this.children.length && o <= t; s++) {
      let a = this.children[s],
        l = o + a.length
      o > e && s && (r += i),
        e < l && t > o && (r += a.sliceString(e - o, t - o, i)),
        (o = l + 1)
    }
    return r
  }
  flatten(e) {
    for (let t of this.children) t.flatten(e)
  }
  scanIdentical(e, t) {
    if (!(e instanceof Jt)) return 0
    let i = 0,
      [r, s, o, a] =
        t > 0
          ? [0, 0, this.children.length, e.children.length]
          : [this.children.length - 1, e.children.length - 1, -1, -1]
    for (; ; r += t, s += t) {
      if (r == o || s == a) return i
      let l = this.children[r],
        c = e.children[s]
      if (l != c) return i + l.scanIdentical(c, t)
      i += l.length + 1
    }
  }
  static from(e, t = e.reduce((i, r) => i + r.length + 1, -1)) {
    let i = 0
    for (let d of e) i += d.lines
    if (i < 32) {
      let d = []
      for (let O of e) O.flatten(d)
      return new Ae(d, t)
    }
    let r = Math.max(
        32,
        i >> 5
        /* Tree.BranchShift */
      ),
      s = r << 1,
      o = r >> 1,
      a = [],
      l = 0,
      c = -1,
      u = []
    function f(d) {
      let O
      if (d.lines > s && d instanceof Jt) for (let m of d.children) f(m)
      else
        d.lines > o && (l > o || !l)
          ? (h(), a.push(d))
          : d instanceof Ae &&
              l &&
              (O = u[u.length - 1]) instanceof Ae &&
              d.lines + O.lines <= 32
            ? ((l += d.lines),
              (c += d.length + 1),
              (u[u.length - 1] = new Ae(
                O.text.concat(d.text),
                O.length + 1 + d.length
              )))
            : (l + d.lines > r && h(),
              (l += d.lines),
              (c += d.length + 1),
              u.push(d))
    }
    function h() {
      l != 0 &&
        (a.push(u.length == 1 ? u[0] : Jt.from(u, c)),
        (c = -1),
        (l = u.length = 0))
    }
    for (let d of e) f(d)
    return h(), a.length == 1 ? a[0] : new Jt(a, t)
  }
}
ue.empty = /* @__PURE__ */ new Ae([''], 0)
function Fk(n) {
  let e = -1
  for (let t of n) e += t.length + 1
  return e
}
function No(n, e, t = 0, i = 1e9) {
  for (let r = 0, s = 0, o = !0; s < n.length && r <= i; s++) {
    let a = n[s],
      l = r + a.length
    l >= t &&
      (l > i && (a = a.slice(0, i - r)),
      r < t && (a = a.slice(t - r)),
      o ? ((e[e.length - 1] += a), (o = !1)) : e.push(a)),
      (r = l + 1)
  }
  return e
}
function tp(n, e, t) {
  return No(n, [''], e, t)
}
class zr {
  constructor(e, t = 1) {
    ;(this.dir = t),
      (this.done = !1),
      (this.lineBreak = !1),
      (this.value = ''),
      (this.nodes = [e]),
      (this.offsets = [
        t > 0 ? 1 : (e instanceof Ae ? e.text.length : e.children.length) << 1
      ])
  }
  nextInner(e, t) {
    for (this.done = this.lineBreak = !1; ; ) {
      let i = this.nodes.length - 1,
        r = this.nodes[i],
        s = this.offsets[i],
        o = s >> 1,
        a = r instanceof Ae ? r.text.length : r.children.length
      if (o == (t > 0 ? a : 0)) {
        if (i == 0) return (this.done = !0), (this.value = ''), this
        t > 0 && this.offsets[i - 1]++, this.nodes.pop(), this.offsets.pop()
      } else if ((s & 1) == (t > 0 ? 0 : 1)) {
        if (((this.offsets[i] += t), e == 0))
          return (
            (this.lineBreak = !0),
            (this.value = `
`),
            this
          )
        e--
      } else if (r instanceof Ae) {
        let l = r.text[o + (t < 0 ? -1 : 0)]
        if (((this.offsets[i] += t), l.length > Math.max(0, e)))
          return (
            (this.value =
              e == 0 ? l : t > 0 ? l.slice(e) : l.slice(0, l.length - e)),
            this
          )
        e -= l.length
      } else {
        let l = r.children[o + (t < 0 ? -1 : 0)]
        e > l.length
          ? ((e -= l.length), (this.offsets[i] += t))
          : (t < 0 && this.offsets[i]--,
            this.nodes.push(l),
            this.offsets.push(
              t > 0
                ? 1
                : (l instanceof Ae ? l.text.length : l.children.length) << 1
            ))
      }
    }
  }
  next(e = 0) {
    return (
      e < 0 && (this.nextInner(-e, -this.dir), (e = this.value.length)),
      this.nextInner(e, this.dir)
    )
  }
}
class ey {
  constructor(e, t, i) {
    ;(this.value = ''),
      (this.done = !1),
      (this.cursor = new zr(e, t > i ? -1 : 1)),
      (this.pos = t > i ? e.length : 0),
      (this.from = Math.min(t, i)),
      (this.to = Math.max(t, i))
  }
  nextInner(e, t) {
    if (t < 0 ? this.pos <= this.from : this.pos >= this.to)
      return (this.value = ''), (this.done = !0), this
    e += Math.max(0, t < 0 ? this.pos - this.to : this.from - this.pos)
    let i = t < 0 ? this.pos - this.from : this.to - this.pos
    e > i && (e = i), (i -= e)
    let { value: r } = this.cursor.next(e)
    return (
      (this.pos += (r.length + e) * t),
      (this.value =
        r.length <= i ? r : t < 0 ? r.slice(r.length - i) : r.slice(0, i)),
      (this.done = !this.value),
      this
    )
  }
  next(e = 0) {
    return (
      e < 0
        ? (e = Math.max(e, this.from - this.pos))
        : e > 0 && (e = Math.min(e, this.to - this.pos)),
      this.nextInner(e, this.cursor.dir)
    )
  }
  get lineBreak() {
    return this.cursor.lineBreak && this.value != ''
  }
}
class ty {
  constructor(e) {
    ;(this.inner = e),
      (this.afterBreak = !0),
      (this.value = ''),
      (this.done = !1)
  }
  next(e = 0) {
    let { done: t, lineBreak: i, value: r } = this.inner.next(e)
    return (
      t
        ? ((this.done = !0), (this.value = ''))
        : i
          ? this.afterBreak
            ? (this.value = '')
            : ((this.afterBreak = !0), this.next())
          : ((this.value = r), (this.afterBreak = !1)),
      this
    )
  }
  get lineBreak() {
    return !1
  }
}
typeof Symbol < 'u' &&
  ((ue.prototype[Symbol.iterator] = function () {
    return this.iter()
  }),
  (zr.prototype[Symbol.iterator] =
    ey.prototype[Symbol.iterator] =
    ty.prototype[Symbol.iterator] =
      function () {
        return this
      }))
class Gk {
  /**
  @internal
  */
  constructor(e, t, i, r) {
    ;(this.from = e), (this.to = t), (this.number = i), (this.text = r)
  }
  /**
  The length of the line (not including any line break after it).
  */
  get length() {
    return this.to - this.from
  }
}
let ji =
  /* @__PURE__ */ 'lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o'
    .split(',')
    .map((n) => (n ? parseInt(n, 36) : 1))
for (let n = 1; n < ji.length; n++) ji[n] += ji[n - 1]
function Hk(n) {
  for (let e = 1; e < ji.length; e += 2) if (ji[e] > n) return ji[e - 1] <= n
  return !1
}
function np(n) {
  return n >= 127462 && n <= 127487
}
const ip = 8205
function et(n, e, t = !0, i = !0) {
  return (t ? ny : Kk)(n, e, i)
}
function ny(n, e, t) {
  if (e == n.length) return e
  e && iy(n.charCodeAt(e)) && ry(n.charCodeAt(e - 1)) && e--
  let i = qe(n, e)
  for (e += Ct(i); e < n.length; ) {
    let r = qe(n, e)
    if (i == ip || r == ip || (t && Hk(r))) (e += Ct(r)), (i = r)
    else if (np(r)) {
      let s = 0,
        o = e - 2
      for (; o >= 0 && np(qe(n, o)); ) s++, (o -= 2)
      if (s % 2 == 0) break
      e += 2
    } else break
  }
  return e
}
function Kk(n, e, t) {
  for (; e > 0; ) {
    let i = ny(n, e - 2, t)
    if (i < e) return i
    e--
  }
  return 0
}
function iy(n) {
  return n >= 56320 && n < 57344
}
function ry(n) {
  return n >= 55296 && n < 56320
}
function qe(n, e) {
  let t = n.charCodeAt(e)
  if (!ry(t) || e + 1 == n.length) return t
  let i = n.charCodeAt(e + 1)
  return iy(i) ? ((t - 55296) << 10) + (i - 56320) + 65536 : t
}
function Xf(n) {
  return n <= 65535
    ? String.fromCharCode(n)
    : ((n -= 65536), String.fromCharCode((n >> 10) + 55296, (n & 1023) + 56320))
}
function Ct(n) {
  return n < 65536 ? 1 : 2
}
const mu = /\r\n?|\n/
var Fe = /* @__PURE__ */ (function (n) {
  return (
    (n[(n.Simple = 0)] = 'Simple'),
    (n[(n.TrackDel = 1)] = 'TrackDel'),
    (n[(n.TrackBefore = 2)] = 'TrackBefore'),
    (n[(n.TrackAfter = 3)] = 'TrackAfter'),
    n
  )
})(Fe || (Fe = {}))
class on {
  // Sections are encoded as pairs of integers. The first is the
  // length in the current document, and the second is -1 for
  // unaffected sections, and the length of the replacement content
  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
  // 0), and a replacement two positive numbers.
  /**
  @internal
  */
  constructor(e) {
    this.sections = e
  }
  /**
  The length of the document before the change.
  */
  get length() {
    let e = 0
    for (let t = 0; t < this.sections.length; t += 2) e += this.sections[t]
    return e
  }
  /**
  The length of the document after the change.
  */
  get newLength() {
    let e = 0
    for (let t = 0; t < this.sections.length; t += 2) {
      let i = this.sections[t + 1]
      e += i < 0 ? this.sections[t] : i
    }
    return e
  }
  /**
  False when there are actual changes in this set.
  */
  get empty() {
    return (
      this.sections.length == 0 ||
      (this.sections.length == 2 && this.sections[1] < 0)
    )
  }
  /**
  Iterate over the unchanged parts left by these changes. `posA`
  provides the position of the range in the old document, `posB`
  the new position in the changed document.
  */
  iterGaps(e) {
    for (let t = 0, i = 0, r = 0; t < this.sections.length; ) {
      let s = this.sections[t++],
        o = this.sections[t++]
      o < 0 ? (e(i, r, s), (r += s)) : (r += o), (i += s)
    }
  }
  /**
  Iterate over the ranges changed by these changes. (See
  [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
  variant that also provides you with the inserted text.)
  `fromA`/`toA` provides the extent of the change in the starting
  document, `fromB`/`toB` the extent of the replacement in the
  changed document.
  
  When `individual` is true, adjacent changes (which are kept
  separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
  reported separately.
  */
  iterChangedRanges(e, t = !1) {
    yu(this, e, t)
  }
  /**
  Get a description of the inverted form of these changes.
  */
  get invertedDesc() {
    let e = []
    for (let t = 0; t < this.sections.length; ) {
      let i = this.sections[t++],
        r = this.sections[t++]
      r < 0 ? e.push(i, r) : e.push(r, i)
    }
    return new on(e)
  }
  /**
  Compute the combined effect of applying another set of changes
  after this one. The length of the document after this set should
  match the length before `other`.
  */
  composeDesc(e) {
    return this.empty ? e : e.empty ? this : sy(this, e)
  }
  /**
  Map this description, which should start with the same document
  as `other`, over another set of changes, so that it can be
  applied after it. When `before` is true, map as if the changes
  in `other` happened before the ones in `this`.
  */
  mapDesc(e, t = !1) {
    return e.empty ? this : bu(this, e, t)
  }
  mapPos(e, t = -1, i = Fe.Simple) {
    let r = 0,
      s = 0
    for (let o = 0; o < this.sections.length; ) {
      let a = this.sections[o++],
        l = this.sections[o++],
        c = r + a
      if (l < 0) {
        if (c > e) return s + (e - r)
        s += a
      } else {
        if (
          i != Fe.Simple &&
          c >= e &&
          ((i == Fe.TrackDel && r < e && c > e) ||
            (i == Fe.TrackBefore && r < e) ||
            (i == Fe.TrackAfter && c > e))
        )
          return null
        if (c > e || (c == e && t < 0 && !a)) return e == r || t < 0 ? s : s + l
        s += l
      }
      r = c
    }
    if (e > r)
      throw new RangeError(
        `Position ${e} is out of range for changeset of length ${r}`
      )
    return s
  }
  /**
  Check whether these changes touch a given range. When one of the
  changes entirely covers the range, the string `"cover"` is
  returned.
  */
  touchesRange(e, t = e) {
    for (let i = 0, r = 0; i < this.sections.length && r <= t; ) {
      let s = this.sections[i++],
        o = this.sections[i++],
        a = r + s
      if (o >= 0 && r <= t && a >= e) return r < e && a > t ? 'cover' : !0
      r = a
    }
    return !1
  }
  /**
  @internal
  */
  toString() {
    let e = ''
    for (let t = 0; t < this.sections.length; ) {
      let i = this.sections[t++],
        r = this.sections[t++]
      e += (e ? ' ' : '') + i + (r >= 0 ? ':' + r : '')
    }
    return e
  }
  /**
  Serialize this change desc to a JSON-representable value.
  */
  toJSON() {
    return this.sections
  }
  /**
  Create a change desc from its JSON representation (as produced
  by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
  */
  static fromJSON(e) {
    if (
      !Array.isArray(e) ||
      e.length % 2 ||
      e.some((t) => typeof t != 'number')
    )
      throw new RangeError('Invalid JSON representation of ChangeDesc')
    return new on(e)
  }
  /**
  @internal
  */
  static create(e) {
    return new on(e)
  }
}
class Xe extends on {
  constructor(e, t) {
    super(e), (this.inserted = t)
  }
  /**
  Apply the changes to a document, returning the modified
  document.
  */
  apply(e) {
    if (this.length != e.length)
      throw new RangeError(
        'Applying change set to a document with the wrong length'
      )
    return (
      yu(this, (t, i, r, s, o) => (e = e.replace(r, r + (i - t), o)), !1), e
    )
  }
  mapDesc(e, t = !1) {
    return bu(this, e, t, !0)
  }
  /**
  Given the document as it existed _before_ the changes, return a
  change set that represents the inverse of this set, which could
  be used to go from the document created by the changes back to
  the document as it existed before the changes.
  */
  invert(e) {
    let t = this.sections.slice(),
      i = []
    for (let r = 0, s = 0; r < t.length; r += 2) {
      let o = t[r],
        a = t[r + 1]
      if (a >= 0) {
        ;(t[r] = a), (t[r + 1] = o)
        let l = r >> 1
        for (; i.length < l; ) i.push(ue.empty)
        i.push(o ? e.slice(s, s + o) : ue.empty)
      }
      s += o
    }
    return new Xe(t, i)
  }
  /**
  Combine two subsequent change sets into a single set. `other`
  must start in the document produced by `this`. If `this` goes
  `docA` → `docB` and `other` represents `docB` → `docC`, the
  returned value will represent the change `docA` → `docC`.
  */
  compose(e) {
    return this.empty ? e : e.empty ? this : sy(this, e, !0)
  }
  /**
  Given another change set starting in the same document, maps this
  change set over the other, producing a new change set that can be
  applied to the document produced by applying `other`. When
  `before` is `true`, order changes as if `this` comes before
  `other`, otherwise (the default) treat `other` as coming first.
  
  Given two changes `A` and `B`, `A.compose(B.map(A))` and
  `B.compose(A.map(B, true))` will produce the same document. This
  provides a basic form of [operational
  transformation](https://en.wikipedia.org/wiki/Operational_transformation),
  and can be used for collaborative editing.
  */
  map(e, t = !1) {
    return e.empty ? this : bu(this, e, t, !0)
  }
  /**
  Iterate over the changed ranges in the document, calling `f` for
  each, with the range in the original document (`fromA`-`toA`)
  and the range that replaces it in the new document
  (`fromB`-`toB`).
  
  When `individual` is true, adjacent changes are reported
  separately.
  */
  iterChanges(e, t = !1) {
    yu(this, e, t)
  }
  /**
  Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
  set.
  */
  get desc() {
    return on.create(this.sections)
  }
  /**
  @internal
  */
  filter(e) {
    let t = [],
      i = [],
      r = [],
      s = new es(this)
    e: for (let o = 0, a = 0; ; ) {
      let l = o == e.length ? 1e9 : e[o++]
      for (; a < l || (a == l && s.len == 0); ) {
        if (s.done) break e
        let u = Math.min(s.len, l - a)
        He(r, u, -1)
        let f = s.ins == -1 ? -1 : s.off == 0 ? s.ins : 0
        He(t, u, f), f > 0 && Mn(i, t, s.text), s.forward(u), (a += u)
      }
      let c = e[o++]
      for (; a < c; ) {
        if (s.done) break e
        let u = Math.min(s.len, c - a)
        He(t, u, -1),
          He(r, u, s.ins == -1 ? -1 : s.off == 0 ? s.ins : 0),
          s.forward(u),
          (a += u)
      }
    }
    return {
      changes: new Xe(t, i),
      filtered: on.create(r)
    }
  }
  /**
  Serialize this change set to a JSON-representable value.
  */
  toJSON() {
    let e = []
    for (let t = 0; t < this.sections.length; t += 2) {
      let i = this.sections[t],
        r = this.sections[t + 1]
      r < 0
        ? e.push(i)
        : r == 0
          ? e.push([i])
          : e.push([i].concat(this.inserted[t >> 1].toJSON()))
    }
    return e
  }
  /**
  Create a change set for the given changes, for a document of the
  given length, using `lineSep` as line separator.
  */
  static of(e, t, i) {
    let r = [],
      s = [],
      o = 0,
      a = null
    function l(u = !1) {
      if (!u && !r.length) return
      o < t && He(r, t - o, -1)
      let f = new Xe(r, s)
      ;(a = a ? a.compose(f.map(a)) : f), (r = []), (s = []), (o = 0)
    }
    function c(u) {
      if (Array.isArray(u)) for (let f of u) c(f)
      else if (u instanceof Xe) {
        if (u.length != t)
          throw new RangeError(
            `Mismatched change set length (got ${u.length}, expected ${t})`
          )
        l(), (a = a ? a.compose(u.map(a)) : u)
      } else {
        let { from: f, to: h = f, insert: d } = u
        if (f > h || f < 0 || h > t)
          throw new RangeError(
            `Invalid change range ${f} to ${h} (in doc of length ${t})`
          )
        let O = d
            ? typeof d == 'string'
              ? ue.of(d.split(i || mu))
              : d
            : ue.empty,
          m = O.length
        if (f == h && m == 0) return
        f < o && l(),
          f > o && He(r, f - o, -1),
          He(r, h - f, m),
          Mn(s, r, O),
          (o = h)
      }
    }
    return c(e), l(!a), a
  }
  /**
  Create an empty changeset of the given length.
  */
  static empty(e) {
    return new Xe(e ? [e, -1] : [], [])
  }
  /**
  Create a changeset from its JSON representation (as produced by
  [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
  */
  static fromJSON(e) {
    if (!Array.isArray(e))
      throw new RangeError('Invalid JSON representation of ChangeSet')
    let t = [],
      i = []
    for (let r = 0; r < e.length; r++) {
      let s = e[r]
      if (typeof s == 'number') t.push(s, -1)
      else {
        if (
          !Array.isArray(s) ||
          typeof s[0] != 'number' ||
          s.some((o, a) => a && typeof o != 'string')
        )
          throw new RangeError('Invalid JSON representation of ChangeSet')
        if (s.length == 1) t.push(s[0], 0)
        else {
          for (; i.length < r; ) i.push(ue.empty)
          ;(i[r] = ue.of(s.slice(1))), t.push(s[0], i[r].length)
        }
      }
    }
    return new Xe(t, i)
  }
  /**
  @internal
  */
  static createSet(e, t) {
    return new Xe(e, t)
  }
}
function He(n, e, t, i = !1) {
  if (e == 0 && t <= 0) return
  let r = n.length - 2
  r >= 0 && t <= 0 && t == n[r + 1]
    ? (n[r] += e)
    : e == 0 && n[r] == 0
      ? (n[r + 1] += t)
      : i
        ? ((n[r] += e), (n[r + 1] += t))
        : n.push(e, t)
}
function Mn(n, e, t) {
  if (t.length == 0) return
  let i = (e.length - 2) >> 1
  if (i < n.length) n[n.length - 1] = n[n.length - 1].append(t)
  else {
    for (; n.length < i; ) n.push(ue.empty)
    n.push(t)
  }
}
function yu(n, e, t) {
  let i = n.inserted
  for (let r = 0, s = 0, o = 0; o < n.sections.length; ) {
    let a = n.sections[o++],
      l = n.sections[o++]
    if (l < 0) (r += a), (s += a)
    else {
      let c = r,
        u = s,
        f = ue.empty
      for (
        ;
        (c += a),
          (u += l),
          l && i && (f = f.append(i[(o - 2) >> 1])),
          !(t || o == n.sections.length || n.sections[o + 1] < 0);

      )
        (a = n.sections[o++]), (l = n.sections[o++])
      e(r, c, s, u, f), (r = c), (s = u)
    }
  }
}
function bu(n, e, t, i = !1) {
  let r = [],
    s = i ? [] : null,
    o = new es(n),
    a = new es(e)
  for (let l = -1; ; )
    if (o.ins == -1 && a.ins == -1) {
      let c = Math.min(o.len, a.len)
      He(r, c, -1), o.forward(c), a.forward(c)
    } else if (
      a.ins >= 0 &&
      (o.ins < 0 ||
        l == o.i ||
        (o.off == 0 && (a.len < o.len || (a.len == o.len && !t))))
    ) {
      let c = a.len
      for (He(r, a.ins, -1); c; ) {
        let u = Math.min(o.len, c)
        o.ins >= 0 &&
          l < o.i &&
          o.len <= u &&
          (He(r, 0, o.ins), s && Mn(s, r, o.text), (l = o.i)),
          o.forward(u),
          (c -= u)
      }
      a.next()
    } else if (o.ins >= 0) {
      let c = 0,
        u = o.len
      for (; u; )
        if (a.ins == -1) {
          let f = Math.min(u, a.len)
          ;(c += f), (u -= f), a.forward(f)
        } else if (a.ins == 0 && a.len < u) (u -= a.len), a.next()
        else break
      He(r, c, l < o.i ? o.ins : 0),
        s && l < o.i && Mn(s, r, o.text),
        (l = o.i),
        o.forward(o.len - u)
    } else {
      if (o.done && a.done) return s ? Xe.createSet(r, s) : on.create(r)
      throw new Error('Mismatched change set lengths')
    }
}
function sy(n, e, t = !1) {
  let i = [],
    r = t ? [] : null,
    s = new es(n),
    o = new es(e)
  for (let a = !1; ; ) {
    if (s.done && o.done) return r ? Xe.createSet(i, r) : on.create(i)
    if (s.ins == 0) He(i, s.len, 0, a), s.next()
    else if (o.len == 0 && !o.done)
      He(i, 0, o.ins, a), r && Mn(r, i, o.text), o.next()
    else {
      if (s.done || o.done) throw new Error('Mismatched change set lengths')
      {
        let l = Math.min(s.len2, o.len),
          c = i.length
        if (s.ins == -1) {
          let u = o.ins == -1 ? -1 : o.off ? 0 : o.ins
          He(i, l, u, a), r && u && Mn(r, i, o.text)
        } else
          o.ins == -1
            ? (He(i, s.off ? 0 : s.len, l, a), r && Mn(r, i, s.textBit(l)))
            : (He(i, s.off ? 0 : s.len, o.off ? 0 : o.ins, a),
              r && !o.off && Mn(r, i, o.text))
        ;(a = (s.ins > l || (o.ins >= 0 && o.len > l)) && (a || i.length > c)),
          s.forward2(l),
          o.forward(l)
      }
    }
  }
}
class es {
  constructor(e) {
    ;(this.set = e), (this.i = 0), this.next()
  }
  next() {
    let { sections: e } = this.set
    this.i < e.length
      ? ((this.len = e[this.i++]), (this.ins = e[this.i++]))
      : ((this.len = 0), (this.ins = -2)),
      (this.off = 0)
  }
  get done() {
    return this.ins == -2
  }
  get len2() {
    return this.ins < 0 ? this.len : this.ins
  }
  get text() {
    let { inserted: e } = this.set,
      t = (this.i - 2) >> 1
    return t >= e.length ? ue.empty : e[t]
  }
  textBit(e) {
    let { inserted: t } = this.set,
      i = (this.i - 2) >> 1
    return i >= t.length && !e
      ? ue.empty
      : t[i].slice(this.off, e == null ? void 0 : this.off + e)
  }
  forward(e) {
    e == this.len ? this.next() : ((this.len -= e), (this.off += e))
  }
  forward2(e) {
    this.ins == -1
      ? this.forward(e)
      : e == this.ins
        ? this.next()
        : ((this.ins -= e), (this.off += e))
  }
}
class mi {
  constructor(e, t, i) {
    ;(this.from = e), (this.to = t), (this.flags = i)
  }
  /**
  The anchor of the range—the side that doesn't move when you
  extend it.
  */
  get anchor() {
    return this.flags & 32 ? this.to : this.from
  }
  /**
  The head of the range, which is moved when the range is
  [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
  */
  get head() {
    return this.flags & 32 ? this.from : this.to
  }
  /**
  True when `anchor` and `head` are at the same position.
  */
  get empty() {
    return this.from == this.to
  }
  /**
  If this is a cursor that is explicitly associated with the
  character on one of its sides, this returns the side. -1 means
  the character before its position, 1 the character after, and 0
  means no association.
  */
  get assoc() {
    return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0
  }
  /**
  The bidirectional text level associated with this cursor, if
  any.
  */
  get bidiLevel() {
    let e = this.flags & 7
    return e == 7 ? null : e
  }
  /**
  The goal column (stored vertical offset) associated with a
  cursor. This is used to preserve the vertical position when
  [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
  lines of different length.
  */
  get goalColumn() {
    let e = this.flags >> 6
    return e == 16777215 ? void 0 : e
  }
  /**
  Map this range through a change, producing a valid range in the
  updated document.
  */
  map(e, t = -1) {
    let i, r
    return (
      this.empty
        ? (i = r = e.mapPos(this.from, t))
        : ((i = e.mapPos(this.from, 1)), (r = e.mapPos(this.to, -1))),
      i == this.from && r == this.to ? this : new mi(i, r, this.flags)
    )
  }
  /**
  Extend this range to cover at least `from` to `to`.
  */
  extend(e, t = e) {
    if (e <= this.anchor && t >= this.anchor) return _.range(e, t)
    let i = Math.abs(e - this.anchor) > Math.abs(t - this.anchor) ? e : t
    return _.range(this.anchor, i)
  }
  /**
  Compare this range to another range.
  */
  eq(e) {
    return this.anchor == e.anchor && this.head == e.head
  }
  /**
  Return a JSON-serializable object representing the range.
  */
  toJSON() {
    return { anchor: this.anchor, head: this.head }
  }
  /**
  Convert a JSON representation of a range to a `SelectionRange`
  instance.
  */
  static fromJSON(e) {
    if (!e || typeof e.anchor != 'number' || typeof e.head != 'number')
      throw new RangeError('Invalid JSON representation for SelectionRange')
    return _.range(e.anchor, e.head)
  }
  /**
  @internal
  */
  static create(e, t, i) {
    return new mi(e, t, i)
  }
}
class _ {
  constructor(e, t) {
    ;(this.ranges = e), (this.mainIndex = t)
  }
  /**
  Map a selection through a change. Used to adjust the selection
  position for changes.
  */
  map(e, t = -1) {
    return e.empty
      ? this
      : _.create(
          this.ranges.map((i) => i.map(e, t)),
          this.mainIndex
        )
  }
  /**
  Compare this selection to another selection.
  */
  eq(e) {
    if (this.ranges.length != e.ranges.length || this.mainIndex != e.mainIndex)
      return !1
    for (let t = 0; t < this.ranges.length; t++)
      if (!this.ranges[t].eq(e.ranges[t])) return !1
    return !0
  }
  /**
  Get the primary selection range. Usually, you should make sure
  your code applies to _all_ ranges, by using methods like
  [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
  */
  get main() {
    return this.ranges[this.mainIndex]
  }
  /**
  Make sure the selection only has one range. Returns a selection
  holding only the main range from this selection.
  */
  asSingle() {
    return this.ranges.length == 1 ? this : new _([this.main], 0)
  }
  /**
  Extend this selection with an extra range.
  */
  addRange(e, t = !0) {
    return _.create([e].concat(this.ranges), t ? 0 : this.mainIndex + 1)
  }
  /**
  Replace a given range with another range, and then normalize the
  selection to merge and sort ranges if necessary.
  */
  replaceRange(e, t = this.mainIndex) {
    let i = this.ranges.slice()
    return (i[t] = e), _.create(i, this.mainIndex)
  }
  /**
  Convert this selection to an object that can be serialized to
  JSON.
  */
  toJSON() {
    return { ranges: this.ranges.map((e) => e.toJSON()), main: this.mainIndex }
  }
  /**
  Create a selection from a JSON representation.
  */
  static fromJSON(e) {
    if (
      !e ||
      !Array.isArray(e.ranges) ||
      typeof e.main != 'number' ||
      e.main >= e.ranges.length
    )
      throw new RangeError('Invalid JSON representation for EditorSelection')
    return new _(
      e.ranges.map((t) => mi.fromJSON(t)),
      e.main
    )
  }
  /**
  Create a selection holding a single range.
  */
  static single(e, t = e) {
    return new _([_.range(e, t)], 0)
  }
  /**
  Sort and merge the given set of ranges, creating a valid
  selection.
  */
  static create(e, t = 0) {
    if (e.length == 0)
      throw new RangeError('A selection needs at least one range')
    for (let i = 0, r = 0; r < e.length; r++) {
      let s = e[r]
      if (s.empty ? s.from <= i : s.from < i) return _.normalized(e.slice(), t)
      i = s.to
    }
    return new _(e, t)
  }
  /**
  Create a cursor selection range at the given position. You can
  safely ignore the optional arguments in most situations.
  */
  static cursor(e, t = 0, i, r) {
    return mi.create(
      e,
      e,
      (t == 0 ? 0 : t < 0 ? 8 : 16) |
        (i == null ? 7 : Math.min(6, i)) |
        ((r ?? 16777215) << 6)
    )
  }
  /**
  Create a selection range.
  */
  static range(e, t, i, r) {
    let s = ((i ?? 16777215) << 6) | (r == null ? 7 : Math.min(6, r))
    return t < e
      ? mi.create(t, e, 48 | s)
      : mi.create(e, t, (t > e ? 8 : 0) | s)
  }
  /**
  @internal
  */
  static normalized(e, t = 0) {
    let i = e[t]
    e.sort((r, s) => r.from - s.from), (t = e.indexOf(i))
    for (let r = 1; r < e.length; r++) {
      let s = e[r],
        o = e[r - 1]
      if (s.empty ? s.from <= o.to : s.from < o.to) {
        let a = o.from,
          l = Math.max(s.to, o.to)
        r <= t && t--,
          e.splice(--r, 2, s.anchor > s.head ? _.range(l, a) : _.range(a, l))
      }
    }
    return new _(e, t)
  }
}
function oy(n, e) {
  for (let t of n.ranges)
    if (t.to > e) throw new RangeError('Selection points outside of document')
}
let Yf = 0
class q {
  constructor(e, t, i, r, s) {
    ;(this.combine = e),
      (this.compareInput = t),
      (this.compare = i),
      (this.isStatic = r),
      (this.id = Yf++),
      (this.default = e([])),
      (this.extensions = typeof s == 'function' ? s(this) : s)
  }
  /**
  Returns a facet reader for this facet, which can be used to
  [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
  */
  get reader() {
    return this
  }
  /**
  Define a new facet.
  */
  static define(e = {}) {
    return new q(
      e.combine || ((t) => t),
      e.compareInput || ((t, i) => t === i),
      e.compare || (e.combine ? (t, i) => t === i : If),
      !!e.static,
      e.enables
    )
  }
  /**
  Returns an extension that adds the given value to this facet.
  */
  of(e) {
    return new Mo([], this, 0, e)
  }
  /**
  Create an extension that computes a value for the facet from a
  state. You must take care to declare the parts of the state that
  this value depends on, since your function is only called again
  for a new state when one of those parts changed.
  
  In cases where your value depends only on a single field, you'll
  want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
  */
  compute(e, t) {
    if (this.isStatic) throw new Error("Can't compute a static facet")
    return new Mo(e, this, 1, t)
  }
  /**
  Create an extension that computes zero or more values for this
  facet from a state.
  */
  computeN(e, t) {
    if (this.isStatic) throw new Error("Can't compute a static facet")
    return new Mo(e, this, 2, t)
  }
  from(e, t) {
    return t || (t = (i) => i), this.compute([e], (i) => t(i.field(e)))
  }
}
function If(n, e) {
  return n == e || (n.length == e.length && n.every((t, i) => t === e[i]))
}
class Mo {
  constructor(e, t, i, r) {
    ;(this.dependencies = e),
      (this.facet = t),
      (this.type = i),
      (this.value = r),
      (this.id = Yf++)
  }
  dynamicSlot(e) {
    var t
    let i = this.value,
      r = this.facet.compareInput,
      s = this.id,
      o = e[s] >> 1,
      a = this.type == 2,
      l = !1,
      c = !1,
      u = []
    for (let f of this.dependencies)
      f == 'doc'
        ? (l = !0)
        : f == 'selection'
          ? (c = !0)
          : ((t = e[f.id]) !== null && t !== void 0 ? t : 1) & 1 ||
            u.push(e[f.id])
    return {
      create(f) {
        return (f.values[o] = i(f)), 1
      },
      update(f, h) {
        if (
          (l && h.docChanged) ||
          (c && (h.docChanged || h.selection)) ||
          vu(f, u)
        ) {
          let d = i(f)
          if (a ? !rp(d, f.values[o], r) : !r(d, f.values[o]))
            return (f.values[o] = d), 1
        }
        return 0
      },
      reconfigure: (f, h) => {
        let d,
          O = h.config.address[s]
        if (O != null) {
          let m = Ta(h, O)
          if (
            this.dependencies.every((b) =>
              b instanceof q
                ? h.facet(b) === f.facet(b)
                : b instanceof We
                  ? h.field(b, !1) == f.field(b, !1)
                  : !0
            ) ||
            (a ? rp((d = i(f)), m, r) : r((d = i(f)), m))
          )
            return (f.values[o] = m), 0
        } else d = i(f)
        return (f.values[o] = d), 1
      }
    }
  }
}
function rp(n, e, t) {
  if (n.length != e.length) return !1
  for (let i = 0; i < n.length; i++) if (!t(n[i], e[i])) return !1
  return !0
}
function vu(n, e) {
  let t = !1
  for (let i of e) Fr(n, i) & 1 && (t = !0)
  return t
}
function Jk(n, e, t) {
  let i = t.map((l) => n[l.id]),
    r = t.map((l) => l.type),
    s = i.filter((l) => !(l & 1)),
    o = n[e.id] >> 1
  function a(l) {
    let c = []
    for (let u = 0; u < i.length; u++) {
      let f = Ta(l, i[u])
      if (r[u] == 2) for (let h of f) c.push(h)
      else c.push(f)
    }
    return e.combine(c)
  }
  return {
    create(l) {
      for (let c of i) Fr(l, c)
      return (l.values[o] = a(l)), 1
    },
    update(l, c) {
      if (!vu(l, s)) return 0
      let u = a(l)
      return e.compare(u, l.values[o]) ? 0 : ((l.values[o] = u), 1)
    },
    reconfigure(l, c) {
      let u = vu(l, i),
        f = c.config.facets[e.id],
        h = c.facet(e)
      if (f && !u && If(t, f)) return (l.values[o] = h), 0
      let d = a(l)
      return e.compare(d, h) ? ((l.values[o] = h), 0) : ((l.values[o] = d), 1)
    }
  }
}
const sp = /* @__PURE__ */ q.define({ static: !0 })
class We {
  constructor(e, t, i, r, s) {
    ;(this.id = e),
      (this.createF = t),
      (this.updateF = i),
      (this.compareF = r),
      (this.spec = s),
      (this.provides = void 0)
  }
  /**
  Define a state field.
  */
  static define(e) {
    let t = new We(
      Yf++,
      e.create,
      e.update,
      e.compare || ((i, r) => i === r),
      e
    )
    return e.provide && (t.provides = e.provide(t)), t
  }
  create(e) {
    let t = e.facet(sp).find((i) => i.field == this)
    return ((t == null ? void 0 : t.create) || this.createF)(e)
  }
  /**
  @internal
  */
  slot(e) {
    let t = e[this.id] >> 1
    return {
      create: (i) => ((i.values[t] = this.create(i)), 1),
      update: (i, r) => {
        let s = i.values[t],
          o = this.updateF(s, r)
        return this.compareF(s, o) ? 0 : ((i.values[t] = o), 1)
      },
      reconfigure: (i, r) =>
        r.config.address[this.id] != null
          ? ((i.values[t] = r.field(this)), 0)
          : ((i.values[t] = this.create(i)), 1)
    }
  }
  /**
  Returns an extension that enables this field and overrides the
  way it is initialized. Can be useful when you need to provide a
  non-default starting value for the field.
  */
  init(e) {
    return [this, sp.of({ field: this, create: e })]
  }
  /**
  State field instances can be used as
  [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
  given state.
  */
  get extension() {
    return this
  }
}
const pi = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 }
function Tr(n) {
  return (e) => new ay(e, n)
}
const Pi = {
  /**
  The highest precedence level, for extensions that should end up
  near the start of the precedence ordering.
  */
  highest: /* @__PURE__ */ Tr(pi.highest),
  /**
  A higher-than-default precedence, for extensions that should
  come before those with default precedence.
  */
  high: /* @__PURE__ */ Tr(pi.high),
  /**
  The default precedence, which is also used for extensions
  without an explicit precedence.
  */
  default: /* @__PURE__ */ Tr(pi.default),
  /**
  A lower-than-default precedence.
  */
  low: /* @__PURE__ */ Tr(pi.low),
  /**
  The lowest precedence level. Meant for things that should end up
  near the end of the extension order.
  */
  lowest: /* @__PURE__ */ Tr(pi.lowest)
}
class ay {
  constructor(e, t) {
    ;(this.inner = e), (this.prec = t)
  }
}
class Sl {
  /**
  Create an instance of this compartment to add to your [state
  configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
  */
  of(e) {
    return new Su(this, e)
  }
  /**
  Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
  reconfigures this compartment.
  */
  reconfigure(e) {
    return Sl.reconfigure.of({ compartment: this, extension: e })
  }
  /**
  Get the current content of the compartment in the state, or
  `undefined` if it isn't present.
  */
  get(e) {
    return e.config.compartments.get(this)
  }
}
class Su {
  constructor(e, t) {
    ;(this.compartment = e), (this.inner = t)
  }
}
class ka {
  constructor(e, t, i, r, s, o) {
    for (
      this.base = e,
        this.compartments = t,
        this.dynamicSlots = i,
        this.address = r,
        this.staticValues = s,
        this.facets = o,
        this.statusTemplate = [];
      this.statusTemplate.length < i.length;

    )
      this.statusTemplate.push(
        0
        /* SlotStatus.Unresolved */
      )
  }
  staticFacet(e) {
    let t = this.address[e.id]
    return t == null ? e.default : this.staticValues[t >> 1]
  }
  static resolve(e, t, i) {
    let r = [],
      s = /* @__PURE__ */ Object.create(null),
      o = /* @__PURE__ */ new Map()
    for (let h of eT(e, t, o))
      h instanceof We
        ? r.push(h)
        : (s[h.facet.id] || (s[h.facet.id] = [])).push(h)
    let a = /* @__PURE__ */ Object.create(null),
      l = [],
      c = []
    for (let h of r) (a[h.id] = c.length << 1), c.push((d) => h.slot(d))
    let u = i == null ? void 0 : i.config.facets
    for (let h in s) {
      let d = s[h],
        O = d[0].facet,
        m = (u && u[h]) || []
      if (
        d.every(
          (b) => b.type == 0
          /* Provider.Static */
        )
      )
        if (((a[O.id] = (l.length << 1) | 1), If(m, d))) l.push(i.facet(O))
        else {
          let b = O.combine(d.map((x) => x.value))
          l.push(i && O.compare(b, i.facet(O)) ? i.facet(O) : b)
        }
      else {
        for (let b of d)
          b.type == 0
            ? ((a[b.id] = (l.length << 1) | 1), l.push(b.value))
            : ((a[b.id] = c.length << 1), c.push((x) => b.dynamicSlot(x)))
        ;(a[O.id] = c.length << 1), c.push((b) => Jk(b, O, d))
      }
    }
    let f = c.map((h) => h(a))
    return new ka(e, o, f, a, l, s)
  }
}
function eT(n, e, t) {
  let i = [[], [], [], [], []],
    r = /* @__PURE__ */ new Map()
  function s(o, a) {
    let l = r.get(o)
    if (l != null) {
      if (l <= a) return
      let c = i[l].indexOf(o)
      c > -1 && i[l].splice(c, 1), o instanceof Su && t.delete(o.compartment)
    }
    if ((r.set(o, a), Array.isArray(o))) for (let c of o) s(c, a)
    else if (o instanceof Su) {
      if (t.has(o.compartment))
        throw new RangeError('Duplicate use of compartment in extensions')
      let c = e.get(o.compartment) || o.inner
      t.set(o.compartment, c), s(c, a)
    } else if (o instanceof ay) s(o.inner, o.prec)
    else if (o instanceof We) i[a].push(o), o.provides && s(o.provides, a)
    else if (o instanceof Mo)
      i[a].push(o), o.facet.extensions && s(o.facet.extensions, pi.default)
    else {
      let c = o.extension
      if (!c)
        throw new Error(
          `Unrecognized extension value in extension set (${o}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`
        )
      s(c, a)
    }
  }
  return s(n, pi.default), i.reduce((o, a) => o.concat(a))
}
function Fr(n, e) {
  if (e & 1) return 2
  let t = e >> 1,
    i = n.status[t]
  if (i == 4) throw new Error('Cyclic dependency between fields and/or facets')
  if (i & 2) return i
  n.status[t] = 4
  let r = n.computeSlot(n, n.config.dynamicSlots[t])
  return (n.status[t] = 2 | r)
}
function Ta(n, e) {
  return e & 1 ? n.config.staticValues[e >> 1] : n.values[e >> 1]
}
const ly = /* @__PURE__ */ q.define(),
  cy = /* @__PURE__ */ q.define({
    combine: (n) => n.some((e) => e),
    static: !0
  }),
  uy = /* @__PURE__ */ q.define({
    combine: (n) => (n.length ? n[0] : void 0),
    static: !0
  }),
  fy = /* @__PURE__ */ q.define(),
  hy = /* @__PURE__ */ q.define(),
  dy = /* @__PURE__ */ q.define(),
  py = /* @__PURE__ */ q.define({
    combine: (n) => (n.length ? n[0] : !1)
  })
class ln {
  /**
  @internal
  */
  constructor(e, t) {
    ;(this.type = e), (this.value = t)
  }
  /**
  Define a new type of annotation.
  */
  static define() {
    return new tT()
  }
}
class tT {
  /**
  Create an instance of this annotation.
  */
  of(e) {
    return new ln(this, e)
  }
}
class nT {
  /**
  @internal
  */
  constructor(e) {
    this.map = e
  }
  /**
  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
  type.
  */
  of(e) {
    return new ne(this, e)
  }
}
class ne {
  /**
  @internal
  */
  constructor(e, t) {
    ;(this.type = e), (this.value = t)
  }
  /**
  Map this effect through a position mapping. Will return
  `undefined` when that ends up deleting the effect.
  */
  map(e) {
    let t = this.type.map(this.value, e)
    return t === void 0 ? void 0 : t == this.value ? this : new ne(this.type, t)
  }
  /**
  Tells you whether this effect object is of a given
  [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
  */
  is(e) {
    return this.type == e
  }
  /**
  Define a new effect type. The type parameter indicates the type
  of values that his effect holds. It should be a type that
  doesn't include `undefined`, since that is used in
  [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
  removed.
  */
  static define(e = {}) {
    return new nT(e.map || ((t) => t))
  }
  /**
  Map an array of effects through a change set.
  */
  static mapEffects(e, t) {
    if (!e.length) return e
    let i = []
    for (let r of e) {
      let s = r.map(t)
      s && i.push(s)
    }
    return i
  }
}
ne.reconfigure = /* @__PURE__ */ ne.define()
ne.appendConfig = /* @__PURE__ */ ne.define()
class Ye {
  constructor(e, t, i, r, s, o) {
    ;(this.startState = e),
      (this.changes = t),
      (this.selection = i),
      (this.effects = r),
      (this.annotations = s),
      (this.scrollIntoView = o),
      (this._doc = null),
      (this._state = null),
      i && oy(i, t.newLength),
      s.some((a) => a.type == Ye.time) ||
        (this.annotations = s.concat(Ye.time.of(Date.now())))
  }
  /**
  @internal
  */
  static create(e, t, i, r, s, o) {
    return new Ye(e, t, i, r, s, o)
  }
  /**
  The new document produced by the transaction. Contrary to
  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
  force the entire new state to be computed right away, so it is
  recommended that [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
  when they need to look at the new document.
  */
  get newDoc() {
    return this._doc || (this._doc = this.changes.apply(this.startState.doc))
  }
  /**
  The new selection produced by the transaction. If
  [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
  this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
  current selection through the changes made by the transaction.
  */
  get newSelection() {
    return this.selection || this.startState.selection.map(this.changes)
  }
  /**
  The new state created by the transaction. Computed on demand
  (but retained for subsequent access), so it is recommended not to
  access it in [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
  */
  get state() {
    return this._state || this.startState.applyTransaction(this), this._state
  }
  /**
  Get the value of the given annotation type, if any.
  */
  annotation(e) {
    for (let t of this.annotations) if (t.type == e) return t.value
  }
  /**
  Indicates whether the transaction changed the document.
  */
  get docChanged() {
    return !this.changes.empty
  }
  /**
  Indicates whether this transaction reconfigures the state
  (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
  with a top-level configuration
  [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
  */
  get reconfigured() {
    return this.startState.config != this.state.config
  }
  /**
  Returns true if the transaction has a [user
  event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
  or more specific than `event`. For example, if the transaction
  has `"select.pointer"` as user event, `"select"` and
  `"select.pointer"` will match it.
  */
  isUserEvent(e) {
    let t = this.annotation(Ye.userEvent)
    return !!(
      t &&
      (t == e ||
        (t.length > e.length &&
          t.slice(0, e.length) == e &&
          t[e.length] == '.'))
    )
  }
}
Ye.time = /* @__PURE__ */ ln.define()
Ye.userEvent = /* @__PURE__ */ ln.define()
Ye.addToHistory = /* @__PURE__ */ ln.define()
Ye.remote = /* @__PURE__ */ ln.define()
function iT(n, e) {
  let t = []
  for (let i = 0, r = 0; ; ) {
    let s, o
    if (i < n.length && (r == e.length || e[r] >= n[i]))
      (s = n[i++]), (o = n[i++])
    else if (r < e.length) (s = e[r++]), (o = e[r++])
    else return t
    !t.length || t[t.length - 1] < s
      ? t.push(s, o)
      : t[t.length - 1] < o && (t[t.length - 1] = o)
  }
}
function Oy(n, e, t) {
  var i
  let r, s, o
  return (
    t
      ? ((r = e.changes),
        (s = Xe.empty(e.changes.length)),
        (o = n.changes.compose(e.changes)))
      : ((r = e.changes.map(n.changes)),
        (s = n.changes.mapDesc(e.changes, !0)),
        (o = n.changes.compose(r))),
    {
      changes: o,
      selection: e.selection
        ? e.selection.map(s)
        : (i = n.selection) === null || i === void 0
          ? void 0
          : i.map(r),
      effects: ne.mapEffects(n.effects, r).concat(ne.mapEffects(e.effects, s)),
      annotations: n.annotations.length
        ? n.annotations.concat(e.annotations)
        : e.annotations,
      scrollIntoView: n.scrollIntoView || e.scrollIntoView
    }
  )
}
function xu(n, e, t) {
  let i = e.selection,
    r = Bi(e.annotations)
  return (
    e.userEvent && (r = r.concat(Ye.userEvent.of(e.userEvent))),
    {
      changes:
        e.changes instanceof Xe
          ? e.changes
          : Xe.of(e.changes || [], t, n.facet(uy)),
      selection: i && (i instanceof _ ? i : _.single(i.anchor, i.head)),
      effects: Bi(e.effects),
      annotations: r,
      scrollIntoView: !!e.scrollIntoView
    }
  )
}
function gy(n, e, t) {
  let i = xu(n, e.length ? e[0] : {}, n.doc.length)
  e.length && e[0].filter === !1 && (t = !1)
  for (let s = 1; s < e.length; s++) {
    e[s].filter === !1 && (t = !1)
    let o = !!e[s].sequential
    i = Oy(i, xu(n, e[s], o ? i.changes.newLength : n.doc.length), o)
  }
  let r = Ye.create(
    n,
    i.changes,
    i.selection,
    i.effects,
    i.annotations,
    i.scrollIntoView
  )
  return sT(t ? rT(r) : r)
}
function rT(n) {
  let e = n.startState,
    t = !0
  for (let r of e.facet(fy)) {
    let s = r(n)
    if (s === !1) {
      t = !1
      break
    }
    Array.isArray(s) && (t = t === !0 ? s : iT(t, s))
  }
  if (t !== !0) {
    let r, s
    if (t === !1) (s = n.changes.invertedDesc), (r = Xe.empty(e.doc.length))
    else {
      let o = n.changes.filter(t)
      ;(r = o.changes), (s = o.filtered.mapDesc(o.changes).invertedDesc)
    }
    n = Ye.create(
      e,
      r,
      n.selection && n.selection.map(s),
      ne.mapEffects(n.effects, s),
      n.annotations,
      n.scrollIntoView
    )
  }
  let i = e.facet(hy)
  for (let r = i.length - 1; r >= 0; r--) {
    let s = i[r](n)
    s instanceof Ye
      ? (n = s)
      : Array.isArray(s) && s.length == 1 && s[0] instanceof Ye
        ? (n = s[0])
        : (n = gy(e, Bi(s), !1))
  }
  return n
}
function sT(n) {
  let e = n.startState,
    t = e.facet(dy),
    i = n
  for (let r = t.length - 1; r >= 0; r--) {
    let s = t[r](n)
    s && Object.keys(s).length && (i = Oy(i, xu(e, s, n.changes.newLength), !0))
  }
  return i == n
    ? n
    : Ye.create(
        e,
        n.changes,
        n.selection,
        i.effects,
        i.annotations,
        i.scrollIntoView
      )
}
const oT = []
function Bi(n) {
  return n == null ? oT : Array.isArray(n) ? n : [n]
}
var we = /* @__PURE__ */ (function (n) {
  return (
    (n[(n.Word = 0)] = 'Word'),
    (n[(n.Space = 1)] = 'Space'),
    (n[(n.Other = 2)] = 'Other'),
    n
  )
})(we || (we = {}))
const aT =
  /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/
let wu
try {
  wu = /* @__PURE__ */ new RegExp('[\\p{Alphabetic}\\p{Number}_]', 'u')
} catch {}
function lT(n) {
  if (wu) return wu.test(n)
  for (let e = 0; e < n.length; e++) {
    let t = n[e]
    if (
      /\w/.test(t) ||
      (t > '' && (t.toUpperCase() != t.toLowerCase() || aT.test(t)))
    )
      return !0
  }
  return !1
}
function cT(n) {
  return (e) => {
    if (!/\S/.test(e)) return we.Space
    if (lT(e)) return we.Word
    for (let t = 0; t < n.length; t++) if (e.indexOf(n[t]) > -1) return we.Word
    return we.Other
  }
}
class oe {
  constructor(e, t, i, r, s, o) {
    ;(this.config = e),
      (this.doc = t),
      (this.selection = i),
      (this.values = r),
      (this.status = e.statusTemplate.slice()),
      (this.computeSlot = s),
      o && (o._state = this)
    for (let a = 0; a < this.config.dynamicSlots.length; a++) Fr(this, a << 1)
    this.computeSlot = null
  }
  field(e, t = !0) {
    let i = this.config.address[e.id]
    if (i == null) {
      if (t) throw new RangeError('Field is not present in this state')
      return
    }
    return Fr(this, i), Ta(this, i)
  }
  /**
  Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
  state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
  can be passed. Unless
  [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
  [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
  are assumed to start in the _current_ document (not the document
  produced by previous specs), and its
  [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
  to the document created by its _own_ changes. The resulting
  transaction contains the combined effect of all the different
  specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
  specs take precedence over earlier ones.
  */
  update(...e) {
    return gy(this, e, !0)
  }
  /**
  @internal
  */
  applyTransaction(e) {
    let t = this.config,
      { base: i, compartments: r } = t
    for (let o of e.effects)
      o.is(Sl.reconfigure)
        ? (t &&
            ((r = /* @__PURE__ */ new Map()),
            t.compartments.forEach((a, l) => r.set(l, a)),
            (t = null)),
          r.set(o.value.compartment, o.value.extension))
        : o.is(ne.reconfigure)
          ? ((t = null), (i = o.value))
          : o.is(ne.appendConfig) && ((t = null), (i = Bi(i).concat(o.value)))
    let s
    t
      ? (s = e.startState.values.slice())
      : ((t = ka.resolve(i, r, this)),
        (s = new oe(
          t,
          this.doc,
          this.selection,
          t.dynamicSlots.map(() => null),
          (a, l) => l.reconfigure(a, this),
          null
        ).values)),
      new oe(t, e.newDoc, e.newSelection, s, (o, a) => a.update(o, e), e)
  }
  /**
  Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
  replaces every selection range with the given content.
  */
  replaceSelection(e) {
    return (
      typeof e == 'string' && (e = this.toText(e)),
      this.changeByRange((t) => ({
        changes: { from: t.from, to: t.to, insert: e },
        range: _.cursor(t.from + e.length)
      }))
    )
  }
  /**
  Create a set of changes and a new selection by running the given
  function for each range in the active selection. The function
  can return an optional set of changes (in the coordinate space
  of the start document), plus an updated range (in the coordinate
  space of the document produced by the call's own changes). This
  method will merge all the changes and ranges into a single
  changeset and selection, and return it as a [transaction
  spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
  [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
  */
  changeByRange(e) {
    let t = this.selection,
      i = e(t.ranges[0]),
      r = this.changes(i.changes),
      s = [i.range],
      o = Bi(i.effects)
    for (let a = 1; a < t.ranges.length; a++) {
      let l = e(t.ranges[a]),
        c = this.changes(l.changes),
        u = c.map(r)
      for (let h = 0; h < a; h++) s[h] = s[h].map(u)
      let f = r.mapDesc(c, !0)
      s.push(l.range.map(f)),
        (r = r.compose(u)),
        (o = ne.mapEffects(o, u).concat(ne.mapEffects(Bi(l.effects), f)))
    }
    return {
      changes: r,
      selection: _.create(s, t.mainIndex),
      effects: o
    }
  }
  /**
  Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
  description, taking the state's document length and line
  separator into account.
  */
  changes(e = []) {
    return e instanceof Xe
      ? e
      : Xe.of(e, this.doc.length, this.facet(oe.lineSeparator))
  }
  /**
  Using the state's [line
  separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
  [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
  */
  toText(e) {
    return ue.of(e.split(this.facet(oe.lineSeparator) || mu))
  }
  /**
  Return the given range of the document as a string.
  */
  sliceDoc(e = 0, t = this.doc.length) {
    return this.doc.sliceString(e, t, this.lineBreak)
  }
  /**
  Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
  */
  facet(e) {
    let t = this.config.address[e.id]
    return t == null ? e.default : (Fr(this, t), Ta(this, t))
  }
  /**
  Convert this state to a JSON-serializable object. When custom
  fields should be serialized, you can pass them in as an object
  mapping property names (in the resulting object, which should
  not use `doc` or `selection`) to fields.
  */
  toJSON(e) {
    let t = {
      doc: this.sliceDoc(),
      selection: this.selection.toJSON()
    }
    if (e)
      for (let i in e) {
        let r = e[i]
        r instanceof We &&
          this.config.address[r.id] != null &&
          (t[i] = r.spec.toJSON(this.field(e[i]), this))
      }
    return t
  }
  /**
  Deserialize a state from its JSON representation. When custom
  fields should be deserialized, pass the same object you passed
  to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
  third argument.
  */
  static fromJSON(e, t = {}, i) {
    if (!e || typeof e.doc != 'string')
      throw new RangeError('Invalid JSON representation for EditorState')
    let r = []
    if (i) {
      for (let s in i)
        if (Object.prototype.hasOwnProperty.call(e, s)) {
          let o = i[s],
            a = e[s]
          r.push(o.init((l) => o.spec.fromJSON(a, l)))
        }
    }
    return oe.create({
      doc: e.doc,
      selection: _.fromJSON(e.selection),
      extensions: t.extensions ? r.concat([t.extensions]) : r
    })
  }
  /**
  Create a new state. You'll usually only need this when
  initializing an editor—updated states are created by applying
  transactions.
  */
  static create(e = {}) {
    let t = ka.resolve(e.extensions || [], /* @__PURE__ */ new Map()),
      i =
        e.doc instanceof ue
          ? e.doc
          : ue.of((e.doc || '').split(t.staticFacet(oe.lineSeparator) || mu)),
      r = e.selection
        ? e.selection instanceof _
          ? e.selection
          : _.single(e.selection.anchor, e.selection.head)
        : _.single(0)
    return (
      oy(r, i.length),
      t.staticFacet(cy) || (r = r.asSingle()),
      new oe(
        t,
        i,
        r,
        t.dynamicSlots.map(() => null),
        (s, o) => o.create(s),
        null
      )
    )
  }
  /**
  The size (in columns) of a tab in the document, determined by
  the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
  */
  get tabSize() {
    return this.facet(oe.tabSize)
  }
  /**
  Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
  string for this state.
  */
  get lineBreak() {
    return (
      this.facet(oe.lineSeparator) ||
      `
`
    )
  }
  /**
  Returns true when the editor is
  [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
  */
  get readOnly() {
    return this.facet(py)
  }
  /**
  Look up a translation for the given phrase (via the
  [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
  original string if no translation is found.
  
  If additional arguments are passed, they will be inserted in
  place of markers like `$1` (for the first value) and `$2`, etc.
  A single `$` is equivalent to `$1`, and `$$` will produce a
  literal dollar sign.
  */
  phrase(e, ...t) {
    for (let i of this.facet(oe.phrases))
      if (Object.prototype.hasOwnProperty.call(i, e)) {
        e = i[e]
        break
      }
    return (
      t.length &&
        (e = e.replace(/\$(\$|\d*)/g, (i, r) => {
          if (r == '$') return '$'
          let s = +(r || 1)
          return !s || s > t.length ? i : t[s - 1]
        })),
      e
    )
  }
  /**
  Find the values for a given language data field, provided by the
  the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
  
  Examples of language data fields are...
  
  - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
    comment syntax.
  - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
    for providing language-specific completion sources.
  - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
    characters that should be considered part of words in this
    language.
  - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
    bracket closing behavior.
  */
  languageDataAt(e, t, i = -1) {
    let r = []
    for (let s of this.facet(ly))
      for (let o of s(this, t, i))
        Object.prototype.hasOwnProperty.call(o, e) && r.push(o[e])
    return r
  }
  /**
  Return a function that can categorize strings (expected to
  represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
  into one of:
  
   - Word (contains an alphanumeric character or a character
     explicitly listed in the local language's `"wordChars"`
     language data, which should be a string)
   - Space (contains only whitespace)
   - Other (anything else)
  */
  charCategorizer(e) {
    return cT(this.languageDataAt('wordChars', e).join(''))
  }
  /**
  Find the word at the given position, meaning the range
  containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
  around it. If no word characters are adjacent to the position,
  this returns null.
  */
  wordAt(e) {
    let { text: t, from: i, length: r } = this.doc.lineAt(e),
      s = this.charCategorizer(e),
      o = e - i,
      a = e - i
    for (; o > 0; ) {
      let l = et(t, o, !1)
      if (s(t.slice(l, o)) != we.Word) break
      o = l
    }
    for (; a < r; ) {
      let l = et(t, a)
      if (s(t.slice(a, l)) != we.Word) break
      a = l
    }
    return o == a ? null : _.range(o + i, a + i)
  }
}
oe.allowMultipleSelections = cy
oe.tabSize = /* @__PURE__ */ q.define({
  combine: (n) => (n.length ? n[0] : 4)
})
oe.lineSeparator = uy
oe.readOnly = py
oe.phrases = /* @__PURE__ */ q.define({
  compare(n, e) {
    let t = Object.keys(n),
      i = Object.keys(e)
    return t.length == i.length && t.every((r) => n[r] == e[r])
  }
})
oe.languageData = ly
oe.changeFilter = fy
oe.transactionFilter = hy
oe.transactionExtender = dy
Sl.reconfigure = /* @__PURE__ */ ne.define()
function cn(n, e, t = {}) {
  let i = {}
  for (let r of n)
    for (let s of Object.keys(r)) {
      let o = r[s],
        a = i[s]
      if (a === void 0) i[s] = o
      else if (!(a === o || o === void 0))
        if (Object.hasOwnProperty.call(t, s)) i[s] = t[s](a, o)
        else throw new Error('Config merge conflict for field ' + s)
    }
  for (let r in e) i[r] === void 0 && (i[r] = e[r])
  return i
}
class vi {
  /**
  Compare this value with another value. Used when comparing
  rangesets. The default implementation compares by identity.
  Unless you are only creating a fixed number of unique instances
  of your value type, it is a good idea to implement this
  properly.
  */
  eq(e) {
    return this == e
  }
  /**
  Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
  */
  range(e, t = e) {
    return $u.create(e, t, this)
  }
}
vi.prototype.startSide = vi.prototype.endSide = 0
vi.prototype.point = !1
vi.prototype.mapMode = Fe.TrackDel
let $u = class my {
  constructor(e, t, i) {
    ;(this.from = e), (this.to = t), (this.value = i)
  }
  /**
  @internal
  */
  static create(e, t, i) {
    return new my(e, t, i)
  }
}
function Pu(n, e) {
  return n.from - e.from || n.value.startSide - e.value.startSide
}
class Nf {
  constructor(e, t, i, r) {
    ;(this.from = e), (this.to = t), (this.value = i), (this.maxPoint = r)
  }
  get length() {
    return this.to[this.to.length - 1]
  }
  // Find the index of the given position and side. Use the ranges'
  // `from` pos when `end == false`, `to` when `end == true`.
  findIndex(e, t, i, r = 0) {
    let s = i ? this.to : this.from
    for (let o = r, a = s.length; ; ) {
      if (o == a) return o
      let l = (o + a) >> 1,
        c =
          s[l] - e || (i ? this.value[l].endSide : this.value[l].startSide) - t
      if (l == o) return c >= 0 ? o : a
      c >= 0 ? (a = l) : (o = l + 1)
    }
  }
  between(e, t, i, r) {
    for (
      let s = this.findIndex(t, -1e9, !0), o = this.findIndex(i, 1e9, !1, s);
      s < o;
      s++
    )
      if (r(this.from[s] + e, this.to[s] + e, this.value[s]) === !1) return !1
  }
  map(e, t) {
    let i = [],
      r = [],
      s = [],
      o = -1,
      a = -1
    for (let l = 0; l < this.value.length; l++) {
      let c = this.value[l],
        u = this.from[l] + e,
        f = this.to[l] + e,
        h,
        d
      if (u == f) {
        let O = t.mapPos(u, c.startSide, c.mapMode)
        if (
          O == null ||
          ((h = d = O),
          c.startSide != c.endSide && ((d = t.mapPos(u, c.endSide)), d < h))
        )
          continue
      } else if (
        ((h = t.mapPos(u, c.startSide)),
        (d = t.mapPos(f, c.endSide)),
        h > d || (h == d && c.startSide > 0 && c.endSide <= 0))
      )
        continue
      ;(d - h || c.endSide - c.startSide) < 0 ||
        (o < 0 && (o = h),
        c.point && (a = Math.max(a, d - h)),
        i.push(c),
        r.push(h - o),
        s.push(d - o))
    }
    return { mapped: i.length ? new Nf(r, s, i, a) : null, pos: o }
  }
}
class fe {
  constructor(e, t, i, r) {
    ;(this.chunkPos = e),
      (this.chunk = t),
      (this.nextLayer = i),
      (this.maxPoint = r)
  }
  /**
  @internal
  */
  static create(e, t, i, r) {
    return new fe(e, t, i, r)
  }
  /**
  @internal
  */
  get length() {
    let e = this.chunk.length - 1
    return e < 0 ? 0 : Math.max(this.chunkEnd(e), this.nextLayer.length)
  }
  /**
  The number of ranges in the set.
  */
  get size() {
    if (this.isEmpty) return 0
    let e = this.nextLayer.size
    for (let t of this.chunk) e += t.value.length
    return e
  }
  /**
  @internal
  */
  chunkEnd(e) {
    return this.chunkPos[e] + this.chunk[e].length
  }
  /**
  Update the range set, optionally adding new ranges or filtering
  out existing ones.
  
  (Note: The type parameter is just there as a kludge to work
  around TypeScript variance issues that prevented `RangeSet<X>`
  from being a subtype of `RangeSet<Y>` when `X` is a subtype of
  `Y`.)
  */
  update(e) {
    let {
        add: t = [],
        sort: i = !1,
        filterFrom: r = 0,
        filterTo: s = this.length
      } = e,
      o = e.filter
    if (t.length == 0 && !o) return this
    if ((i && (t = t.slice().sort(Pu)), this.isEmpty))
      return t.length ? fe.of(t) : this
    let a = new yy(this, null, -1).goto(0),
      l = 0,
      c = [],
      u = new zn()
    for (; a.value || l < t.length; )
      if (
        l < t.length &&
        (a.from - t[l].from || a.startSide - t[l].value.startSide) >= 0
      ) {
        let f = t[l++]
        u.addInner(f.from, f.to, f.value) || c.push(f)
      } else
        a.rangeIndex == 1 &&
        a.chunkIndex < this.chunk.length &&
        (l == t.length || this.chunkEnd(a.chunkIndex) < t[l].from) &&
        (!o ||
          r > this.chunkEnd(a.chunkIndex) ||
          s < this.chunkPos[a.chunkIndex]) &&
        u.addChunk(this.chunkPos[a.chunkIndex], this.chunk[a.chunkIndex])
          ? a.nextChunk()
          : ((!o || r > a.to || s < a.from || o(a.from, a.to, a.value)) &&
              (u.addInner(a.from, a.to, a.value) ||
                c.push($u.create(a.from, a.to, a.value))),
            a.next())
    return u.finishInner(
      this.nextLayer.isEmpty && !c.length
        ? fe.empty
        : this.nextLayer.update({
            add: c,
            filter: o,
            filterFrom: r,
            filterTo: s
          })
    )
  }
  /**
  Map this range set through a set of changes, return the new set.
  */
  map(e) {
    if (e.empty || this.isEmpty) return this
    let t = [],
      i = [],
      r = -1
    for (let o = 0; o < this.chunk.length; o++) {
      let a = this.chunkPos[o],
        l = this.chunk[o],
        c = e.touchesRange(a, a + l.length)
      if (c === !1)
        (r = Math.max(r, l.maxPoint)), t.push(l), i.push(e.mapPos(a))
      else if (c === !0) {
        let { mapped: u, pos: f } = l.map(a, e)
        u && ((r = Math.max(r, u.maxPoint)), t.push(u), i.push(f))
      }
    }
    let s = this.nextLayer.map(e)
    return t.length == 0 ? s : new fe(i, t, s || fe.empty, r)
  }
  /**
  Iterate over the ranges that touch the region `from` to `to`,
  calling `f` for each. There is no guarantee that the ranges will
  be reported in any specific order. When the callback returns
  `false`, iteration stops.
  */
  between(e, t, i) {
    if (!this.isEmpty) {
      for (let r = 0; r < this.chunk.length; r++) {
        let s = this.chunkPos[r],
          o = this.chunk[r]
        if (t >= s && e <= s + o.length && o.between(s, e - s, t - s, i) === !1)
          return
      }
      this.nextLayer.between(e, t, i)
    }
  }
  /**
  Iterate over the ranges in this set, in order, including all
  ranges that end at or after `from`.
  */
  iter(e = 0) {
    return ts.from([this]).goto(e)
  }
  /**
  @internal
  */
  get isEmpty() {
    return this.nextLayer == this
  }
  /**
  Iterate over the ranges in a collection of sets, in order,
  starting from `from`.
  */
  static iter(e, t = 0) {
    return ts.from(e).goto(t)
  }
  /**
  Iterate over two groups of sets, calling methods on `comparator`
  to notify it of possible differences.
  */
  static compare(e, t, i, r, s = -1) {
    let o = e.filter((f) => f.maxPoint > 0 || (!f.isEmpty && f.maxPoint >= s)),
      a = t.filter((f) => f.maxPoint > 0 || (!f.isEmpty && f.maxPoint >= s)),
      l = op(o, a, i),
      c = new Cr(o, l, s),
      u = new Cr(a, l, s)
    i.iterGaps((f, h, d) => ap(c, f, u, h, d, r)),
      i.empty && i.length == 0 && ap(c, 0, u, 0, 0, r)
  }
  /**
  Compare the contents of two groups of range sets, returning true
  if they are equivalent in the given range.
  */
  static eq(e, t, i = 0, r) {
    r == null && (r = 1e9 - 1)
    let s = e.filter((u) => !u.isEmpty && t.indexOf(u) < 0),
      o = t.filter((u) => !u.isEmpty && e.indexOf(u) < 0)
    if (s.length != o.length) return !1
    if (!s.length) return !0
    let a = op(s, o),
      l = new Cr(s, a, 0).goto(i),
      c = new Cr(o, a, 0).goto(i)
    for (;;) {
      if (
        l.to != c.to ||
        !Qu(l.active, c.active) ||
        (l.point && (!c.point || !l.point.eq(c.point)))
      )
        return !1
      if (l.to > r) return !0
      l.next(), c.next()
    }
  }
  /**
  Iterate over a group of range sets at the same time, notifying
  the iterator about the ranges covering every given piece of
  content. Returns the open count (see
  [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
  of the iteration.
  */
  static spans(e, t, i, r, s = -1) {
    let o = new Cr(e, null, s).goto(t),
      a = t,
      l = o.openStart
    for (;;) {
      let c = Math.min(o.to, i)
      if (o.point) {
        let u = o.activeForPoint(o.to),
          f = o.pointFrom < t ? u.length + 1 : Math.min(u.length, l)
        r.point(a, c, o.point, u, f, o.pointRank),
          (l = Math.min(o.openEnd(c), u.length))
      } else c > a && (r.span(a, c, o.active, l), (l = o.openEnd(c)))
      if (o.to > i) return l + (o.point && o.to > i ? 1 : 0)
      ;(a = o.to), o.next()
    }
  }
  /**
  Create a range set for the given range or array of ranges. By
  default, this expects the ranges to be _sorted_ (by start
  position and, if two start at the same position,
  `value.startSide`). You can pass `true` as second argument to
  cause the method to sort them.
  */
  static of(e, t = !1) {
    let i = new zn()
    for (let r of e instanceof $u ? [e] : t ? uT(e) : e)
      i.add(r.from, r.to, r.value)
    return i.finish()
  }
}
fe.empty = /* @__PURE__ */ new fe([], [], null, -1)
function uT(n) {
  if (n.length > 1)
    for (let e = n[0], t = 1; t < n.length; t++) {
      let i = n[t]
      if (Pu(e, i) > 0) return n.slice().sort(Pu)
      e = i
    }
  return n
}
fe.empty.nextLayer = fe.empty
class zn {
  finishChunk(e) {
    this.chunks.push(new Nf(this.from, this.to, this.value, this.maxPoint)),
      this.chunkPos.push(this.chunkStart),
      (this.chunkStart = -1),
      (this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint)),
      (this.maxPoint = -1),
      e && ((this.from = []), (this.to = []), (this.value = []))
  }
  /**
  Create an empty builder.
  */
  constructor() {
    ;(this.chunks = []),
      (this.chunkPos = []),
      (this.chunkStart = -1),
      (this.last = null),
      (this.lastFrom = -1e9),
      (this.lastTo = -1e9),
      (this.from = []),
      (this.to = []),
      (this.value = []),
      (this.maxPoint = -1),
      (this.setMaxPoint = -1),
      (this.nextLayer = null)
  }
  /**
  Add a range. Ranges should be added in sorted (by `from` and
  `value.startSide`) order.
  */
  add(e, t, i) {
    this.addInner(e, t, i) ||
      (this.nextLayer || (this.nextLayer = new zn())).add(e, t, i)
  }
  /**
  @internal
  */
  addInner(e, t, i) {
    let r = e - this.lastTo || i.startSide - this.last.endSide
    if (r <= 0 && (e - this.lastFrom || i.startSide - this.last.startSide) < 0)
      throw new Error(
        'Ranges must be added sorted by `from` position and `startSide`'
      )
    return r < 0
      ? !1
      : (this.from.length == 250 && this.finishChunk(!0),
        this.chunkStart < 0 && (this.chunkStart = e),
        this.from.push(e - this.chunkStart),
        this.to.push(t - this.chunkStart),
        (this.last = i),
        (this.lastFrom = e),
        (this.lastTo = t),
        this.value.push(i),
        i.point && (this.maxPoint = Math.max(this.maxPoint, t - e)),
        !0)
  }
  /**
  @internal
  */
  addChunk(e, t) {
    if ((e - this.lastTo || t.value[0].startSide - this.last.endSide) < 0)
      return !1
    this.from.length && this.finishChunk(!0),
      (this.setMaxPoint = Math.max(this.setMaxPoint, t.maxPoint)),
      this.chunks.push(t),
      this.chunkPos.push(e)
    let i = t.value.length - 1
    return (
      (this.last = t.value[i]),
      (this.lastFrom = t.from[i] + e),
      (this.lastTo = t.to[i] + e),
      !0
    )
  }
  /**
  Finish the range set. Returns the new set. The builder can't be
  used anymore after this has been called.
  */
  finish() {
    return this.finishInner(fe.empty)
  }
  /**
  @internal
  */
  finishInner(e) {
    if ((this.from.length && this.finishChunk(!1), this.chunks.length == 0))
      return e
    let t = fe.create(
      this.chunkPos,
      this.chunks,
      this.nextLayer ? this.nextLayer.finishInner(e) : e,
      this.setMaxPoint
    )
    return (this.from = null), t
  }
}
function op(n, e, t) {
  let i = /* @__PURE__ */ new Map()
  for (let s of n)
    for (let o = 0; o < s.chunk.length; o++)
      s.chunk[o].maxPoint <= 0 && i.set(s.chunk[o], s.chunkPos[o])
  let r = /* @__PURE__ */ new Set()
  for (let s of e)
    for (let o = 0; o < s.chunk.length; o++) {
      let a = i.get(s.chunk[o])
      a != null &&
        (t ? t.mapPos(a) : a) == s.chunkPos[o] &&
        !(t != null && t.touchesRange(a, a + s.chunk[o].length)) &&
        r.add(s.chunk[o])
    }
  return r
}
class yy {
  constructor(e, t, i, r = 0) {
    ;(this.layer = e), (this.skip = t), (this.minPoint = i), (this.rank = r)
  }
  get startSide() {
    return this.value ? this.value.startSide : 0
  }
  get endSide() {
    return this.value ? this.value.endSide : 0
  }
  goto(e, t = -1e9) {
    return (
      (this.chunkIndex = this.rangeIndex = 0), this.gotoInner(e, t, !1), this
    )
  }
  gotoInner(e, t, i) {
    for (; this.chunkIndex < this.layer.chunk.length; ) {
      let r = this.layer.chunk[this.chunkIndex]
      if (
        !(
          (this.skip && this.skip.has(r)) ||
          this.layer.chunkEnd(this.chunkIndex) < e ||
          r.maxPoint < this.minPoint
        )
      )
        break
      this.chunkIndex++, (i = !1)
    }
    if (this.chunkIndex < this.layer.chunk.length) {
      let r = this.layer.chunk[this.chunkIndex].findIndex(
        e - this.layer.chunkPos[this.chunkIndex],
        t,
        !0
      )
      ;(!i || this.rangeIndex < r) && this.setRangeIndex(r)
    }
    this.next()
  }
  forward(e, t) {
    ;(this.to - e || this.endSide - t) < 0 && this.gotoInner(e, t, !0)
  }
  next() {
    for (;;)
      if (this.chunkIndex == this.layer.chunk.length) {
        ;(this.from = this.to = 1e9), (this.value = null)
        break
      } else {
        let e = this.layer.chunkPos[this.chunkIndex],
          t = this.layer.chunk[this.chunkIndex],
          i = e + t.from[this.rangeIndex]
        if (
          ((this.from = i),
          (this.to = e + t.to[this.rangeIndex]),
          (this.value = t.value[this.rangeIndex]),
          this.setRangeIndex(this.rangeIndex + 1),
          this.minPoint < 0 ||
            (this.value.point && this.to - this.from >= this.minPoint))
        )
          break
      }
  }
  setRangeIndex(e) {
    if (e == this.layer.chunk[this.chunkIndex].value.length) {
      if ((this.chunkIndex++, this.skip))
        for (
          ;
          this.chunkIndex < this.layer.chunk.length &&
          this.skip.has(this.layer.chunk[this.chunkIndex]);

        )
          this.chunkIndex++
      this.rangeIndex = 0
    } else this.rangeIndex = e
  }
  nextChunk() {
    this.chunkIndex++, (this.rangeIndex = 0), this.next()
  }
  compare(e) {
    return (
      this.from - e.from ||
      this.startSide - e.startSide ||
      this.rank - e.rank ||
      this.to - e.to ||
      this.endSide - e.endSide
    )
  }
}
class ts {
  constructor(e) {
    this.heap = e
  }
  static from(e, t = null, i = -1) {
    let r = []
    for (let s = 0; s < e.length; s++)
      for (let o = e[s]; !o.isEmpty; o = o.nextLayer)
        o.maxPoint >= i && r.push(new yy(o, t, i, s))
    return r.length == 1 ? r[0] : new ts(r)
  }
  get startSide() {
    return this.value ? this.value.startSide : 0
  }
  goto(e, t = -1e9) {
    for (let i of this.heap) i.goto(e, t)
    for (let i = this.heap.length >> 1; i >= 0; i--) ic(this.heap, i)
    return this.next(), this
  }
  forward(e, t) {
    for (let i of this.heap) i.forward(e, t)
    for (let i = this.heap.length >> 1; i >= 0; i--) ic(this.heap, i)
    ;(this.to - e || this.value.endSide - t) < 0 && this.next()
  }
  next() {
    if (this.heap.length == 0)
      (this.from = this.to = 1e9), (this.value = null), (this.rank = -1)
    else {
      let e = this.heap[0]
      ;(this.from = e.from),
        (this.to = e.to),
        (this.value = e.value),
        (this.rank = e.rank),
        e.value && e.next(),
        ic(this.heap, 0)
    }
  }
}
function ic(n, e) {
  for (let t = n[e]; ; ) {
    let i = (e << 1) + 1
    if (i >= n.length) break
    let r = n[i]
    if (
      (i + 1 < n.length && r.compare(n[i + 1]) >= 0 && ((r = n[i + 1]), i++),
      t.compare(r) < 0)
    )
      break
    ;(n[i] = t), (n[e] = r), (e = i)
  }
}
class Cr {
  constructor(e, t, i) {
    ;(this.minPoint = i),
      (this.active = []),
      (this.activeTo = []),
      (this.activeRank = []),
      (this.minActive = -1),
      (this.point = null),
      (this.pointFrom = 0),
      (this.pointRank = 0),
      (this.to = -1e9),
      (this.endSide = 0),
      (this.openStart = -1),
      (this.cursor = ts.from(e, t, i))
  }
  goto(e, t = -1e9) {
    return (
      this.cursor.goto(e, t),
      (this.active.length = this.activeTo.length = this.activeRank.length = 0),
      (this.minActive = -1),
      (this.to = e),
      (this.endSide = t),
      (this.openStart = -1),
      this.next(),
      this
    )
  }
  forward(e, t) {
    for (
      ;
      this.minActive > -1 &&
      (this.activeTo[this.minActive] - e ||
        this.active[this.minActive].endSide - t) < 0;

    )
      this.removeActive(this.minActive)
    this.cursor.forward(e, t)
  }
  removeActive(e) {
    Gs(this.active, e),
      Gs(this.activeTo, e),
      Gs(this.activeRank, e),
      (this.minActive = lp(this.active, this.activeTo))
  }
  addActive(e) {
    let t = 0,
      { value: i, to: r, rank: s } = this.cursor
    for (; t < this.activeRank.length && this.activeRank[t] <= s; ) t++
    Hs(this.active, t, i),
      Hs(this.activeTo, t, r),
      Hs(this.activeRank, t, s),
      e && Hs(e, t, this.cursor.from),
      (this.minActive = lp(this.active, this.activeTo))
  }
  // After calling this, if `this.point` != null, the next range is a
  // point. Otherwise, it's a regular range, covered by `this.active`.
  next() {
    let e = this.to,
      t = this.point
    this.point = null
    let i = this.openStart < 0 ? [] : null
    for (;;) {
      let r = this.minActive
      if (
        r > -1 &&
        (this.activeTo[r] - this.cursor.from ||
          this.active[r].endSide - this.cursor.startSide) < 0
      ) {
        if (this.activeTo[r] > e) {
          ;(this.to = this.activeTo[r]), (this.endSide = this.active[r].endSide)
          break
        }
        this.removeActive(r), i && Gs(i, r)
      } else if (this.cursor.value)
        if (this.cursor.from > e) {
          ;(this.to = this.cursor.from), (this.endSide = this.cursor.startSide)
          break
        } else {
          let s = this.cursor.value
          if (!s.point) this.addActive(i), this.cursor.next()
          else if (
            t &&
            this.cursor.to == this.to &&
            this.cursor.from < this.cursor.to
          )
            this.cursor.next()
          else {
            ;(this.point = s),
              (this.pointFrom = this.cursor.from),
              (this.pointRank = this.cursor.rank),
              (this.to = this.cursor.to),
              (this.endSide = s.endSide),
              this.cursor.next(),
              this.forward(this.to, this.endSide)
            break
          }
        }
      else {
        this.to = this.endSide = 1e9
        break
      }
    }
    if (i) {
      this.openStart = 0
      for (let r = i.length - 1; r >= 0 && i[r] < e; r--) this.openStart++
    }
  }
  activeForPoint(e) {
    if (!this.active.length) return this.active
    let t = []
    for (
      let i = this.active.length - 1;
      i >= 0 && !(this.activeRank[i] < this.pointRank);
      i--
    )
      (this.activeTo[i] > e ||
        (this.activeTo[i] == e &&
          this.active[i].endSide >= this.point.endSide)) &&
        t.push(this.active[i])
    return t.reverse()
  }
  openEnd(e) {
    let t = 0
    for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > e; i--)
      t++
    return t
  }
}
function ap(n, e, t, i, r, s) {
  n.goto(e), t.goto(i)
  let o = i + r,
    a = i,
    l = i - e
  for (;;) {
    let c = n.to + l - t.to || n.endSide - t.endSide,
      u = c < 0 ? n.to + l : t.to,
      f = Math.min(u, o)
    if (
      (n.point || t.point
        ? (n.point &&
            t.point &&
            (n.point == t.point || n.point.eq(t.point)) &&
            Qu(n.activeForPoint(n.to), t.activeForPoint(t.to))) ||
          s.comparePoint(a, f, n.point, t.point)
        : f > a &&
          !Qu(n.active, t.active) &&
          s.compareRange(a, f, n.active, t.active),
      u > o)
    )
      break
    ;(a = u), c <= 0 && n.next(), c >= 0 && t.next()
  }
}
function Qu(n, e) {
  if (n.length != e.length) return !1
  for (let t = 0; t < n.length; t++)
    if (n[t] != e[t] && !n[t].eq(e[t])) return !1
  return !0
}
function Gs(n, e) {
  for (let t = e, i = n.length - 1; t < i; t++) n[t] = n[t + 1]
  n.pop()
}
function Hs(n, e, t) {
  for (let i = n.length - 1; i >= e; i--) n[i + 1] = n[i]
  n[e] = t
}
function lp(n, e) {
  let t = -1,
    i = 1e9
  for (let r = 0; r < e.length; r++)
    (e[r] - i || n[r].endSide - n[t].endSide) < 0 && ((t = r), (i = e[r]))
  return t
}
function fr(n, e, t = n.length) {
  let i = 0
  for (let r = 0; r < t; )
    n.charCodeAt(r) == 9 ? ((i += e - (i % e)), r++) : (i++, (r = et(n, r)))
  return i
}
function ku(n, e, t, i) {
  for (let r = 0, s = 0; ; ) {
    if (s >= e) return r
    if (r == n.length) break
    ;(s += n.charCodeAt(r) == 9 ? t - (s % t) : 1), (r = et(n, r))
  }
  return i === !0 ? -1 : n.length
}
const Tu = 'ͼ',
  cp = typeof Symbol > 'u' ? '__' + Tu : Symbol.for(Tu),
  Cu =
    typeof Symbol > 'u'
      ? '__styleSet' + Math.floor(Math.random() * 1e8)
      : Symbol('styleSet'),
  up = typeof globalThis < 'u' ? globalThis : typeof window < 'u' ? window : {}
class Fn {
  // :: (Object<Style>, ?{finish: ?(string) → string})
  // Create a style module from the given spec.
  //
  // When `finish` is given, it is called on regular (non-`@`)
  // selectors (after `&` expansion) to compute the final selector.
  constructor(e, t) {
    this.rules = []
    let { finish: i } = t || {}
    function r(o) {
      return /^@/.test(o) ? [o] : o.split(/,\s*/)
    }
    function s(o, a, l, c) {
      let u = [],
        f = /^@(\w+)\b/.exec(o[0]),
        h = f && f[1] == 'keyframes'
      if (f && a == null) return l.push(o[0] + ';')
      for (let d in a) {
        let O = a[d]
        if (/&/.test(d))
          s(
            d
              .split(/,\s*/)
              .map((m) => o.map((b) => m.replace(/&/, b)))
              .reduce((m, b) => m.concat(b)),
            O,
            l
          )
        else if (O && typeof O == 'object') {
          if (!f)
            throw new RangeError(
              'The value of a property (' + d + ') should be a primitive value.'
            )
          s(r(d), O, u, h)
        } else
          O != null &&
            u.push(
              d
                .replace(/_.*/, '')
                .replace(/[A-Z]/g, (m) => '-' + m.toLowerCase()) +
                ': ' +
                O +
                ';'
            )
      }
      ;(u.length || h) &&
        l.push(
          (i && !f && !c ? o.map(i) : o).join(', ') + ' {' + u.join(' ') + '}'
        )
    }
    for (let o in e) s(r(o), e[o], this.rules)
  }
  // :: () → string
  // Returns a string containing the module's CSS rules.
  getRules() {
    return this.rules.join(`
`)
  }
  // :: () → string
  // Generate a new unique CSS class name.
  static newName() {
    let e = up[cp] || 1
    return (up[cp] = e + 1), Tu + e.toString(36)
  }
  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
  //
  // Mount the given set of modules in the given DOM root, which ensures
  // that the CSS rules defined by the module are available in that
  // context.
  //
  // Rules are only added to the document once per root.
  //
  // Rule order will follow the order of the modules, so that rules from
  // modules later in the array take precedence of those from earlier
  // modules. If you call this function multiple times for the same root
  // in a way that changes the order of already mounted modules, the old
  // order will be changed.
  //
  // If a Content Security Policy nonce is provided, it is added to
  // the `<style>` tag generated by the library.
  static mount(e, t, i) {
    let r = e[Cu],
      s = i && i.nonce
    r ? s && r.setNonce(s) : (r = new fT(e, s)),
      r.mount(Array.isArray(t) ? t : [t])
  }
}
let fp = /* @__PURE__ */ new Map()
class fT {
  constructor(e, t) {
    let i = e.ownerDocument || e,
      r = i.defaultView
    if (!e.head && e.adoptedStyleSheets && r.CSSStyleSheet) {
      let s = fp.get(i)
      if (s)
        return (
          (e.adoptedStyleSheets = [s.sheet, ...e.adoptedStyleSheets]),
          (e[Cu] = s)
        )
      ;(this.sheet = new r.CSSStyleSheet()),
        (e.adoptedStyleSheets = [this.sheet, ...e.adoptedStyleSheets]),
        fp.set(i, this)
    } else {
      ;(this.styleTag = i.createElement('style')),
        t && this.styleTag.setAttribute('nonce', t)
      let s = e.head || e
      s.insertBefore(this.styleTag, s.firstChild)
    }
    ;(this.modules = []), (e[Cu] = this)
  }
  mount(e) {
    let t = this.sheet,
      i = 0,
      r = 0
    for (let s = 0; s < e.length; s++) {
      let o = e[s],
        a = this.modules.indexOf(o)
      if (
        (a < r && a > -1 && (this.modules.splice(a, 1), r--, (a = -1)), a == -1)
      ) {
        if ((this.modules.splice(r++, 0, o), t))
          for (let l = 0; l < o.rules.length; l++) t.insertRule(o.rules[l], i++)
      } else {
        for (; r < a; ) i += this.modules[r++].rules.length
        ;(i += o.rules.length), r++
      }
    }
    if (!t) {
      let s = ''
      for (let o = 0; o < this.modules.length; o++)
        s +=
          this.modules[o].getRules() +
          `
`
      this.styleTag.textContent = s
    }
  }
  setNonce(e) {
    this.styleTag &&
      this.styleTag.getAttribute('nonce') != e &&
      this.styleTag.setAttribute('nonce', e)
  }
}
var Gn = {
    8: 'Backspace',
    9: 'Tab',
    10: 'Enter',
    12: 'NumLock',
    13: 'Enter',
    16: 'Shift',
    17: 'Control',
    18: 'Alt',
    20: 'CapsLock',
    27: 'Escape',
    32: ' ',
    33: 'PageUp',
    34: 'PageDown',
    35: 'End',
    36: 'Home',
    37: 'ArrowLeft',
    38: 'ArrowUp',
    39: 'ArrowRight',
    40: 'ArrowDown',
    44: 'PrintScreen',
    45: 'Insert',
    46: 'Delete',
    59: ';',
    61: '=',
    91: 'Meta',
    92: 'Meta',
    106: '*',
    107: '+',
    108: ',',
    109: '-',
    110: '.',
    111: '/',
    144: 'NumLock',
    145: 'ScrollLock',
    160: 'Shift',
    161: 'Shift',
    162: 'Control',
    163: 'Control',
    164: 'Alt',
    165: 'Alt',
    173: '-',
    186: ';',
    187: '=',
    188: ',',
    189: '-',
    190: '.',
    191: '/',
    192: '`',
    219: '[',
    220: '\\',
    221: ']',
    222: "'"
  },
  ns = {
    48: ')',
    49: '!',
    50: '@',
    51: '#',
    52: '$',
    53: '%',
    54: '^',
    55: '&',
    56: '*',
    57: '(',
    59: ':',
    61: '+',
    173: '_',
    186: ':',
    187: '+',
    188: '<',
    189: '_',
    190: '>',
    191: '?',
    192: '~',
    219: '{',
    220: '|',
    221: '}',
    222: '"'
  },
  hT = typeof navigator < 'u' && /Mac/.test(navigator.platform),
  dT =
    typeof navigator < 'u' &&
    /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent)
for (var ze = 0; ze < 10; ze++) Gn[48 + ze] = Gn[96 + ze] = String(ze)
for (var ze = 1; ze <= 24; ze++) Gn[ze + 111] = 'F' + ze
for (var ze = 65; ze <= 90; ze++)
  (Gn[ze] = String.fromCharCode(ze + 32)), (ns[ze] = String.fromCharCode(ze))
for (var rc in Gn) ns.hasOwnProperty(rc) || (ns[rc] = Gn[rc])
function pT(n) {
  var e =
      (hT && n.metaKey && n.shiftKey && !n.ctrlKey && !n.altKey) ||
      (dT && n.shiftKey && n.key && n.key.length == 1) ||
      n.key == 'Unidentified',
    t =
      (!e && n.key) ||
      (n.shiftKey ? ns : Gn)[n.keyCode] ||
      n.key ||
      'Unidentified'
  return (
    t == 'Esc' && (t = 'Escape'),
    t == 'Del' && (t = 'Delete'),
    t == 'Left' && (t = 'ArrowLeft'),
    t == 'Up' && (t = 'ArrowUp'),
    t == 'Right' && (t = 'ArrowRight'),
    t == 'Down' && (t = 'ArrowDown'),
    t
  )
}
function Ca(n) {
  let e
  return (
    n.nodeType == 11 ? (e = n.getSelection ? n : n.ownerDocument) : (e = n),
    e.getSelection()
  )
}
function _u(n, e) {
  return e ? n == e || n.contains(e.nodeType != 1 ? e.parentNode : e) : !1
}
function OT(n) {
  let e = n.activeElement
  for (; e && e.shadowRoot; ) e = e.shadowRoot.activeElement
  return e
}
function Vo(n, e) {
  if (!e.anchorNode) return !1
  try {
    return _u(n, e.anchorNode)
  } catch {
    return !1
  }
}
function tr(n) {
  return n.nodeType == 3
    ? Si(n, 0, n.nodeValue.length).getClientRects()
    : n.nodeType == 1
      ? n.getClientRects()
      : []
}
function _a(n, e, t, i) {
  return t ? hp(n, e, t, i, -1) || hp(n, e, t, i, 1) : !1
}
function is(n) {
  for (var e = 0; ; e++) if (((n = n.previousSibling), !n)) return e
}
function hp(n, e, t, i, r) {
  for (;;) {
    if (n == t && e == i) return !0
    if (e == (r < 0 ? 0 : xn(n))) {
      if (n.nodeName == 'DIV') return !1
      let s = n.parentNode
      if (!s || s.nodeType != 1) return !1
      ;(e = is(n) + (r < 0 ? 0 : 1)), (n = s)
    } else if (n.nodeType == 1) {
      if (
        ((n = n.childNodes[e + (r < 0 ? -1 : 0)]),
        n.nodeType == 1 && n.contentEditable == 'false')
      )
        return !1
      e = r < 0 ? xn(n) : 0
    } else return !1
  }
}
function xn(n) {
  return n.nodeType == 3 ? n.nodeValue.length : n.childNodes.length
}
function xl(n, e) {
  let t = e ? n.left : n.right
  return { left: t, right: t, top: n.top, bottom: n.bottom }
}
function gT(n) {
  return {
    left: 0,
    right: n.innerWidth,
    top: 0,
    bottom: n.innerHeight
  }
}
function mT(n, e, t, i, r, s, o, a) {
  let l = n.ownerDocument,
    c = l.defaultView || window
  for (let u = n, f = !1; u && !f; )
    if (u.nodeType == 1) {
      let h,
        d = u == l.body,
        O = 1,
        m = 1
      if (d) h = gT(c)
      else {
        if (
          (/^(fixed|sticky)$/.test(getComputedStyle(u).position) && (f = !0),
          u.scrollHeight <= u.clientHeight && u.scrollWidth <= u.clientWidth)
        ) {
          u = u.assignedSlot || u.parentNode
          continue
        }
        let w = u.getBoundingClientRect()
        ;(O = w.width / u.offsetWidth),
          (m = w.height / u.offsetHeight),
          (h = {
            left: w.left,
            right: w.left + u.clientWidth * O,
            top: w.top,
            bottom: w.top + u.clientHeight * m
          })
      }
      let b = 0,
        x = 0
      if (r == 'nearest')
        e.top < h.top
          ? ((x = -(h.top - e.top + o)),
            t > 0 &&
              e.bottom > h.bottom + x &&
              (x = e.bottom - h.bottom + x + o))
          : e.bottom > h.bottom &&
            ((x = e.bottom - h.bottom + o),
            t < 0 && e.top - x < h.top && (x = -(h.top + x - e.top + o)))
      else {
        let w = e.bottom - e.top,
          T = h.bottom - h.top
        x =
          (r == 'center' && w <= T
            ? e.top + w / 2 - T / 2
            : r == 'start' || (r == 'center' && t < 0)
              ? e.top - o
              : e.bottom - T + o) - h.top
      }
      if (
        (i == 'nearest'
          ? e.left < h.left
            ? ((b = -(h.left - e.left + s)),
              t > 0 && e.right > h.right + b && (b = e.right - h.right + b + s))
            : e.right > h.right &&
              ((b = e.right - h.right + s),
              t < 0 && e.left < h.left + b && (b = -(h.left + b - e.left + s)))
          : (b =
              (i == 'center'
                ? e.left + (e.right - e.left) / 2 - (h.right - h.left) / 2
                : (i == 'start') == a
                  ? e.left - s
                  : e.right - (h.right - h.left) + s) - h.left),
        b || x)
      )
        if (d) c.scrollBy(b, x)
        else {
          let w = 0,
            T = 0
          if (x) {
            let Q = u.scrollTop
            ;(u.scrollTop += x / m), (T = (u.scrollTop - Q) * m)
          }
          if (b) {
            let Q = u.scrollLeft
            ;(u.scrollLeft += b / O), (w = (u.scrollLeft - Q) * O)
          }
          ;(e = {
            left: e.left - w,
            top: e.top - T,
            right: e.right - w,
            bottom: e.bottom - T
          }),
            w && Math.abs(w - b) < 1 && (i = 'nearest'),
            T && Math.abs(T - x) < 1 && (r = 'nearest')
        }
      if (d) break
      u = u.assignedSlot || u.parentNode
    } else if (u.nodeType == 11) u = u.host
    else break
}
function yT(n) {
  let e = n.ownerDocument
  for (let t = n.parentNode; t && t != e.body; )
    if (t.nodeType == 1) {
      if (t.scrollHeight > t.clientHeight || t.scrollWidth > t.clientWidth)
        return t
      t = t.assignedSlot || t.parentNode
    } else if (t.nodeType == 11) t = t.host
    else break
  return null
}
class bT {
  constructor() {
    ;(this.anchorNode = null),
      (this.anchorOffset = 0),
      (this.focusNode = null),
      (this.focusOffset = 0)
  }
  eq(e) {
    return (
      this.anchorNode == e.anchorNode &&
      this.anchorOffset == e.anchorOffset &&
      this.focusNode == e.focusNode &&
      this.focusOffset == e.focusOffset
    )
  }
  setRange(e) {
    let { anchorNode: t, focusNode: i } = e
    this.set(
      t,
      Math.min(e.anchorOffset, t ? xn(t) : 0),
      i,
      Math.min(e.focusOffset, i ? xn(i) : 0)
    )
  }
  set(e, t, i, r) {
    ;(this.anchorNode = e),
      (this.anchorOffset = t),
      (this.focusNode = i),
      (this.focusOffset = r)
  }
}
let Ri = null
function by(n) {
  if (n.setActive) return n.setActive()
  if (Ri) return n.focus(Ri)
  let e = []
  for (
    let t = n;
    t && (e.push(t, t.scrollTop, t.scrollLeft), t != t.ownerDocument);
    t = t.parentNode
  );
  if (
    (n.focus(
      Ri == null
        ? {
            get preventScroll() {
              return (Ri = { preventScroll: !0 }), !0
            }
          }
        : void 0
    ),
    !Ri)
  ) {
    Ri = !1
    for (let t = 0; t < e.length; ) {
      let i = e[t++],
        r = e[t++],
        s = e[t++]
      i.scrollTop != r && (i.scrollTop = r),
        i.scrollLeft != s && (i.scrollLeft = s)
    }
  }
}
let dp
function Si(n, e, t = e) {
  let i = dp || (dp = document.createRange())
  return i.setEnd(n, t), i.setStart(n, e), i
}
function Li(n, e, t) {
  let i = { key: e, code: e, keyCode: t, which: t, cancelable: !0 },
    r = new KeyboardEvent('keydown', i)
  ;(r.synthetic = !0), n.dispatchEvent(r)
  let s = new KeyboardEvent('keyup', i)
  return (
    (s.synthetic = !0),
    n.dispatchEvent(s),
    r.defaultPrevented || s.defaultPrevented
  )
}
function vT(n) {
  for (; n; ) {
    if (n && (n.nodeType == 9 || (n.nodeType == 11 && n.host))) return n
    n = n.assignedSlot || n.parentNode
  }
  return null
}
function vy(n) {
  for (; n.attributes.length; ) n.removeAttributeNode(n.attributes[0])
}
function ST(n, e) {
  let t = e.focusNode,
    i = e.focusOffset
  if (!t || e.anchorNode != t || e.anchorOffset != i) return !1
  for (i = Math.min(i, xn(t)); ; )
    if (i) {
      if (t.nodeType != 1) return !1
      let r = t.childNodes[i - 1]
      r.contentEditable == 'false' ? i-- : ((t = r), (i = xn(t)))
    } else {
      if (t == n) return !0
      ;(i = is(t)), (t = t.parentNode)
    }
}
function Sy(n) {
  return n.scrollTop > Math.max(1, n.scrollHeight - n.clientHeight - 4)
}
class Ke {
  constructor(e, t, i = !0) {
    ;(this.node = e), (this.offset = t), (this.precise = i)
  }
  static before(e, t) {
    return new Ke(e.parentNode, is(e), t)
  }
  static after(e, t) {
    return new Ke(e.parentNode, is(e) + 1, t)
  }
}
const Mf = []
class xe {
  constructor() {
    ;(this.parent = null), (this.dom = null), (this.flags = 2)
  }
  get overrideDOMText() {
    return null
  }
  get posAtStart() {
    return this.parent ? this.parent.posBefore(this) : 0
  }
  get posAtEnd() {
    return this.posAtStart + this.length
  }
  posBefore(e) {
    let t = this.posAtStart
    for (let i of this.children) {
      if (i == e) return t
      t += i.length + i.breakAfter
    }
    throw new RangeError('Invalid child in posBefore')
  }
  posAfter(e) {
    return this.posBefore(e) + e.length
  }
  sync(e, t) {
    if (this.flags & 2) {
      let i = this.dom,
        r = null,
        s
      for (let o of this.children) {
        if (o.flags & 7) {
          if (!o.dom && (s = r ? r.nextSibling : i.firstChild)) {
            let a = xe.get(s)
            ;(!a || (!a.parent && a.canReuseDOM(o))) && o.reuseDOM(s)
          }
          o.sync(e, t), (o.flags &= -8)
        }
        if (
          ((s = r ? r.nextSibling : i.firstChild),
          t && !t.written && t.node == i && s != o.dom && (t.written = !0),
          o.dom.parentNode == i)
        )
          for (; s && s != o.dom; ) s = pp(s)
        else i.insertBefore(o.dom, s)
        r = o.dom
      }
      for (
        s = r ? r.nextSibling : i.firstChild,
          s && t && t.node == i && (t.written = !0);
        s;

      )
        s = pp(s)
    } else if (this.flags & 1)
      for (let i of this.children)
        i.flags & 7 && (i.sync(e, t), (i.flags &= -8))
  }
  reuseDOM(e) {}
  localPosFromDOM(e, t) {
    let i
    if (e == this.dom) i = this.dom.childNodes[t]
    else {
      let r = xn(e) == 0 ? 0 : t == 0 ? -1 : 1
      for (;;) {
        let s = e.parentNode
        if (s == this.dom) break
        r == 0 &&
          s.firstChild != s.lastChild &&
          (e == s.firstChild ? (r = -1) : (r = 1)),
          (e = s)
      }
      r < 0 ? (i = e) : (i = e.nextSibling)
    }
    if (i == this.dom.firstChild) return 0
    for (; i && !xe.get(i); ) i = i.nextSibling
    if (!i) return this.length
    for (let r = 0, s = 0; ; r++) {
      let o = this.children[r]
      if (o.dom == i) return s
      s += o.length + o.breakAfter
    }
  }
  domBoundsAround(e, t, i = 0) {
    let r = -1,
      s = -1,
      o = -1,
      a = -1
    for (let l = 0, c = i, u = i; l < this.children.length; l++) {
      let f = this.children[l],
        h = c + f.length
      if (c < e && h > t) return f.domBoundsAround(e, t, c)
      if (
        (h >= e && r == -1 && ((r = l), (s = c)),
        c > t && f.dom.parentNode == this.dom)
      ) {
        ;(o = l), (a = u)
        break
      }
      ;(u = h), (c = h + f.breakAfter)
    }
    return {
      from: s,
      to: a < 0 ? i + this.length : a,
      startDOM:
        (r ? this.children[r - 1].dom.nextSibling : null) ||
        this.dom.firstChild,
      endDOM: o < this.children.length && o >= 0 ? this.children[o].dom : null
    }
  }
  markDirty(e = !1) {
    ;(this.flags |= 2), this.markParentsDirty(e)
  }
  markParentsDirty(e) {
    for (let t = this.parent; t; t = t.parent) {
      if ((e && (t.flags |= 2), t.flags & 1)) return
      ;(t.flags |= 1), (e = !1)
    }
  }
  setParent(e) {
    this.parent != e &&
      ((this.parent = e), this.flags & 7 && this.markParentsDirty(!0))
  }
  setDOM(e) {
    this.dom != e &&
      (this.dom && (this.dom.cmView = null), (this.dom = e), (e.cmView = this))
  }
  get rootView() {
    for (let e = this; ; ) {
      let t = e.parent
      if (!t) return e
      e = t
    }
  }
  replaceChildren(e, t, i = Mf) {
    this.markDirty()
    for (let r = e; r < t; r++) {
      let s = this.children[r]
      s.parent == this && s.destroy()
    }
    this.children.splice(e, t - e, ...i)
    for (let r = 0; r < i.length; r++) i[r].setParent(this)
  }
  ignoreMutation(e) {
    return !1
  }
  ignoreEvent(e) {
    return !1
  }
  childCursor(e = this.length) {
    return new xy(this.children, e, this.children.length)
  }
  childPos(e, t = 1) {
    return this.childCursor().findPos(e, t)
  }
  toString() {
    let e = this.constructor.name.replace('View', '')
    return (
      e +
      (this.children.length
        ? '(' + this.children.join() + ')'
        : this.length
          ? '[' + (e == 'Text' ? this.text : this.length) + ']'
          : '') +
      (this.breakAfter ? '#' : '')
    )
  }
  static get(e) {
    return e.cmView
  }
  get isEditable() {
    return !0
  }
  get isWidget() {
    return !1
  }
  get isHidden() {
    return !1
  }
  merge(e, t, i, r, s, o) {
    return !1
  }
  become(e) {
    return !1
  }
  canReuseDOM(e) {
    return e.constructor == this.constructor && !((this.flags | e.flags) & 8)
  }
  // When this is a zero-length view with a side, this should return a
  // number <= 0 to indicate it is before its position, or a
  // number > 0 when after its position.
  getSide() {
    return 0
  }
  destroy() {
    this.parent = null
  }
}
xe.prototype.breakAfter = 0
function pp(n) {
  let e = n.nextSibling
  return n.parentNode.removeChild(n), e
}
class xy {
  constructor(e, t, i) {
    ;(this.children = e), (this.pos = t), (this.i = i), (this.off = 0)
  }
  findPos(e, t = 1) {
    for (;;) {
      if (
        e > this.pos ||
        (e == this.pos &&
          (t > 0 || this.i == 0 || this.children[this.i - 1].breakAfter))
      )
        return (this.off = e - this.pos), this
      let i = this.children[--this.i]
      this.pos -= i.length + i.breakAfter
    }
  }
}
function wy(n, e, t, i, r, s, o, a, l) {
  let { children: c } = n,
    u = c.length ? c[e] : null,
    f = s.length ? s[s.length - 1] : null,
    h = f ? f.breakAfter : o
  if (
    !(
      e == i &&
      u &&
      !o &&
      !h &&
      s.length < 2 &&
      u.merge(t, r, s.length ? f : null, t == 0, a, l)
    )
  ) {
    if (i < c.length) {
      let d = c[i]
      d && (r < d.length || (d.breakAfter && f != null && f.breakAfter))
        ? (e == i && ((d = d.split(r)), (r = 0)),
          !h && f && d.merge(0, r, f, !0, 0, l)
            ? (s[s.length - 1] = d)
            : ((r || (d.children.length && !d.children[0].length)) &&
                d.merge(0, r, null, !1, 0, l),
              s.push(d)))
        : d != null && d.breakAfter && (f ? (f.breakAfter = 1) : (o = 1)),
        i++
    }
    for (
      u &&
      ((u.breakAfter = o),
      t > 0 &&
        (!o && s.length && u.merge(t, u.length, s[0], !1, a, 0)
          ? (u.breakAfter = s.shift().breakAfter)
          : (t < u.length ||
              (u.children.length &&
                u.children[u.children.length - 1].length == 0)) &&
            u.merge(t, u.length, null, !1, a, 0),
        e++));
      e < i && s.length;

    )
      if (c[i - 1].become(s[s.length - 1])) i--, s.pop(), (l = s.length ? 0 : a)
      else if (c[e].become(s[0])) e++, s.shift(), (a = s.length ? 0 : l)
      else break
    !s.length &&
      e &&
      i < c.length &&
      !c[e - 1].breakAfter &&
      c[i].merge(0, 0, c[e - 1], !1, a, l) &&
      e--,
      (e < i || s.length) && n.replaceChildren(e, i, s)
  }
}
function $y(n, e, t, i, r, s) {
  let o = n.childCursor(),
    { i: a, off: l } = o.findPos(t, 1),
    { i: c, off: u } = o.findPos(e, -1),
    f = e - t
  for (let h of i) f += h.length
  ;(n.length += f), wy(n, c, u, a, l, i, 0, r, s)
}
let vt =
    typeof navigator < 'u'
      ? navigator
      : { userAgent: '', vendor: '', platform: '' },
  Zu = typeof document < 'u' ? document : { documentElement: { style: {} } }
const Au = /* @__PURE__ */ /Edge\/(\d+)/.exec(vt.userAgent),
  Py = /* @__PURE__ */ /MSIE \d/.test(vt.userAgent),
  Ru = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(
    vt.userAgent
  ),
  wl = !!(Py || Ru || Au),
  Op = !wl && /* @__PURE__ */ /gecko\/(\d+)/i.test(vt.userAgent),
  sc = !wl && /* @__PURE__ */ /Chrome\/(\d+)/.exec(vt.userAgent),
  gp = 'webkitFontSmoothing' in Zu.documentElement.style,
  Qy = !wl && /* @__PURE__ */ /Apple Computer/.test(vt.vendor),
  mp =
    Qy &&
    /* @__PURE__ */ (/Mobile\/\w+/.test(vt.userAgent) || vt.maxTouchPoints > 2)
var G = {
  mac: mp || /* @__PURE__ */ /Mac/.test(vt.platform),
  windows: /* @__PURE__ */ /Win/.test(vt.platform),
  linux: /* @__PURE__ */ /Linux|X11/.test(vt.platform),
  ie: wl,
  ie_version: Py ? Zu.documentMode || 6 : Ru ? +Ru[1] : Au ? +Au[1] : 0,
  gecko: Op,
  gecko_version: Op
    ? +(/* @__PURE__ */ (/Firefox\/(\d+)/.exec(vt.userAgent) || [0, 0])[1])
    : 0,
  chrome: !!sc,
  chrome_version: sc ? +sc[1] : 0,
  ios: mp,
  android: /* @__PURE__ */ /Android\b/.test(vt.userAgent),
  webkit: gp,
  safari: Qy,
  webkit_version: gp
    ? +(
        /* @__PURE__ */ (/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [
          0, 0
        ])[1]
      )
    : 0,
  tabSize:
    Zu.documentElement.style.tabSize != null ? 'tab-size' : '-moz-tab-size'
}
const xT = 256
class wn extends xe {
  constructor(e) {
    super(), (this.text = e)
  }
  get length() {
    return this.text.length
  }
  createDOM(e) {
    this.setDOM(e || document.createTextNode(this.text))
  }
  sync(e, t) {
    this.dom || this.createDOM(),
      this.dom.nodeValue != this.text &&
        (t && t.node == this.dom && (t.written = !0),
        (this.dom.nodeValue = this.text))
  }
  reuseDOM(e) {
    e.nodeType == 3 && this.createDOM(e)
  }
  merge(e, t, i) {
    return this.flags & 8 ||
      (i &&
        (!(i instanceof wn) ||
          this.length - (t - e) + i.length > xT ||
          i.flags & 8))
      ? !1
      : ((this.text =
          this.text.slice(0, e) + (i ? i.text : '') + this.text.slice(t)),
        this.markDirty(),
        !0)
  }
  split(e) {
    let t = new wn(this.text.slice(e))
    return (
      (this.text = this.text.slice(0, e)),
      this.markDirty(),
      (t.flags |= this.flags & 8),
      t
    )
  }
  localPosFromDOM(e, t) {
    return e == this.dom ? t : t ? this.text.length : 0
  }
  domAtPos(e) {
    return new Ke(this.dom, e)
  }
  domBoundsAround(e, t, i) {
    return {
      from: i,
      to: i + this.length,
      startDOM: this.dom,
      endDOM: this.dom.nextSibling
    }
  }
  coordsAt(e, t) {
    return wT(this.dom, e, t)
  }
}
class $n extends xe {
  constructor(e, t = [], i = 0) {
    super(), (this.mark = e), (this.children = t), (this.length = i)
    for (let r of t) r.setParent(this)
  }
  setAttrs(e) {
    if (
      (vy(e),
      this.mark.class && (e.className = this.mark.class),
      this.mark.attrs)
    )
      for (let t in this.mark.attrs) e.setAttribute(t, this.mark.attrs[t])
    return e
  }
  canReuseDOM(e) {
    return super.canReuseDOM(e) && !((this.flags | e.flags) & 8)
  }
  reuseDOM(e) {
    e.nodeName == this.mark.tagName.toUpperCase() &&
      (this.setDOM(e), (this.flags |= 6))
  }
  sync(e, t) {
    this.dom
      ? this.flags & 4 && this.setAttrs(this.dom)
      : this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))),
      super.sync(e, t)
  }
  merge(e, t, i, r, s, o) {
    return i &&
      (!(i instanceof $n && i.mark.eq(this.mark)) ||
        (e && s <= 0) ||
        (t < this.length && o <= 0))
      ? !1
      : ($y(this, e, t, i ? i.children : [], s - 1, o - 1),
        this.markDirty(),
        !0)
  }
  split(e) {
    let t = [],
      i = 0,
      r = -1,
      s = 0
    for (let a of this.children) {
      let l = i + a.length
      l > e && t.push(i < e ? a.split(e - i) : a),
        r < 0 && i >= e && (r = s),
        (i = l),
        s++
    }
    let o = this.length - e
    return (
      (this.length = e),
      r > -1 && ((this.children.length = r), this.markDirty()),
      new $n(this.mark, t, o)
    )
  }
  domAtPos(e) {
    return ky(this, e)
  }
  coordsAt(e, t) {
    return Cy(this, e, t)
  }
}
function wT(n, e, t) {
  let i = n.nodeValue.length
  e > i && (e = i)
  let r = e,
    s = e,
    o = 0
  ;(e == 0 && t < 0) || (e == i && t >= 0)
    ? G.chrome || G.gecko || (e ? (r--, (o = 1)) : s < i && (s++, (o = -1)))
    : t < 0
      ? r--
      : s < i && s++
  let a = Si(n, r, s).getClientRects()
  if (!a.length) return null
  let l = a[(o ? o < 0 : t >= 0) ? 0 : a.length - 1]
  return (
    G.safari &&
      !o &&
      l.width == 0 &&
      (l = Array.prototype.find.call(a, (c) => c.width) || l),
    o ? xl(l, o < 0) : l || null
  )
}
class Vn extends xe {
  static create(e, t, i) {
    return new Vn(e, t, i)
  }
  constructor(e, t, i) {
    super(),
      (this.widget = e),
      (this.length = t),
      (this.side = i),
      (this.prevWidget = null)
  }
  split(e) {
    let t = Vn.create(this.widget, this.length - e, this.side)
    return (this.length -= e), t
  }
  sync(e) {
    ;(!this.dom || !this.widget.updateDOM(this.dom, e)) &&
      (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom),
      (this.prevWidget = null),
      this.setDOM(this.widget.toDOM(e)),
      (this.dom.contentEditable = 'false'))
  }
  getSide() {
    return this.side
  }
  merge(e, t, i, r, s, o) {
    return i &&
      (!(i instanceof Vn) ||
        !this.widget.compare(i.widget) ||
        (e > 0 && s <= 0) ||
        (t < this.length && o <= 0))
      ? !1
      : ((this.length = e + (i ? i.length : 0) + (this.length - t)), !0)
  }
  become(e) {
    return e instanceof Vn &&
      e.side == this.side &&
      this.widget.constructor == e.widget.constructor
      ? (this.widget.compare(e.widget) || this.markDirty(!0),
        this.dom && !this.prevWidget && (this.prevWidget = this.widget),
        (this.widget = e.widget),
        (this.length = e.length),
        !0)
      : !1
  }
  ignoreMutation() {
    return !0
  }
  ignoreEvent(e) {
    return this.widget.ignoreEvent(e)
  }
  get overrideDOMText() {
    if (this.length == 0) return ue.empty
    let e = this
    for (; e.parent; ) e = e.parent
    let { view: t } = e,
      i = t && t.state.doc,
      r = this.posAtStart
    return i ? i.slice(r, r + this.length) : ue.empty
  }
  domAtPos(e) {
    return (this.length ? e == 0 : this.side > 0)
      ? Ke.before(this.dom)
      : Ke.after(this.dom, e == this.length)
  }
  domBoundsAround() {
    return null
  }
  coordsAt(e, t) {
    let i = this.widget.coordsAt(this.dom, e, t)
    if (i) return i
    let r = this.dom.getClientRects(),
      s = null
    if (!r.length) return null
    let o = this.side ? this.side < 0 : e > 0
    for (
      let a = o ? r.length - 1 : 0;
      (s = r[a]), !(e > 0 ? a == 0 : a == r.length - 1 || s.top < s.bottom);
      a += o ? -1 : 1
    );
    return xl(s, !o)
  }
  get isEditable() {
    return !1
  }
  get isWidget() {
    return !0
  }
  get isHidden() {
    return this.widget.isHidden
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom)
  }
}
class nr extends xe {
  constructor(e) {
    super(), (this.side = e)
  }
  get length() {
    return 0
  }
  merge() {
    return !1
  }
  become(e) {
    return e instanceof nr && e.side == this.side
  }
  split() {
    return new nr(this.side)
  }
  sync() {
    if (!this.dom) {
      let e = document.createElement('img')
      ;(e.className = 'cm-widgetBuffer'),
        e.setAttribute('aria-hidden', 'true'),
        this.setDOM(e)
    }
  }
  getSide() {
    return this.side
  }
  domAtPos(e) {
    return this.side > 0 ? Ke.before(this.dom) : Ke.after(this.dom)
  }
  localPosFromDOM() {
    return 0
  }
  domBoundsAround() {
    return null
  }
  coordsAt(e) {
    return this.dom.getBoundingClientRect()
  }
  get overrideDOMText() {
    return ue.empty
  }
  get isHidden() {
    return !0
  }
}
wn.prototype.children = Vn.prototype.children = nr.prototype.children = Mf
function ky(n, e) {
  let t = n.dom,
    { children: i } = n,
    r = 0
  for (let s = 0; r < i.length; r++) {
    let o = i[r],
      a = s + o.length
    if (!(a == s && o.getSide() <= 0)) {
      if (e > s && e < a && o.dom.parentNode == t) return o.domAtPos(e - s)
      if (e <= s) break
      s = a
    }
  }
  for (let s = r; s > 0; s--) {
    let o = i[s - 1]
    if (o.dom.parentNode == t) return o.domAtPos(o.length)
  }
  for (let s = r; s < i.length; s++) {
    let o = i[s]
    if (o.dom.parentNode == t) return o.domAtPos(0)
  }
  return new Ke(t, 0)
}
function Ty(n, e, t) {
  let i,
    { children: r } = n
  t > 0 &&
  e instanceof $n &&
  r.length &&
  (i = r[r.length - 1]) instanceof $n &&
  i.mark.eq(e.mark)
    ? Ty(i, e.children[0], t - 1)
    : (r.push(e), e.setParent(n)),
    (n.length += e.length)
}
function Cy(n, e, t) {
  let i = null,
    r = -1,
    s = null,
    o = -1
  function a(c, u) {
    for (let f = 0, h = 0; f < c.children.length && h <= u; f++) {
      let d = c.children[f],
        O = h + d.length
      O >= u &&
        (d.children.length
          ? a(d, u - h)
          : (!s || (s.isHidden && t > 0)) &&
              (O > u || (h == O && d.getSide() > 0))
            ? ((s = d), (o = u - h))
            : (h < u || (h == O && d.getSide() < 0 && !d.isHidden)) &&
              ((i = d), (r = u - h))),
        (h = O)
    }
  }
  a(n, e)
  let l = (t < 0 ? i : s) || i || s
  return l ? l.coordsAt(Math.max(0, l == i ? r : o), t) : $T(n)
}
function $T(n) {
  let e = n.dom.lastChild
  if (!e) return n.dom.getBoundingClientRect()
  let t = tr(e)
  return t[t.length - 1] || null
}
function Eu(n, e) {
  for (let t in n)
    t == 'class' && e.class
      ? (e.class += ' ' + n.class)
      : t == 'style' && e.style
        ? (e.style += ';' + n.style)
        : (e[t] = n[t])
  return e
}
const yp = /* @__PURE__ */ Object.create(null)
function Vf(n, e, t) {
  if (n == e) return !0
  n || (n = yp), e || (e = yp)
  let i = Object.keys(n),
    r = Object.keys(e)
  if (
    i.length - (t && i.indexOf(t) > -1 ? 1 : 0) !=
    r.length - (t && r.indexOf(t) > -1 ? 1 : 0)
  )
    return !1
  for (let s of i)
    if (s != t && (r.indexOf(s) == -1 || n[s] !== e[s])) return !1
  return !0
}
function Du(n, e, t) {
  let i = !1
  if (e)
    for (let r in e)
      (t && r in t) ||
        ((i = !0), r == 'style' ? (n.style.cssText = '') : n.removeAttribute(r))
  if (t)
    for (let r in t)
      (e && e[r] == t[r]) ||
        ((i = !0),
        r == 'style' ? (n.style.cssText = t[r]) : n.setAttribute(r, t[r]))
  return i
}
function PT(n) {
  let e = /* @__PURE__ */ Object.create(null)
  for (let t = 0; t < n.attributes.length; t++) {
    let i = n.attributes[t]
    e[i.name] = i.value
  }
  return e
}
class De extends xe {
  constructor() {
    super(...arguments),
      (this.children = []),
      (this.length = 0),
      (this.prevAttrs = void 0),
      (this.attrs = null),
      (this.breakAfter = 0)
  }
  // Consumes source
  merge(e, t, i, r, s, o) {
    if (i) {
      if (!(i instanceof De)) return !1
      this.dom || i.transferDOM(this)
    }
    return (
      r && this.setDeco(i ? i.attrs : null),
      $y(this, e, t, i ? i.children : [], s, o),
      !0
    )
  }
  split(e) {
    let t = new De()
    if (((t.breakAfter = this.breakAfter), this.length == 0)) return t
    let { i, off: r } = this.childPos(e)
    r &&
      (t.append(this.children[i].split(r), 0),
      this.children[i].merge(r, this.children[i].length, null, !1, 0, 0),
      i++)
    for (let s = i; s < this.children.length; s++) t.append(this.children[s], 0)
    for (; i > 0 && this.children[i - 1].length == 0; )
      this.children[--i].destroy()
    return (this.children.length = i), this.markDirty(), (this.length = e), t
  }
  transferDOM(e) {
    this.dom &&
      (this.markDirty(),
      e.setDOM(this.dom),
      (e.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs),
      (this.prevAttrs = void 0),
      (this.dom = null))
  }
  setDeco(e) {
    Vf(this.attrs, e) ||
      (this.dom && ((this.prevAttrs = this.attrs), this.markDirty()),
      (this.attrs = e))
  }
  append(e, t) {
    Ty(this, e, t)
  }
  // Only called when building a line view in ContentBuilder
  addLineDeco(e) {
    let t = e.spec.attributes,
      i = e.spec.class
    t && (this.attrs = Eu(t, this.attrs || {})),
      i && (this.attrs = Eu({ class: i }, this.attrs || {}))
  }
  domAtPos(e) {
    return ky(this, e)
  }
  reuseDOM(e) {
    e.nodeName == 'DIV' && (this.setDOM(e), (this.flags |= 6))
  }
  sync(e, t) {
    var i
    this.dom
      ? this.flags & 4 &&
        (vy(this.dom),
        (this.dom.className = 'cm-line'),
        (this.prevAttrs = this.attrs ? null : void 0))
      : (this.setDOM(document.createElement('div')),
        (this.dom.className = 'cm-line'),
        (this.prevAttrs = this.attrs ? null : void 0)),
      this.prevAttrs !== void 0 &&
        (Du(this.dom, this.prevAttrs, this.attrs),
        this.dom.classList.add('cm-line'),
        (this.prevAttrs = void 0)),
      super.sync(e, t)
    let r = this.dom.lastChild
    for (; r && xe.get(r) instanceof $n; ) r = r.lastChild
    if (
      !r ||
      !this.length ||
      (r.nodeName != 'BR' &&
        ((i = xe.get(r)) === null || i === void 0 ? void 0 : i.isEditable) ==
          !1 &&
        (!G.ios || !this.children.some((s) => s instanceof wn)))
    ) {
      let s = document.createElement('BR')
      ;(s.cmIgnore = !0), this.dom.appendChild(s)
    }
  }
  measureTextSize() {
    if (this.children.length == 0 || this.length > 20) return null
    let e = 0,
      t
    for (let i of this.children) {
      if (!(i instanceof wn) || /[^ -~]/.test(i.text)) return null
      let r = tr(i.dom)
      if (r.length != 1) return null
      ;(e += r[0].width), (t = r[0].height)
    }
    return e
      ? {
          lineHeight: this.dom.getBoundingClientRect().height,
          charWidth: e / this.length,
          textHeight: t
        }
      : null
  }
  coordsAt(e, t) {
    let i = Cy(this, e, t)
    if (!this.children.length && i && this.parent) {
      let { heightOracle: r } = this.parent.view.viewState,
        s = i.bottom - i.top
      if (Math.abs(s - r.lineHeight) < 2 && r.textHeight < s) {
        let o = (s - r.textHeight) / 2
        return {
          top: i.top + o,
          bottom: i.bottom - o,
          left: i.left,
          right: i.left
        }
      }
    }
    return i
  }
  become(e) {
    return !1
  }
  covers() {
    return !0
  }
  static find(e, t) {
    for (let i = 0, r = 0; i < e.children.length; i++) {
      let s = e.children[i],
        o = r + s.length
      if (o >= t) {
        if (s instanceof De) return s
        if (o > t) break
      }
      r = o + s.breakAfter
    }
    return null
  }
}
class jn extends xe {
  constructor(e, t, i) {
    super(),
      (this.widget = e),
      (this.length = t),
      (this.deco = i),
      (this.breakAfter = 0),
      (this.prevWidget = null)
  }
  merge(e, t, i, r, s, o) {
    return i &&
      (!(i instanceof jn) ||
        !this.widget.compare(i.widget) ||
        (e > 0 && s <= 0) ||
        (t < this.length && o <= 0))
      ? !1
      : ((this.length = e + (i ? i.length : 0) + (this.length - t)), !0)
  }
  domAtPos(e) {
    return e == 0 ? Ke.before(this.dom) : Ke.after(this.dom, e == this.length)
  }
  split(e) {
    let t = this.length - e
    this.length = e
    let i = new jn(this.widget, t, this.deco)
    return (i.breakAfter = this.breakAfter), i
  }
  get children() {
    return Mf
  }
  sync(e) {
    ;(!this.dom || !this.widget.updateDOM(this.dom, e)) &&
      (this.dom && this.prevWidget && this.prevWidget.destroy(this.dom),
      (this.prevWidget = null),
      this.setDOM(this.widget.toDOM(e)),
      (this.dom.contentEditable = 'false'))
  }
  get overrideDOMText() {
    return this.parent
      ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd)
      : ue.empty
  }
  domBoundsAround() {
    return null
  }
  become(e) {
    return e instanceof jn && e.widget.constructor == this.widget.constructor
      ? (e.widget.compare(this.widget) || this.markDirty(!0),
        this.dom && !this.prevWidget && (this.prevWidget = this.widget),
        (this.widget = e.widget),
        (this.length = e.length),
        (this.deco = e.deco),
        (this.breakAfter = e.breakAfter),
        !0)
      : !1
  }
  ignoreMutation() {
    return !0
  }
  ignoreEvent(e) {
    return this.widget.ignoreEvent(e)
  }
  get isEditable() {
    return !1
  }
  get isWidget() {
    return !0
  }
  coordsAt(e, t) {
    return this.widget.coordsAt(this.dom, e, t)
  }
  destroy() {
    super.destroy(), this.dom && this.widget.destroy(this.dom)
  }
  covers(e) {
    let { startSide: t, endSide: i } = this.deco
    return t == i ? !1 : e < 0 ? t < 0 : i > 0
  }
}
class un {
  /**
  Compare this instance to another instance of the same type.
  (TypeScript can't express this, but only instances of the same
  specific class will be passed to this method.) This is used to
  avoid redrawing widgets when they are replaced by a new
  decoration of the same type. The default implementation just
  returns `false`, which will cause new instances of the widget to
  always be redrawn.
  */
  eq(e) {
    return !1
  }
  /**
  Update a DOM element created by a widget of the same type (but
  different, non-`eq` content) to reflect this widget. May return
  true to indicate that it could update, false to indicate it
  couldn't (in which case the widget will be redrawn). The default
  implementation just returns false.
  */
  updateDOM(e, t) {
    return !1
  }
  /**
  @internal
  */
  compare(e) {
    return this == e || (this.constructor == e.constructor && this.eq(e))
  }
  /**
  The estimated height this widget will have, to be used when
  estimating the height of content that hasn't been drawn. May
  return -1 to indicate you don't know. The default implementation
  returns -1.
  */
  get estimatedHeight() {
    return -1
  }
  /**
  For inline widgets that are displayed inline (as opposed to
  `inline-block`) and introduce line breaks (through `<br>` tags
  or textual newlines), this must indicate the amount of line
  breaks they introduce. Defaults to 0.
  */
  get lineBreaks() {
    return 0
  }
  /**
  Can be used to configure which kinds of events inside the widget
  should be ignored by the editor. The default is to ignore all
  events.
  */
  ignoreEvent(e) {
    return !0
  }
  /**
  Override the way screen coordinates for positions at/in the
  widget are found. `pos` will be the offset into the widget, and
  `side` the side of the position that is being queried—less than
  zero for before, greater than zero for after, and zero for
  directly at that position.
  */
  coordsAt(e, t, i) {
    return null
  }
  /**
  @internal
  */
  get isHidden() {
    return !1
  }
  /**
  This is called when the an instance of the widget is removed
  from the editor view.
  */
  destroy(e) {}
}
var st = /* @__PURE__ */ (function (n) {
  return (
    (n[(n.Text = 0)] = 'Text'),
    (n[(n.WidgetBefore = 1)] = 'WidgetBefore'),
    (n[(n.WidgetAfter = 2)] = 'WidgetAfter'),
    (n[(n.WidgetRange = 3)] = 'WidgetRange'),
    n
  )
})(st || (st = {}))
class K extends vi {
  constructor(e, t, i, r) {
    super(),
      (this.startSide = e),
      (this.endSide = t),
      (this.widget = i),
      (this.spec = r)
  }
  /**
  @internal
  */
  get heightRelevant() {
    return !1
  }
  /**
  Create a mark decoration, which influences the styling of the
  content in its range. Nested mark decorations will cause nested
  DOM elements to be created. Nesting order is determined by
  precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
  the higher-precedence decorations creating the inner DOM nodes.
  Such elements are split on line boundaries and on the boundaries
  of lower-precedence decorations.
  */
  static mark(e) {
    return new ks(e)
  }
  /**
  Create a widget decoration, which displays a DOM element at the
  given position.
  */
  static widget(e) {
    let t = Math.max(-1e4, Math.min(1e4, e.side || 0)),
      i = !!e.block
    return (
      (t += i && !e.inlineOrder ? (t > 0 ? 3e8 : -4e8) : t > 0 ? 1e8 : -1e8),
      new Hn(e, t, t, i, e.widget || null, !1)
    )
  }
  /**
  Create a replace decoration which replaces the given range with
  a widget, or simply hides it.
  */
  static replace(e) {
    let t = !!e.block,
      i,
      r
    if (e.isBlockGap) (i = -5e8), (r = 4e8)
    else {
      let { start: s, end: o } = _y(e, t)
      ;(i = (s ? (t ? -3e8 : -1) : 5e8) - 1),
        (r = (o ? (t ? 2e8 : 1) : -6e8) + 1)
    }
    return new Hn(e, i, r, t, e.widget || null, !0)
  }
  /**
  Create a line decoration, which can add DOM attributes to the
  line starting at the given position.
  */
  static line(e) {
    return new Ts(e)
  }
  /**
  Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
  decorated range or ranges. If the ranges aren't already sorted,
  pass `true` for `sort` to make the library sort them for you.
  */
  static set(e, t = !1) {
    return fe.of(e, t)
  }
  /**
  @internal
  */
  hasHeight() {
    return this.widget ? this.widget.estimatedHeight > -1 : !1
  }
}
K.none = fe.empty
class ks extends K {
  constructor(e) {
    let { start: t, end: i } = _y(e)
    super(t ? -1 : 5e8, i ? 1 : -6e8, null, e),
      (this.tagName = e.tagName || 'span'),
      (this.class = e.class || ''),
      (this.attrs = e.attributes || null)
  }
  eq(e) {
    var t, i
    return (
      this == e ||
      (e instanceof ks &&
        this.tagName == e.tagName &&
        (this.class ||
          ((t = this.attrs) === null || t === void 0 ? void 0 : t.class)) ==
          (e.class ||
            ((i = e.attrs) === null || i === void 0 ? void 0 : i.class)) &&
        Vf(this.attrs, e.attrs, 'class'))
    )
  }
  range(e, t = e) {
    if (e >= t) throw new RangeError('Mark decorations may not be empty')
    return super.range(e, t)
  }
}
ks.prototype.point = !1
class Ts extends K {
  constructor(e) {
    super(-2e8, -2e8, null, e)
  }
  eq(e) {
    return (
      e instanceof Ts &&
      this.spec.class == e.spec.class &&
      Vf(this.spec.attributes, e.spec.attributes)
    )
  }
  range(e, t = e) {
    if (t != e)
      throw new RangeError('Line decoration ranges must be zero-length')
    return super.range(e, t)
  }
}
Ts.prototype.mapMode = Fe.TrackBefore
Ts.prototype.point = !0
class Hn extends K {
  constructor(e, t, i, r, s, o) {
    super(t, i, s, e),
      (this.block = r),
      (this.isReplace = o),
      (this.mapMode = r
        ? t <= 0
          ? Fe.TrackBefore
          : Fe.TrackAfter
        : Fe.TrackDel)
  }
  // Only relevant when this.block == true
  get type() {
    return this.startSide != this.endSide
      ? st.WidgetRange
      : this.startSide <= 0
        ? st.WidgetBefore
        : st.WidgetAfter
  }
  get heightRelevant() {
    return (
      this.block ||
      (!!this.widget &&
        (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0))
    )
  }
  eq(e) {
    return (
      e instanceof Hn &&
      QT(this.widget, e.widget) &&
      this.block == e.block &&
      this.startSide == e.startSide &&
      this.endSide == e.endSide
    )
  }
  range(e, t = e) {
    if (
      this.isReplace &&
      (e > t || (e == t && this.startSide > 0 && this.endSide <= 0))
    )
      throw new RangeError('Invalid range for replacement decoration')
    if (!this.isReplace && t != e)
      throw new RangeError(
        'Widget decorations can only have zero-length ranges'
      )
    return super.range(e, t)
  }
}
Hn.prototype.point = !0
function _y(n, e = !1) {
  let { inclusiveStart: t, inclusiveEnd: i } = n
  return (
    t == null && (t = n.inclusive),
    i == null && (i = n.inclusive),
    { start: t ?? e, end: i ?? e }
  )
}
function QT(n, e) {
  return n == e || !!(n && e && n.compare(e))
}
function Xu(n, e, t, i = 0) {
  let r = t.length - 1
  r >= 0 && t[r] + i >= n ? (t[r] = Math.max(t[r], e)) : t.push(n, e)
}
class Gr {
  constructor(e, t, i, r) {
    ;(this.doc = e),
      (this.pos = t),
      (this.end = i),
      (this.disallowBlockEffectsFor = r),
      (this.content = []),
      (this.curLine = null),
      (this.breakAtStart = 0),
      (this.pendingBuffer = 0),
      (this.bufferMarks = []),
      (this.atCursorPos = !0),
      (this.openStart = -1),
      (this.openEnd = -1),
      (this.text = ''),
      (this.textOff = 0),
      (this.cursor = e.iter()),
      (this.skip = t)
  }
  posCovered() {
    if (this.content.length == 0)
      return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos
    let e = this.content[this.content.length - 1]
    return !(e.breakAfter || (e instanceof jn && e.deco.endSide < 0))
  }
  getLine() {
    return (
      this.curLine ||
        (this.content.push((this.curLine = new De())), (this.atCursorPos = !0)),
      this.curLine
    )
  }
  flushBuffer(e = this.bufferMarks) {
    this.pendingBuffer &&
      (this.curLine.append(Ks(new nr(-1), e), e.length),
      (this.pendingBuffer = 0))
  }
  addBlockWidget(e) {
    this.flushBuffer(), (this.curLine = null), this.content.push(e)
  }
  finish(e) {
    this.pendingBuffer && e <= this.bufferMarks.length
      ? this.flushBuffer()
      : (this.pendingBuffer = 0),
      !this.posCovered() &&
        !(
          e &&
          this.content.length &&
          this.content[this.content.length - 1] instanceof jn
        ) &&
        this.getLine()
  }
  buildText(e, t, i) {
    for (; e > 0; ) {
      if (this.textOff == this.text.length) {
        let { value: s, lineBreak: o, done: a } = this.cursor.next(this.skip)
        if (((this.skip = 0), a))
          throw new Error('Ran out of text content when drawing inline views')
        if (o) {
          this.posCovered() || this.getLine(),
            this.content.length
              ? (this.content[this.content.length - 1].breakAfter = 1)
              : (this.breakAtStart = 1),
            this.flushBuffer(),
            (this.curLine = null),
            (this.atCursorPos = !0),
            e--
          continue
        } else (this.text = s), (this.textOff = 0)
      }
      let r = Math.min(
        this.text.length - this.textOff,
        e,
        512
        /* T.Chunk */
      )
      this.flushBuffer(t.slice(t.length - i)),
        this.getLine().append(
          Ks(new wn(this.text.slice(this.textOff, this.textOff + r)), t),
          i
        ),
        (this.atCursorPos = !0),
        (this.textOff += r),
        (e -= r),
        (i = 0)
    }
  }
  span(e, t, i, r) {
    this.buildText(t - e, i, r),
      (this.pos = t),
      this.openStart < 0 && (this.openStart = r)
  }
  point(e, t, i, r, s, o) {
    if (this.disallowBlockEffectsFor[o] && i instanceof Hn) {
      if (i.block)
        throw new RangeError(
          'Block decorations may not be specified via plugins'
        )
      if (t > this.doc.lineAt(this.pos).to)
        throw new RangeError(
          'Decorations that replace line breaks may not be specified via plugins'
        )
    }
    let a = t - e
    if (i instanceof Hn)
      if (i.block)
        i.startSide > 0 && !this.posCovered() && this.getLine(),
          this.addBlockWidget(new jn(i.widget || new bp('div'), a, i))
      else {
        let l = Vn.create(i.widget || new bp('span'), a, a ? 0 : i.startSide),
          c =
            this.atCursorPos &&
            !l.isEditable &&
            s <= r.length &&
            (e < t || i.startSide > 0),
          u = !l.isEditable && (e < t || s > r.length || i.startSide <= 0),
          f = this.getLine()
        this.pendingBuffer == 2 &&
          !c &&
          !l.isEditable &&
          (this.pendingBuffer = 0),
          this.flushBuffer(r),
          c &&
            (f.append(Ks(new nr(1), r), s),
            (s = r.length + Math.max(0, s - r.length))),
          f.append(Ks(l, r), s),
          (this.atCursorPos = u),
          (this.pendingBuffer = u ? (e < t || s > r.length ? 1 : 2) : 0),
          this.pendingBuffer && (this.bufferMarks = r.slice())
      }
    else
      this.doc.lineAt(this.pos).from == this.pos &&
        this.getLine().addLineDeco(i)
    a &&
      (this.textOff + a <= this.text.length
        ? (this.textOff += a)
        : ((this.skip += a - (this.text.length - this.textOff)),
          (this.text = ''),
          (this.textOff = 0)),
      (this.pos = t)),
      this.openStart < 0 && (this.openStart = s)
  }
  static build(e, t, i, r, s) {
    let o = new Gr(e, t, i, s)
    return (
      (o.openEnd = fe.spans(r, t, i, o)),
      o.openStart < 0 && (o.openStart = o.openEnd),
      o.finish(o.openEnd),
      o
    )
  }
}
function Ks(n, e) {
  for (let t of e) n = new $n(t, [n], n.length)
  return n
}
class bp extends un {
  constructor(e) {
    super(), (this.tag = e)
  }
  eq(e) {
    return e.tag == this.tag
  }
  toDOM() {
    return document.createElement(this.tag)
  }
  updateDOM(e) {
    return e.nodeName.toLowerCase() == this.tag
  }
  get isHidden() {
    return !0
  }
}
const Zy = /* @__PURE__ */ q.define(),
  Ay = /* @__PURE__ */ q.define(),
  Ry = /* @__PURE__ */ q.define(),
  Ey = /* @__PURE__ */ q.define(),
  Yu = /* @__PURE__ */ q.define(),
  Dy = /* @__PURE__ */ q.define(),
  Xy = /* @__PURE__ */ q.define(),
  Yy = /* @__PURE__ */ q.define({
    combine: (n) => n.some((e) => e)
  }),
  Iy = /* @__PURE__ */ q.define({
    combine: (n) => n.some((e) => e)
  })
class Ui {
  constructor(e, t = 'nearest', i = 'nearest', r = 5, s = 5, o = !1) {
    ;(this.range = e),
      (this.y = t),
      (this.x = i),
      (this.yMargin = r),
      (this.xMargin = s),
      (this.isSnapshot = o)
  }
  map(e) {
    return e.empty
      ? this
      : new Ui(
          this.range.map(e),
          this.y,
          this.x,
          this.yMargin,
          this.xMargin,
          this.isSnapshot
        )
  }
  clip(e) {
    return this.range.to <= e.doc.length
      ? this
      : new Ui(
          _.cursor(e.doc.length),
          this.y,
          this.x,
          this.yMargin,
          this.xMargin,
          this.isSnapshot
        )
  }
}
const Js = /* @__PURE__ */ ne.define({ map: (n, e) => n.map(e) })
function Rt(n, e, t) {
  let i = n.facet(Ey)
  i.length
    ? i[0](e)
    : window.onerror
      ? window.onerror(String(e), t, void 0, void 0, e)
      : t
        ? console.error(t + ':', e)
        : console.error(e)
}
const $l = /* @__PURE__ */ q.define({ combine: (n) => (n.length ? n[0] : !0) })
let kT = 0
const Vr = /* @__PURE__ */ q.define()
class Re {
  constructor(e, t, i, r, s) {
    ;(this.id = e),
      (this.create = t),
      (this.domEventHandlers = i),
      (this.domEventObservers = r),
      (this.extension = s(this))
  }
  /**
  Define a plugin from a constructor function that creates the
  plugin's value, given an editor view.
  */
  static define(e, t) {
    const {
      eventHandlers: i,
      eventObservers: r,
      provide: s,
      decorations: o
    } = t || {}
    return new Re(kT++, e, i, r, (a) => {
      let l = [Vr.of(a)]
      return (
        o &&
          l.push(
            rs.of((c) => {
              let u = c.plugin(a)
              return u ? o(u) : K.none
            })
          ),
        s && l.push(s(a)),
        l
      )
    })
  }
  /**
  Create a plugin for a class whose constructor takes a single
  editor view as argument.
  */
  static fromClass(e, t) {
    return Re.define((i) => new e(i), t)
  }
}
class oc {
  constructor(e) {
    ;(this.spec = e), (this.mustUpdate = null), (this.value = null)
  }
  update(e) {
    if (this.value) {
      if (this.mustUpdate) {
        let t = this.mustUpdate
        if (((this.mustUpdate = null), this.value.update))
          try {
            this.value.update(t)
          } catch (i) {
            if (
              (Rt(t.state, i, 'CodeMirror plugin crashed'), this.value.destroy)
            )
              try {
                this.value.destroy()
              } catch {}
            this.deactivate()
          }
      }
    } else if (this.spec)
      try {
        this.value = this.spec.create(e)
      } catch (t) {
        Rt(e.state, t, 'CodeMirror plugin crashed'), this.deactivate()
      }
    return this
  }
  destroy(e) {
    var t
    if (!((t = this.value) === null || t === void 0) && t.destroy)
      try {
        this.value.destroy()
      } catch (i) {
        Rt(e.state, i, 'CodeMirror plugin crashed')
      }
  }
  deactivate() {
    this.spec = this.value = null
  }
}
const Ny = /* @__PURE__ */ q.define(),
  Wf = /* @__PURE__ */ q.define(),
  rs = /* @__PURE__ */ q.define(),
  jf = /* @__PURE__ */ q.define(),
  My = /* @__PURE__ */ q.define()
function vp(n, e, t) {
  let i = n.state.facet(My)
  if (!i.length) return i
  let r = i.map((o) => (o instanceof Function ? o(n) : o)),
    s = []
  return (
    fe.spans(r, e, t, {
      point() {},
      span(o, a, l, c) {
        let u = s
        for (let f = l.length - 1; f >= 0; f--, c--) {
          let h = l[f].spec.bidiIsolate,
            d
          if (h != null)
            if (
              c > 0 &&
              u.length &&
              (d = u[u.length - 1]).to == o &&
              d.direction == h
            )
              (d.to = a), (u = d.inner)
            else {
              let O = { from: o, to: a, direction: h, inner: [] }
              u.push(O), (u = O.inner)
            }
        }
      }
    }),
    s
  )
}
const Vy = /* @__PURE__ */ q.define()
function Wy(n) {
  let e = 0,
    t = 0,
    i = 0,
    r = 0
  for (let s of n.state.facet(Vy)) {
    let o = s(n)
    o &&
      (o.left != null && (e = Math.max(e, o.left)),
      o.right != null && (t = Math.max(t, o.right)),
      o.top != null && (i = Math.max(i, o.top)),
      o.bottom != null && (r = Math.max(r, o.bottom)))
  }
  return { left: e, right: t, top: i, bottom: r }
}
const Wr = /* @__PURE__ */ q.define()
class Et {
  constructor(e, t, i, r) {
    ;(this.fromA = e), (this.toA = t), (this.fromB = i), (this.toB = r)
  }
  join(e) {
    return new Et(
      Math.min(this.fromA, e.fromA),
      Math.max(this.toA, e.toA),
      Math.min(this.fromB, e.fromB),
      Math.max(this.toB, e.toB)
    )
  }
  addToSet(e) {
    let t = e.length,
      i = this
    for (; t > 0; t--) {
      let r = e[t - 1]
      if (!(r.fromA > i.toA)) {
        if (r.toA < i.fromA) break
        ;(i = i.join(r)), e.splice(t - 1, 1)
      }
    }
    return e.splice(t, 0, i), e
  }
  static extendWithRanges(e, t) {
    if (t.length == 0) return e
    let i = []
    for (let r = 0, s = 0, o = 0, a = 0; ; r++) {
      let l = r == e.length ? null : e[r],
        c = o - a,
        u = l ? l.fromB : 1e9
      for (; s < t.length && t[s] < u; ) {
        let f = t[s],
          h = t[s + 1],
          d = Math.max(a, f),
          O = Math.min(u, h)
        if ((d <= O && new Et(d + c, O + c, d, O).addToSet(i), h > u)) break
        s += 2
      }
      if (!l) return i
      new Et(l.fromA, l.toA, l.fromB, l.toB).addToSet(i),
        (o = l.toA),
        (a = l.toB)
    }
  }
}
class Za {
  constructor(e, t, i) {
    ;(this.view = e),
      (this.state = t),
      (this.transactions = i),
      (this.flags = 0),
      (this.startState = e.state),
      (this.changes = Xe.empty(this.startState.doc.length))
    for (let s of i) this.changes = this.changes.compose(s.changes)
    let r = []
    this.changes.iterChangedRanges((s, o, a, l) => r.push(new Et(s, o, a, l))),
      (this.changedRanges = r)
  }
  /**
  @internal
  */
  static create(e, t, i) {
    return new Za(e, t, i)
  }
  /**
  Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
  [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
  update.
  */
  get viewportChanged() {
    return (this.flags & 4) > 0
  }
  /**
  Indicates whether the height of a block element in the editor
  changed in this update.
  */
  get heightChanged() {
    return (this.flags & 2) > 0
  }
  /**
  Returns true when the document was modified or the size of the
  editor, or elements within the editor, changed.
  */
  get geometryChanged() {
    return this.docChanged || (this.flags & 10) > 0
  }
  /**
  True when this update indicates a focus change.
  */
  get focusChanged() {
    return (this.flags & 1) > 0
  }
  /**
  Whether the document changed in this update.
  */
  get docChanged() {
    return !this.changes.empty
  }
  /**
  Whether the selection was explicitly set in this update.
  */
  get selectionSet() {
    return this.transactions.some((e) => e.selection)
  }
  /**
  @internal
  */
  get empty() {
    return this.flags == 0 && this.transactions.length == 0
  }
}
var Pe = /* @__PURE__ */ (function (n) {
  return (n[(n.LTR = 0)] = 'LTR'), (n[(n.RTL = 1)] = 'RTL'), n
})(Pe || (Pe = {}))
const ss = Pe.LTR,
  jy = Pe.RTL
function By(n) {
  let e = []
  for (let t = 0; t < n.length; t++) e.push(1 << +n[t])
  return e
}
const TT = /* @__PURE__ */ By(
    '88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008'
  ),
  CT = /* @__PURE__ */ By(
    '4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333'
  ),
  Iu = /* @__PURE__ */ Object.create(null),
  Bt = []
for (let n of ['()', '[]', '{}']) {
  let e = /* @__PURE__ */ n.charCodeAt(0),
    t = /* @__PURE__ */ n.charCodeAt(1)
  ;(Iu[e] = t), (Iu[t] = -e)
}
function _T(n) {
  return n <= 247
    ? TT[n]
    : 1424 <= n && n <= 1524
      ? 2
      : 1536 <= n && n <= 1785
        ? CT[n - 1536]
        : 1774 <= n && n <= 2220
          ? 4
          : 8192 <= n && n <= 8203
            ? 256
            : 64336 <= n && n <= 65023
              ? 4
              : n == 8204
                ? 256
                : 1
}
const ZT = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/
class Wn {
  /**
  The direction of this span.
  */
  get dir() {
    return this.level % 2 ? jy : ss
  }
  /**
  @internal
  */
  constructor(e, t, i) {
    ;(this.from = e), (this.to = t), (this.level = i)
  }
  /**
  @internal
  */
  side(e, t) {
    return (this.dir == t) == e ? this.to : this.from
  }
  /**
  @internal
  */
  static find(e, t, i, r) {
    let s = -1
    for (let o = 0; o < e.length; o++) {
      let a = e[o]
      if (a.from <= t && a.to >= t) {
        if (a.level == i) return o
        ;(s < 0 ||
          (r != 0 ? (r < 0 ? a.from < t : a.to > t) : e[s].level > a.level)) &&
          (s = o)
      }
    }
    if (s < 0) throw new RangeError('Index out of range')
    return s
  }
}
function Ly(n, e) {
  if (n.length != e.length) return !1
  for (let t = 0; t < n.length; t++) {
    let i = n[t],
      r = e[t]
    if (
      i.from != r.from ||
      i.to != r.to ||
      i.direction != r.direction ||
      !Ly(i.inner, r.inner)
    )
      return !1
  }
  return !0
}
const pe = []
function AT(n, e, t, i, r) {
  for (let s = 0; s <= i.length; s++) {
    let o = s ? i[s - 1].to : e,
      a = s < i.length ? i[s].from : t,
      l = s ? 256 : r
    for (let c = o, u = l, f = l; c < a; c++) {
      let h = _T(n.charCodeAt(c))
      h == 512 ? (h = u) : h == 8 && f == 4 && (h = 16),
        (pe[c] = h == 4 ? 2 : h),
        h & 7 && (f = h),
        (u = h)
    }
    for (let c = o, u = l, f = l; c < a; c++) {
      let h = pe[c]
      if (h == 128)
        c < a - 1 && u == pe[c + 1] && u & 24 ? (h = pe[c] = u) : (pe[c] = 256)
      else if (h == 64) {
        let d = c + 1
        for (; d < a && pe[d] == 64; ) d++
        let O = (c && u == 8) || (d < t && pe[d] == 8) ? (f == 1 ? 1 : 8) : 256
        for (let m = c; m < d; m++) pe[m] = O
        c = d - 1
      } else h == 8 && f == 1 && (pe[c] = 1)
      ;(u = h), h & 7 && (f = h)
    }
  }
}
function RT(n, e, t, i, r) {
  let s = r == 1 ? 2 : 1
  for (let o = 0, a = 0, l = 0; o <= i.length; o++) {
    let c = o ? i[o - 1].to : e,
      u = o < i.length ? i[o].from : t
    for (let f = c, h, d, O; f < u; f++)
      if ((d = Iu[(h = n.charCodeAt(f))]))
        if (d < 0) {
          for (let m = a - 3; m >= 0; m -= 3)
            if (Bt[m + 1] == -d) {
              let b = Bt[m + 2],
                x = b & 2 ? r : b & 4 ? (b & 1 ? s : r) : 0
              x && (pe[f] = pe[Bt[m]] = x), (a = m)
              break
            }
        } else {
          if (Bt.length == 189) break
          ;(Bt[a++] = f), (Bt[a++] = h), (Bt[a++] = l)
        }
      else if ((O = pe[f]) == 2 || O == 1) {
        let m = O == r
        l = m ? 0 : 1
        for (let b = a - 3; b >= 0; b -= 3) {
          let x = Bt[b + 2]
          if (x & 2) break
          if (m) Bt[b + 2] |= 2
          else {
            if (x & 4) break
            Bt[b + 2] |= 4
          }
        }
      }
  }
}
function ET(n, e, t, i) {
  for (let r = 0, s = i; r <= t.length; r++) {
    let o = r ? t[r - 1].to : n,
      a = r < t.length ? t[r].from : e
    for (let l = o; l < a; ) {
      let c = pe[l]
      if (c == 256) {
        let u = l + 1
        for (;;)
          if (u == a) {
            if (r == t.length) break
            ;(u = t[r++].to), (a = r < t.length ? t[r].from : e)
          } else if (pe[u] == 256) u++
          else break
        let f = s == 1,
          h = (u < e ? pe[u] : i) == 1,
          d = f == h ? (f ? 1 : 2) : i
        for (let O = u, m = r, b = m ? t[m - 1].to : n; O > l; )
          O == b && ((O = t[--m].from), (b = m ? t[m - 1].to : n)),
            (pe[--O] = d)
        l = u
      } else (s = c), l++
    }
  }
}
function Nu(n, e, t, i, r, s, o) {
  let a = i % 2 ? 2 : 1
  if (i % 2 == r % 2)
    for (let l = e, c = 0; l < t; ) {
      let u = !0,
        f = !1
      if (c == s.length || l < s[c].from) {
        let m = pe[l]
        m != a && ((u = !1), (f = m == 16))
      }
      let h = !u && a == 1 ? [] : null,
        d = u ? i : i + 1,
        O = l
      e: for (;;)
        if (c < s.length && O == s[c].from) {
          if (f) break e
          let m = s[c]
          if (!u)
            for (let b = m.to, x = c + 1; ; ) {
              if (b == t) break e
              if (x < s.length && s[x].from == b) b = s[x++].to
              else {
                if (pe[b] == a) break e
                break
              }
            }
          if ((c++, h)) h.push(m)
          else {
            m.from > l && o.push(new Wn(l, m.from, d))
            let b = (m.direction == ss) != !(d % 2)
            Mu(n, b ? i + 1 : i, r, m.inner, m.from, m.to, o), (l = m.to)
          }
          O = m.to
        } else {
          if (O == t || (u ? pe[O] != a : pe[O] == a)) break
          O++
        }
      h ? Nu(n, l, O, i + 1, r, h, o) : l < O && o.push(new Wn(l, O, d)),
        (l = O)
    }
  else
    for (let l = t, c = s.length; l > e; ) {
      let u = !0,
        f = !1
      if (!c || l > s[c - 1].to) {
        let m = pe[l - 1]
        m != a && ((u = !1), (f = m == 16))
      }
      let h = !u && a == 1 ? [] : null,
        d = u ? i : i + 1,
        O = l
      e: for (;;)
        if (c && O == s[c - 1].to) {
          if (f) break e
          let m = s[--c]
          if (!u)
            for (let b = m.from, x = c; ; ) {
              if (b == e) break e
              if (x && s[x - 1].to == b) b = s[--x].from
              else {
                if (pe[b - 1] == a) break e
                break
              }
            }
          if (h) h.push(m)
          else {
            m.to < l && o.push(new Wn(m.to, l, d))
            let b = (m.direction == ss) != !(d % 2)
            Mu(n, b ? i + 1 : i, r, m.inner, m.from, m.to, o), (l = m.from)
          }
          O = m.from
        } else {
          if (O == e || (u ? pe[O - 1] != a : pe[O - 1] == a)) break
          O--
        }
      h ? Nu(n, O, l, i + 1, r, h, o) : O < l && o.push(new Wn(O, l, d)),
        (l = O)
    }
}
function Mu(n, e, t, i, r, s, o) {
  let a = e % 2 ? 2 : 1
  AT(n, r, s, i, a), RT(n, r, s, i, a), ET(r, s, i, a), Nu(n, r, s, e, t, i, o)
}
function DT(n, e, t) {
  if (!n) return [new Wn(0, 0, e == jy ? 1 : 0)]
  if (e == ss && !t.length && !ZT.test(n)) return Uy(n.length)
  if (t.length) for (; n.length > pe.length; ) pe[pe.length] = 256
  let i = [],
    r = e == ss ? 0 : 1
  return Mu(n, r, r, t, 0, n.length, i), i
}
function Uy(n) {
  return [new Wn(0, n, 0)]
}
let qy = ''
function XT(n, e, t, i, r) {
  var s
  let o = i.head - n.from,
    a = -1
  if (o == 0) {
    if (!r || !n.length) return null
    e[0].level != t && ((o = e[0].side(!1, t)), (a = 0))
  } else if (o == n.length) {
    if (r) return null
    let h = e[e.length - 1]
    h.level != t && ((o = h.side(!0, t)), (a = e.length - 1))
  }
  a < 0 &&
    (a = Wn.find(
      e,
      o,
      (s = i.bidiLevel) !== null && s !== void 0 ? s : -1,
      i.assoc
    ))
  let l = e[a]
  o == l.side(r, t) && ((l = e[(a += r ? 1 : -1)]), (o = l.side(!r, t)))
  let c = r == (l.dir == t),
    u = et(n.text, o, c)
  if (((qy = n.text.slice(Math.min(o, u), Math.max(o, u))), u != l.side(r, t)))
    return _.cursor(u + n.from, c ? -1 : 1, l.level)
  let f = a == (r ? e.length - 1 : 0) ? null : e[a + (r ? 1 : -1)]
  return !f && l.level != t
    ? _.cursor(r ? n.to : n.from, r ? -1 : 1, t)
    : f && f.level < l.level
      ? _.cursor(f.side(!r, t) + n.from, r ? 1 : -1, f.level)
      : _.cursor(u + n.from, r ? -1 : 1, l.level)
}
class Sp extends xe {
  get length() {
    return this.view.state.doc.length
  }
  constructor(e) {
    super(),
      (this.view = e),
      (this.decorations = []),
      (this.dynamicDecorationMap = []),
      (this.domChanged = null),
      (this.hasComposition = null),
      (this.markedForComposition = /* @__PURE__ */ new Set()),
      (this.minWidth = 0),
      (this.minWidthFrom = 0),
      (this.minWidthTo = 0),
      (this.impreciseAnchor = null),
      (this.impreciseHead = null),
      (this.forceSelection = !1),
      (this.lastUpdate = Date.now()),
      this.setDOM(e.contentDOM),
      (this.children = [new De()]),
      this.children[0].setParent(this),
      this.updateDeco(),
      this.updateInner([new Et(0, 0, 0, e.state.doc.length)], 0, null)
  }
  // Update the document view to a given state.
  update(e) {
    var t
    let i = e.changedRanges
    this.minWidth > 0 &&
      i.length &&
      (i.every(
        ({ fromA: c, toA: u }) => u < this.minWidthFrom || c > this.minWidthTo
      )
        ? ((this.minWidthFrom = e.changes.mapPos(this.minWidthFrom, 1)),
          (this.minWidthTo = e.changes.mapPos(this.minWidthTo, 1)))
        : (this.minWidth = this.minWidthFrom = this.minWidthTo = 0))
    let r = -1
    this.view.inputState.composing >= 0 &&
      (!((t = this.domChanged) === null || t === void 0) && t.newSel
        ? (r = this.domChanged.newSel.head)
        : !jT(e.changes, this.hasComposition) &&
          !e.selectionSet &&
          (r = e.state.selection.main.head))
    let s = r > -1 ? IT(this.view, e.changes, r) : null
    if (((this.domChanged = null), this.hasComposition)) {
      this.markedForComposition.clear()
      let { from: c, to: u } = this.hasComposition
      i = new Et(
        c,
        u,
        e.changes.mapPos(c, -1),
        e.changes.mapPos(u, 1)
      ).addToSet(i.slice())
    }
    ;(this.hasComposition = s
      ? { from: s.range.fromB, to: s.range.toB }
      : null),
      (G.ie || G.chrome) &&
        !s &&
        e &&
        e.state.doc.lines != e.startState.doc.lines &&
        (this.forceSelection = !0)
    let o = this.decorations,
      a = this.updateDeco(),
      l = VT(o, a, e.changes)
    return (
      (i = Et.extendWithRanges(i, l)),
      !(this.flags & 7) && i.length == 0
        ? !1
        : (this.updateInner(i, e.startState.doc.length, s),
          e.transactions.length && (this.lastUpdate = Date.now()),
          !0)
    )
  }
  // Used by update and the constructor do perform the actual DOM
  // update
  updateInner(e, t, i) {
    ;(this.view.viewState.mustMeasureContent = !0), this.updateChildren(e, t, i)
    let { observer: r } = this.view
    r.ignore(() => {
      ;(this.dom.style.height =
        this.view.viewState.contentHeight / this.view.scaleY + 'px'),
        (this.dom.style.flexBasis = this.minWidth ? this.minWidth + 'px' : '')
      let o =
        G.chrome || G.ios
          ? { node: r.selectionRange.focusNode, written: !1 }
          : void 0
      this.sync(this.view, o),
        (this.flags &= -8),
        o &&
          (o.written || r.selectionRange.focusNode != o.node) &&
          (this.forceSelection = !0),
        (this.dom.style.height = '')
    }),
      this.markedForComposition.forEach(
        (o) => (o.flags &= -9)
        /* ViewFlag.Composition */
      )
    let s = []
    if (
      this.view.viewport.from ||
      this.view.viewport.to < this.view.state.doc.length
    )
      for (let o of this.children)
        o instanceof jn && o.widget instanceof xp && s.push(o.dom)
    r.updateGaps(s)
  }
  updateChildren(e, t, i) {
    let r = i ? i.range.addToSet(e.slice()) : e,
      s = this.childCursor(t)
    for (let o = r.length - 1; ; o--) {
      let a = o >= 0 ? r[o] : null
      if (!a) break
      let { fromA: l, toA: c, fromB: u, toB: f } = a,
        h,
        d,
        O,
        m
      if (i && i.range.fromB < f && i.range.toB > u) {
        let Q = Gr.build(
            this.view.state.doc,
            u,
            i.range.fromB,
            this.decorations,
            this.dynamicDecorationMap
          ),
          P = Gr.build(
            this.view.state.doc,
            i.range.toB,
            f,
            this.decorations,
            this.dynamicDecorationMap
          )
        ;(d = Q.breakAtStart), (O = Q.openStart), (m = P.openEnd)
        let C = this.compositionView(i)
        P.breakAtStart
          ? (C.breakAfter = 1)
          : P.content.length &&
            C.merge(C.length, C.length, P.content[0], !1, P.openStart, 0) &&
            ((C.breakAfter = P.content[0].breakAfter), P.content.shift()),
          Q.content.length &&
            C.merge(0, 0, Q.content[Q.content.length - 1], !0, 0, Q.openEnd) &&
            Q.content.pop(),
          (h = Q.content.concat(C).concat(P.content))
      } else
        ({
          content: h,
          breakAtStart: d,
          openStart: O,
          openEnd: m
        } = Gr.build(
          this.view.state.doc,
          u,
          f,
          this.decorations,
          this.dynamicDecorationMap
        ))
      let { i: b, off: x } = s.findPos(c, 1),
        { i: w, off: T } = s.findPos(l, -1)
      wy(this, w, T, b, x, h, d, O, m)
    }
    i && this.fixCompositionDOM(i)
  }
  compositionView(e) {
    let t = new wn(e.text.nodeValue)
    t.flags |= 8
    for (let { deco: r } of e.marks) t = new $n(r, [t], t.length)
    let i = new De()
    return i.append(t, 0), i
  }
  fixCompositionDOM(e) {
    let t = (s, o) => {
        ;(o.flags |=
          8 |
          (o.children.some(
            (l) => l.flags & 7
            /* ViewFlag.Dirty */
          )
            ? 1
            : 0)),
          this.markedForComposition.add(o)
        let a = xe.get(s)
        a && a != o && (a.dom = null), o.setDOM(s)
      },
      i = this.childPos(e.range.fromB, 1),
      r = this.children[i.i]
    t(e.line, r)
    for (let s = e.marks.length - 1; s >= -1; s--)
      (i = r.childPos(i.off, 1)),
        (r = r.children[i.i]),
        t(s >= 0 ? e.marks[s].node : e.text, r)
  }
  // Sync the DOM selection to this.state.selection
  updateSelection(e = !1, t = !1) {
    ;(e || !this.view.observer.selectionRange.focusNode) &&
      this.view.observer.readSelectionRange()
    let i = this.view.root.activeElement,
      r = i == this.dom,
      s =
        !r &&
        Vo(this.dom, this.view.observer.selectionRange) &&
        !(i && this.dom.contains(i))
    if (!(r || t || s)) return
    let o = this.forceSelection
    this.forceSelection = !1
    let a = this.view.state.selection.main,
      l = this.moveToLine(this.domAtPos(a.anchor)),
      c = a.empty ? l : this.moveToLine(this.domAtPos(a.head))
    if (G.gecko && a.empty && !this.hasComposition && YT(l)) {
      let f = document.createTextNode('')
      this.view.observer.ignore(() =>
        l.node.insertBefore(f, l.node.childNodes[l.offset] || null)
      ),
        (l = c = new Ke(f, 0)),
        (o = !0)
    }
    let u = this.view.observer.selectionRange
    ;(o ||
      !u.focusNode ||
      !_a(l.node, l.offset, u.anchorNode, u.anchorOffset) ||
      !_a(c.node, c.offset, u.focusNode, u.focusOffset)) &&
      (this.view.observer.ignore(() => {
        G.android &&
          G.chrome &&
          this.dom.contains(u.focusNode) &&
          WT(u.focusNode, this.dom) &&
          (this.dom.blur(), this.dom.focus({ preventScroll: !0 }))
        let f = Ca(this.view.root)
        if (f)
          if (a.empty) {
            if (G.gecko) {
              let h = NT(l.node, l.offset)
              if (h && h != 3) {
                let d = Fy(l.node, l.offset, h == 1 ? 1 : -1)
                d && (l = new Ke(d.node, d.offset))
              }
            }
            f.collapse(l.node, l.offset),
              a.bidiLevel != null &&
                f.caretBidiLevel !== void 0 &&
                (f.caretBidiLevel = a.bidiLevel)
          } else if (f.extend) {
            f.collapse(l.node, l.offset)
            try {
              f.extend(c.node, c.offset)
            } catch {}
          } else {
            let h = document.createRange()
            a.anchor > a.head && ([l, c] = [c, l]),
              h.setEnd(c.node, c.offset),
              h.setStart(l.node, l.offset),
              f.removeAllRanges(),
              f.addRange(h)
          }
        s &&
          this.view.root.activeElement == this.dom &&
          (this.dom.blur(), i && i.focus())
      }),
      this.view.observer.setSelectionRange(l, c)),
      (this.impreciseAnchor = l.precise
        ? null
        : new Ke(u.anchorNode, u.anchorOffset)),
      (this.impreciseHead = c.precise
        ? null
        : new Ke(u.focusNode, u.focusOffset))
  }
  enforceCursorAssoc() {
    if (this.hasComposition) return
    let { view: e } = this,
      t = e.state.selection.main,
      i = Ca(e.root),
      { anchorNode: r, anchorOffset: s } = e.observer.selectionRange
    if (!i || !t.empty || !t.assoc || !i.modify) return
    let o = De.find(this, t.head)
    if (!o) return
    let a = o.posAtStart
    if (t.head == a || t.head == a + o.length) return
    let l = this.coordsAt(t.head, -1),
      c = this.coordsAt(t.head, 1)
    if (!l || !c || l.bottom > c.top) return
    let u = this.domAtPos(t.head + t.assoc)
    i.collapse(u.node, u.offset),
      i.modify('move', t.assoc < 0 ? 'forward' : 'backward', 'lineboundary'),
      e.observer.readSelectionRange()
    let f = e.observer.selectionRange
    e.docView.posFromDOM(f.anchorNode, f.anchorOffset) != t.from &&
      i.collapse(r, s)
  }
  // If a position is in/near a block widget, move it to a nearby text
  // line, since we don't want the cursor inside a block widget.
  moveToLine(e) {
    let t = this.dom,
      i
    if (e.node != t) return e
    for (let r = e.offset; !i && r < t.childNodes.length; r++) {
      let s = xe.get(t.childNodes[r])
      s instanceof De && (i = s.domAtPos(0))
    }
    for (let r = e.offset - 1; !i && r >= 0; r--) {
      let s = xe.get(t.childNodes[r])
      s instanceof De && (i = s.domAtPos(s.length))
    }
    return i ? new Ke(i.node, i.offset, !0) : e
  }
  nearest(e) {
    for (let t = e; t; ) {
      let i = xe.get(t)
      if (i && i.rootView == this) return i
      t = t.parentNode
    }
    return null
  }
  posFromDOM(e, t) {
    let i = this.nearest(e)
    if (!i)
      throw new RangeError(
        'Trying to find position for a DOM position outside of the document'
      )
    return i.localPosFromDOM(e, t) + i.posAtStart
  }
  domAtPos(e) {
    let { i: t, off: i } = this.childCursor().findPos(e, -1)
    for (; t < this.children.length - 1; ) {
      let r = this.children[t]
      if (i < r.length || r instanceof De) break
      t++, (i = 0)
    }
    return this.children[t].domAtPos(i)
  }
  coordsAt(e, t) {
    let i = null,
      r = 0
    for (let s = this.length, o = this.children.length - 1; o >= 0; o--) {
      let a = this.children[o],
        l = s - a.breakAfter,
        c = l - a.length
      if (l < e) break
      c <= e &&
        (c < e || a.covers(-1)) &&
        (l > e || a.covers(1)) &&
        (!i || (a instanceof De && !(i instanceof De && t >= 0))) &&
        ((i = a), (r = c)),
        (s = c)
    }
    return i ? i.coordsAt(e - r, t) : null
  }
  coordsForChar(e) {
    let { i: t, off: i } = this.childPos(e, 1),
      r = this.children[t]
    if (!(r instanceof De)) return null
    for (; r.children.length; ) {
      let { i: a, off: l } = r.childPos(i, 1)
      for (; ; a++) {
        if (a == r.children.length) return null
        if ((r = r.children[a]).length) break
      }
      i = l
    }
    if (!(r instanceof wn)) return null
    let s = et(r.text, i)
    if (s == i) return null
    let o = Si(r.dom, i, s).getClientRects()
    for (let a = 0; a < o.length; a++) {
      let l = o[a]
      if (a == o.length - 1 || (l.top < l.bottom && l.left < l.right)) return l
    }
    return null
  }
  measureVisibleLineHeights(e) {
    let t = [],
      { from: i, to: r } = e,
      s = this.view.contentDOM.clientWidth,
      o = s > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1,
      a = -1,
      l = this.view.textDirection == Pe.LTR
    for (let c = 0, u = 0; u < this.children.length; u++) {
      let f = this.children[u],
        h = c + f.length
      if (h > r) break
      if (c >= i) {
        let d = f.dom.getBoundingClientRect()
        if ((t.push(d.height), o)) {
          let O = f.dom.lastChild,
            m = O ? tr(O) : []
          if (m.length) {
            let b = m[m.length - 1],
              x = l ? b.right - d.left : d.right - b.left
            x > a &&
              ((a = x),
              (this.minWidth = s),
              (this.minWidthFrom = c),
              (this.minWidthTo = h))
          }
        }
      }
      c = h + f.breakAfter
    }
    return t
  }
  textDirectionAt(e) {
    let { i: t } = this.childPos(e, 1)
    return getComputedStyle(this.children[t].dom).direction == 'rtl'
      ? Pe.RTL
      : Pe.LTR
  }
  measureTextSize() {
    for (let s of this.children)
      if (s instanceof De) {
        let o = s.measureTextSize()
        if (o) return o
      }
    let e = document.createElement('div'),
      t,
      i,
      r
    return (
      (e.className = 'cm-line'),
      (e.style.width = '99999px'),
      (e.style.position = 'absolute'),
      (e.textContent = 'abc def ghi jkl mno pqr stu'),
      this.view.observer.ignore(() => {
        this.dom.appendChild(e)
        let s = tr(e.firstChild)[0]
        ;(t = e.getBoundingClientRect().height),
          (i = s ? s.width / 27 : 7),
          (r = s ? s.height : t),
          e.remove()
      }),
      { lineHeight: t, charWidth: i, textHeight: r }
    )
  }
  childCursor(e = this.length) {
    let t = this.children.length
    return t && (e -= this.children[--t].length), new xy(this.children, e, t)
  }
  computeBlockGapDeco() {
    let e = [],
      t = this.view.viewState
    for (let i = 0, r = 0; ; r++) {
      let s = r == t.viewports.length ? null : t.viewports[r],
        o = s ? s.from - 1 : this.length
      if (o > i) {
        let a =
          (t.lineBlockAt(o).bottom - t.lineBlockAt(i).top) / this.view.scaleY
        e.push(
          K.replace({
            widget: new xp(a),
            block: !0,
            inclusive: !0,
            isBlockGap: !0
          }).range(i, o)
        )
      }
      if (!s) break
      i = s.to + 1
    }
    return K.set(e)
  }
  updateDeco() {
    let e = this.view.state
      .facet(rs)
      .map((t, i) =>
        (this.dynamicDecorationMap[i] = typeof t == 'function')
          ? t(this.view)
          : t
      )
    for (let t = e.length; t < e.length + 3; t++)
      this.dynamicDecorationMap[t] = !1
    return (this.decorations = [
      ...e,
      this.computeBlockGapDeco(),
      this.view.viewState.lineGapDeco
    ])
  }
  scrollIntoView(e) {
    if (e.isSnapshot) {
      let c = this.view.viewState.lineBlockAt(e.range.head)
      ;(this.view.scrollDOM.scrollTop = c.top - e.yMargin),
        (this.view.scrollDOM.scrollLeft = e.xMargin)
      return
    }
    let { range: t } = e,
      i = this.coordsAt(t.head, t.empty ? t.assoc : t.head > t.anchor ? -1 : 1),
      r
    if (!i) return
    !t.empty &&
      (r = this.coordsAt(t.anchor, t.anchor > t.head ? -1 : 1)) &&
      (i = {
        left: Math.min(i.left, r.left),
        top: Math.min(i.top, r.top),
        right: Math.max(i.right, r.right),
        bottom: Math.max(i.bottom, r.bottom)
      })
    let s = Wy(this.view),
      o = {
        left: i.left - s.left,
        top: i.top - s.top,
        right: i.right + s.right,
        bottom: i.bottom + s.bottom
      },
      { offsetWidth: a, offsetHeight: l } = this.view.scrollDOM
    mT(
      this.view.scrollDOM,
      o,
      t.head < t.anchor ? -1 : 1,
      e.x,
      e.y,
      Math.max(Math.min(e.xMargin, a), -a),
      Math.max(Math.min(e.yMargin, l), -l),
      this.view.textDirection == Pe.LTR
    )
  }
}
function YT(n) {
  return (
    n.node.nodeType == 1 &&
    n.node.firstChild &&
    (n.offset == 0 ||
      n.node.childNodes[n.offset - 1].contentEditable == 'false') &&
    (n.offset == n.node.childNodes.length ||
      n.node.childNodes[n.offset].contentEditable == 'false')
  )
}
class xp extends un {
  constructor(e) {
    super(), (this.height = e)
  }
  toDOM() {
    let e = document.createElement('div')
    return this.updateDOM(e), e
  }
  eq(e) {
    return e.height == this.height
  }
  updateDOM(e) {
    return (e.style.height = this.height + 'px'), !0
  }
  get estimatedHeight() {
    return this.height
  }
}
function zy(n, e) {
  let t = n.observer.selectionRange,
    i = t.focusNode && Fy(t.focusNode, t.focusOffset, 0)
  if (!i) return null
  let r = e - i.offset
  return { from: r, to: r + i.node.nodeValue.length, node: i.node }
}
function IT(n, e, t) {
  let i = zy(n, t)
  if (!i) return null
  let { node: r, from: s, to: o } = i,
    a = r.nodeValue
  if (/[\n\r]/.test(a) || n.state.doc.sliceString(i.from, i.to) != a)
    return null
  let l = e.invertedDesc,
    c = new Et(l.mapPos(s), l.mapPos(o), s, o),
    u = []
  for (let f = r.parentNode; ; f = f.parentNode) {
    let h = xe.get(f)
    if (h instanceof $n) u.push({ node: f, deco: h.mark })
    else {
      if (
        h instanceof De ||
        (f.nodeName == 'DIV' && f.parentNode == n.contentDOM)
      )
        return { range: c, text: r, marks: u, line: f }
      if (f != n.contentDOM)
        u.push({
          node: f,
          deco: new ks({
            inclusive: !0,
            attributes: PT(f),
            tagName: f.tagName.toLowerCase()
          })
        })
      else return null
    }
  }
}
function Fy(n, e, t) {
  if (t <= 0)
    for (let i = n, r = e; ; ) {
      if (i.nodeType == 3) return { node: i, offset: r }
      if (i.nodeType == 1 && r > 0) (i = i.childNodes[r - 1]), (r = xn(i))
      else break
    }
  if (t >= 0)
    for (let i = n, r = e; ; ) {
      if (i.nodeType == 3) return { node: i, offset: r }
      if (i.nodeType == 1 && r < i.childNodes.length && t >= 0)
        (i = i.childNodes[r]), (r = 0)
      else break
    }
  return null
}
function NT(n, e) {
  return n.nodeType != 1
    ? 0
    : (e && n.childNodes[e - 1].contentEditable == 'false' ? 1 : 0) |
        (e < n.childNodes.length && n.childNodes[e].contentEditable == 'false'
          ? 2
          : 0)
}
let MT = class {
  constructor() {
    this.changes = []
  }
  compareRange(e, t) {
    Xu(e, t, this.changes)
  }
  comparePoint(e, t) {
    Xu(e, t, this.changes)
  }
}
function VT(n, e, t) {
  let i = new MT()
  return fe.compare(n, e, t, i), i.changes
}
function WT(n, e) {
  for (let t = n; t && t != e; t = t.assignedSlot || t.parentNode)
    if (t.nodeType == 1 && t.contentEditable == 'false') return !0
  return !1
}
function jT(n, e) {
  let t = !1
  return (
    e &&
      n.iterChangedRanges((i, r) => {
        i < e.to && r > e.from && (t = !0)
      }),
    t
  )
}
function BT(n, e, t = 1) {
  let i = n.charCategorizer(e),
    r = n.doc.lineAt(e),
    s = e - r.from
  if (r.length == 0) return _.cursor(e)
  s == 0 ? (t = 1) : s == r.length && (t = -1)
  let o = s,
    a = s
  t < 0 ? (o = et(r.text, s, !1)) : (a = et(r.text, s))
  let l = i(r.text.slice(o, a))
  for (; o > 0; ) {
    let c = et(r.text, o, !1)
    if (i(r.text.slice(c, o)) != l) break
    o = c
  }
  for (; a < r.length; ) {
    let c = et(r.text, a)
    if (i(r.text.slice(a, c)) != l) break
    a = c
  }
  return _.range(o + r.from, a + r.from)
}
function LT(n, e) {
  return e.left > n ? e.left - n : Math.max(0, n - e.right)
}
function UT(n, e) {
  return e.top > n ? e.top - n : Math.max(0, n - e.bottom)
}
function ac(n, e) {
  return n.top < e.bottom - 1 && n.bottom > e.top + 1
}
function wp(n, e) {
  return e < n.top
    ? { top: e, left: n.left, right: n.right, bottom: n.bottom }
    : n
}
function $p(n, e) {
  return e > n.bottom
    ? { top: n.top, left: n.left, right: n.right, bottom: e }
    : n
}
function Vu(n, e, t) {
  let i,
    r,
    s,
    o,
    a = !1,
    l,
    c,
    u,
    f
  for (let O = n.firstChild; O; O = O.nextSibling) {
    let m = tr(O)
    for (let b = 0; b < m.length; b++) {
      let x = m[b]
      r && ac(r, x) && (x = wp($p(x, r.bottom), r.top))
      let w = LT(e, x),
        T = UT(t, x)
      if (w == 0 && T == 0) return O.nodeType == 3 ? Pp(O, e, t) : Vu(O, e, t)
      if (!i || o > T || (o == T && s > w)) {
        ;(i = O), (r = x), (s = w), (o = T)
        let Q = T ? (t < x.top ? -1 : 1) : w ? (e < x.left ? -1 : 1) : 0
        a = !Q || (Q > 0 ? b < m.length - 1 : b > 0)
      }
      w == 0
        ? t > x.bottom && (!u || u.bottom < x.bottom)
          ? ((l = O), (u = x))
          : t < x.top && (!f || f.top > x.top) && ((c = O), (f = x))
        : u && ac(u, x)
          ? (u = $p(u, x.bottom))
          : f && ac(f, x) && (f = wp(f, x.top))
    }
  }
  if (
    (u && u.bottom >= t
      ? ((i = l), (r = u))
      : f && f.top <= t && ((i = c), (r = f)),
    !i)
  )
    return { node: n, offset: 0 }
  let h = Math.max(r.left, Math.min(r.right, e))
  if (i.nodeType == 3) return Pp(i, h, t)
  if (a && i.contentEditable != 'false') return Vu(i, h, t)
  let d =
    Array.prototype.indexOf.call(n.childNodes, i) +
    (e >= (r.left + r.right) / 2 ? 1 : 0)
  return { node: n, offset: d }
}
function Pp(n, e, t) {
  let i = n.nodeValue.length,
    r = -1,
    s = 1e9,
    o = 0
  for (let a = 0; a < i; a++) {
    let l = Si(n, a, a + 1).getClientRects()
    for (let c = 0; c < l.length; c++) {
      let u = l[c]
      if (u.top == u.bottom) continue
      o || (o = e - u.left)
      let f = (u.top > t ? u.top - t : t - u.bottom) - 1
      if (u.left - 1 <= e && u.right + 1 >= e && f < s) {
        let h = e >= (u.left + u.right) / 2,
          d = h
        if (
          ((G.chrome || G.gecko) &&
            Si(n, a).getBoundingClientRect().left == u.right &&
            (d = !h),
          f <= 0)
        )
          return { node: n, offset: a + (d ? 1 : 0) }
        ;(r = a + (d ? 1 : 0)), (s = f)
      }
    }
  }
  return { node: n, offset: r > -1 ? r : o > 0 ? n.nodeValue.length : 0 }
}
function Gy(n, e, t, i = -1) {
  var r, s
  let o = n.contentDOM.getBoundingClientRect(),
    a = o.top + n.viewState.paddingTop,
    l,
    { docHeight: c } = n.viewState,
    { x: u, y: f } = e,
    h = f - a
  if (h < 0) return 0
  if (h > c) return n.state.doc.length
  for (
    let Q = n.viewState.heightOracle.textHeight / 2, P = !1;
    (l = n.elementAtHeight(h)), l.type != st.Text;

  )
    for (; (h = i > 0 ? l.bottom + Q : l.top - Q), !(h >= 0 && h <= c); ) {
      if (P) return t ? null : 0
      ;(P = !0), (i = -i)
    }
  f = a + h
  let d = l.from
  if (d < n.viewport.from)
    return n.viewport.from == 0 ? 0 : t ? null : Qp(n, o, l, u, f)
  if (d > n.viewport.to)
    return n.viewport.to == n.state.doc.length
      ? n.state.doc.length
      : t
        ? null
        : Qp(n, o, l, u, f)
  let O = n.dom.ownerDocument,
    m = n.root.elementFromPoint ? n.root : O,
    b = m.elementFromPoint(u, f)
  b && !n.contentDOM.contains(b) && (b = null),
    b ||
      ((u = Math.max(o.left + 1, Math.min(o.right - 1, u))),
      (b = m.elementFromPoint(u, f)),
      b && !n.contentDOM.contains(b) && (b = null))
  let x,
    w = -1
  if (
    b &&
    ((r = n.docView.nearest(b)) === null || r === void 0
      ? void 0
      : r.isEditable) != !1
  ) {
    if (O.caretPositionFromPoint) {
      let Q = O.caretPositionFromPoint(u, f)
      Q && ({ offsetNode: x, offset: w } = Q)
    } else if (O.caretRangeFromPoint) {
      let Q = O.caretRangeFromPoint(u, f)
      Q &&
        (({ startContainer: x, startOffset: w } = Q),
        (!n.contentDOM.contains(x) ||
          (G.safari && qT(x, w, u)) ||
          (G.chrome && zT(x, w, u))) &&
          (x = void 0))
    }
  }
  if (!x || !n.docView.dom.contains(x)) {
    let Q = De.find(n.docView, d)
    if (!Q) return h > l.top + l.height / 2 ? l.to : l.from
    ;({ node: x, offset: w } = Vu(Q.dom, u, f))
  }
  let T = n.docView.nearest(x)
  if (!T) return null
  if (
    T.isWidget &&
    ((s = T.dom) === null || s === void 0 ? void 0 : s.nodeType) == 1
  ) {
    let Q = T.dom.getBoundingClientRect()
    return e.y < Q.top || (e.y <= Q.bottom && e.x <= (Q.left + Q.right) / 2)
      ? T.posAtStart
      : T.posAtEnd
  } else return T.localPosFromDOM(x, w) + T.posAtStart
}
function Qp(n, e, t, i, r) {
  let s = Math.round((i - e.left) * n.defaultCharacterWidth)
  if (n.lineWrapping && t.height > n.defaultLineHeight * 1.5) {
    let a = n.viewState.heightOracle.textHeight,
      l = Math.floor((r - t.top - (n.defaultLineHeight - a) * 0.5) / a)
    s += l * n.viewState.heightOracle.lineLength
  }
  let o = n.state.sliceDoc(t.from, t.to)
  return t.from + ku(o, s, n.state.tabSize)
}
function qT(n, e, t) {
  let i
  if (n.nodeType != 3 || e != (i = n.nodeValue.length)) return !1
  for (let r = n.nextSibling; r; r = r.nextSibling)
    if (r.nodeType != 1 || r.nodeName != 'BR') return !1
  return Si(n, i - 1, i).getBoundingClientRect().left > t
}
function zT(n, e, t) {
  if (e != 0) return !1
  for (let r = n; ; ) {
    let s = r.parentNode
    if (!s || s.nodeType != 1 || s.firstChild != r) return !1
    if (s.classList.contains('cm-line')) break
    r = s
  }
  let i =
    n.nodeType == 1
      ? n.getBoundingClientRect()
      : Si(n, 0, Math.max(n.nodeValue.length, 1)).getBoundingClientRect()
  return t - i.left > 5
}
function Wu(n, e) {
  let t = n.lineBlockAt(e)
  if (Array.isArray(t.type)) {
    for (let i of t.type)
      if (i.to > e || (i.to == e && (i.to == t.to || i.type == st.Text)))
        return i
  }
  return t
}
function FT(n, e, t, i) {
  let r = Wu(n, e.head),
    s =
      !i || r.type != st.Text || !(n.lineWrapping || r.widgetLineBreaks)
        ? null
        : n.coordsAtPos(e.assoc < 0 && e.head > r.from ? e.head - 1 : e.head)
  if (s) {
    let o = n.dom.getBoundingClientRect(),
      a = n.textDirectionAt(r.from),
      l = n.posAtCoords({
        x: t == (a == Pe.LTR) ? o.right - 1 : o.left + 1,
        y: (s.top + s.bottom) / 2
      })
    if (l != null) return _.cursor(l, t ? -1 : 1)
  }
  return _.cursor(t ? r.to : r.from, t ? -1 : 1)
}
function kp(n, e, t, i) {
  let r = n.state.doc.lineAt(e.head),
    s = n.bidiSpans(r),
    o = n.textDirectionAt(r.from)
  for (let a = e, l = null; ; ) {
    let c = XT(r, s, o, a, t),
      u = qy
    if (!c) {
      if (r.number == (t ? n.state.doc.lines : 1)) return a
      ;(u = `
`),
        (r = n.state.doc.line(r.number + (t ? 1 : -1))),
        (s = n.bidiSpans(r)),
        (c = _.cursor(t ? r.from : r.to))
    }
    if (l) {
      if (!l(u)) return a
    } else {
      if (!i) return c
      l = i(u)
    }
    a = c
  }
}
function GT(n, e, t) {
  let i = n.state.charCategorizer(e),
    r = i(t)
  return (s) => {
    let o = i(s)
    return r == we.Space && (r = o), r == o
  }
}
function HT(n, e, t, i) {
  let r = e.head,
    s = t ? 1 : -1
  if (r == (t ? n.state.doc.length : 0)) return _.cursor(r, e.assoc)
  let o = e.goalColumn,
    a,
    l = n.contentDOM.getBoundingClientRect(),
    c = n.coordsAtPos(r, e.assoc || -1),
    u = n.documentTop
  if (c) o == null && (o = c.left - l.left), (a = s < 0 ? c.top : c.bottom)
  else {
    let d = n.viewState.lineBlockAt(r)
    o == null &&
      (o = Math.min(l.right - l.left, n.defaultCharacterWidth * (r - d.from))),
      (a = (s < 0 ? d.top : d.bottom) + u)
  }
  let f = l.left + o,
    h = i ?? n.viewState.heightOracle.textHeight >> 1
  for (let d = 0; ; d += 10) {
    let O = a + (h + d) * s,
      m = Gy(n, { x: f, y: O }, !1, s)
    if (O < l.top || O > l.bottom || (s < 0 ? m < r : m > r)) {
      let b = n.docView.coordsForChar(m),
        x = !b || O < b.top ? -1 : 1
      return _.cursor(m, x, void 0, o)
    }
  }
}
function Wo(n, e, t) {
  for (;;) {
    let i = 0
    for (let r of n)
      r.between(e - 1, e + 1, (s, o, a) => {
        if (e > s && e < o) {
          let l = i || t || (e - s < o - e ? -1 : 1)
          ;(e = l < 0 ? s : o), (i = l)
        }
      })
    if (!i) return e
  }
}
function lc(n, e, t) {
  let i = Wo(
    n.state.facet(jf).map((r) => r(n)),
    t.from,
    e.head > t.from ? -1 : 1
  )
  return i == t.from ? t : _.cursor(i, i < t.from ? 1 : -1)
}
class KT {
  setSelectionOrigin(e) {
    ;(this.lastSelectionOrigin = e), (this.lastSelectionTime = Date.now())
  }
  constructor(e) {
    ;(this.view = e),
      (this.lastKeyCode = 0),
      (this.lastKeyTime = 0),
      (this.lastTouchTime = 0),
      (this.lastFocusTime = 0),
      (this.lastScrollTop = 0),
      (this.lastScrollLeft = 0),
      (this.pendingIOSKey = void 0),
      (this.lastSelectionOrigin = null),
      (this.lastSelectionTime = 0),
      (this.lastEscPress = 0),
      (this.lastContextMenu = 0),
      (this.scrollHandlers = []),
      (this.handlers = /* @__PURE__ */ Object.create(null)),
      (this.composing = -1),
      (this.compositionFirstChange = null),
      (this.compositionEndedAt = 0),
      (this.compositionPendingKey = !1),
      (this.compositionPendingChange = !1),
      (this.mouseSelection = null),
      (this.draggedContent = null),
      (this.handleEvent = this.handleEvent.bind(this)),
      (this.notifiedFocused = e.hasFocus),
      G.safari && e.contentDOM.addEventListener('input', () => null),
      G.gecko && pC(e.contentDOM.ownerDocument)
  }
  handleEvent(e) {
    !oC(this.view, e) ||
      this.ignoreDuringComposition(e) ||
      (e.type == 'keydown' && this.keydown(e)) ||
      this.runHandlers(e.type, e)
  }
  runHandlers(e, t) {
    let i = this.handlers[e]
    if (i) {
      for (let r of i.observers) r(this.view, t)
      for (let r of i.handlers) {
        if (t.defaultPrevented) break
        if (r(this.view, t)) {
          t.preventDefault()
          break
        }
      }
    }
  }
  ensureHandlers(e) {
    let t = JT(e),
      i = this.handlers,
      r = this.view.contentDOM
    for (let s in t)
      if (s != 'scroll') {
        let o = !t[s].handlers.length,
          a = i[s]
        a &&
          o != !a.handlers.length &&
          (r.removeEventListener(s, this.handleEvent), (a = null)),
          a || r.addEventListener(s, this.handleEvent, { passive: o })
      }
    for (let s in i)
      s != 'scroll' && !t[s] && r.removeEventListener(s, this.handleEvent)
    this.handlers = t
  }
  keydown(e) {
    if (
      ((this.lastKeyCode = e.keyCode),
      (this.lastKeyTime = Date.now()),
      e.keyCode == 9 && Date.now() < this.lastEscPress + 2e3)
    )
      return !0
    if (
      (e.keyCode != 27 &&
        Ky.indexOf(e.keyCode) < 0 &&
        (this.view.inputState.lastEscPress = 0),
      G.android &&
        G.chrome &&
        !e.synthetic &&
        (e.keyCode == 13 || e.keyCode == 8))
    )
      return this.view.observer.delayAndroidKey(e.key, e.keyCode), !0
    let t
    return G.ios &&
      !e.synthetic &&
      !e.altKey &&
      !e.metaKey &&
      (((t = Hy.find((i) => i.keyCode == e.keyCode)) && !e.ctrlKey) ||
        (eC.indexOf(e.key) > -1 && e.ctrlKey && !e.shiftKey))
      ? ((this.pendingIOSKey = t || e),
        setTimeout(() => this.flushIOSKey(), 250),
        !0)
      : (e.keyCode != 229 && this.view.observer.forceFlush(), !1)
  }
  flushIOSKey() {
    let e = this.pendingIOSKey
    return e
      ? ((this.pendingIOSKey = void 0),
        Li(this.view.contentDOM, e.key, e.keyCode))
      : !1
  }
  ignoreDuringComposition(e) {
    return /^key/.test(e.type)
      ? this.composing > 0
        ? !0
        : G.safari &&
            !G.ios &&
            this.compositionPendingKey &&
            Date.now() - this.compositionEndedAt < 100
          ? ((this.compositionPendingKey = !1), !0)
          : !1
      : !1
  }
  startMouseSelection(e) {
    this.mouseSelection && this.mouseSelection.destroy(),
      (this.mouseSelection = e)
  }
  update(e) {
    this.mouseSelection && this.mouseSelection.update(e),
      this.draggedContent &&
        e.docChanged &&
        (this.draggedContent = this.draggedContent.map(e.changes)),
      e.transactions.length && (this.lastKeyCode = this.lastSelectionTime = 0)
  }
  destroy() {
    this.mouseSelection && this.mouseSelection.destroy()
  }
}
function Tp(n, e) {
  return (t, i) => {
    try {
      return e.call(n, i, t)
    } catch (r) {
      Rt(t.state, r)
    }
  }
}
function JT(n) {
  let e = /* @__PURE__ */ Object.create(null)
  function t(i) {
    return e[i] || (e[i] = { observers: [], handlers: [] })
  }
  for (let i of n) {
    let r = i.spec
    if (r && r.domEventHandlers)
      for (let s in r.domEventHandlers) {
        let o = r.domEventHandlers[s]
        o && t(s).handlers.push(Tp(i.value, o))
      }
    if (r && r.domEventObservers)
      for (let s in r.domEventObservers) {
        let o = r.domEventObservers[s]
        o && t(s).observers.push(Tp(i.value, o))
      }
  }
  for (let i in Mt) t(i).handlers.push(Mt[i])
  for (let i in Vt) t(i).observers.push(Vt[i])
  return e
}
const Hy = [
    { key: 'Backspace', keyCode: 8, inputType: 'deleteContentBackward' },
    { key: 'Enter', keyCode: 13, inputType: 'insertParagraph' },
    { key: 'Enter', keyCode: 13, inputType: 'insertLineBreak' },
    { key: 'Delete', keyCode: 46, inputType: 'deleteContentForward' }
  ],
  eC = 'dthko',
  Ky = [16, 17, 18, 20, 91, 92, 224, 225],
  eo = 6
function to(n) {
  return Math.max(0, n) * 0.7 + 8
}
function tC(n, e) {
  return Math.max(
    Math.abs(n.clientX - e.clientX),
    Math.abs(n.clientY - e.clientY)
  )
}
class nC {
  constructor(e, t, i, r) {
    ;(this.view = e),
      (this.startEvent = t),
      (this.style = i),
      (this.mustSelect = r),
      (this.scrollSpeed = { x: 0, y: 0 }),
      (this.scrolling = -1),
      (this.lastEvent = t),
      (this.scrollParent = yT(e.contentDOM)),
      (this.atoms = e.state.facet(jf).map((o) => o(e)))
    let s = e.contentDOM.ownerDocument
    s.addEventListener('mousemove', (this.move = this.move.bind(this))),
      s.addEventListener('mouseup', (this.up = this.up.bind(this))),
      (this.extend = t.shiftKey),
      (this.multiple = e.state.facet(oe.allowMultipleSelections) && iC(e, t)),
      (this.dragging = sC(e, t) && nb(t) == 1 ? null : !1)
  }
  start(e) {
    this.dragging === !1 && this.select(e)
  }
  move(e) {
    var t
    if (e.buttons == 0) return this.destroy()
    if (this.dragging || (this.dragging == null && tC(this.startEvent, e) < 10))
      return
    this.select((this.lastEvent = e))
    let i = 0,
      r = 0,
      s = ((t = this.scrollParent) === null || t === void 0
        ? void 0
        : t.getBoundingClientRect()) || {
        left: 0,
        top: 0,
        right: this.view.win.innerWidth,
        bottom: this.view.win.innerHeight
      },
      o = Wy(this.view)
    e.clientX - o.left <= s.left + eo
      ? (i = -to(s.left - e.clientX))
      : e.clientX + o.right >= s.right - eo && (i = to(e.clientX - s.right)),
      e.clientY - o.top <= s.top + eo
        ? (r = -to(s.top - e.clientY))
        : e.clientY + o.bottom >= s.bottom - eo &&
          (r = to(e.clientY - s.bottom)),
      this.setScrollSpeed(i, r)
  }
  up(e) {
    this.dragging == null && this.select(this.lastEvent),
      this.dragging || e.preventDefault(),
      this.destroy()
  }
  destroy() {
    this.setScrollSpeed(0, 0)
    let e = this.view.contentDOM.ownerDocument
    e.removeEventListener('mousemove', this.move),
      e.removeEventListener('mouseup', this.up),
      (this.view.inputState.mouseSelection =
        this.view.inputState.draggedContent =
          null)
  }
  setScrollSpeed(e, t) {
    ;(this.scrollSpeed = { x: e, y: t }),
      e || t
        ? this.scrolling < 0 &&
          (this.scrolling = setInterval(() => this.scroll(), 50))
        : this.scrolling > -1 &&
          (clearInterval(this.scrolling), (this.scrolling = -1))
  }
  scroll() {
    this.scrollParent
      ? ((this.scrollParent.scrollLeft += this.scrollSpeed.x),
        (this.scrollParent.scrollTop += this.scrollSpeed.y))
      : this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y),
      this.dragging === !1 && this.select(this.lastEvent)
  }
  skipAtoms(e) {
    let t = null
    for (let i = 0; i < e.ranges.length; i++) {
      let r = e.ranges[i],
        s = null
      if (r.empty) {
        let o = Wo(this.atoms, r.from, 0)
        o != r.from && (s = _.cursor(o, -1))
      } else {
        let o = Wo(this.atoms, r.from, -1),
          a = Wo(this.atoms, r.to, 1)
        ;(o != r.from || a != r.to) &&
          (s = _.range(r.from == r.anchor ? o : a, r.from == r.head ? o : a))
      }
      s && (t || (t = e.ranges.slice()), (t[i] = s))
    }
    return t ? _.create(t, e.mainIndex) : e
  }
  select(e) {
    let { view: t } = this,
      i = this.skipAtoms(this.style.get(e, this.extend, this.multiple))
    ;(this.mustSelect ||
      !i.eq(t.state.selection) ||
      (i.main.assoc != t.state.selection.main.assoc && this.dragging === !1)) &&
      this.view.dispatch({
        selection: i,
        userEvent: 'select.pointer'
      }),
      (this.mustSelect = !1)
  }
  update(e) {
    this.style.update(e) && setTimeout(() => this.select(this.lastEvent), 20)
  }
}
function iC(n, e) {
  let t = n.state.facet(Zy)
  return t.length ? t[0](e) : G.mac ? e.metaKey : e.ctrlKey
}
function rC(n, e) {
  let t = n.state.facet(Ay)
  return t.length ? t[0](e) : G.mac ? !e.altKey : !e.ctrlKey
}
function sC(n, e) {
  let { main: t } = n.state.selection
  if (t.empty) return !1
  let i = Ca(n.root)
  if (!i || i.rangeCount == 0) return !0
  let r = i.getRangeAt(0).getClientRects()
  for (let s = 0; s < r.length; s++) {
    let o = r[s]
    if (
      o.left <= e.clientX &&
      o.right >= e.clientX &&
      o.top <= e.clientY &&
      o.bottom >= e.clientY
    )
      return !0
  }
  return !1
}
function oC(n, e) {
  if (!e.bubbles) return !0
  if (e.defaultPrevented) return !1
  for (let t = e.target, i; t != n.contentDOM; t = t.parentNode)
    if (!t || t.nodeType == 11 || ((i = xe.get(t)) && i.ignoreEvent(e)))
      return !1
  return !0
}
const Mt = /* @__PURE__ */ Object.create(null),
  Vt = /* @__PURE__ */ Object.create(null),
  Jy = (G.ie && G.ie_version < 15) || (G.ios && G.webkit_version < 604)
function aC(n) {
  let e = n.dom.parentNode
  if (!e) return
  let t = e.appendChild(document.createElement('textarea'))
  ;(t.style.cssText = 'position: fixed; left: -10000px; top: 10px'),
    t.focus(),
    setTimeout(() => {
      n.focus(), t.remove(), eb(n, t.value)
    }, 50)
}
function eb(n, e) {
  let { state: t } = n,
    i,
    r = 1,
    s = t.toText(e),
    o = s.lines == t.selection.ranges.length
  if (
    ju != null &&
    t.selection.ranges.every((l) => l.empty) &&
    ju == s.toString()
  ) {
    let l = -1
    i = t.changeByRange((c) => {
      let u = t.doc.lineAt(c.from)
      if (u.from == l) return { range: c }
      l = u.from
      let f = t.toText((o ? s.line(r++).text : e) + t.lineBreak)
      return {
        changes: { from: u.from, insert: f },
        range: _.cursor(c.from + f.length)
      }
    })
  } else
    o
      ? (i = t.changeByRange((l) => {
          let c = s.line(r++)
          return {
            changes: { from: l.from, to: l.to, insert: c.text },
            range: _.cursor(l.from + c.length)
          }
        }))
      : (i = t.replaceSelection(s))
  n.dispatch(i, {
    userEvent: 'input.paste',
    scrollIntoView: !0
  })
}
Vt.scroll = (n) => {
  ;(n.inputState.lastScrollTop = n.scrollDOM.scrollTop),
    (n.inputState.lastScrollLeft = n.scrollDOM.scrollLeft)
}
Mt.keydown = (n, e) => (
  n.inputState.setSelectionOrigin('select'),
  e.keyCode == 27 && (n.inputState.lastEscPress = Date.now()),
  !1
)
Vt.touchstart = (n, e) => {
  ;(n.inputState.lastTouchTime = Date.now()),
    n.inputState.setSelectionOrigin('select.pointer')
}
Vt.touchmove = (n) => {
  n.inputState.setSelectionOrigin('select.pointer')
}
Mt.mousedown = (n, e) => {
  if ((n.observer.flush(), n.inputState.lastTouchTime > Date.now() - 2e3))
    return !1
  let t = null
  for (let i of n.state.facet(Ry)) if (((t = i(n, e)), t)) break
  if ((!t && e.button == 0 && (t = uC(n, e)), t)) {
    let i = !n.hasFocus
    n.inputState.startMouseSelection(new nC(n, e, t, i)),
      i && n.observer.ignore(() => by(n.contentDOM))
    let r = n.inputState.mouseSelection
    if (r) return r.start(e), r.dragging === !1
  }
  return !1
}
function Cp(n, e, t, i) {
  if (i == 1) return _.cursor(e, t)
  if (i == 2) return BT(n.state, e, t)
  {
    let r = De.find(n.docView, e),
      s = n.state.doc.lineAt(r ? r.posAtEnd : e),
      o = r ? r.posAtStart : s.from,
      a = r ? r.posAtEnd : s.to
    return a < n.state.doc.length && a == s.to && a++, _.range(o, a)
  }
}
let tb = (n, e) => n >= e.top && n <= e.bottom,
  _p = (n, e, t) => tb(e, t) && n >= t.left && n <= t.right
function lC(n, e, t, i) {
  let r = De.find(n.docView, e)
  if (!r) return 1
  let s = e - r.posAtStart
  if (s == 0) return 1
  if (s == r.length) return -1
  let o = r.coordsAt(s, -1)
  if (o && _p(t, i, o)) return -1
  let a = r.coordsAt(s, 1)
  return a && _p(t, i, a) ? 1 : o && tb(i, o) ? -1 : 1
}
function Zp(n, e) {
  let t = n.posAtCoords({ x: e.clientX, y: e.clientY }, !1)
  return { pos: t, bias: lC(n, t, e.clientX, e.clientY) }
}
const cC = G.ie && G.ie_version <= 11
let Ap = null,
  Rp = 0,
  Ep = 0
function nb(n) {
  if (!cC) return n.detail
  let e = Ap,
    t = Ep
  return (
    (Ap = n),
    (Ep = Date.now()),
    (Rp =
      !e ||
      (t > Date.now() - 400 &&
        Math.abs(e.clientX - n.clientX) < 2 &&
        Math.abs(e.clientY - n.clientY) < 2)
        ? (Rp + 1) % 3
        : 1)
  )
}
function uC(n, e) {
  let t = Zp(n, e),
    i = nb(e),
    r = n.state.selection
  return {
    update(s) {
      s.docChanged &&
        ((t.pos = s.changes.mapPos(t.pos)), (r = r.map(s.changes)))
    },
    get(s, o, a) {
      let l = Zp(n, s),
        c,
        u = Cp(n, l.pos, l.bias, i)
      if (t.pos != l.pos && !o) {
        let f = Cp(n, t.pos, t.bias, i),
          h = Math.min(f.from, u.from),
          d = Math.max(f.to, u.to)
        u = h < u.from ? _.range(h, d) : _.range(d, h)
      }
      return o
        ? r.replaceRange(r.main.extend(u.from, u.to))
        : a && i == 1 && r.ranges.length > 1 && (c = fC(r, l.pos))
          ? c
          : a
            ? r.addRange(u)
            : _.create([u])
    }
  }
}
function fC(n, e) {
  for (let t = 0; t < n.ranges.length; t++) {
    let { from: i, to: r } = n.ranges[t]
    if (i <= e && r >= e)
      return _.create(
        n.ranges.slice(0, t).concat(n.ranges.slice(t + 1)),
        n.mainIndex == t ? 0 : n.mainIndex - (n.mainIndex > t ? 1 : 0)
      )
  }
  return null
}
Mt.dragstart = (n, e) => {
  let {
    selection: { main: t }
  } = n.state
  if (e.target.draggable) {
    let r = n.docView.nearest(e.target)
    if (r && r.isWidget) {
      let s = r.posAtStart,
        o = s + r.length
      ;(s >= t.to || o <= t.from) && (t = _.range(s, o))
    }
  }
  let { inputState: i } = n
  return (
    i.mouseSelection && (i.mouseSelection.dragging = !0),
    (i.draggedContent = t),
    e.dataTransfer &&
      (e.dataTransfer.setData('Text', n.state.sliceDoc(t.from, t.to)),
      (e.dataTransfer.effectAllowed = 'copyMove')),
    !1
  )
}
Mt.dragend = (n) => ((n.inputState.draggedContent = null), !1)
function Dp(n, e, t, i) {
  if (!t) return
  let r = n.posAtCoords({ x: e.clientX, y: e.clientY }, !1),
    { draggedContent: s } = n.inputState,
    o = i && s && rC(n, e) ? { from: s.from, to: s.to } : null,
    a = { from: r, insert: t },
    l = n.state.changes(o ? [o, a] : a)
  n.focus(),
    n.dispatch({
      changes: l,
      selection: { anchor: l.mapPos(r, -1), head: l.mapPos(r, 1) },
      userEvent: o ? 'move.drop' : 'input.drop'
    }),
    (n.inputState.draggedContent = null)
}
Mt.drop = (n, e) => {
  if (!e.dataTransfer) return !1
  if (n.state.readOnly) return !0
  let t = e.dataTransfer.files
  if (t && t.length) {
    let i = Array(t.length),
      r = 0,
      s = () => {
        ++r == t.length &&
          Dp(n, e, i.filter((o) => o != null).join(n.state.lineBreak), !1)
      }
    for (let o = 0; o < t.length; o++) {
      let a = new FileReader()
      ;(a.onerror = s),
        (a.onload = () => {
          ;/[\x00-\x08\x0e-\x1f]{2}/.test(a.result) || (i[o] = a.result), s()
        }),
        a.readAsText(t[o])
    }
    return !0
  } else {
    let i = e.dataTransfer.getData('Text')
    if (i) return Dp(n, e, i, !0), !0
  }
  return !1
}
Mt.paste = (n, e) => {
  if (n.state.readOnly) return !0
  n.observer.flush()
  let t = Jy ? null : e.clipboardData
  return t
    ? (eb(n, t.getData('text/plain') || t.getData('text/uri-text')), !0)
    : (aC(n), !1)
}
function hC(n, e) {
  let t = n.dom.parentNode
  if (!t) return
  let i = t.appendChild(document.createElement('textarea'))
  ;(i.style.cssText = 'position: fixed; left: -10000px; top: 10px'),
    (i.value = e),
    i.focus(),
    (i.selectionEnd = e.length),
    (i.selectionStart = 0),
    setTimeout(() => {
      i.remove(), n.focus()
    }, 50)
}
function dC(n) {
  let e = [],
    t = [],
    i = !1
  for (let r of n.selection.ranges)
    r.empty || (e.push(n.sliceDoc(r.from, r.to)), t.push(r))
  if (!e.length) {
    let r = -1
    for (let { from: s } of n.selection.ranges) {
      let o = n.doc.lineAt(s)
      o.number > r &&
        (e.push(o.text),
        t.push({ from: o.from, to: Math.min(n.doc.length, o.to + 1) })),
        (r = o.number)
    }
    i = !0
  }
  return { text: e.join(n.lineBreak), ranges: t, linewise: i }
}
let ju = null
Mt.copy = Mt.cut = (n, e) => {
  let { text: t, ranges: i, linewise: r } = dC(n.state)
  if (!t && !r) return !1
  ;(ju = r ? t : null),
    e.type == 'cut' &&
      !n.state.readOnly &&
      n.dispatch({
        changes: i,
        scrollIntoView: !0,
        userEvent: 'delete.cut'
      })
  let s = Jy ? null : e.clipboardData
  return s ? (s.clearData(), s.setData('text/plain', t), !0) : (hC(n, t), !1)
}
const ib = /* @__PURE__ */ ln.define()
function rb(n, e) {
  let t = []
  for (let i of n.facet(Xy)) {
    let r = i(n, e)
    r && t.push(r)
  }
  return t ? n.update({ effects: t, annotations: ib.of(!0) }) : null
}
function sb(n) {
  setTimeout(() => {
    let e = n.hasFocus
    if (e != n.inputState.notifiedFocused) {
      let t = rb(n.state, e)
      t ? n.dispatch(t) : n.update([])
    }
  }, 10)
}
Vt.focus = (n) => {
  ;(n.inputState.lastFocusTime = Date.now()),
    !n.scrollDOM.scrollTop &&
      (n.inputState.lastScrollTop || n.inputState.lastScrollLeft) &&
      ((n.scrollDOM.scrollTop = n.inputState.lastScrollTop),
      (n.scrollDOM.scrollLeft = n.inputState.lastScrollLeft)),
    sb(n)
}
Vt.blur = (n) => {
  n.observer.clearSelectionRange(), sb(n)
}
Vt.compositionstart = Vt.compositionupdate = (n) => {
  n.inputState.compositionFirstChange == null &&
    (n.inputState.compositionFirstChange = !0),
    n.inputState.composing < 0 && (n.inputState.composing = 0)
}
Vt.compositionend = (n) => {
  ;(n.inputState.composing = -1),
    (n.inputState.compositionEndedAt = Date.now()),
    (n.inputState.compositionPendingKey = !0),
    (n.inputState.compositionPendingChange =
      n.observer.pendingRecords().length > 0),
    (n.inputState.compositionFirstChange = null),
    G.chrome && G.android
      ? n.observer.flushSoon()
      : n.inputState.compositionPendingChange
        ? Promise.resolve().then(() => n.observer.flush())
        : setTimeout(() => {
            n.inputState.composing < 0 &&
              n.docView.hasComposition &&
              n.update([])
          }, 50)
}
Vt.contextmenu = (n) => {
  n.inputState.lastContextMenu = Date.now()
}
Mt.beforeinput = (n, e) => {
  var t
  let i
  if (
    G.chrome &&
    G.android &&
    (i = Hy.find((r) => r.inputType == e.inputType)) &&
    (n.observer.delayAndroidKey(i.key, i.keyCode),
    i.key == 'Backspace' || i.key == 'Delete')
  ) {
    let r =
      ((t = window.visualViewport) === null || t === void 0
        ? void 0
        : t.height) || 0
    setTimeout(() => {
      var s
      ;(((s = window.visualViewport) === null || s === void 0
        ? void 0
        : s.height) || 0) >
        r + 10 &&
        n.hasFocus &&
        (n.contentDOM.blur(), n.focus())
    }, 100)
  }
  return !1
}
const Xp = /* @__PURE__ */ new Set()
function pC(n) {
  Xp.has(n) ||
    (Xp.add(n),
    n.addEventListener('copy', () => {}),
    n.addEventListener('cut', () => {}))
}
const Yp = ['pre-wrap', 'normal', 'pre-line', 'break-spaces']
class OC {
  constructor(e) {
    ;(this.lineWrapping = e),
      (this.doc = ue.empty),
      (this.heightSamples = {}),
      (this.lineHeight = 14),
      (this.charWidth = 7),
      (this.textHeight = 14),
      (this.lineLength = 30),
      (this.heightChanged = !1)
  }
  heightForGap(e, t) {
    let i = this.doc.lineAt(t).number - this.doc.lineAt(e).number + 1
    return (
      this.lineWrapping &&
        (i += Math.max(
          0,
          Math.ceil((t - e - i * this.lineLength * 0.5) / this.lineLength)
        )),
      this.lineHeight * i
    )
  }
  heightForLine(e) {
    return this.lineWrapping
      ? (1 +
          Math.max(
            0,
            Math.ceil((e - this.lineLength) / (this.lineLength - 5))
          )) *
          this.lineHeight
      : this.lineHeight
  }
  setDoc(e) {
    return (this.doc = e), this
  }
  mustRefreshForWrapping(e) {
    return Yp.indexOf(e) > -1 != this.lineWrapping
  }
  mustRefreshForHeights(e) {
    let t = !1
    for (let i = 0; i < e.length; i++) {
      let r = e[i]
      r < 0
        ? i++
        : this.heightSamples[Math.floor(r * 10)] ||
          ((t = !0), (this.heightSamples[Math.floor(r * 10)] = !0))
    }
    return t
  }
  refresh(e, t, i, r, s, o) {
    let a = Yp.indexOf(e) > -1,
      l = Math.round(t) != Math.round(this.lineHeight) || this.lineWrapping != a
    if (
      ((this.lineWrapping = a),
      (this.lineHeight = t),
      (this.charWidth = i),
      (this.textHeight = r),
      (this.lineLength = s),
      l)
    ) {
      this.heightSamples = {}
      for (let c = 0; c < o.length; c++) {
        let u = o[c]
        u < 0 ? c++ : (this.heightSamples[Math.floor(u * 10)] = !0)
      }
    }
    return l
  }
}
class gC {
  constructor(e, t) {
    ;(this.from = e), (this.heights = t), (this.index = 0)
  }
  get more() {
    return this.index < this.heights.length
  }
}
class en {
  /**
  @internal
  */
  constructor(e, t, i, r, s) {
    ;(this.from = e),
      (this.length = t),
      (this.top = i),
      (this.height = r),
      (this._content = s)
  }
  /**
  The type of element this is. When querying lines, this may be
  an array of all the blocks that make up the line.
  */
  get type() {
    return typeof this._content == 'number'
      ? st.Text
      : Array.isArray(this._content)
        ? this._content
        : this._content.type
  }
  /**
  The end of the element as a document position.
  */
  get to() {
    return this.from + this.length
  }
  /**
  The bottom position of the element.
  */
  get bottom() {
    return this.top + this.height
  }
  /**
  If this is a widget block, this will return the widget
  associated with it.
  */
  get widget() {
    return this._content instanceof Hn ? this._content.widget : null
  }
  /**
  If this is a textblock, this holds the number of line breaks
  that appear in widgets inside the block.
  */
  get widgetLineBreaks() {
    return typeof this._content == 'number' ? this._content : 0
  }
  /**
  @internal
  */
  join(e) {
    let t = (Array.isArray(this._content) ? this._content : [this]).concat(
      Array.isArray(e._content) ? e._content : [e]
    )
    return new en(
      this.from,
      this.length + e.length,
      this.top,
      this.height + e.height,
      t
    )
  }
}
var Se = /* @__PURE__ */ (function (n) {
  return (
    (n[(n.ByPos = 0)] = 'ByPos'),
    (n[(n.ByHeight = 1)] = 'ByHeight'),
    (n[(n.ByPosNoHeight = 2)] = 'ByPosNoHeight'),
    n
  )
})(Se || (Se = {}))
const jo = 1e-3
class ot {
  constructor(e, t, i = 2) {
    ;(this.length = e), (this.height = t), (this.flags = i)
  }
  get outdated() {
    return (this.flags & 2) > 0
  }
  set outdated(e) {
    this.flags = (e ? 2 : 0) | (this.flags & -3)
  }
  setHeight(e, t) {
    this.height != t &&
      (Math.abs(this.height - t) > jo && (e.heightChanged = !0),
      (this.height = t))
  }
  // Base case is to replace a leaf node, which simply builds a tree
  // from the new nodes and returns that (HeightMapBranch and
  // HeightMapGap override this to actually use from/to)
  replace(e, t, i) {
    return ot.of(i)
  }
  // Again, these are base cases, and are overridden for branch and gap nodes.
  decomposeLeft(e, t) {
    t.push(this)
  }
  decomposeRight(e, t) {
    t.push(this)
  }
  applyChanges(e, t, i, r) {
    let s = this,
      o = i.doc
    for (let a = r.length - 1; a >= 0; a--) {
      let { fromA: l, toA: c, fromB: u, toB: f } = r[a],
        h = s.lineAt(l, Se.ByPosNoHeight, i.setDoc(t), 0, 0),
        d = h.to >= c ? h : s.lineAt(c, Se.ByPosNoHeight, i, 0, 0)
      for (f += d.to - c, c = d.to; a > 0 && h.from <= r[a - 1].toA; )
        (l = r[a - 1].fromA),
          (u = r[a - 1].fromB),
          a--,
          l < h.from && (h = s.lineAt(l, Se.ByPosNoHeight, i, 0, 0))
      ;(u += h.from - l), (l = h.from)
      let O = Bf.build(i.setDoc(o), e, u, f)
      s = s.replace(l, c, O)
    }
    return s.updateHeight(i, 0)
  }
  static empty() {
    return new yt(0, 0)
  }
  // nodes uses null values to indicate the position of line breaks.
  // There are never line breaks at the start or end of the array, or
  // two line breaks next to each other, and the array isn't allowed
  // to be empty (same restrictions as return value from the builder).
  static of(e) {
    if (e.length == 1) return e[0]
    let t = 0,
      i = e.length,
      r = 0,
      s = 0
    for (;;)
      if (t == i)
        if (r > s * 2) {
          let a = e[t - 1]
          a.break
            ? e.splice(--t, 1, a.left, null, a.right)
            : e.splice(--t, 1, a.left, a.right),
            (i += 1 + a.break),
            (r -= a.size)
        } else if (s > r * 2) {
          let a = e[i]
          a.break
            ? e.splice(i, 1, a.left, null, a.right)
            : e.splice(i, 1, a.left, a.right),
            (i += 2 + a.break),
            (s -= a.size)
        } else break
      else if (r < s) {
        let a = e[t++]
        a && (r += a.size)
      } else {
        let a = e[--i]
        a && (s += a.size)
      }
    let o = 0
    return (
      e[t - 1] == null ? ((o = 1), t--) : e[t] == null && ((o = 1), i++),
      new mC(ot.of(e.slice(0, t)), o, ot.of(e.slice(i)))
    )
  }
}
ot.prototype.size = 1
class ob extends ot {
  constructor(e, t, i) {
    super(e, t), (this.deco = i)
  }
  blockAt(e, t, i, r) {
    return new en(r, this.length, i, this.height, this.deco || 0)
  }
  lineAt(e, t, i, r, s) {
    return this.blockAt(0, i, r, s)
  }
  forEachLine(e, t, i, r, s, o) {
    e <= s + this.length && t >= s && o(this.blockAt(0, i, r, s))
  }
  updateHeight(e, t = 0, i = !1, r) {
    return (
      r && r.from <= t && r.more && this.setHeight(e, r.heights[r.index++]),
      (this.outdated = !1),
      this
    )
  }
  toString() {
    return `block(${this.length})`
  }
}
class yt extends ob {
  constructor(e, t) {
    super(e, t, null),
      (this.collapsed = 0),
      (this.widgetHeight = 0),
      (this.breaks = 0)
  }
  blockAt(e, t, i, r) {
    return new en(r, this.length, i, this.height, this.breaks)
  }
  replace(e, t, i) {
    let r = i[0]
    return i.length == 1 &&
      (r instanceof yt || (r instanceof Ue && r.flags & 4)) &&
      Math.abs(this.length - r.length) < 10
      ? (r instanceof Ue
          ? (r = new yt(r.length, this.height))
          : (r.height = this.height),
        this.outdated || (r.outdated = !1),
        r)
      : ot.of(i)
  }
  updateHeight(e, t = 0, i = !1, r) {
    return (
      r && r.from <= t && r.more
        ? this.setHeight(e, r.heights[r.index++])
        : (i || this.outdated) &&
          this.setHeight(
            e,
            Math.max(
              this.widgetHeight,
              e.heightForLine(this.length - this.collapsed)
            ) +
              this.breaks * e.lineHeight
          ),
      (this.outdated = !1),
      this
    )
  }
  toString() {
    return `line(${this.length}${this.collapsed ? -this.collapsed : ''}${
      this.widgetHeight ? ':' + this.widgetHeight : ''
    })`
  }
}
class Ue extends ot {
  constructor(e) {
    super(e, 0)
  }
  heightMetrics(e, t) {
    let i = e.doc.lineAt(t).number,
      r = e.doc.lineAt(t + this.length).number,
      s = r - i + 1,
      o,
      a = 0
    if (e.lineWrapping) {
      let l = Math.min(this.height, e.lineHeight * s)
      ;(o = l / s),
        this.length > s + 1 && (a = (this.height - l) / (this.length - s - 1))
    } else o = this.height / s
    return { firstLine: i, lastLine: r, perLine: o, perChar: a }
  }
  blockAt(e, t, i, r) {
    let {
      firstLine: s,
      lastLine: o,
      perLine: a,
      perChar: l
    } = this.heightMetrics(t, r)
    if (t.lineWrapping) {
      let c =
          r +
          Math.round(
            Math.max(0, Math.min(1, (e - i) / this.height)) * this.length
          ),
        u = t.doc.lineAt(c),
        f = a + u.length * l,
        h = Math.max(i, e - f / 2)
      return new en(u.from, u.length, h, f, 0)
    } else {
      let c = Math.max(0, Math.min(o - s, Math.floor((e - i) / a))),
        { from: u, length: f } = t.doc.line(s + c)
      return new en(u, f, i + a * c, a, 0)
    }
  }
  lineAt(e, t, i, r, s) {
    if (t == Se.ByHeight) return this.blockAt(e, i, r, s)
    if (t == Se.ByPosNoHeight) {
      let { from: d, to: O } = i.doc.lineAt(e)
      return new en(d, O - d, 0, 0, 0)
    }
    let { firstLine: o, perLine: a, perChar: l } = this.heightMetrics(i, s),
      c = i.doc.lineAt(e),
      u = a + c.length * l,
      f = c.number - o,
      h = r + a * f + l * (c.from - s - f)
    return new en(
      c.from,
      c.length,
      Math.max(r, Math.min(h, r + this.height - u)),
      u,
      0
    )
  }
  forEachLine(e, t, i, r, s, o) {
    ;(e = Math.max(e, s)), (t = Math.min(t, s + this.length))
    let { firstLine: a, perLine: l, perChar: c } = this.heightMetrics(i, s)
    for (let u = e, f = r; u <= t; ) {
      let h = i.doc.lineAt(u)
      if (u == e) {
        let O = h.number - a
        f += l * O + c * (e - s - O)
      }
      let d = l + c * h.length
      o(new en(h.from, h.length, f, d, 0)), (f += d), (u = h.to + 1)
    }
  }
  replace(e, t, i) {
    let r = this.length - t
    if (r > 0) {
      let s = i[i.length - 1]
      s instanceof Ue
        ? (i[i.length - 1] = new Ue(s.length + r))
        : i.push(null, new Ue(r - 1))
    }
    if (e > 0) {
      let s = i[0]
      s instanceof Ue
        ? (i[0] = new Ue(e + s.length))
        : i.unshift(new Ue(e - 1), null)
    }
    return ot.of(i)
  }
  decomposeLeft(e, t) {
    t.push(new Ue(e - 1), null)
  }
  decomposeRight(e, t) {
    t.push(null, new Ue(this.length - e - 1))
  }
  updateHeight(e, t = 0, i = !1, r) {
    let s = t + this.length
    if (r && r.from <= t + this.length && r.more) {
      let o = [],
        a = Math.max(t, r.from),
        l = -1
      for (
        r.from > t && o.push(new Ue(r.from - t - 1).updateHeight(e, t));
        a <= s && r.more;

      ) {
        let u = e.doc.lineAt(a).length
        o.length && o.push(null)
        let f = r.heights[r.index++]
        l == -1 ? (l = f) : Math.abs(f - l) >= jo && (l = -2)
        let h = new yt(u, f)
        ;(h.outdated = !1), o.push(h), (a += u + 1)
      }
      a <= s && o.push(null, new Ue(s - a).updateHeight(e, a))
      let c = ot.of(o)
      return (
        (l < 0 ||
          Math.abs(c.height - this.height) >= jo ||
          Math.abs(l - this.heightMetrics(e, t).perLine) >= jo) &&
          (e.heightChanged = !0),
        c
      )
    } else
      (i || this.outdated) &&
        (this.setHeight(e, e.heightForGap(t, t + this.length)),
        (this.outdated = !1))
    return this
  }
  toString() {
    return `gap(${this.length})`
  }
}
class mC extends ot {
  constructor(e, t, i) {
    super(
      e.length + t + i.length,
      e.height + i.height,
      t | (e.outdated || i.outdated ? 2 : 0)
    ),
      (this.left = e),
      (this.right = i),
      (this.size = e.size + i.size)
  }
  get break() {
    return this.flags & 1
  }
  blockAt(e, t, i, r) {
    let s = i + this.left.height
    return e < s
      ? this.left.blockAt(e, t, i, r)
      : this.right.blockAt(e, t, s, r + this.left.length + this.break)
  }
  lineAt(e, t, i, r, s) {
    let o = r + this.left.height,
      a = s + this.left.length + this.break,
      l = t == Se.ByHeight ? e < o : e < a,
      c = l ? this.left.lineAt(e, t, i, r, s) : this.right.lineAt(e, t, i, o, a)
    if (this.break || (l ? c.to < a : c.from > a)) return c
    let u = t == Se.ByPosNoHeight ? Se.ByPosNoHeight : Se.ByPos
    return l
      ? c.join(this.right.lineAt(a, u, i, o, a))
      : this.left.lineAt(a, u, i, r, s).join(c)
  }
  forEachLine(e, t, i, r, s, o) {
    let a = r + this.left.height,
      l = s + this.left.length + this.break
    if (this.break)
      e < l && this.left.forEachLine(e, t, i, r, s, o),
        t >= l && this.right.forEachLine(e, t, i, a, l, o)
    else {
      let c = this.lineAt(l, Se.ByPos, i, r, s)
      e < c.from && this.left.forEachLine(e, c.from - 1, i, r, s, o),
        c.to >= e && c.from <= t && o(c),
        t > c.to && this.right.forEachLine(c.to + 1, t, i, a, l, o)
    }
  }
  replace(e, t, i) {
    let r = this.left.length + this.break
    if (t < r) return this.balanced(this.left.replace(e, t, i), this.right)
    if (e > this.left.length)
      return this.balanced(this.left, this.right.replace(e - r, t - r, i))
    let s = []
    e > 0 && this.decomposeLeft(e, s)
    let o = s.length
    for (let a of i) s.push(a)
    if ((e > 0 && Ip(s, o - 1), t < this.length)) {
      let a = s.length
      this.decomposeRight(t, s), Ip(s, a)
    }
    return ot.of(s)
  }
  decomposeLeft(e, t) {
    let i = this.left.length
    if (e <= i) return this.left.decomposeLeft(e, t)
    t.push(this.left),
      this.break && (i++, e >= i && t.push(null)),
      e > i && this.right.decomposeLeft(e - i, t)
  }
  decomposeRight(e, t) {
    let i = this.left.length,
      r = i + this.break
    if (e >= r) return this.right.decomposeRight(e - r, t)
    e < i && this.left.decomposeRight(e, t),
      this.break && e < r && t.push(null),
      t.push(this.right)
  }
  balanced(e, t) {
    return e.size > 2 * t.size || t.size > 2 * e.size
      ? ot.of(this.break ? [e, null, t] : [e, t])
      : ((this.left = e),
        (this.right = t),
        (this.height = e.height + t.height),
        (this.outdated = e.outdated || t.outdated),
        (this.size = e.size + t.size),
        (this.length = e.length + this.break + t.length),
        this)
  }
  updateHeight(e, t = 0, i = !1, r) {
    let { left: s, right: o } = this,
      a = t + s.length + this.break,
      l = null
    return (
      r && r.from <= t + s.length && r.more
        ? (l = s = s.updateHeight(e, t, i, r))
        : s.updateHeight(e, t, i),
      r && r.from <= a + o.length && r.more
        ? (l = o = o.updateHeight(e, a, i, r))
        : o.updateHeight(e, a, i),
      l
        ? this.balanced(s, o)
        : ((this.height = this.left.height + this.right.height),
          (this.outdated = !1),
          this)
    )
  }
  toString() {
    return this.left + (this.break ? ' ' : '-') + this.right
  }
}
function Ip(n, e) {
  let t, i
  n[e] == null &&
    (t = n[e - 1]) instanceof Ue &&
    (i = n[e + 1]) instanceof Ue &&
    n.splice(e - 1, 3, new Ue(t.length + 1 + i.length))
}
const yC = 5
class Bf {
  constructor(e, t) {
    ;(this.pos = e),
      (this.oracle = t),
      (this.nodes = []),
      (this.lineStart = -1),
      (this.lineEnd = -1),
      (this.covering = null),
      (this.writtenTo = e)
  }
  get isCovered() {
    return this.covering && this.nodes[this.nodes.length - 1] == this.covering
  }
  span(e, t) {
    if (this.lineStart > -1) {
      let i = Math.min(t, this.lineEnd),
        r = this.nodes[this.nodes.length - 1]
      r instanceof yt
        ? (r.length += i - this.pos)
        : (i > this.pos || !this.isCovered) &&
          this.nodes.push(new yt(i - this.pos, -1)),
        (this.writtenTo = i),
        t > i &&
          (this.nodes.push(null), this.writtenTo++, (this.lineStart = -1))
    }
    this.pos = t
  }
  point(e, t, i) {
    if (e < t || i.heightRelevant) {
      let r = i.widget ? i.widget.estimatedHeight : 0,
        s = i.widget ? i.widget.lineBreaks : 0
      r < 0 && (r = this.oracle.lineHeight)
      let o = t - e
      i.block
        ? this.addBlock(new ob(o, r, i))
        : (o || s || r >= yC) && this.addLineDeco(r, s, o)
    } else t > e && this.span(e, t)
    this.lineEnd > -1 &&
      this.lineEnd < this.pos &&
      (this.lineEnd = this.oracle.doc.lineAt(this.pos).to)
  }
  enterLine() {
    if (this.lineStart > -1) return
    let { from: e, to: t } = this.oracle.doc.lineAt(this.pos)
    ;(this.lineStart = e),
      (this.lineEnd = t),
      this.writtenTo < e &&
        ((this.writtenTo < e - 1 ||
          this.nodes[this.nodes.length - 1] == null) &&
          this.nodes.push(this.blankContent(this.writtenTo, e - 1)),
        this.nodes.push(null)),
      this.pos > e && this.nodes.push(new yt(this.pos - e, -1)),
      (this.writtenTo = this.pos)
  }
  blankContent(e, t) {
    let i = new Ue(t - e)
    return this.oracle.doc.lineAt(e).to == t && (i.flags |= 4), i
  }
  ensureLine() {
    this.enterLine()
    let e = this.nodes.length ? this.nodes[this.nodes.length - 1] : null
    if (e instanceof yt) return e
    let t = new yt(0, -1)
    return this.nodes.push(t), t
  }
  addBlock(e) {
    this.enterLine()
    let t = e.deco
    t && t.startSide > 0 && !this.isCovered && this.ensureLine(),
      this.nodes.push(e),
      (this.writtenTo = this.pos = this.pos + e.length),
      t && t.endSide > 0 && (this.covering = e)
  }
  addLineDeco(e, t, i) {
    let r = this.ensureLine()
    ;(r.length += i),
      (r.collapsed += i),
      (r.widgetHeight = Math.max(r.widgetHeight, e)),
      (r.breaks += t),
      (this.writtenTo = this.pos = this.pos + i)
  }
  finish(e) {
    let t = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1]
    this.lineStart > -1 && !(t instanceof yt) && !this.isCovered
      ? this.nodes.push(new yt(0, -1))
      : (this.writtenTo < this.pos || t == null) &&
        this.nodes.push(this.blankContent(this.writtenTo, this.pos))
    let i = e
    for (let r of this.nodes)
      r instanceof yt && r.updateHeight(this.oracle, i), (i += r ? r.length : 1)
    return this.nodes
  }
  // Always called with a region that on both sides either stretches
  // to a line break or the end of the document.
  // The returned array uses null to indicate line breaks, but never
  // starts or ends in a line break, or has multiple line breaks next
  // to each other.
  static build(e, t, i, r) {
    let s = new Bf(i, e)
    return fe.spans(t, i, r, s, 0), s.finish(i)
  }
}
function bC(n, e, t) {
  let i = new vC()
  return fe.compare(n, e, t, i, 0), i.changes
}
class vC {
  constructor() {
    this.changes = []
  }
  compareRange() {}
  comparePoint(e, t, i, r) {
    ;(e < t || (i && i.heightRelevant) || (r && r.heightRelevant)) &&
      Xu(e, t, this.changes, 5)
  }
}
function SC(n, e) {
  let t = n.getBoundingClientRect(),
    i = n.ownerDocument,
    r = i.defaultView || window,
    s = Math.max(0, t.left),
    o = Math.min(r.innerWidth, t.right),
    a = Math.max(0, t.top),
    l = Math.min(r.innerHeight, t.bottom)
  for (let c = n.parentNode; c && c != i.body; )
    if (c.nodeType == 1) {
      let u = c,
        f = window.getComputedStyle(u)
      if (
        (u.scrollHeight > u.clientHeight || u.scrollWidth > u.clientWidth) &&
        f.overflow != 'visible'
      ) {
        let h = u.getBoundingClientRect()
        ;(s = Math.max(s, h.left)),
          (o = Math.min(o, h.right)),
          (a = Math.max(a, h.top)),
          (l = c == n.parentNode ? h.bottom : Math.min(l, h.bottom))
      }
      c =
        f.position == 'absolute' || f.position == 'fixed'
          ? u.offsetParent
          : u.parentNode
    } else if (c.nodeType == 11) c = c.host
    else break
  return {
    left: s - t.left,
    right: Math.max(s, o) - t.left,
    top: a - (t.top + e),
    bottom: Math.max(a, l) - (t.top + e)
  }
}
function xC(n, e) {
  let t = n.getBoundingClientRect()
  return {
    left: 0,
    right: t.right - t.left,
    top: e,
    bottom: t.bottom - (t.top + e)
  }
}
class cc {
  constructor(e, t, i) {
    ;(this.from = e), (this.to = t), (this.size = i)
  }
  static same(e, t) {
    if (e.length != t.length) return !1
    for (let i = 0; i < e.length; i++) {
      let r = e[i],
        s = t[i]
      if (r.from != s.from || r.to != s.to || r.size != s.size) return !1
    }
    return !0
  }
  draw(e, t) {
    return K.replace({
      widget: new wC(this.size * (t ? e.scaleY : e.scaleX), t)
    }).range(this.from, this.to)
  }
}
class wC extends un {
  constructor(e, t) {
    super(), (this.size = e), (this.vertical = t)
  }
  eq(e) {
    return e.size == this.size && e.vertical == this.vertical
  }
  toDOM() {
    let e = document.createElement('div')
    return (
      this.vertical
        ? (e.style.height = this.size + 'px')
        : ((e.style.width = this.size + 'px'),
          (e.style.height = '2px'),
          (e.style.display = 'inline-block')),
      e
    )
  }
  get estimatedHeight() {
    return this.vertical ? this.size : -1
  }
}
class Np {
  constructor(e) {
    ;(this.state = e),
      (this.pixelViewport = {
        left: 0,
        right: window.innerWidth,
        top: 0,
        bottom: 0
      }),
      (this.inView = !0),
      (this.paddingTop = 0),
      (this.paddingBottom = 0),
      (this.contentDOMWidth = 0),
      (this.contentDOMHeight = 0),
      (this.editorHeight = 0),
      (this.editorWidth = 0),
      (this.scrollTop = 0),
      (this.scrolledToBottom = !0),
      (this.scaleX = 1),
      (this.scaleY = 1),
      (this.scrollAnchorPos = 0),
      (this.scrollAnchorHeight = -1),
      (this.scaler = Mp),
      (this.scrollTarget = null),
      (this.printing = !1),
      (this.mustMeasureContent = !0),
      (this.defaultTextDirection = Pe.LTR),
      (this.visibleRanges = []),
      (this.mustEnforceCursorAssoc = !1)
    let t = e
      .facet(Wf)
      .some((i) => typeof i != 'function' && i.class == 'cm-lineWrapping')
    ;(this.heightOracle = new OC(t)),
      (this.stateDeco = e.facet(rs).filter((i) => typeof i != 'function')),
      (this.heightMap = ot
        .empty()
        .applyChanges(
          this.stateDeco,
          ue.empty,
          this.heightOracle.setDoc(e.doc),
          [new Et(0, 0, 0, e.doc.length)]
        )),
      (this.viewport = this.getViewport(0, null)),
      this.updateViewportLines(),
      this.updateForViewport(),
      (this.lineGaps = this.ensureLineGaps([])),
      (this.lineGapDeco = K.set(this.lineGaps.map((i) => i.draw(this, !1)))),
      this.computeVisibleRanges()
  }
  updateForViewport() {
    let e = [this.viewport],
      { main: t } = this.state.selection
    for (let i = 0; i <= 1; i++) {
      let r = i ? t.head : t.anchor
      if (!e.some(({ from: s, to: o }) => r >= s && r <= o)) {
        let { from: s, to: o } = this.lineBlockAt(r)
        e.push(new no(s, o))
      }
    }
    ;(this.viewports = e.sort((i, r) => i.from - r.from)),
      (this.scaler =
        this.heightMap.height <= 7e6
          ? Mp
          : new QC(this.heightOracle, this.heightMap, this.viewports))
  }
  updateViewportLines() {
    ;(this.viewportLines = []),
      this.heightMap.forEachLine(
        this.viewport.from,
        this.viewport.to,
        this.heightOracle.setDoc(this.state.doc),
        0,
        0,
        (e) => {
          this.viewportLines.push(
            this.scaler.scale == 1 ? e : jr(e, this.scaler)
          )
        }
      )
  }
  update(e, t = null) {
    this.state = e.state
    let i = this.stateDeco
    this.stateDeco = this.state.facet(rs).filter((u) => typeof u != 'function')
    let r = e.changedRanges,
      s = Et.extendWithRanges(
        r,
        bC(i, this.stateDeco, e ? e.changes : Xe.empty(this.state.doc.length))
      ),
      o = this.heightMap.height,
      a = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop)
    ;(this.heightMap = this.heightMap.applyChanges(
      this.stateDeco,
      e.startState.doc,
      this.heightOracle.setDoc(this.state.doc),
      s
    )),
      this.heightMap.height != o && (e.flags |= 2),
      a
        ? ((this.scrollAnchorPos = e.changes.mapPos(a.from, -1)),
          (this.scrollAnchorHeight = a.top))
        : ((this.scrollAnchorPos = -1),
          (this.scrollAnchorHeight = this.heightMap.height))
    let l = s.length
      ? this.mapViewport(this.viewport, e.changes)
      : this.viewport
    ;((t && (t.range.head < l.from || t.range.head > l.to)) ||
      !this.viewportIsAppropriate(l)) &&
      (l = this.getViewport(0, t))
    let c =
      !e.changes.empty ||
      e.flags & 2 ||
      l.from != this.viewport.from ||
      l.to != this.viewport.to
    ;(this.viewport = l),
      this.updateForViewport(),
      c && this.updateViewportLines(),
      (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) &&
        this.updateLineGaps(
          this.ensureLineGaps(this.mapLineGaps(this.lineGaps, e.changes))
        ),
      (e.flags |= this.computeVisibleRanges()),
      t && (this.scrollTarget = t),
      !this.mustEnforceCursorAssoc &&
        e.selectionSet &&
        e.view.lineWrapping &&
        e.state.selection.main.empty &&
        e.state.selection.main.assoc &&
        !e.state.facet(Iy) &&
        (this.mustEnforceCursorAssoc = !0)
  }
  measure(e) {
    let t = e.contentDOM,
      i = window.getComputedStyle(t),
      r = this.heightOracle,
      s = i.whiteSpace
    this.defaultTextDirection = i.direction == 'rtl' ? Pe.RTL : Pe.LTR
    let o = this.heightOracle.mustRefreshForWrapping(s),
      a = t.getBoundingClientRect(),
      l = o || this.mustMeasureContent || this.contentDOMHeight != a.height
    ;(this.contentDOMHeight = a.height), (this.mustMeasureContent = !1)
    let c = 0,
      u = 0
    if (a.width && a.height) {
      let Q = a.width / t.offsetWidth,
        P = a.height / t.offsetHeight
      ;((Q > 0.995 && Q < 1.005) ||
        !isFinite(Q) ||
        Math.abs(a.width - t.offsetWidth) < 1) &&
        (Q = 1),
        ((P > 0.995 && P < 1.005) ||
          !isFinite(P) ||
          Math.abs(a.height - t.offsetHeight) < 1) &&
          (P = 1),
        (this.scaleX != Q || this.scaleY != P) &&
          ((this.scaleX = Q), (this.scaleY = P), (c |= 8), (o = l = !0))
    }
    let f = (parseInt(i.paddingTop) || 0) * this.scaleY,
      h = (parseInt(i.paddingBottom) || 0) * this.scaleY
    ;(this.paddingTop != f || this.paddingBottom != h) &&
      ((this.paddingTop = f), (this.paddingBottom = h), (c |= 10)),
      this.editorWidth != e.scrollDOM.clientWidth &&
        (r.lineWrapping && (l = !0),
        (this.editorWidth = e.scrollDOM.clientWidth),
        (c |= 8))
    let d = e.scrollDOM.scrollTop * this.scaleY
    this.scrollTop != d &&
      ((this.scrollAnchorHeight = -1), (this.scrollTop = d)),
      (this.scrolledToBottom = Sy(e.scrollDOM))
    let O = (this.printing ? xC : SC)(t, this.paddingTop),
      m = O.top - this.pixelViewport.top,
      b = O.bottom - this.pixelViewport.bottom
    this.pixelViewport = O
    let x =
      this.pixelViewport.bottom > this.pixelViewport.top &&
      this.pixelViewport.right > this.pixelViewport.left
    if (
      (x != this.inView && ((this.inView = x), x && (l = !0)),
      !this.inView && !this.scrollTarget)
    )
      return 0
    let w = a.width
    if (
      ((this.contentDOMWidth != w ||
        this.editorHeight != e.scrollDOM.clientHeight) &&
        ((this.contentDOMWidth = a.width),
        (this.editorHeight = e.scrollDOM.clientHeight),
        (c |= 8)),
      l)
    ) {
      let Q = e.docView.measureVisibleLineHeights(this.viewport)
      if (
        (r.mustRefreshForHeights(Q) && (o = !0),
        o ||
          (r.lineWrapping && Math.abs(w - this.contentDOMWidth) > r.charWidth))
      ) {
        let {
          lineHeight: P,
          charWidth: C,
          textHeight: A
        } = e.docView.measureTextSize()
        ;(o = P > 0 && r.refresh(s, P, C, A, w / C, Q)),
          o && ((e.docView.minWidth = 0), (c |= 8))
      }
      m > 0 && b > 0
        ? (u = Math.max(m, b))
        : m < 0 && b < 0 && (u = Math.min(m, b)),
        (r.heightChanged = !1)
      for (let P of this.viewports) {
        let C =
          P.from == this.viewport.from
            ? Q
            : e.docView.measureVisibleLineHeights(P)
        this.heightMap = (
          o
            ? ot
                .empty()
                .applyChanges(this.stateDeco, ue.empty, this.heightOracle, [
                  new Et(0, 0, 0, e.state.doc.length)
                ])
            : this.heightMap
        ).updateHeight(r, 0, o, new gC(P.from, C))
      }
      r.heightChanged && (c |= 2)
    }
    let T =
      !this.viewportIsAppropriate(this.viewport, u) ||
      (this.scrollTarget &&
        (this.scrollTarget.range.head < this.viewport.from ||
          this.scrollTarget.range.head > this.viewport.to))
    return (
      T && (this.viewport = this.getViewport(u, this.scrollTarget)),
      this.updateForViewport(),
      (c & 2 || T) && this.updateViewportLines(),
      (this.lineGaps.length || this.viewport.to - this.viewport.from > 4e3) &&
        this.updateLineGaps(this.ensureLineGaps(o ? [] : this.lineGaps, e)),
      (c |= this.computeVisibleRanges()),
      this.mustEnforceCursorAssoc &&
        ((this.mustEnforceCursorAssoc = !1), e.docView.enforceCursorAssoc()),
      c
    )
  }
  get visibleTop() {
    return this.scaler.fromDOM(this.pixelViewport.top)
  }
  get visibleBottom() {
    return this.scaler.fromDOM(this.pixelViewport.bottom)
  }
  getViewport(e, t) {
    let i = 0.5 - Math.max(-0.5, Math.min(0.5, e / 1e3 / 2)),
      r = this.heightMap,
      s = this.heightOracle,
      { visibleTop: o, visibleBottom: a } = this,
      l = new no(
        r.lineAt(o - i * 1e3, Se.ByHeight, s, 0, 0).from,
        r.lineAt(a + (1 - i) * 1e3, Se.ByHeight, s, 0, 0).to
      )
    if (t) {
      let { head: c } = t.range
      if (c < l.from || c > l.to) {
        let u = Math.min(
            this.editorHeight,
            this.pixelViewport.bottom - this.pixelViewport.top
          ),
          f = r.lineAt(c, Se.ByPos, s, 0, 0),
          h
        t.y == 'center'
          ? (h = (f.top + f.bottom) / 2 - u / 2)
          : t.y == 'start' || (t.y == 'nearest' && c < l.from)
            ? (h = f.top)
            : (h = f.bottom - u),
          (l = new no(
            r.lineAt(h - 1e3 / 2, Se.ByHeight, s, 0, 0).from,
            r.lineAt(h + u + 1e3 / 2, Se.ByHeight, s, 0, 0).to
          ))
      }
    }
    return l
  }
  mapViewport(e, t) {
    let i = t.mapPos(e.from, -1),
      r = t.mapPos(e.to, 1)
    return new no(
      this.heightMap.lineAt(i, Se.ByPos, this.heightOracle, 0, 0).from,
      this.heightMap.lineAt(r, Se.ByPos, this.heightOracle, 0, 0).to
    )
  }
  // Checks if a given viewport covers the visible part of the
  // document and not too much beyond that.
  viewportIsAppropriate({ from: e, to: t }, i = 0) {
    if (!this.inView) return !0
    let { top: r } = this.heightMap.lineAt(
        e,
        Se.ByPos,
        this.heightOracle,
        0,
        0
      ),
      { bottom: s } = this.heightMap.lineAt(
        t,
        Se.ByPos,
        this.heightOracle,
        0,
        0
      ),
      { visibleTop: o, visibleBottom: a } = this
    return (
      (e == 0 ||
        r <=
          o -
            Math.max(
              10,
              Math.min(
                -i,
                250
                /* VP.MaxCoverMargin */
              )
            )) &&
      (t == this.state.doc.length ||
        s >=
          a +
            Math.max(
              10,
              Math.min(
                i,
                250
                /* VP.MaxCoverMargin */
              )
            )) &&
      r > o - 2 * 1e3 &&
      s < a + 2 * 1e3
    )
  }
  mapLineGaps(e, t) {
    if (!e.length || t.empty) return e
    let i = []
    for (let r of e)
      t.touchesRange(r.from, r.to) ||
        i.push(new cc(t.mapPos(r.from), t.mapPos(r.to), r.size))
    return i
  }
  // Computes positions in the viewport where the start or end of a
  // line should be hidden, trying to reuse existing line gaps when
  // appropriate to avoid unneccesary redraws.
  // Uses crude character-counting for the positioning and sizing,
  // since actual DOM coordinates aren't always available and
  // predictable. Relies on generous margins (see LG.Margin) to hide
  // the artifacts this might produce from the user.
  ensureLineGaps(e, t) {
    let i = this.heightOracle.lineWrapping,
      r = i ? 1e4 : 2e3,
      s = r >> 1,
      o = r << 1
    if (this.defaultTextDirection != Pe.LTR && !i) return []
    let a = [],
      l = (c, u, f, h) => {
        if (u - c < s) return
        let d = this.state.selection.main,
          O = [d.from]
        d.empty || O.push(d.to)
        for (let b of O)
          if (b > c && b < u) {
            l(c, b - 10, f, h), l(b + 10, u, f, h)
            return
          }
        let m = PC(
          e,
          (b) =>
            b.from >= f.from &&
            b.to <= f.to &&
            Math.abs(b.from - c) < s &&
            Math.abs(b.to - u) < s &&
            !O.some((x) => b.from < x && b.to > x)
        )
        if (!m) {
          if (
            u < f.to &&
            t &&
            i &&
            t.visibleRanges.some((b) => b.from <= u && b.to >= u)
          ) {
            let b = t.moveToLineBoundary(_.cursor(u), !1, !0).head
            b > c && (u = b)
          }
          m = new cc(c, u, this.gapSize(f, c, u, h))
        }
        a.push(m)
      }
    for (let c of this.viewportLines) {
      if (c.length < o) continue
      let u = $C(c.from, c.to, this.stateDeco)
      if (u.total < o) continue
      let f = this.scrollTarget ? this.scrollTarget.range.head : null,
        h,
        d
      if (i) {
        let O =
            (r / this.heightOracle.lineLength) * this.heightOracle.lineHeight,
          m,
          b
        if (f != null) {
          let x = ro(u, f),
            w = ((this.visibleBottom - this.visibleTop) / 2 + O) / c.height
          ;(m = x - w), (b = x + w)
        } else
          (m = (this.visibleTop - c.top - O) / c.height),
            (b = (this.visibleBottom - c.top + O) / c.height)
        ;(h = io(u, m)), (d = io(u, b))
      } else {
        let O = u.total * this.heightOracle.charWidth,
          m = r * this.heightOracle.charWidth,
          b,
          x
        if (f != null) {
          let w = ro(u, f),
            T =
              ((this.pixelViewport.right - this.pixelViewport.left) / 2 + m) / O
          ;(b = w - T), (x = w + T)
        } else
          (b = (this.pixelViewport.left - m) / O),
            (x = (this.pixelViewport.right + m) / O)
        ;(h = io(u, b)), (d = io(u, x))
      }
      h > c.from && l(c.from, h, c, u), d < c.to && l(d, c.to, c, u)
    }
    return a
  }
  gapSize(e, t, i, r) {
    let s = ro(r, i) - ro(r, t)
    return this.heightOracle.lineWrapping
      ? e.height * s
      : r.total * this.heightOracle.charWidth * s
  }
  updateLineGaps(e) {
    cc.same(e, this.lineGaps) ||
      ((this.lineGaps = e),
      (this.lineGapDeco = K.set(
        e.map((t) => t.draw(this, this.heightOracle.lineWrapping))
      )))
  }
  computeVisibleRanges() {
    let e = this.stateDeco
    this.lineGaps.length && (e = e.concat(this.lineGapDeco))
    let t = []
    fe.spans(
      e,
      this.viewport.from,
      this.viewport.to,
      {
        span(r, s) {
          t.push({ from: r, to: s })
        },
        point() {}
      },
      20
    )
    let i =
      t.length != this.visibleRanges.length ||
      this.visibleRanges.some((r, s) => r.from != t[s].from || r.to != t[s].to)
    return (this.visibleRanges = t), i ? 4 : 0
  }
  lineBlockAt(e) {
    return (
      (e >= this.viewport.from &&
        e <= this.viewport.to &&
        this.viewportLines.find((t) => t.from <= e && t.to >= e)) ||
      jr(
        this.heightMap.lineAt(e, Se.ByPos, this.heightOracle, 0, 0),
        this.scaler
      )
    )
  }
  lineBlockAtHeight(e) {
    return jr(
      this.heightMap.lineAt(
        this.scaler.fromDOM(e),
        Se.ByHeight,
        this.heightOracle,
        0,
        0
      ),
      this.scaler
    )
  }
  scrollAnchorAt(e) {
    let t = this.lineBlockAtHeight(e + 8)
    return t.from >= this.viewport.from || this.viewportLines[0].top - e > 200
      ? t
      : this.viewportLines[0]
  }
  elementAtHeight(e) {
    return jr(
      this.heightMap.blockAt(this.scaler.fromDOM(e), this.heightOracle, 0, 0),
      this.scaler
    )
  }
  get docHeight() {
    return this.scaler.toDOM(this.heightMap.height)
  }
  get contentHeight() {
    return this.docHeight + this.paddingTop + this.paddingBottom
  }
}
class no {
  constructor(e, t) {
    ;(this.from = e), (this.to = t)
  }
}
function $C(n, e, t) {
  let i = [],
    r = n,
    s = 0
  return (
    fe.spans(
      t,
      n,
      e,
      {
        span() {},
        point(o, a) {
          o > r && (i.push({ from: r, to: o }), (s += o - r)), (r = a)
        }
      },
      20
    ),
    r < e && (i.push({ from: r, to: e }), (s += e - r)),
    { total: s, ranges: i }
  )
}
function io({ total: n, ranges: e }, t) {
  if (t <= 0) return e[0].from
  if (t >= 1) return e[e.length - 1].to
  let i = Math.floor(n * t)
  for (let r = 0; ; r++) {
    let { from: s, to: o } = e[r],
      a = o - s
    if (i <= a) return s + i
    i -= a
  }
}
function ro(n, e) {
  let t = 0
  for (let { from: i, to: r } of n.ranges) {
    if (e <= r) {
      t += e - i
      break
    }
    t += r - i
  }
  return t / n.total
}
function PC(n, e) {
  for (let t of n) if (e(t)) return t
}
const Mp = {
  toDOM(n) {
    return n
  },
  fromDOM(n) {
    return n
  },
  scale: 1
}
class QC {
  constructor(e, t, i) {
    let r = 0,
      s = 0,
      o = 0
    ;(this.viewports = i.map(({ from: a, to: l }) => {
      let c = t.lineAt(a, Se.ByPos, e, 0, 0).top,
        u = t.lineAt(l, Se.ByPos, e, 0, 0).bottom
      return (
        (r += u - c),
        { from: a, to: l, top: c, bottom: u, domTop: 0, domBottom: 0 }
      )
    })),
      (this.scale = (7e6 - r) / (t.height - r))
    for (let a of this.viewports)
      (a.domTop = o + (a.top - s) * this.scale),
        (o = a.domBottom = a.domTop + (a.bottom - a.top)),
        (s = a.bottom)
  }
  toDOM(e) {
    for (let t = 0, i = 0, r = 0; ; t++) {
      let s = t < this.viewports.length ? this.viewports[t] : null
      if (!s || e < s.top) return r + (e - i) * this.scale
      if (e <= s.bottom) return s.domTop + (e - s.top)
      ;(i = s.bottom), (r = s.domBottom)
    }
  }
  fromDOM(e) {
    for (let t = 0, i = 0, r = 0; ; t++) {
      let s = t < this.viewports.length ? this.viewports[t] : null
      if (!s || e < s.domTop) return i + (e - r) / this.scale
      if (e <= s.domBottom) return s.top + (e - s.domTop)
      ;(i = s.bottom), (r = s.domBottom)
    }
  }
}
function jr(n, e) {
  if (e.scale == 1) return n
  let t = e.toDOM(n.top),
    i = e.toDOM(n.bottom)
  return new en(
    n.from,
    n.length,
    t,
    i - t,
    Array.isArray(n._content) ? n._content.map((r) => jr(r, e)) : n._content
  )
}
const so = /* @__PURE__ */ q.define({ combine: (n) => n.join(' ') }),
  Bu = /* @__PURE__ */ q.define({ combine: (n) => n.indexOf(!0) > -1 }),
  Lu = /* @__PURE__ */ Fn.newName(),
  ab = /* @__PURE__ */ Fn.newName(),
  lb = /* @__PURE__ */ Fn.newName(),
  cb = { '&light': '.' + ab, '&dark': '.' + lb }
function Uu(n, e, t) {
  return new Fn(e, {
    finish(i) {
      return /&/.test(i)
        ? i.replace(/&\w*/, (r) => {
            if (r == '&') return n
            if (!t || !t[r]) throw new RangeError(`Unsupported selector: ${r}`)
            return t[r]
          })
        : n + ' ' + i
    }
  })
}
const kC = /* @__PURE__ */ Uu(
    '.' + Lu,
    {
      '&': {
        position: 'relative !important',
        boxSizing: 'border-box',
        '&.cm-focused': {
          // Provide a simple default outline to make sure a focused
          // editor is visually distinct. Can't leave the default behavior
          // because that will apply to the content element, which is
          // inside the scrollable container and doesn't include the
          // gutters. We also can't use an 'auto' outline, since those
          // are, for some reason, drawn behind the element content, which
          // will cause things like the active line background to cover
          // the outline (#297).
          outline: '1px dotted #212121'
        },
        display: 'flex !important',
        flexDirection: 'column'
      },
      '.cm-scroller': {
        display: 'flex !important',
        alignItems: 'flex-start !important',
        fontFamily: 'monospace',
        lineHeight: 1.4,
        height: '100%',
        overflowX: 'auto',
        position: 'relative',
        zIndex: 0
      },
      '.cm-content': {
        margin: 0,
        flexGrow: 2,
        flexShrink: 0,
        display: 'block',
        whiteSpace: 'pre',
        wordWrap: 'normal',
        boxSizing: 'border-box',
        minHeight: '100%',
        padding: '4px 0',
        outline: 'none',
        '&[contenteditable=true]': {
          WebkitUserModify: 'read-write-plaintext-only'
        }
      },
      '.cm-lineWrapping': {
        whiteSpace_fallback: 'pre-wrap',
        whiteSpace: 'break-spaces',
        wordBreak: 'break-word',
        overflowWrap: 'anywhere',
        flexShrink: 1
      },
      '&light .cm-content': { caretColor: 'black' },
      '&dark .cm-content': { caretColor: 'white' },
      '.cm-line': {
        display: 'block',
        padding: '0 2px 0 6px'
      },
      '.cm-layer': {
        position: 'absolute',
        left: 0,
        top: 0,
        contain: 'size style',
        '& > *': {
          position: 'absolute'
        }
      },
      '&light .cm-selectionBackground': {
        background: '#d9d9d9'
      },
      '&dark .cm-selectionBackground': {
        background: '#222'
      },
      '&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground':
        {
          background: '#d7d4f0'
        },
      '&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground':
        {
          background: '#233'
        },
      '.cm-cursorLayer': {
        pointerEvents: 'none'
      },
      '&.cm-focused > .cm-scroller > .cm-cursorLayer': {
        animation: 'steps(1) cm-blink 1.2s infinite'
      },
      // Two animations defined so that we can switch between them to
      // restart the animation without forcing another style
      // recomputation.
      '@keyframes cm-blink': { '0%': {}, '50%': { opacity: 0 }, '100%': {} },
      '@keyframes cm-blink2': { '0%': {}, '50%': { opacity: 0 }, '100%': {} },
      '.cm-cursor, .cm-dropCursor': {
        borderLeft: '1.2px solid black',
        marginLeft: '-0.6px',
        pointerEvents: 'none'
      },
      '.cm-cursor': {
        display: 'none'
      },
      '&dark .cm-cursor': {
        borderLeftColor: '#444'
      },
      '.cm-dropCursor': {
        position: 'absolute'
      },
      '&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor': {
        display: 'block'
      },
      '&light .cm-activeLine': { backgroundColor: '#cceeff44' },
      '&dark .cm-activeLine': { backgroundColor: '#99eeff33' },
      '&light .cm-specialChar': { color: 'red' },
      '&dark .cm-specialChar': { color: '#f78' },
      '.cm-gutters': {
        flexShrink: 0,
        display: 'flex',
        height: '100%',
        boxSizing: 'border-box',
        insetInlineStart: 0,
        zIndex: 200
      },
      '&light .cm-gutters': {
        backgroundColor: '#f5f5f5',
        color: '#6c6c6c',
        borderRight: '1px solid #ddd'
      },
      '&dark .cm-gutters': {
        backgroundColor: '#333338',
        color: '#ccc'
      },
      '.cm-gutter': {
        display: 'flex !important',
        flexDirection: 'column',
        flexShrink: 0,
        boxSizing: 'border-box',
        minHeight: '100%',
        overflow: 'hidden'
      },
      '.cm-gutterElement': {
        boxSizing: 'border-box'
      },
      '.cm-lineNumbers .cm-gutterElement': {
        padding: '0 3px 0 5px',
        minWidth: '20px',
        textAlign: 'right',
        whiteSpace: 'nowrap'
      },
      '&light .cm-activeLineGutter': {
        backgroundColor: '#e2f2ff'
      },
      '&dark .cm-activeLineGutter': {
        backgroundColor: '#222227'
      },
      '.cm-panels': {
        boxSizing: 'border-box',
        position: 'sticky',
        left: 0,
        right: 0
      },
      '&light .cm-panels': {
        backgroundColor: '#f5f5f5',
        color: 'black'
      },
      '&light .cm-panels-top': {
        borderBottom: '1px solid #ddd'
      },
      '&light .cm-panels-bottom': {
        borderTop: '1px solid #ddd'
      },
      '&dark .cm-panels': {
        backgroundColor: '#333338',
        color: 'white'
      },
      '.cm-tab': {
        display: 'inline-block',
        overflow: 'hidden',
        verticalAlign: 'bottom'
      },
      '.cm-widgetBuffer': {
        verticalAlign: 'text-top',
        height: '1em',
        width: 0,
        display: 'inline'
      },
      '.cm-placeholder': {
        color: '#888',
        display: 'inline-block',
        verticalAlign: 'top'
      },
      '.cm-highlightSpace:before': {
        content: 'attr(data-display)',
        position: 'absolute',
        pointerEvents: 'none',
        color: '#888'
      },
      '.cm-highlightTab': {
        backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
        backgroundSize: 'auto 100%',
        backgroundPosition: 'right 90%',
        backgroundRepeat: 'no-repeat'
      },
      '.cm-trailingSpace': {
        backgroundColor: '#ff332255'
      },
      '.cm-button': {
        verticalAlign: 'middle',
        color: 'inherit',
        fontSize: '70%',
        padding: '.2em 1em',
        borderRadius: '1px'
      },
      '&light .cm-button': {
        backgroundImage: 'linear-gradient(#eff1f5, #d9d9df)',
        border: '1px solid #888',
        '&:active': {
          backgroundImage: 'linear-gradient(#b4b4b4, #d0d3d6)'
        }
      },
      '&dark .cm-button': {
        backgroundImage: 'linear-gradient(#393939, #111)',
        border: '1px solid #888',
        '&:active': {
          backgroundImage: 'linear-gradient(#111, #333)'
        }
      },
      '.cm-textfield': {
        verticalAlign: 'middle',
        color: 'inherit',
        fontSize: '70%',
        border: '1px solid silver',
        padding: '.2em .5em'
      },
      '&light .cm-textfield': {
        backgroundColor: 'white'
      },
      '&dark .cm-textfield': {
        border: '1px solid #555',
        backgroundColor: 'inherit'
      }
    },
    cb
  ),
  Br = '￿'
class TC {
  constructor(e, t) {
    ;(this.points = e),
      (this.text = ''),
      (this.lineSeparator = t.facet(oe.lineSeparator))
  }
  append(e) {
    this.text += e
  }
  lineBreak() {
    this.text += Br
  }
  readRange(e, t) {
    if (!e) return this
    let i = e.parentNode
    for (let r = e; ; ) {
      this.findPointBefore(i, r)
      let s = this.text.length
      this.readNode(r)
      let o = r.nextSibling
      if (o == t) break
      let a = xe.get(r),
        l = xe.get(o)
      ;(a && l
        ? a.breakAfter
        : (a ? a.breakAfter : Vp(r)) ||
          (Vp(o) &&
            (r.nodeName != 'BR' || r.cmIgnore) &&
            this.text.length > s)) && this.lineBreak(),
        (r = o)
    }
    return this.findPointBefore(i, t), this
  }
  readTextNode(e) {
    let t = e.nodeValue
    for (let i of this.points)
      i.node == e && (i.pos = this.text.length + Math.min(i.offset, t.length))
    for (let i = 0, r = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
      let s = -1,
        o = 1,
        a
      if (
        (this.lineSeparator
          ? ((s = t.indexOf(this.lineSeparator, i)),
            (o = this.lineSeparator.length))
          : (a = r.exec(t)) && ((s = a.index), (o = a[0].length)),
        this.append(t.slice(i, s < 0 ? t.length : s)),
        s < 0)
      )
        break
      if ((this.lineBreak(), o > 1))
        for (let l of this.points)
          l.node == e && l.pos > this.text.length && (l.pos -= o - 1)
      i = s + o
    }
  }
  readNode(e) {
    if (e.cmIgnore) return
    let t = xe.get(e),
      i = t && t.overrideDOMText
    if (i != null) {
      this.findPointInside(e, i.length)
      for (let r = i.iter(); !r.next().done; )
        r.lineBreak ? this.lineBreak() : this.append(r.value)
    } else
      e.nodeType == 3
        ? this.readTextNode(e)
        : e.nodeName == 'BR'
          ? e.nextSibling && this.lineBreak()
          : e.nodeType == 1 && this.readRange(e.firstChild, null)
  }
  findPointBefore(e, t) {
    for (let i of this.points)
      i.node == e && e.childNodes[i.offset] == t && (i.pos = this.text.length)
  }
  findPointInside(e, t) {
    for (let i of this.points)
      (e.nodeType == 3 ? i.node == e : e.contains(i.node)) &&
        (i.pos = this.text.length + (CC(e, i.node, i.offset) ? t : 0))
  }
}
function CC(n, e, t) {
  for (;;) {
    if (!e || t < xn(e)) return !1
    if (e == n) return !0
    ;(t = is(e) + 1), (e = e.parentNode)
  }
}
function Vp(n) {
  return (
    n.nodeType == 1 &&
    /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(n.nodeName)
  )
}
class Wp {
  constructor(e, t) {
    ;(this.node = e), (this.offset = t), (this.pos = -1)
  }
}
class _C {
  constructor(e, t, i, r) {
    ;(this.typeOver = r), (this.bounds = null), (this.text = '')
    let { impreciseHead: s, impreciseAnchor: o } = e.docView
    if (e.state.readOnly && t > -1) this.newSel = null
    else if (t > -1 && (this.bounds = e.docView.domBoundsAround(t, i, 0))) {
      let a = s || o ? [] : RC(e),
        l = new TC(a, e.state)
      l.readRange(this.bounds.startDOM, this.bounds.endDOM),
        (this.text = l.text),
        (this.newSel = EC(a, this.bounds.from))
    } else {
      let a = e.observer.selectionRange,
        l =
          (s && s.node == a.focusNode && s.offset == a.focusOffset) ||
          !_u(e.contentDOM, a.focusNode)
            ? e.state.selection.main.head
            : e.docView.posFromDOM(a.focusNode, a.focusOffset),
        c =
          (o && o.node == a.anchorNode && o.offset == a.anchorOffset) ||
          !_u(e.contentDOM, a.anchorNode)
            ? e.state.selection.main.anchor
            : e.docView.posFromDOM(a.anchorNode, a.anchorOffset)
      this.newSel = _.single(c, l)
    }
  }
}
function ub(n, e) {
  let t,
    { newSel: i } = e,
    r = n.state.selection.main,
    s =
      n.inputState.lastKeyTime > Date.now() - 100
        ? n.inputState.lastKeyCode
        : -1
  if (e.bounds) {
    let { from: o, to: a } = e.bounds,
      l = r.from,
      c = null
    ;(s === 8 || (G.android && e.text.length < a - o)) &&
      ((l = r.to), (c = 'end'))
    let u = AC(n.state.doc.sliceString(o, a, Br), e.text, l - o, c)
    u &&
      (G.chrome &&
        s == 13 &&
        u.toB == u.from + 2 &&
        e.text.slice(u.from, u.toB) == Br + Br &&
        u.toB--,
      (t = {
        from: o + u.from,
        to: o + u.toA,
        insert: ue.of(e.text.slice(u.from, u.toB).split(Br))
      }))
  } else i && ((!n.hasFocus && n.state.facet($l)) || i.main.eq(r)) && (i = null)
  if (!t && !i) return !1
  if (
    (!t && e.typeOver && !r.empty && i && i.main.empty
      ? (t = {
          from: r.from,
          to: r.to,
          insert: n.state.doc.slice(r.from, r.to)
        })
      : t &&
          t.from >= r.from &&
          t.to <= r.to &&
          (t.from != r.from || t.to != r.to) &&
          r.to - r.from - (t.to - t.from) <= 4
        ? (t = {
            from: r.from,
            to: r.to,
            insert: n.state.doc
              .slice(r.from, t.from)
              .append(t.insert)
              .append(n.state.doc.slice(t.to, r.to))
          })
        : (G.mac || G.android) &&
            t &&
            t.from == t.to &&
            t.from == r.head - 1 &&
            /^\. ?$/.test(t.insert.toString()) &&
            n.contentDOM.getAttribute('autocorrect') == 'off'
          ? (i &&
              t.insert.length == 2 &&
              (i = _.single(i.main.anchor - 1, i.main.head - 1)),
            (t = { from: r.from, to: r.to, insert: ue.of([' ']) }))
          : G.chrome &&
            t &&
            t.from == t.to &&
            t.from == r.head &&
            t.insert.toString() ==
              `
 ` &&
            n.lineWrapping &&
            (i && (i = _.single(i.main.anchor - 1, i.main.head - 1)),
            (t = { from: r.from, to: r.to, insert: ue.of([' ']) })),
    t)
  ) {
    if (
      (G.ios && n.inputState.flushIOSKey()) ||
      (G.android &&
        ((t.from == r.from &&
          t.to == r.to &&
          t.insert.length == 1 &&
          t.insert.lines == 2 &&
          Li(n.contentDOM, 'Enter', 13)) ||
          (((t.from == r.from - 1 && t.to == r.to && t.insert.length == 0) ||
            (s == 8 && t.insert.length < t.to - t.from && t.to > r.head)) &&
            Li(n.contentDOM, 'Backspace', 8)) ||
          (t.from == r.from &&
            t.to == r.to + 1 &&
            t.insert.length == 0 &&
            Li(n.contentDOM, 'Delete', 46))))
    )
      return !0
    let o = t.insert.toString()
    n.inputState.composing >= 0 && n.inputState.composing++
    let a,
      l = () => a || (a = ZC(n, t, i))
    return (
      n.state.facet(Dy).some((c) => c(n, t.from, t.to, o, l)) ||
        n.dispatch(l()),
      !0
    )
  } else if (i && !i.main.eq(r)) {
    let o = !1,
      a = 'select'
    return (
      n.inputState.lastSelectionTime > Date.now() - 50 &&
        (n.inputState.lastSelectionOrigin == 'select' && (o = !0),
        (a = n.inputState.lastSelectionOrigin)),
      n.dispatch({ selection: i, scrollIntoView: o, userEvent: a }),
      !0
    )
  } else return !1
}
function ZC(n, e, t) {
  let i,
    r = n.state,
    s = r.selection.main
  if (
    e.from >= s.from &&
    e.to <= s.to &&
    e.to - e.from >= (s.to - s.from) / 3 &&
    (!t || (t.main.empty && t.main.from == e.from + e.insert.length)) &&
    n.inputState.composing < 0
  ) {
    let a = s.from < e.from ? r.sliceDoc(s.from, e.from) : '',
      l = s.to > e.to ? r.sliceDoc(e.to, s.to) : ''
    i = r.replaceSelection(
      n.state.toText(a + e.insert.sliceString(0, void 0, n.state.lineBreak) + l)
    )
  } else {
    let a = r.changes(e),
      l = t && t.main.to <= a.newLength ? t.main : void 0
    if (
      r.selection.ranges.length > 1 &&
      n.inputState.composing >= 0 &&
      e.to <= s.to &&
      e.to >= s.to - 10
    ) {
      let c = n.state.sliceDoc(e.from, e.to),
        u,
        f = t && zy(n, t.main.head)
      if (f) {
        let O = e.insert.length - (e.to - e.from)
        u = { from: f.from, to: f.to - O }
      } else u = n.state.doc.lineAt(s.head)
      let h = s.to - e.to,
        d = s.to - s.from
      i = r.changeByRange((O) => {
        if (O.from == s.from && O.to == s.to)
          return { changes: a, range: l || O.map(a) }
        let m = O.to - h,
          b = m - c.length
        if (
          O.to - O.from != d ||
          n.state.sliceDoc(b, m) != c || // Unfortunately, there's no way to make multiple
          // changes in the same node work without aborting
          // composition, so cursors in the composition range are
          // ignored.
          (O.to >= u.from && O.from <= u.to)
        )
          return { range: O }
        let x = r.changes({ from: b, to: m, insert: e.insert }),
          w = O.to - s.to
        return {
          changes: x,
          range: l
            ? _.range(Math.max(0, l.anchor + w), Math.max(0, l.head + w))
            : O.map(x)
        }
      })
    } else
      i = {
        changes: a,
        selection: l && r.selection.replaceRange(l)
      }
  }
  let o = 'input.type'
  return (
    (n.composing ||
      (n.inputState.compositionPendingChange &&
        n.inputState.compositionEndedAt > Date.now() - 50)) &&
      ((n.inputState.compositionPendingChange = !1),
      (o += '.compose'),
      n.inputState.compositionFirstChange &&
        ((o += '.start'), (n.inputState.compositionFirstChange = !1))),
    r.update(i, { userEvent: o, scrollIntoView: !0 })
  )
}
function AC(n, e, t, i) {
  let r = Math.min(n.length, e.length),
    s = 0
  for (; s < r && n.charCodeAt(s) == e.charCodeAt(s); ) s++
  if (s == r && n.length == e.length) return null
  let o = n.length,
    a = e.length
  for (; o > 0 && a > 0 && n.charCodeAt(o - 1) == e.charCodeAt(a - 1); )
    o--, a--
  if (i == 'end') {
    let l = Math.max(0, s - Math.min(o, a))
    t -= o + l - s
  }
  if (o < s && n.length < e.length) {
    let l = t <= s && t >= o ? s - t : 0
    ;(s -= l), (a = s + (a - o)), (o = s)
  } else if (a < s) {
    let l = t <= s && t >= a ? s - t : 0
    ;(s -= l), (o = s + (o - a)), (a = s)
  }
  return { from: s, toA: o, toB: a }
}
function RC(n) {
  let e = []
  if (n.root.activeElement != n.contentDOM) return e
  let {
    anchorNode: t,
    anchorOffset: i,
    focusNode: r,
    focusOffset: s
  } = n.observer.selectionRange
  return (
    t && (e.push(new Wp(t, i)), (r != t || s != i) && e.push(new Wp(r, s))), e
  )
}
function EC(n, e) {
  if (n.length == 0) return null
  let t = n[0].pos,
    i = n.length == 2 ? n[1].pos : t
  return t > -1 && i > -1 ? _.single(t + e, i + e) : null
}
const DC = {
    childList: !0,
    characterData: !0,
    subtree: !0,
    attributes: !0,
    characterDataOldValue: !0
  },
  uc = G.ie && G.ie_version <= 11
class XC {
  constructor(e) {
    ;(this.view = e),
      (this.active = !1),
      (this.selectionRange = new bT()),
      (this.selectionChanged = !1),
      (this.delayedFlush = -1),
      (this.resizeTimeout = -1),
      (this.queue = []),
      (this.delayedAndroidKey = null),
      (this.flushingAndroidKey = -1),
      (this.lastChange = 0),
      (this.scrollTargets = []),
      (this.intersection = null),
      (this.resizeScroll = null),
      (this.intersecting = !1),
      (this.gapIntersection = null),
      (this.gaps = []),
      (this.parentCheck = -1),
      (this.dom = e.contentDOM),
      (this.observer = new MutationObserver((t) => {
        for (let i of t) this.queue.push(i)
        ;((G.ie && G.ie_version <= 11) || (G.ios && e.composing)) &&
        t.some(
          (i) =>
            (i.type == 'childList' && i.removedNodes.length) ||
            (i.type == 'characterData' &&
              i.oldValue.length > i.target.nodeValue.length)
        )
          ? this.flushSoon()
          : this.flush()
      })),
      uc &&
        (this.onCharData = (t) => {
          this.queue.push({
            target: t.target,
            type: 'characterData',
            oldValue: t.prevValue
          }),
            this.flushSoon()
        }),
      (this.onSelectionChange = this.onSelectionChange.bind(this)),
      (this.onResize = this.onResize.bind(this)),
      (this.onPrint = this.onPrint.bind(this)),
      (this.onScroll = this.onScroll.bind(this)),
      typeof ResizeObserver == 'function' &&
        ((this.resizeScroll = new ResizeObserver(() => {
          var t
          ;((t = this.view.docView) === null || t === void 0
            ? void 0
            : t.lastUpdate) <
            Date.now() - 75 && this.onResize()
        })),
        this.resizeScroll.observe(e.scrollDOM)),
      this.addWindowListeners((this.win = e.win)),
      this.start(),
      typeof IntersectionObserver == 'function' &&
        ((this.intersection = new IntersectionObserver(
          (t) => {
            this.parentCheck < 0 &&
              (this.parentCheck = setTimeout(
                this.listenForScroll.bind(this),
                1e3
              )),
              t.length > 0 &&
                t[t.length - 1].intersectionRatio > 0 != this.intersecting &&
                ((this.intersecting = !this.intersecting),
                this.intersecting != this.view.inView &&
                  this.onScrollChanged(document.createEvent('Event')))
          },
          { threshold: [0, 1e-3] }
        )),
        this.intersection.observe(this.dom),
        (this.gapIntersection = new IntersectionObserver((t) => {
          t.length > 0 &&
            t[t.length - 1].intersectionRatio > 0 &&
            this.onScrollChanged(document.createEvent('Event'))
        }, {}))),
      this.listenForScroll(),
      this.readSelectionRange()
  }
  onScrollChanged(e) {
    this.view.inputState.runHandlers('scroll', e),
      this.intersecting && this.view.measure()
  }
  onScroll(e) {
    this.intersecting && this.flush(!1), this.onScrollChanged(e)
  }
  onResize() {
    this.resizeTimeout < 0 &&
      (this.resizeTimeout = setTimeout(() => {
        ;(this.resizeTimeout = -1), this.view.requestMeasure()
      }, 50))
  }
  onPrint() {
    ;(this.view.viewState.printing = !0),
      this.view.measure(),
      setTimeout(() => {
        ;(this.view.viewState.printing = !1), this.view.requestMeasure()
      }, 500)
  }
  updateGaps(e) {
    if (
      this.gapIntersection &&
      (e.length != this.gaps.length || this.gaps.some((t, i) => t != e[i]))
    ) {
      this.gapIntersection.disconnect()
      for (let t of e) this.gapIntersection.observe(t)
      this.gaps = e
    }
  }
  onSelectionChange(e) {
    let t = this.selectionChanged
    if (!this.readSelectionRange() || this.delayedAndroidKey) return
    let { view: i } = this,
      r = this.selectionRange
    if (i.state.facet($l) ? i.root.activeElement != this.dom : !Vo(i.dom, r))
      return
    let s = r.anchorNode && i.docView.nearest(r.anchorNode)
    if (s && s.ignoreEvent(e)) {
      t || (this.selectionChanged = !1)
      return
    }
    ;((G.ie && G.ie_version <= 11) || (G.android && G.chrome)) &&
    !i.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
    r.focusNode &&
    _a(r.focusNode, r.focusOffset, r.anchorNode, r.anchorOffset)
      ? this.flushSoon()
      : this.flush(!1)
  }
  readSelectionRange() {
    let { view: e } = this,
      t =
        (G.safari &&
          e.root.nodeType == 11 &&
          OT(this.dom.ownerDocument) == this.dom &&
          YC(this.view)) ||
        Ca(e.root)
    if (!t || this.selectionRange.eq(t)) return !1
    let i = Vo(this.dom, t)
    return i &&
      !this.selectionChanged &&
      e.inputState.lastFocusTime > Date.now() - 200 &&
      e.inputState.lastTouchTime < Date.now() - 300 &&
      ST(this.dom, t)
      ? ((this.view.inputState.lastFocusTime = 0),
        e.docView.updateSelection(),
        !1)
      : (this.selectionRange.setRange(t), i && (this.selectionChanged = !0), !0)
  }
  setSelectionRange(e, t) {
    this.selectionRange.set(e.node, e.offset, t.node, t.offset),
      (this.selectionChanged = !1)
  }
  clearSelectionRange() {
    this.selectionRange.set(null, 0, null, 0)
  }
  listenForScroll() {
    this.parentCheck = -1
    let e = 0,
      t = null
    for (let i = this.dom; i; )
      if (i.nodeType == 1)
        !t && e < this.scrollTargets.length && this.scrollTargets[e] == i
          ? e++
          : t || (t = this.scrollTargets.slice(0, e)),
          t && t.push(i),
          (i = i.assignedSlot || i.parentNode)
      else if (i.nodeType == 11) i = i.host
      else break
    if (
      (e < this.scrollTargets.length &&
        !t &&
        (t = this.scrollTargets.slice(0, e)),
      t)
    ) {
      for (let i of this.scrollTargets)
        i.removeEventListener('scroll', this.onScroll)
      for (let i of (this.scrollTargets = t))
        i.addEventListener('scroll', this.onScroll)
    }
  }
  ignore(e) {
    if (!this.active) return e()
    try {
      return this.stop(), e()
    } finally {
      this.start(), this.clear()
    }
  }
  start() {
    this.active ||
      (this.observer.observe(this.dom, DC),
      uc &&
        this.dom.addEventListener('DOMCharacterDataModified', this.onCharData),
      (this.active = !0))
  }
  stop() {
    this.active &&
      ((this.active = !1),
      this.observer.disconnect(),
      uc &&
        this.dom.removeEventListener(
          'DOMCharacterDataModified',
          this.onCharData
        ))
  }
  // Throw away any pending changes
  clear() {
    this.processRecords(), (this.queue.length = 0), (this.selectionChanged = !1)
  }
  // Chrome Android, especially in combination with GBoard, not only
  // doesn't reliably fire regular key events, but also often
  // surrounds the effect of enter or backspace with a bunch of
  // composition events that, when interrupted, cause text duplication
  // or other kinds of corruption. This hack makes the editor back off
  // from handling DOM changes for a moment when such a key is
  // detected (via beforeinput or keydown), and then tries to flush
  // them or, if that has no effect, dispatches the given key.
  delayAndroidKey(e, t) {
    var i
    if (!this.delayedAndroidKey) {
      let r = () => {
        let s = this.delayedAndroidKey
        s &&
          (this.clearDelayedAndroidKey(),
          (this.view.inputState.lastKeyCode = s.keyCode),
          (this.view.inputState.lastKeyTime = Date.now()),
          !this.flush() && s.force && Li(this.dom, s.key, s.keyCode))
      }
      this.flushingAndroidKey = this.view.win.requestAnimationFrame(r)
    }
    ;(!this.delayedAndroidKey || e == 'Enter') &&
      (this.delayedAndroidKey = {
        key: e,
        keyCode: t,
        // Only run the key handler when no changes are detected if
        // this isn't coming right after another change, in which case
        // it is probably part of a weird chain of updates, and should
        // be ignored if it returns the DOM to its previous state.
        force:
          this.lastChange < Date.now() - 50 ||
          !!(
            !((i = this.delayedAndroidKey) === null || i === void 0) && i.force
          )
      })
  }
  clearDelayedAndroidKey() {
    this.win.cancelAnimationFrame(this.flushingAndroidKey),
      (this.delayedAndroidKey = null),
      (this.flushingAndroidKey = -1)
  }
  flushSoon() {
    this.delayedFlush < 0 &&
      (this.delayedFlush = this.view.win.requestAnimationFrame(() => {
        ;(this.delayedFlush = -1), this.flush()
      }))
  }
  forceFlush() {
    this.delayedFlush >= 0 &&
      (this.view.win.cancelAnimationFrame(this.delayedFlush),
      (this.delayedFlush = -1)),
      this.flush()
  }
  pendingRecords() {
    for (let e of this.observer.takeRecords()) this.queue.push(e)
    return this.queue
  }
  processRecords() {
    let e = this.pendingRecords()
    e.length && (this.queue = [])
    let t = -1,
      i = -1,
      r = !1
    for (let s of e) {
      let o = this.readMutation(s)
      o &&
        (o.typeOver && (r = !0),
        t == -1
          ? ({ from: t, to: i } = o)
          : ((t = Math.min(o.from, t)), (i = Math.max(o.to, i))))
    }
    return { from: t, to: i, typeOver: r }
  }
  readChange() {
    let { from: e, to: t, typeOver: i } = this.processRecords(),
      r = this.selectionChanged && Vo(this.dom, this.selectionRange)
    if (e < 0 && !r) return null
    e > -1 && (this.lastChange = Date.now()),
      (this.view.inputState.lastFocusTime = 0),
      (this.selectionChanged = !1)
    let s = new _C(this.view, e, t, i)
    return (
      (this.view.docView.domChanged = {
        newSel: s.newSel ? s.newSel.main : null
      }),
      s
    )
  }
  // Apply pending changes, if any
  flush(e = !0) {
    if (this.delayedFlush >= 0 || this.delayedAndroidKey) return !1
    e && this.readSelectionRange()
    let t = this.readChange()
    if (!t) return this.view.requestMeasure(), !1
    let i = this.view.state,
      r = ub(this.view, t)
    return this.view.state == i && this.view.update([]), r
  }
  readMutation(e) {
    let t = this.view.docView.nearest(e.target)
    if (!t || t.ignoreMutation(e)) return null
    if (
      (t.markDirty(e.type == 'attributes'),
      e.type == 'attributes' && (t.flags |= 4),
      e.type == 'childList')
    ) {
      let i = jp(t, e.previousSibling || e.target.previousSibling, -1),
        r = jp(t, e.nextSibling || e.target.nextSibling, 1)
      return {
        from: i ? t.posAfter(i) : t.posAtStart,
        to: r ? t.posBefore(r) : t.posAtEnd,
        typeOver: !1
      }
    } else
      return e.type == 'characterData'
        ? {
            from: t.posAtStart,
            to: t.posAtEnd,
            typeOver: e.target.nodeValue == e.oldValue
          }
        : null
  }
  setWindow(e) {
    e != this.win &&
      (this.removeWindowListeners(this.win),
      (this.win = e),
      this.addWindowListeners(this.win))
  }
  addWindowListeners(e) {
    e.addEventListener('resize', this.onResize),
      e.addEventListener('beforeprint', this.onPrint),
      e.addEventListener('scroll', this.onScroll),
      e.document.addEventListener('selectionchange', this.onSelectionChange)
  }
  removeWindowListeners(e) {
    e.removeEventListener('scroll', this.onScroll),
      e.removeEventListener('resize', this.onResize),
      e.removeEventListener('beforeprint', this.onPrint),
      e.document.removeEventListener('selectionchange', this.onSelectionChange)
  }
  destroy() {
    var e, t, i
    this.stop(),
      (e = this.intersection) === null || e === void 0 || e.disconnect(),
      (t = this.gapIntersection) === null || t === void 0 || t.disconnect(),
      (i = this.resizeScroll) === null || i === void 0 || i.disconnect()
    for (let r of this.scrollTargets)
      r.removeEventListener('scroll', this.onScroll)
    this.removeWindowListeners(this.win),
      clearTimeout(this.parentCheck),
      clearTimeout(this.resizeTimeout),
      this.win.cancelAnimationFrame(this.delayedFlush),
      this.win.cancelAnimationFrame(this.flushingAndroidKey)
  }
}
function jp(n, e, t) {
  for (; e; ) {
    let i = xe.get(e)
    if (i && i.parent == n) return i
    let r = e.parentNode
    e = r != n.dom ? r : t > 0 ? e.nextSibling : e.previousSibling
  }
  return null
}
function YC(n) {
  let e = null
  function t(l) {
    l.preventDefault(),
      l.stopImmediatePropagation(),
      (e = l.getTargetRanges()[0])
  }
  if (
    (n.contentDOM.addEventListener('beforeinput', t, !0),
    n.dom.ownerDocument.execCommand('indent'),
    n.contentDOM.removeEventListener('beforeinput', t, !0),
    !e)
  )
    return null
  let i = e.startContainer,
    r = e.startOffset,
    s = e.endContainer,
    o = e.endOffset,
    a = n.docView.domAtPos(n.state.selection.main.anchor)
  return (
    _a(a.node, a.offset, s, o) && ([i, r, s, o] = [s, o, i, r]),
    { anchorNode: i, anchorOffset: r, focusNode: s, focusOffset: o }
  )
}
class M {
  /**
  The current editor state.
  */
  get state() {
    return this.viewState.state
  }
  /**
  To be able to display large documents without consuming too much
  memory or overloading the browser, CodeMirror only draws the
  code that is visible (plus a margin around it) to the DOM. This
  property tells you the extent of the current drawn viewport, in
  document positions.
  */
  get viewport() {
    return this.viewState.viewport
  }
  /**
  When there are, for example, large collapsed ranges in the
  viewport, its size can be a lot bigger than the actual visible
  content. Thus, if you are doing something like styling the
  content in the viewport, it is preferable to only do so for
  these ranges, which are the subset of the viewport that is
  actually drawn.
  */
  get visibleRanges() {
    return this.viewState.visibleRanges
  }
  /**
  Returns false when the editor is entirely scrolled out of view
  or otherwise hidden.
  */
  get inView() {
    return this.viewState.inView
  }
  /**
  Indicates whether the user is currently composing text via
  [IME](https://en.wikipedia.org/wiki/Input_method), and at least
  one change has been made in the current composition.
  */
  get composing() {
    return this.inputState.composing > 0
  }
  /**
  Indicates whether the user is currently in composing state. Note
  that on some platforms, like Android, this will be the case a
  lot, since just putting the cursor on a word starts a
  composition there.
  */
  get compositionStarted() {
    return this.inputState.composing >= 0
  }
  /**
  The document or shadow root that the view lives in.
  */
  get root() {
    return this._root
  }
  /**
  @internal
  */
  get win() {
    return this.dom.ownerDocument.defaultView || window
  }
  /**
  Construct a new view. You'll want to either provide a `parent`
  option, or put `view.dom` into your document after creating a
  view, so that the user can see the editor.
  */
  constructor(e = {}) {
    ;(this.plugins = []),
      (this.pluginMap = /* @__PURE__ */ new Map()),
      (this.editorAttrs = {}),
      (this.contentAttrs = {}),
      (this.bidiCache = []),
      (this.destroyed = !1),
      (this.updateState = 2),
      (this.measureScheduled = -1),
      (this.measureRequests = []),
      (this.contentDOM = document.createElement('div')),
      (this.scrollDOM = document.createElement('div')),
      (this.scrollDOM.tabIndex = -1),
      (this.scrollDOM.className = 'cm-scroller'),
      this.scrollDOM.appendChild(this.contentDOM),
      (this.announceDOM = document.createElement('div')),
      (this.announceDOM.style.cssText = 'position: fixed; top: -10000px'),
      this.announceDOM.setAttribute('aria-live', 'polite'),
      (this.dom = document.createElement('div')),
      this.dom.appendChild(this.announceDOM),
      this.dom.appendChild(this.scrollDOM)
    let { dispatch: t } = e
    ;(this.dispatchTransactions =
      e.dispatchTransactions ||
      (t && ((i) => i.forEach((r) => t(r, this)))) ||
      ((i) => this.update(i))),
      (this.dispatch = this.dispatch.bind(this)),
      (this._root = e.root || vT(e.parent) || document),
      (this.viewState = new Np(e.state || oe.create(e))),
      e.scrollTo &&
        e.scrollTo.is(Js) &&
        (this.viewState.scrollTarget = e.scrollTo.value.clip(
          this.viewState.state
        )),
      (this.plugins = this.state.facet(Vr).map((i) => new oc(i)))
    for (let i of this.plugins) i.update(this)
    ;(this.observer = new XC(this)),
      (this.inputState = new KT(this)),
      this.inputState.ensureHandlers(this.plugins),
      (this.docView = new Sp(this)),
      this.mountStyles(),
      this.updateAttrs(),
      (this.updateState = 0),
      this.requestMeasure(),
      e.parent && e.parent.appendChild(this.dom)
  }
  dispatch(...e) {
    let t =
      e.length == 1 && e[0] instanceof Ye
        ? e
        : e.length == 1 && Array.isArray(e[0])
          ? e[0]
          : [this.state.update(...e)]
    this.dispatchTransactions(t, this)
  }
  /**
  Update the view for the given array of transactions. This will
  update the visible document and selection to match the state
  produced by the transactions, and notify view plugins of the
  change. You should usually call
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
  as a primitive.
  */
  update(e) {
    if (this.updateState != 0)
      throw new Error(
        'Calls to EditorView.update are not allowed while an update is in progress'
      )
    let t = !1,
      i = !1,
      r,
      s = this.state
    for (let h of e) {
      if (h.startState != s)
        throw new RangeError(
          "Trying to update state with a transaction that doesn't start from the previous state."
        )
      s = h.state
    }
    if (this.destroyed) {
      this.viewState.state = s
      return
    }
    let o = this.hasFocus,
      a = 0,
      l = null
    e.some((h) => h.annotation(ib))
      ? ((this.inputState.notifiedFocused = o), (a = 1))
      : o != this.inputState.notifiedFocused &&
        ((this.inputState.notifiedFocused = o), (l = rb(s, o)), l || (a = 1))
    let c = this.observer.delayedAndroidKey,
      u = null
    if (
      (c
        ? (this.observer.clearDelayedAndroidKey(),
          (u = this.observer.readChange()),
          ((u && !this.state.doc.eq(s.doc)) ||
            !this.state.selection.eq(s.selection)) &&
            (u = null))
        : this.observer.clear(),
      s.facet(oe.phrases) != this.state.facet(oe.phrases))
    )
      return this.setState(s)
    ;(r = Za.create(this, s, e)), (r.flags |= a)
    let f = this.viewState.scrollTarget
    try {
      this.updateState = 2
      for (let h of e) {
        if ((f && (f = f.map(h.changes)), h.scrollIntoView)) {
          let { main: d } = h.state.selection
          f = new Ui(d.empty ? d : _.cursor(d.head, d.head > d.anchor ? -1 : 1))
        }
        for (let d of h.effects) d.is(Js) && (f = d.value.clip(this.state))
      }
      this.viewState.update(r, f),
        (this.bidiCache = Aa.update(this.bidiCache, r.changes)),
        r.empty || (this.updatePlugins(r), this.inputState.update(r)),
        (t = this.docView.update(r)),
        this.state.facet(Wr) != this.styleModules && this.mountStyles(),
        (i = this.updateAttrs()),
        this.showAnnouncements(e),
        this.docView.updateSelection(
          t,
          e.some((h) => h.isUserEvent('select.pointer'))
        )
    } finally {
      this.updateState = 0
    }
    if (
      (r.startState.facet(so) != r.state.facet(so) &&
        (this.viewState.mustMeasureContent = !0),
      (t ||
        i ||
        f ||
        this.viewState.mustEnforceCursorAssoc ||
        this.viewState.mustMeasureContent) &&
        this.requestMeasure(),
      !r.empty)
    )
      for (let h of this.state.facet(Yu))
        try {
          h(r)
        } catch (d) {
          Rt(this.state, d, 'update listener')
        }
    ;(l || u) &&
      Promise.resolve().then(() => {
        l && this.state == l.startState && this.dispatch(l),
          u && !ub(this, u) && c.force && Li(this.contentDOM, c.key, c.keyCode)
      })
  }
  /**
  Reset the view to the given state. (This will cause the entire
  document to be redrawn and all view plugins to be reinitialized,
  so you should probably only use it when the new state isn't
  derived from the old state. Otherwise, use
  [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
  */
  setState(e) {
    if (this.updateState != 0)
      throw new Error(
        'Calls to EditorView.setState are not allowed while an update is in progress'
      )
    if (this.destroyed) {
      this.viewState.state = e
      return
    }
    this.updateState = 2
    let t = this.hasFocus
    try {
      for (let i of this.plugins) i.destroy(this)
      ;(this.viewState = new Np(e)),
        (this.plugins = e.facet(Vr).map((i) => new oc(i))),
        this.pluginMap.clear()
      for (let i of this.plugins) i.update(this)
      ;(this.docView = new Sp(this)),
        this.inputState.ensureHandlers(this.plugins),
        this.mountStyles(),
        this.updateAttrs(),
        (this.bidiCache = [])
    } finally {
      this.updateState = 0
    }
    t && this.focus(), this.requestMeasure()
  }
  updatePlugins(e) {
    let t = e.startState.facet(Vr),
      i = e.state.facet(Vr)
    if (t != i) {
      let r = []
      for (let s of i) {
        let o = t.indexOf(s)
        if (o < 0) r.push(new oc(s))
        else {
          let a = this.plugins[o]
          ;(a.mustUpdate = e), r.push(a)
        }
      }
      for (let s of this.plugins) s.mustUpdate != e && s.destroy(this)
      ;(this.plugins = r), this.pluginMap.clear()
    } else for (let r of this.plugins) r.mustUpdate = e
    for (let r = 0; r < this.plugins.length; r++) this.plugins[r].update(this)
    t != i && this.inputState.ensureHandlers(this.plugins)
  }
  /**
  @internal
  */
  measure(e = !0) {
    if (this.destroyed) return
    if (
      (this.measureScheduled > -1 &&
        this.win.cancelAnimationFrame(this.measureScheduled),
      this.observer.delayedAndroidKey)
    ) {
      ;(this.measureScheduled = -1), this.requestMeasure()
      return
    }
    ;(this.measureScheduled = 0), e && this.observer.forceFlush()
    let t = null,
      i = this.scrollDOM,
      r = i.scrollTop * this.scaleY,
      { scrollAnchorPos: s, scrollAnchorHeight: o } = this.viewState
    Math.abs(r - this.viewState.scrollTop) > 1 && (o = -1),
      (this.viewState.scrollAnchorHeight = -1)
    try {
      for (let a = 0; ; a++) {
        if (o < 0)
          if (Sy(i)) (s = -1), (o = this.viewState.heightMap.height)
          else {
            let d = this.viewState.scrollAnchorAt(r)
            ;(s = d.from), (o = d.top)
          }
        this.updateState = 1
        let l = this.viewState.measure(this)
        if (
          !l &&
          !this.measureRequests.length &&
          this.viewState.scrollTarget == null
        )
          break
        if (a > 5) {
          console.warn(
            this.measureRequests.length
              ? 'Measure loop restarted more than 5 times'
              : 'Viewport failed to stabilize'
          )
          break
        }
        let c = []
        l & 4 || ([this.measureRequests, c] = [c, this.measureRequests])
        let u = c.map((d) => {
            try {
              return d.read(this)
            } catch (O) {
              return Rt(this.state, O), Bp
            }
          }),
          f = Za.create(this, this.state, []),
          h = !1
        ;(f.flags |= l),
          t ? (t.flags |= l) : (t = f),
          (this.updateState = 2),
          f.empty ||
            (this.updatePlugins(f),
            this.inputState.update(f),
            this.updateAttrs(),
            (h = this.docView.update(f)))
        for (let d = 0; d < c.length; d++)
          if (u[d] != Bp)
            try {
              let O = c[d]
              O.write && O.write(u[d], this)
            } catch (O) {
              Rt(this.state, O)
            }
        if (
          (h && this.docView.updateSelection(!0),
          !f.viewportChanged && this.measureRequests.length == 0)
        ) {
          if (this.viewState.editorHeight)
            if (this.viewState.scrollTarget) {
              this.docView.scrollIntoView(this.viewState.scrollTarget),
                (this.viewState.scrollTarget = null)
              continue
            } else {
              let O =
                (s < 0
                  ? this.viewState.heightMap.height
                  : this.viewState.lineBlockAt(s).top) - o
              if (O > 1 || O < -1) {
                ;(r = r + O), (i.scrollTop = r / this.scaleY), (o = -1)
                continue
              }
            }
          break
        }
      }
    } finally {
      ;(this.updateState = 0), (this.measureScheduled = -1)
    }
    if (t && !t.empty) for (let a of this.state.facet(Yu)) a(t)
  }
  /**
  Get the CSS classes for the currently active editor themes.
  */
  get themeClasses() {
    return (
      Lu + ' ' + (this.state.facet(Bu) ? lb : ab) + ' ' + this.state.facet(so)
    )
  }
  updateAttrs() {
    let e = Lp(this, Ny, {
        class:
          'cm-editor' +
          (this.hasFocus ? ' cm-focused ' : ' ') +
          this.themeClasses
      }),
      t = {
        spellcheck: 'false',
        autocorrect: 'off',
        autocapitalize: 'off',
        translate: 'no',
        contenteditable: this.state.facet($l) ? 'true' : 'false',
        class: 'cm-content',
        style: `${G.tabSize}: ${this.state.tabSize}`,
        role: 'textbox',
        'aria-multiline': 'true'
      }
    this.state.readOnly && (t['aria-readonly'] = 'true'), Lp(this, Wf, t)
    let i = this.observer.ignore(() => {
      let r = Du(this.contentDOM, this.contentAttrs, t),
        s = Du(this.dom, this.editorAttrs, e)
      return r || s
    })
    return (this.editorAttrs = e), (this.contentAttrs = t), i
  }
  showAnnouncements(e) {
    let t = !0
    for (let i of e)
      for (let r of i.effects)
        if (r.is(M.announce)) {
          t && (this.announceDOM.textContent = ''), (t = !1)
          let s = this.announceDOM.appendChild(document.createElement('div'))
          s.textContent = r.value
        }
  }
  mountStyles() {
    this.styleModules = this.state.facet(Wr)
    let e = this.state.facet(M.cspNonce)
    Fn.mount(
      this.root,
      this.styleModules.concat(kC).reverse(),
      e ? { nonce: e } : void 0
    )
  }
  readMeasured() {
    if (this.updateState == 2)
      throw new Error(
        "Reading the editor layout isn't allowed during an update"
      )
    this.updateState == 0 && this.measureScheduled > -1 && this.measure(!1)
  }
  /**
  Schedule a layout measurement, optionally providing callbacks to
  do custom DOM measuring followed by a DOM write phase. Using
  this is preferable reading DOM layout directly from, for
  example, an event handler, because it'll make sure measuring and
  drawing done by other components is synchronized, avoiding
  unnecessary DOM layout computations.
  */
  requestMeasure(e) {
    if (
      (this.measureScheduled < 0 &&
        (this.measureScheduled = this.win.requestAnimationFrame(() =>
          this.measure()
        )),
      e)
    ) {
      if (this.measureRequests.indexOf(e) > -1) return
      if (e.key != null) {
        for (let t = 0; t < this.measureRequests.length; t++)
          if (this.measureRequests[t].key === e.key) {
            this.measureRequests[t] = e
            return
          }
      }
      this.measureRequests.push(e)
    }
  }
  /**
  Get the value of a specific plugin, if present. Note that
  plugins that crash can be dropped from a view, so even when you
  know you registered a given plugin, it is recommended to check
  the return value of this method.
  */
  plugin(e) {
    let t = this.pluginMap.get(e)
    return (
      (t === void 0 || (t && t.spec != e)) &&
        this.pluginMap.set(
          e,
          (t = this.plugins.find((i) => i.spec == e) || null)
        ),
      t && t.update(this).value
    )
  }
  /**
  The top position of the document, in screen coordinates. This
  may be negative when the editor is scrolled down. Points
  directly to the top of the first line, not above the padding.
  */
  get documentTop() {
    return (
      this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop
    )
  }
  /**
  Reports the padding above and below the document.
  */
  get documentPadding() {
    return {
      top: this.viewState.paddingTop,
      bottom: this.viewState.paddingBottom
    }
  }
  /**
  If the editor is transformed with CSS, this provides the scale
  along the X axis. Otherwise, it will just be 1. Note that
  transforms other than translation and scaling are not supported.
  */
  get scaleX() {
    return this.viewState.scaleX
  }
  /**
  Provide the CSS transformed scale along the Y axis.
  */
  get scaleY() {
    return this.viewState.scaleY
  }
  /**
  Find the text line or block widget at the given vertical
  position (which is interpreted as relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
  */
  elementAtHeight(e) {
    return this.readMeasured(), this.viewState.elementAtHeight(e)
  }
  /**
  Find the line block (see
  [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
  height, again interpreted relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
  */
  lineBlockAtHeight(e) {
    return this.readMeasured(), this.viewState.lineBlockAtHeight(e)
  }
  /**
  Get the extent and vertical position of all [line
  blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
  are relative to the [top of the
  document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
  */
  get viewportLineBlocks() {
    return this.viewState.viewportLines
  }
  /**
  Find the line block around the given document position. A line
  block is a range delimited on both sides by either a
  non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
  start/end of the document. It will usually just hold a line of
  text, but may be broken into multiple textblocks by block
  widgets.
  */
  lineBlockAt(e) {
    return this.viewState.lineBlockAt(e)
  }
  /**
  The editor's total content height.
  */
  get contentHeight() {
    return this.viewState.contentHeight
  }
  /**
  Move a cursor position by [grapheme
  cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
  the motion is away from the line start, or towards it. In
  bidirectional text, the line is traversed in visual order, using
  the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
  When the start position was the last one on the line, the
  returned position will be across the line break. If there is no
  further line, the original position is returned.
  
  By default, this method moves over a single cluster. The
  optional `by` argument can be used to move across more. It will
  be called with the first cluster as argument, and should return
  a predicate that determines, for each subsequent cluster,
  whether it should also be moved over.
  */
  moveByChar(e, t, i) {
    return lc(this, e, kp(this, e, t, i))
  }
  /**
  Move a cursor position across the next group of either
  [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
  non-whitespace characters.
  */
  moveByGroup(e, t) {
    return lc(
      this,
      e,
      kp(this, e, t, (i) => GT(this, e.head, i))
    )
  }
  /**
  Move to the next line boundary in the given direction. If
  `includeWrap` is true, line wrapping is on, and there is a
  further wrap point on the current line, the wrap point will be
  returned. Otherwise this function will return the start or end
  of the line.
  */
  moveToLineBoundary(e, t, i = !0) {
    return FT(this, e, t, i)
  }
  /**
  Move a cursor position vertically. When `distance` isn't given,
  it defaults to moving to the next line (including wrapped
  lines). Otherwise, `distance` should provide a positive distance
  in pixels.
  
  When `start` has a
  [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
  motion will use that as a target horizontal position. Otherwise,
  the cursor's own horizontal position is used. The returned
  cursor will have its goal column set to whichever column was
  used.
  */
  moveVertically(e, t, i) {
    return lc(this, e, HT(this, e, t, i))
  }
  /**
  Find the DOM parent node and offset (child offset if `node` is
  an element, character offset when it is a text node) at the
  given document position.
  
  Note that for positions that aren't currently in
  `visibleRanges`, the resulting DOM position isn't necessarily
  meaningful (it may just point before or after a placeholder
  element).
  */
  domAtPos(e) {
    return this.docView.domAtPos(e)
  }
  /**
  Find the document position at the given DOM node. Can be useful
  for associating positions with DOM events. Will raise an error
  when `node` isn't part of the editor content.
  */
  posAtDOM(e, t = 0) {
    return this.docView.posFromDOM(e, t)
  }
  posAtCoords(e, t = !0) {
    return this.readMeasured(), Gy(this, e, t)
  }
  /**
  Get the screen coordinates at the given document position.
  `side` determines whether the coordinates are based on the
  element before (-1) or after (1) the position (if no element is
  available on the given side, the method will transparently use
  another strategy to get reasonable coordinates).
  */
  coordsAtPos(e, t = 1) {
    this.readMeasured()
    let i = this.docView.coordsAt(e, t)
    if (!i || i.left == i.right) return i
    let r = this.state.doc.lineAt(e),
      s = this.bidiSpans(r),
      o = s[Wn.find(s, e - r.from, -1, t)]
    return xl(i, (o.dir == Pe.LTR) == t > 0)
  }
  /**
  Return the rectangle around a given character. If `pos` does not
  point in front of a character that is in the viewport and
  rendered (i.e. not replaced, not a line break), this will return
  null. For space characters that are a line wrap point, this will
  return the position before the line break.
  */
  coordsForChar(e) {
    return this.readMeasured(), this.docView.coordsForChar(e)
  }
  /**
  The default width of a character in the editor. May not
  accurately reflect the width of all characters (given variable
  width fonts or styling of invididual ranges).
  */
  get defaultCharacterWidth() {
    return this.viewState.heightOracle.charWidth
  }
  /**
  The default height of a line in the editor. May not be accurate
  for all lines.
  */
  get defaultLineHeight() {
    return this.viewState.heightOracle.lineHeight
  }
  /**
  The text direction
  ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
  CSS property) of the editor's content element.
  */
  get textDirection() {
    return this.viewState.defaultTextDirection
  }
  /**
  Find the text direction of the block at the given position, as
  assigned by CSS. If
  [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
  isn't enabled, or the given position is outside of the viewport,
  this will always return the same as
  [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
  this may trigger a DOM layout.
  */
  textDirectionAt(e) {
    return !this.state.facet(Yy) ||
      e < this.viewport.from ||
      e > this.viewport.to
      ? this.textDirection
      : (this.readMeasured(), this.docView.textDirectionAt(e))
  }
  /**
  Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
  (as determined by the
  [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
  CSS property of its content element).
  */
  get lineWrapping() {
    return this.viewState.heightOracle.lineWrapping
  }
  /**
  Returns the bidirectional text structure of the given line
  (which should be in the current document) as an array of span
  objects. The order of these spans matches the [text
  direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
  left-to-right, the leftmost spans come first, otherwise the
  rightmost spans come first.
  */
  bidiSpans(e) {
    if (e.length > IC) return Uy(e.length)
    let t = this.textDirectionAt(e.from),
      i
    for (let s of this.bidiCache)
      if (
        s.from == e.from &&
        s.dir == t &&
        (s.fresh || Ly(s.isolates, (i = vp(this, e.from, e.to))))
      )
        return s.order
    i || (i = vp(this, e.from, e.to))
    let r = DT(e.text, t, i)
    return this.bidiCache.push(new Aa(e.from, e.to, t, i, !0, r)), r
  }
  /**
  Check whether the editor has focus.
  */
  get hasFocus() {
    var e
    return (
      (this.dom.ownerDocument.hasFocus() ||
        (G.safari &&
          ((e = this.inputState) === null || e === void 0
            ? void 0
            : e.lastContextMenu) >
            Date.now() - 3e4)) &&
      this.root.activeElement == this.contentDOM
    )
  }
  /**
  Put focus on the editor.
  */
  focus() {
    this.observer.ignore(() => {
      by(this.contentDOM), this.docView.updateSelection()
    })
  }
  /**
  Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
  necessary when moving the editor's existing DOM to a new window or shadow root.
  */
  setRoot(e) {
    this._root != e &&
      ((this._root = e),
      this.observer.setWindow(
        (e.nodeType == 9 ? e : e.ownerDocument).defaultView || window
      ),
      this.mountStyles())
  }
  /**
  Clean up this editor view, removing its element from the
  document, unregistering event handlers, and notifying
  plugins. The view instance can no longer be used after
  calling this.
  */
  destroy() {
    for (let e of this.plugins) e.destroy(this)
    ;(this.plugins = []),
      this.inputState.destroy(),
      this.dom.remove(),
      this.observer.destroy(),
      this.measureScheduled > -1 &&
        this.win.cancelAnimationFrame(this.measureScheduled),
      (this.destroyed = !0)
  }
  /**
  Returns an effect that can be
  [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
  cause it to scroll the given position or range into view.
  */
  static scrollIntoView(e, t = {}) {
    return Js.of(
      new Ui(
        typeof e == 'number' ? _.cursor(e) : e,
        t.y,
        t.x,
        t.yMargin,
        t.xMargin
      )
    )
  }
  /**
  Return an effect that resets the editor to its current (at the
  time this method was called) scroll position. Note that this
  only affects the editor's own scrollable element, not parents.
  See also
  [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
  
  The effect should be used with a document identical to the one
  it was created for. Failing to do so is not an error, but may
  not scroll to the expected position. You can
  [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
  */
  scrollSnapshot() {
    let { scrollTop: e, scrollLeft: t } = this.scrollDOM,
      i = this.viewState.scrollAnchorAt(e)
    return Js.of(new Ui(_.cursor(i.from), 'start', 'start', i.top - e, t, !0))
  }
  /**
  Returns an extension that can be used to add DOM event handlers.
  The value should be an object mapping event names to handler
  functions. For any given event, such functions are ordered by
  extension precedence, and the first handler to return true will
  be assumed to have handled that event, and no other handlers or
  built-in behavior will be activated for it. These are registered
  on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
  for `scroll` handlers, which will be called any time the
  editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
  its parent nodes is scrolled.
  */
  static domEventHandlers(e) {
    return Re.define(() => ({}), { eventHandlers: e })
  }
  /**
  Create an extension that registers DOM event observers. Contrary
  to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
  observers can't be prevented from running by a higher-precedence
  handler returning true. They also don't prevent other handlers
  and observers from running when they return true, and should not
  call `preventDefault`.
  */
  static domEventObservers(e) {
    return Re.define(() => ({}), { eventObservers: e })
  }
  /**
  Create a theme extension. The first argument can be a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)
  style spec providing the styles for the theme. These will be
  prefixed with a generated class for the style.
  
  Because the selectors will be prefixed with a scope class, rule
  that directly match the editor's [wrapper
  element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
  added—need to be explicitly differentiated by adding an `&` to
  the selector for that element—for example
  `&.cm-focused`.
  
  When `dark` is set to true, the theme will be marked as dark,
  which will cause the `&dark` rules from [base
  themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
  `&light` when a light theme is active).
  */
  static theme(e, t) {
    let i = Fn.newName(),
      r = [so.of(i), Wr.of(Uu(`.${i}`, e))]
    return t && t.dark && r.push(Bu.of(!0)), r
  }
  /**
  Create an extension that adds styles to the base theme. Like
  with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
  place of the editor wrapper element when directly targeting
  that. You can also use `&dark` or `&light` instead to only
  target editors with a dark or light theme.
  */
  static baseTheme(e) {
    return Pi.lowest(Wr.of(Uu('.' + Lu, e, cb)))
  }
  /**
  Retrieve an editor view instance from the view's DOM
  representation.
  */
  static findFromDOM(e) {
    var t
    let i = e.querySelector('.cm-content'),
      r = (i && xe.get(i)) || xe.get(e)
    return (
      ((t = r == null ? void 0 : r.rootView) === null || t === void 0
        ? void 0
        : t.view) || null
    )
  }
}
M.styleModule = Wr
M.inputHandler = Dy
M.focusChangeEffect = Xy
M.perLineTextDirection = Yy
M.exceptionSink = Ey
M.updateListener = Yu
M.editable = $l
M.mouseSelectionStyle = Ry
M.dragMovesSelection = Ay
M.clickAddsSelectionRange = Zy
M.decorations = rs
M.atomicRanges = jf
M.bidiIsolatedRanges = My
M.scrollMargins = Vy
M.darkTheme = Bu
M.cspNonce = /* @__PURE__ */ q.define({
  combine: (n) => (n.length ? n[0] : '')
})
M.contentAttributes = Wf
M.editorAttributes = Ny
M.lineWrapping = /* @__PURE__ */ M.contentAttributes.of({
  class: 'cm-lineWrapping'
})
M.announce = /* @__PURE__ */ ne.define()
const IC = 4096,
  Bp = {}
class Aa {
  constructor(e, t, i, r, s, o) {
    ;(this.from = e),
      (this.to = t),
      (this.dir = i),
      (this.isolates = r),
      (this.fresh = s),
      (this.order = o)
  }
  static update(e, t) {
    if (t.empty && !e.some((s) => s.fresh)) return e
    let i = [],
      r = e.length ? e[e.length - 1].dir : Pe.LTR
    for (let s = Math.max(0, e.length - 10); s < e.length; s++) {
      let o = e[s]
      o.dir == r &&
        !t.touchesRange(o.from, o.to) &&
        i.push(
          new Aa(
            t.mapPos(o.from, 1),
            t.mapPos(o.to, -1),
            o.dir,
            o.isolates,
            !1,
            o.order
          )
        )
    }
    return i
  }
}
function Lp(n, e, t) {
  for (let i = n.state.facet(e), r = i.length - 1; r >= 0; r--) {
    let s = i[r],
      o = typeof s == 'function' ? s(n) : s
    o && Eu(o, t)
  }
  return t
}
const NC = G.mac ? 'mac' : G.windows ? 'win' : G.linux ? 'linux' : 'key'
function MC(n, e) {
  const t = n.split(/-(?!$)/)
  let i = t[t.length - 1]
  i == 'Space' && (i = ' ')
  let r, s, o, a
  for (let l = 0; l < t.length - 1; ++l) {
    const c = t[l]
    if (/^(cmd|meta|m)$/i.test(c)) a = !0
    else if (/^a(lt)?$/i.test(c)) r = !0
    else if (/^(c|ctrl|control)$/i.test(c)) s = !0
    else if (/^s(hift)?$/i.test(c)) o = !0
    else if (/^mod$/i.test(c)) e == 'mac' ? (a = !0) : (s = !0)
    else throw new Error('Unrecognized modifier name: ' + c)
  }
  return (
    r && (i = 'Alt-' + i),
    s && (i = 'Ctrl-' + i),
    a && (i = 'Meta-' + i),
    o && (i = 'Shift-' + i),
    i
  )
}
function oo(n, e, t) {
  return (
    e.altKey && (n = 'Alt-' + n),
    e.ctrlKey && (n = 'Ctrl-' + n),
    e.metaKey && (n = 'Meta-' + n),
    t !== !1 && e.shiftKey && (n = 'Shift-' + n),
    n
  )
}
const VC = /* @__PURE__ */ Pi.default(
    /* @__PURE__ */ M.domEventHandlers({
      keydown(n, e) {
        return hb(fb(e.state), n, e, 'editor')
      }
    })
  ),
  Cs = /* @__PURE__ */ q.define({ enables: VC }),
  Up = /* @__PURE__ */ new WeakMap()
function fb(n) {
  let e = n.facet(Cs),
    t = Up.get(e)
  return t || Up.set(e, (t = BC(e.reduce((i, r) => i.concat(r), [])))), t
}
function WC(n, e, t) {
  return hb(fb(n.state), e, n, t)
}
let Xn = null
const jC = 4e3
function BC(n, e = NC) {
  let t = /* @__PURE__ */ Object.create(null),
    i = /* @__PURE__ */ Object.create(null),
    r = (o, a) => {
      let l = i[o]
      if (l == null) i[o] = a
      else if (l != a)
        throw new Error(
          'Key binding ' +
            o +
            ' is used both as a regular binding and as a multi-stroke prefix'
        )
    },
    s = (o, a, l, c, u) => {
      var f, h
      let d = t[o] || (t[o] = /* @__PURE__ */ Object.create(null)),
        O = a.split(/ (?!$)/).map((x) => MC(x, e))
      for (let x = 1; x < O.length; x++) {
        let w = O.slice(0, x).join(' ')
        r(w, !0),
          d[w] ||
            (d[w] = {
              preventDefault: !0,
              stopPropagation: !1,
              run: [
                (T) => {
                  let Q = (Xn = { view: T, prefix: w, scope: o })
                  return (
                    setTimeout(() => {
                      Xn == Q && (Xn = null)
                    }, jC),
                    !0
                  )
                }
              ]
            })
      }
      let m = O.join(' ')
      r(m, !1)
      let b =
        d[m] ||
        (d[m] = {
          preventDefault: !1,
          stopPropagation: !1,
          run:
            ((h = (f = d._any) === null || f === void 0 ? void 0 : f.run) ===
              null || h === void 0
              ? void 0
              : h.slice()) || []
        })
      l && b.run.push(l),
        c && (b.preventDefault = !0),
        u && (b.stopPropagation = !0)
    }
  for (let o of n) {
    let a = o.scope ? o.scope.split(' ') : ['editor']
    if (o.any)
      for (let c of a) {
        let u = t[c] || (t[c] = /* @__PURE__ */ Object.create(null))
        u._any ||
          (u._any = { preventDefault: !1, stopPropagation: !1, run: [] })
        for (let f in u) u[f].run.push(o.any)
      }
    let l = o[e] || o.key
    if (l)
      for (let c of a)
        s(c, l, o.run, o.preventDefault, o.stopPropagation),
          o.shift &&
            s(c, 'Shift-' + l, o.shift, o.preventDefault, o.stopPropagation)
  }
  return t
}
function hb(n, e, t, i) {
  let r = pT(e),
    s = qe(r, 0),
    o = Ct(s) == r.length && r != ' ',
    a = '',
    l = !1,
    c = !1,
    u = !1
  Xn &&
    Xn.view == t &&
    Xn.scope == i &&
    ((a = Xn.prefix + ' '),
    Ky.indexOf(e.keyCode) < 0 && ((c = !0), (Xn = null)))
  let f = /* @__PURE__ */ new Set(),
    h = (b) => {
      if (b) {
        for (let x of b.run)
          if (!f.has(x) && (f.add(x), x(t, e)))
            return b.stopPropagation && (u = !0), !0
        b.preventDefault && (b.stopPropagation && (u = !0), (c = !0))
      }
      return !1
    },
    d = n[i],
    O,
    m
  return (
    d &&
      (h(d[a + oo(r, e, !o)])
        ? (l = !0)
        : o &&
            (e.altKey || e.metaKey || e.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
            !(G.windows && e.ctrlKey && e.altKey) &&
            (O = Gn[e.keyCode]) &&
            O != r
          ? (h(d[a + oo(O, e, !0)]) ||
              (e.shiftKey &&
                (m = ns[e.keyCode]) != r &&
                m != O &&
                h(d[a + oo(m, e, !1)]))) &&
            (l = !0)
          : o && e.shiftKey && h(d[a + oo(r, e, !0)]) && (l = !0),
      !l && h(d._any) && (l = !0)),
    c && (l = !0),
    l && u && e.stopPropagation(),
    l
  )
}
class _s {
  /**
  Create a marker with the given class and dimensions. If `width`
  is null, the DOM element will get no width style.
  */
  constructor(e, t, i, r, s) {
    ;(this.className = e),
      (this.left = t),
      (this.top = i),
      (this.width = r),
      (this.height = s)
  }
  draw() {
    let e = document.createElement('div')
    return (e.className = this.className), this.adjust(e), e
  }
  update(e, t) {
    return t.className != this.className ? !1 : (this.adjust(e), !0)
  }
  adjust(e) {
    ;(e.style.left = this.left + 'px'),
      (e.style.top = this.top + 'px'),
      this.width != null && (e.style.width = this.width + 'px'),
      (e.style.height = this.height + 'px')
  }
  eq(e) {
    return (
      this.left == e.left &&
      this.top == e.top &&
      this.width == e.width &&
      this.height == e.height &&
      this.className == e.className
    )
  }
  /**
  Create a set of rectangles for the given selection range,
  assigning them theclass`className`. Will create a single
  rectangle for empty ranges, and a set of selection-style
  rectangles covering the range's content (in a bidi-aware
  way) for non-empty ones.
  */
  static forRange(e, t, i) {
    if (i.empty) {
      let r = e.coordsAtPos(i.head, i.assoc || 1)
      if (!r) return []
      let s = db(e)
      return [new _s(t, r.left - s.left, r.top - s.top, null, r.bottom - r.top)]
    } else return LC(e, t, i)
  }
}
function db(n) {
  let e = n.scrollDOM.getBoundingClientRect()
  return {
    left:
      (n.textDirection == Pe.LTR
        ? e.left
        : e.right - n.scrollDOM.clientWidth * n.scaleX) -
      n.scrollDOM.scrollLeft * n.scaleX,
    top: e.top - n.scrollDOM.scrollTop * n.scaleY
  }
}
function qp(n, e, t) {
  let i = _.cursor(e)
  return {
    from: Math.max(t.from, n.moveToLineBoundary(i, !1, !0).from),
    to: Math.min(t.to, n.moveToLineBoundary(i, !0, !0).from),
    type: st.Text
  }
}
function LC(n, e, t) {
  if (t.to <= n.viewport.from || t.from >= n.viewport.to) return []
  let i = Math.max(t.from, n.viewport.from),
    r = Math.min(t.to, n.viewport.to),
    s = n.textDirection == Pe.LTR,
    o = n.contentDOM,
    a = o.getBoundingClientRect(),
    l = db(n),
    c = o.querySelector('.cm-line'),
    u = c && window.getComputedStyle(c),
    f =
      a.left +
      (u ? parseInt(u.paddingLeft) + Math.min(0, parseInt(u.textIndent)) : 0),
    h = a.right - (u ? parseInt(u.paddingRight) : 0),
    d = Wu(n, i),
    O = Wu(n, r),
    m = d.type == st.Text ? d : null,
    b = O.type == st.Text ? O : null
  if (
    (m && (n.lineWrapping || d.widgetLineBreaks) && (m = qp(n, i, m)),
    b && (n.lineWrapping || O.widgetLineBreaks) && (b = qp(n, r, b)),
    m && b && m.from == b.from)
  )
    return w(T(t.from, t.to, m))
  {
    let P = m ? T(t.from, null, m) : Q(d, !1),
      C = b ? T(null, t.to, b) : Q(O, !0),
      A = []
    return (
      (m || d).to < (b || O).from - (m && b ? 1 : 0) ||
      (d.widgetLineBreaks > 1 && P.bottom + n.defaultLineHeight / 2 < C.top)
        ? A.push(x(f, P.bottom, h, C.top))
        : P.bottom < C.top &&
          n.elementAtHeight((P.bottom + C.top) / 2).type == st.Text &&
          (P.bottom = C.top = (P.bottom + C.top) / 2),
      w(P).concat(A).concat(w(C))
    )
  }
  function x(P, C, A, j) {
    return new _s(
      e,
      P - l.left,
      C - l.top - 0.01,
      A - P,
      j - C + 0.01
      /* C.Epsilon */
    )
  }
  function w({ top: P, bottom: C, horizontal: A }) {
    let j = []
    for (let X = 0; X < A.length; X += 2) j.push(x(A[X], P, A[X + 1], C))
    return j
  }
  function T(P, C, A) {
    let j = 1e9,
      X = -1e9,
      L = []
    function U(B, ee, ie, te, ce) {
      let ye = n.coordsAtPos(B, B == A.to ? -2 : 2),
        he = n.coordsAtPos(ie, ie == A.from ? 2 : -2)
      !ye ||
        !he ||
        ((j = Math.min(ye.top, he.top, j)),
        (X = Math.max(ye.bottom, he.bottom, X)),
        ce == Pe.LTR
          ? L.push(s && ee ? f : ye.left, s && te ? h : he.right)
          : L.push(!s && te ? f : he.left, !s && ee ? h : ye.right))
    }
    let E = P ?? A.from,
      I = C ?? A.to
    for (let B of n.visibleRanges)
      if (B.to > E && B.from < I)
        for (let ee = Math.max(B.from, E), ie = Math.min(B.to, I); ; ) {
          let te = n.state.doc.lineAt(ee)
          for (let ce of n.bidiSpans(te)) {
            let ye = ce.from + te.from,
              he = ce.to + te.from
            if (ye >= ie) break
            he > ee &&
              U(
                Math.max(ye, ee),
                P == null && ye <= E,
                Math.min(he, ie),
                C == null && he >= I,
                ce.dir
              )
          }
          if (((ee = te.to + 1), ee >= ie)) break
        }
    return (
      L.length == 0 && U(E, P == null, I, C == null, n.textDirection),
      { top: j, bottom: X, horizontal: L }
    )
  }
  function Q(P, C) {
    let A = a.top + (C ? P.top : P.bottom)
    return { top: A, bottom: A, horizontal: [] }
  }
}
function UC(n, e) {
  return n.constructor == e.constructor && n.eq(e)
}
class qC {
  constructor(e, t) {
    ;(this.view = e),
      (this.layer = t),
      (this.drawn = []),
      (this.scaleX = 1),
      (this.scaleY = 1),
      (this.measureReq = {
        read: this.measure.bind(this),
        write: this.draw.bind(this)
      }),
      (this.dom = e.scrollDOM.appendChild(document.createElement('div'))),
      this.dom.classList.add('cm-layer'),
      t.above && this.dom.classList.add('cm-layer-above'),
      t.class && this.dom.classList.add(t.class),
      this.scale(),
      this.dom.setAttribute('aria-hidden', 'true'),
      this.setOrder(e.state),
      e.requestMeasure(this.measureReq),
      t.mount && t.mount(this.dom, e)
  }
  update(e) {
    e.startState.facet(Bo) != e.state.facet(Bo) && this.setOrder(e.state),
      (this.layer.update(e, this.dom) || e.geometryChanged) &&
        (this.scale(), e.view.requestMeasure(this.measureReq))
  }
  setOrder(e) {
    let t = 0,
      i = e.facet(Bo)
    for (; t < i.length && i[t] != this.layer; ) t++
    this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - t)
  }
  measure() {
    return this.layer.markers(this.view)
  }
  scale() {
    let { scaleX: e, scaleY: t } = this.view
    ;(e != this.scaleX || t != this.scaleY) &&
      ((this.scaleX = e),
      (this.scaleY = t),
      (this.dom.style.transform = `scale(${1 / e}, ${1 / t})`))
  }
  draw(e) {
    if (
      e.length != this.drawn.length ||
      e.some((t, i) => !UC(t, this.drawn[i]))
    ) {
      let t = this.dom.firstChild,
        i = 0
      for (let r of e)
        r.update &&
        t &&
        r.constructor &&
        this.drawn[i].constructor &&
        r.update(t, this.drawn[i])
          ? ((t = t.nextSibling), i++)
          : this.dom.insertBefore(r.draw(), t)
      for (; t; ) {
        let r = t.nextSibling
        t.remove(), (t = r)
      }
      this.drawn = e
    }
  }
  destroy() {
    this.layer.destroy && this.layer.destroy(this.dom, this.view),
      this.dom.remove()
  }
}
const Bo = /* @__PURE__ */ q.define()
function pb(n) {
  return [Re.define((e) => new qC(e, n)), Bo.of(n)]
}
const Ob = !G.ios,
  os = /* @__PURE__ */ q.define({
    combine(n) {
      return cn(
        n,
        {
          cursorBlinkRate: 1200,
          drawRangeCursor: !0
        },
        {
          cursorBlinkRate: (e, t) => Math.min(e, t),
          drawRangeCursor: (e, t) => e || t
        }
      )
    }
  })
function zC(n = {}) {
  return [os.of(n), FC, GC, HC, Iy.of(!0)]
}
function gb(n) {
  return n.startState.facet(os) != n.state.facet(os)
}
const FC = /* @__PURE__ */ pb({
  above: !0,
  markers(n) {
    let { state: e } = n,
      t = e.facet(os),
      i = []
    for (let r of e.selection.ranges) {
      let s = r == e.selection.main
      if (r.empty ? !s || Ob : t.drawRangeCursor) {
        let o = s
            ? 'cm-cursor cm-cursor-primary'
            : 'cm-cursor cm-cursor-secondary',
          a = r.empty ? r : _.cursor(r.head, r.head > r.anchor ? -1 : 1)
        for (let l of _s.forRange(n, o, a)) i.push(l)
      }
    }
    return i
  },
  update(n, e) {
    n.transactions.some((i) => i.selection) &&
      (e.style.animationName =
        e.style.animationName == 'cm-blink' ? 'cm-blink2' : 'cm-blink')
    let t = gb(n)
    return t && zp(n.state, e), n.docChanged || n.selectionSet || t
  },
  mount(n, e) {
    zp(e.state, n)
  },
  class: 'cm-cursorLayer'
})
function zp(n, e) {
  e.style.animationDuration = n.facet(os).cursorBlinkRate + 'ms'
}
const GC = /* @__PURE__ */ pb({
    above: !1,
    markers(n) {
      return n.state.selection.ranges
        .map((e) =>
          e.empty ? [] : _s.forRange(n, 'cm-selectionBackground', e)
        )
        .reduce((e, t) => e.concat(t))
    },
    update(n, e) {
      return n.docChanged || n.selectionSet || n.viewportChanged || gb(n)
    },
    class: 'cm-selectionLayer'
  }),
  mb = {
    '.cm-line': {
      '& ::selection': { backgroundColor: 'transparent !important' },
      '&::selection': { backgroundColor: 'transparent !important' }
    }
  }
Ob && (mb['.cm-line'].caretColor = 'transparent !important')
const HC = /* @__PURE__ */ Pi.highest(/* @__PURE__ */ M.theme(mb)),
  yb = /* @__PURE__ */ ne.define({
    map(n, e) {
      return n == null ? null : e.mapPos(n)
    }
  }),
  Lr = /* @__PURE__ */ We.define({
    create() {
      return null
    },
    update(n, e) {
      return (
        n != null && (n = e.changes.mapPos(n)),
        e.effects.reduce((t, i) => (i.is(yb) ? i.value : t), n)
      )
    }
  }),
  KC = /* @__PURE__ */ Re.fromClass(
    class {
      constructor(n) {
        ;(this.view = n),
          (this.cursor = null),
          (this.measureReq = {
            read: this.readPos.bind(this),
            write: this.drawCursor.bind(this)
          })
      }
      update(n) {
        var e
        let t = n.state.field(Lr)
        t == null
          ? this.cursor != null &&
            ((e = this.cursor) === null || e === void 0 || e.remove(),
            (this.cursor = null))
          : (this.cursor ||
              ((this.cursor = this.view.scrollDOM.appendChild(
                document.createElement('div')
              )),
              (this.cursor.className = 'cm-dropCursor')),
            (n.startState.field(Lr) != t ||
              n.docChanged ||
              n.geometryChanged) &&
              this.view.requestMeasure(this.measureReq))
      }
      readPos() {
        let { view: n } = this,
          e = n.state.field(Lr),
          t = e != null && n.coordsAtPos(e)
        if (!t) return null
        let i = n.scrollDOM.getBoundingClientRect()
        return {
          left: t.left - i.left + n.scrollDOM.scrollLeft * n.scaleX,
          top: t.top - i.top + n.scrollDOM.scrollTop * n.scaleY,
          height: t.bottom - t.top
        }
      }
      drawCursor(n) {
        if (this.cursor) {
          let { scaleX: e, scaleY: t } = this.view
          n
            ? ((this.cursor.style.left = n.left / e + 'px'),
              (this.cursor.style.top = n.top / t + 'px'),
              (this.cursor.style.height = n.height / t + 'px'))
            : (this.cursor.style.left = '-100000px')
        }
      }
      destroy() {
        this.cursor && this.cursor.remove()
      }
      setDropPos(n) {
        this.view.state.field(Lr) != n &&
          this.view.dispatch({ effects: yb.of(n) })
      }
    },
    {
      eventObservers: {
        dragover(n) {
          this.setDropPos(this.view.posAtCoords({ x: n.clientX, y: n.clientY }))
        },
        dragleave(n) {
          ;(n.target == this.view.contentDOM ||
            !this.view.contentDOM.contains(n.relatedTarget)) &&
            this.setDropPos(null)
        },
        dragend() {
          this.setDropPos(null)
        },
        drop() {
          this.setDropPos(null)
        }
      }
    }
  )
function JC() {
  return [Lr, KC]
}
function Fp(n, e, t, i, r) {
  e.lastIndex = 0
  for (let s = n.iterRange(t, i), o = t, a; !s.next().done; o += s.value.length)
    if (!s.lineBreak) for (; (a = e.exec(s.value)); ) r(o + a.index, a)
}
function e_(n, e) {
  let t = n.visibleRanges
  if (t.length == 1 && t[0].from == n.viewport.from && t[0].to == n.viewport.to)
    return t
  let i = []
  for (let { from: r, to: s } of t)
    (r = Math.max(n.state.doc.lineAt(r).from, r - e)),
      (s = Math.min(n.state.doc.lineAt(s).to, s + e)),
      i.length && i[i.length - 1].to >= r
        ? (i[i.length - 1].to = s)
        : i.push({ from: r, to: s })
  return i
}
class t_ {
  /**
  Create a decorator.
  */
  constructor(e) {
    const {
      regexp: t,
      decoration: i,
      decorate: r,
      boundary: s,
      maxLength: o = 1e3
    } = e
    if (!t.global)
      throw new RangeError(
        "The regular expression given to MatchDecorator should have its 'g' flag set"
      )
    if (((this.regexp = t), r))
      this.addMatch = (a, l, c, u) => r(u, c, c + a[0].length, a, l)
    else if (typeof i == 'function')
      this.addMatch = (a, l, c, u) => {
        let f = i(a, l, c)
        f && u(c, c + a[0].length, f)
      }
    else if (i) this.addMatch = (a, l, c, u) => u(c, c + a[0].length, i)
    else
      throw new RangeError(
        "Either 'decorate' or 'decoration' should be provided to MatchDecorator"
      )
    ;(this.boundary = s), (this.maxLength = o)
  }
  /**
  Compute the full set of decorations for matches in the given
  view's viewport. You'll want to call this when initializing your
  plugin.
  */
  createDeco(e) {
    let t = new zn(),
      i = t.add.bind(t)
    for (let { from: r, to: s } of e_(e, this.maxLength))
      Fp(e.state.doc, this.regexp, r, s, (o, a) => this.addMatch(a, e, o, i))
    return t.finish()
  }
  /**
  Update a set of decorations for a view update. `deco` _must_ be
  the set of decorations produced by _this_ `MatchDecorator` for
  the view state before the update.
  */
  updateDeco(e, t) {
    let i = 1e9,
      r = -1
    return (
      e.docChanged &&
        e.changes.iterChanges((s, o, a, l) => {
          l > e.view.viewport.from &&
            a < e.view.viewport.to &&
            ((i = Math.min(a, i)), (r = Math.max(l, r)))
        }),
      e.viewportChanged || r - i > 1e3
        ? this.createDeco(e.view)
        : r > -1
          ? this.updateRange(e.view, t.map(e.changes), i, r)
          : t
    )
  }
  updateRange(e, t, i, r) {
    for (let s of e.visibleRanges) {
      let o = Math.max(s.from, i),
        a = Math.min(s.to, r)
      if (a > o) {
        let l = e.state.doc.lineAt(o),
          c = l.to < a ? e.state.doc.lineAt(a) : l,
          u = Math.max(s.from, l.from),
          f = Math.min(s.to, c.to)
        if (this.boundary) {
          for (; o > l.from; o--)
            if (this.boundary.test(l.text[o - 1 - l.from])) {
              u = o
              break
            }
          for (; a < c.to; a++)
            if (this.boundary.test(c.text[a - c.from])) {
              f = a
              break
            }
        }
        let h = [],
          d,
          O = (m, b, x) => h.push(x.range(m, b))
        if (l == c)
          for (
            this.regexp.lastIndex = u - l.from;
            (d = this.regexp.exec(l.text)) && d.index < f - l.from;

          )
            this.addMatch(d, e, d.index + l.from, O)
        else
          Fp(e.state.doc, this.regexp, u, f, (m, b) =>
            this.addMatch(b, e, m, O)
          )
        t = t.update({
          filterFrom: u,
          filterTo: f,
          filter: (m, b) => m < u || b > f,
          add: h
        })
      }
    }
    return t
  }
}
const qu = /x/.unicode != null ? 'gu' : 'g',
  n_ = /* @__PURE__ */ new RegExp(
    `[\0-\b
--­؜​‎‏\u2028\u2029‭‮⁦⁧⁩\uFEFF￹-￼]`,
    qu
  ),
  i_ = {
    0: 'null',
    7: 'bell',
    8: 'backspace',
    10: 'newline',
    11: 'vertical tab',
    13: 'carriage return',
    27: 'escape',
    8203: 'zero width space',
    8204: 'zero width non-joiner',
    8205: 'zero width joiner',
    8206: 'left-to-right mark',
    8207: 'right-to-left mark',
    8232: 'line separator',
    8237: 'left-to-right override',
    8238: 'right-to-left override',
    8294: 'left-to-right isolate',
    8295: 'right-to-left isolate',
    8297: 'pop directional isolate',
    8233: 'paragraph separator',
    65279: 'zero width no-break space',
    65532: 'object replacement'
  }
let fc = null
function r_() {
  var n
  if (fc == null && typeof document < 'u' && document.body) {
    let e = document.body.style
    fc = ((n = e.tabSize) !== null && n !== void 0 ? n : e.MozTabSize) != null
  }
  return fc || !1
}
const Lo = /* @__PURE__ */ q.define({
  combine(n) {
    let e = cn(n, {
      render: null,
      specialChars: n_,
      addSpecialChars: null
    })
    return (
      (e.replaceTabs = !r_()) &&
        (e.specialChars = new RegExp('	|' + e.specialChars.source, qu)),
      e.addSpecialChars &&
        (e.specialChars = new RegExp(
          e.specialChars.source + '|' + e.addSpecialChars.source,
          qu
        )),
      e
    )
  }
})
function s_(n = {}) {
  return [Lo.of(n), o_()]
}
let Gp = null
function o_() {
  return (
    Gp ||
    (Gp = Re.fromClass(
      class {
        constructor(n) {
          ;(this.view = n),
            (this.decorations = K.none),
            (this.decorationCache = /* @__PURE__ */ Object.create(null)),
            (this.decorator = this.makeDecorator(n.state.facet(Lo))),
            (this.decorations = this.decorator.createDeco(n))
        }
        makeDecorator(n) {
          return new t_({
            regexp: n.specialChars,
            decoration: (e, t, i) => {
              let { doc: r } = t.state,
                s = qe(e[0], 0)
              if (s == 9) {
                let o = r.lineAt(i),
                  a = t.state.tabSize,
                  l = fr(o.text, a, i - o.from)
                return K.replace({
                  widget: new u_(
                    ((a - (l % a)) * this.view.defaultCharacterWidth) /
                      this.view.scaleX
                  )
                })
              }
              return (
                this.decorationCache[s] ||
                (this.decorationCache[s] = K.replace({ widget: new c_(n, s) }))
              )
            },
            boundary: n.replaceTabs ? void 0 : /[^]/
          })
        }
        update(n) {
          let e = n.state.facet(Lo)
          n.startState.facet(Lo) != e
            ? ((this.decorator = this.makeDecorator(e)),
              (this.decorations = this.decorator.createDeco(n.view)))
            : (this.decorations = this.decorator.updateDeco(
                n,
                this.decorations
              ))
        }
      },
      {
        decorations: (n) => n.decorations
      }
    ))
  )
}
const a_ = '•'
function l_(n) {
  return n >= 32 ? a_ : n == 10 ? '␤' : String.fromCharCode(9216 + n)
}
class c_ extends un {
  constructor(e, t) {
    super(), (this.options = e), (this.code = t)
  }
  eq(e) {
    return e.code == this.code
  }
  toDOM(e) {
    let t = l_(this.code),
      i =
        e.state.phrase('Control character') +
        ' ' +
        (i_[this.code] || '0x' + this.code.toString(16)),
      r = this.options.render && this.options.render(this.code, i, t)
    if (r) return r
    let s = document.createElement('span')
    return (
      (s.textContent = t),
      (s.title = i),
      s.setAttribute('aria-label', i),
      (s.className = 'cm-specialChar'),
      s
    )
  }
  ignoreEvent() {
    return !1
  }
}
class u_ extends un {
  constructor(e) {
    super(), (this.width = e)
  }
  eq(e) {
    return e.width == this.width
  }
  toDOM() {
    let e = document.createElement('span')
    return (
      (e.textContent = '	'),
      (e.className = 'cm-tab'),
      (e.style.width = this.width + 'px'),
      e
    )
  }
  ignoreEvent() {
    return !1
  }
}
function f_() {
  return d_
}
const h_ = /* @__PURE__ */ K.line({ class: 'cm-activeLine' }),
  d_ = /* @__PURE__ */ Re.fromClass(
    class {
      constructor(n) {
        this.decorations = this.getDeco(n)
      }
      update(n) {
        ;(n.docChanged || n.selectionSet) &&
          (this.decorations = this.getDeco(n.view))
      }
      getDeco(n) {
        let e = -1,
          t = []
        for (let i of n.state.selection.ranges) {
          let r = n.lineBlockAt(i.head)
          r.from > e && (t.push(h_.range(r.from)), (e = r.from))
        }
        return K.set(t)
      }
    },
    {
      decorations: (n) => n.decorations
    }
  )
class p_ extends un {
  constructor(e) {
    super(), (this.content = e)
  }
  toDOM() {
    let e = document.createElement('span')
    return (
      (e.className = 'cm-placeholder'),
      (e.style.pointerEvents = 'none'),
      e.appendChild(
        typeof this.content == 'string'
          ? document.createTextNode(this.content)
          : this.content
      ),
      typeof this.content == 'string'
        ? e.setAttribute('aria-label', 'placeholder ' + this.content)
        : e.setAttribute('aria-hidden', 'true'),
      e
    )
  }
  coordsAt(e) {
    let t = e.firstChild ? tr(e.firstChild) : []
    if (!t.length) return null
    let i = window.getComputedStyle(e.parentNode),
      r = xl(t[0], i.direction != 'rtl'),
      s = parseInt(i.lineHeight)
    return r.bottom - r.top > s * 1.5
      ? { left: r.left, right: r.right, top: r.top, bottom: r.top + s }
      : r
  }
  ignoreEvent() {
    return !1
  }
}
function O_(n) {
  return Re.fromClass(
    class {
      constructor(e) {
        ;(this.view = e),
          (this.placeholder = n
            ? K.set([K.widget({ widget: new p_(n), side: 1 }).range(0)])
            : K.none)
      }
      get decorations() {
        return this.view.state.doc.length ? K.none : this.placeholder
      }
    },
    { decorations: (e) => e.decorations }
  )
}
const zu = 2e3
function g_(n, e, t) {
  let i = Math.min(e.line, t.line),
    r = Math.max(e.line, t.line),
    s = []
  if (e.off > zu || t.off > zu || e.col < 0 || t.col < 0) {
    let o = Math.min(e.off, t.off),
      a = Math.max(e.off, t.off)
    for (let l = i; l <= r; l++) {
      let c = n.doc.line(l)
      c.length <= a && s.push(_.range(c.from + o, c.to + a))
    }
  } else {
    let o = Math.min(e.col, t.col),
      a = Math.max(e.col, t.col)
    for (let l = i; l <= r; l++) {
      let c = n.doc.line(l),
        u = ku(c.text, o, n.tabSize, !0)
      if (u < 0) s.push(_.cursor(c.to))
      else {
        let f = ku(c.text, a, n.tabSize)
        s.push(_.range(c.from + u, c.from + f))
      }
    }
  }
  return s
}
function m_(n, e) {
  let t = n.coordsAtPos(n.viewport.from)
  return t ? Math.round(Math.abs((t.left - e) / n.defaultCharacterWidth)) : -1
}
function Hp(n, e) {
  let t = n.posAtCoords({ x: e.clientX, y: e.clientY }, !1),
    i = n.state.doc.lineAt(t),
    r = t - i.from,
    s =
      r > zu
        ? -1
        : r == i.length
          ? m_(n, e.clientX)
          : fr(i.text, n.state.tabSize, t - i.from)
  return { line: i.number, col: s, off: r }
}
function y_(n, e) {
  let t = Hp(n, e),
    i = n.state.selection
  return t
    ? {
        update(r) {
          if (r.docChanged) {
            let s = r.changes.mapPos(r.startState.doc.line(t.line).from),
              o = r.state.doc.lineAt(s)
            ;(t = {
              line: o.number,
              col: t.col,
              off: Math.min(t.off, o.length)
            }),
              (i = i.map(r.changes))
          }
        },
        get(r, s, o) {
          let a = Hp(n, r)
          if (!a) return i
          let l = g_(n.state, t, a)
          return l.length ? (o ? _.create(l.concat(i.ranges)) : _.create(l)) : i
        }
      }
    : null
}
function b_(n) {
  let e =
    (n == null ? void 0 : n.eventFilter) || ((t) => t.altKey && t.button == 0)
  return M.mouseSelectionStyle.of((t, i) => (e(i) ? y_(t, i) : null))
}
const v_ = {
    Alt: [18, (n) => !!n.altKey],
    Control: [17, (n) => !!n.ctrlKey],
    Shift: [16, (n) => !!n.shiftKey],
    Meta: [91, (n) => !!n.metaKey]
  },
  S_ = { style: 'cursor: crosshair' }
function x_(n = {}) {
  let [e, t] = v_[n.key || 'Alt'],
    i = Re.fromClass(
      class {
        constructor(r) {
          ;(this.view = r), (this.isDown = !1)
        }
        set(r) {
          this.isDown != r && ((this.isDown = r), this.view.update([]))
        }
      },
      {
        eventObservers: {
          keydown(r) {
            this.set(r.keyCode == e || t(r))
          },
          keyup(r) {
            ;(r.keyCode == e || !t(r)) && this.set(!1)
          },
          mousemove(r) {
            this.set(t(r))
          }
        }
      }
    )
  return [
    i,
    M.contentAttributes.of((r) => {
      var s
      return !((s = r.plugin(i)) === null || s === void 0) && s.isDown
        ? S_
        : null
    })
  ]
}
const _r = '-10000px'
class bb {
  constructor(e, t, i) {
    ;(this.facet = t),
      (this.createTooltipView = i),
      (this.input = e.state.facet(t)),
      (this.tooltips = this.input.filter((r) => r)),
      (this.tooltipViews = this.tooltips.map(i))
  }
  update(e, t) {
    var i
    let r = e.state.facet(this.facet),
      s = r.filter((l) => l)
    if (r === this.input) {
      for (let l of this.tooltipViews) l.update && l.update(e)
      return !1
    }
    let o = [],
      a = t ? [] : null
    for (let l = 0; l < s.length; l++) {
      let c = s[l],
        u = -1
      if (c) {
        for (let f = 0; f < this.tooltips.length; f++) {
          let h = this.tooltips[f]
          h && h.create == c.create && (u = f)
        }
        if (u < 0) (o[l] = this.createTooltipView(c)), a && (a[l] = !!c.above)
        else {
          let f = (o[l] = this.tooltipViews[u])
          a && (a[l] = t[u]), f.update && f.update(e)
        }
      }
    }
    for (let l of this.tooltipViews)
      o.indexOf(l) < 0 &&
        (l.dom.remove(), (i = l.destroy) === null || i === void 0 || i.call(l))
    return (
      t && (a.forEach((l, c) => (t[c] = l)), (t.length = a.length)),
      (this.input = r),
      (this.tooltips = s),
      (this.tooltipViews = o),
      !0
    )
  }
}
function w_(n) {
  let { win: e } = n
  return { top: 0, left: 0, bottom: e.innerHeight, right: e.innerWidth }
}
const hc = /* @__PURE__ */ q.define({
    combine: (n) => {
      var e, t, i
      return {
        position: G.ios
          ? 'absolute'
          : ((e = n.find((r) => r.position)) === null || e === void 0
              ? void 0
              : e.position) || 'fixed',
        parent:
          ((t = n.find((r) => r.parent)) === null || t === void 0
            ? void 0
            : t.parent) || null,
        tooltipSpace:
          ((i = n.find((r) => r.tooltipSpace)) === null || i === void 0
            ? void 0
            : i.tooltipSpace) || w_
      }
    }
  }),
  Kp = /* @__PURE__ */ new WeakMap(),
  vb = /* @__PURE__ */ Re.fromClass(
    class {
      constructor(n) {
        ;(this.view = n),
          (this.above = []),
          (this.inView = !0),
          (this.madeAbsolute = !1),
          (this.lastTransaction = 0),
          (this.measureTimeout = -1)
        let e = n.state.facet(hc)
        ;(this.position = e.position),
          (this.parent = e.parent),
          (this.classes = n.themeClasses),
          this.createContainer(),
          (this.measureReq = {
            read: this.readMeasure.bind(this),
            write: this.writeMeasure.bind(this),
            key: this
          }),
          (this.manager = new bb(n, Lf, (t) => this.createTooltip(t))),
          (this.intersectionObserver =
            typeof IntersectionObserver == 'function'
              ? new IntersectionObserver(
                  (t) => {
                    Date.now() > this.lastTransaction - 50 &&
                      t.length > 0 &&
                      t[t.length - 1].intersectionRatio < 1 &&
                      this.measureSoon()
                  },
                  { threshold: [1] }
                )
              : null),
          this.observeIntersection(),
          n.win.addEventListener(
            'resize',
            (this.measureSoon = this.measureSoon.bind(this))
          ),
          this.maybeMeasure()
      }
      createContainer() {
        this.parent
          ? ((this.container = document.createElement('div')),
            (this.container.style.position = 'relative'),
            (this.container.className = this.view.themeClasses),
            this.parent.appendChild(this.container))
          : (this.container = this.view.dom)
      }
      observeIntersection() {
        if (this.intersectionObserver) {
          this.intersectionObserver.disconnect()
          for (let n of this.manager.tooltipViews)
            this.intersectionObserver.observe(n.dom)
        }
      }
      measureSoon() {
        this.measureTimeout < 0 &&
          (this.measureTimeout = setTimeout(() => {
            ;(this.measureTimeout = -1), this.maybeMeasure()
          }, 50))
      }
      update(n) {
        n.transactions.length && (this.lastTransaction = Date.now())
        let e = this.manager.update(n, this.above)
        e && this.observeIntersection()
        let t = e || n.geometryChanged,
          i = n.state.facet(hc)
        if (i.position != this.position && !this.madeAbsolute) {
          this.position = i.position
          for (let r of this.manager.tooltipViews)
            r.dom.style.position = this.position
          t = !0
        }
        if (i.parent != this.parent) {
          this.parent && this.container.remove(),
            (this.parent = i.parent),
            this.createContainer()
          for (let r of this.manager.tooltipViews)
            this.container.appendChild(r.dom)
          t = !0
        } else
          this.parent &&
            this.view.themeClasses != this.classes &&
            (this.classes = this.container.className = this.view.themeClasses)
        t && this.maybeMeasure()
      }
      createTooltip(n) {
        let e = n.create(this.view)
        if (
          (e.dom.classList.add('cm-tooltip'),
          n.arrow && !e.dom.querySelector('.cm-tooltip > .cm-tooltip-arrow'))
        ) {
          let t = document.createElement('div')
          ;(t.className = 'cm-tooltip-arrow'), e.dom.appendChild(t)
        }
        return (
          (e.dom.style.position = this.position),
          (e.dom.style.top = _r),
          (e.dom.style.left = '0px'),
          this.container.appendChild(e.dom),
          e.mount && e.mount(this.view),
          e
        )
      }
      destroy() {
        var n, e
        this.view.win.removeEventListener('resize', this.measureSoon)
        for (let t of this.manager.tooltipViews)
          t.dom.remove(), (n = t.destroy) === null || n === void 0 || n.call(t)
        this.parent && this.container.remove(),
          (e = this.intersectionObserver) === null ||
            e === void 0 ||
            e.disconnect(),
          clearTimeout(this.measureTimeout)
      }
      readMeasure() {
        let n = this.view.dom.getBoundingClientRect(),
          e = 1,
          t = 1,
          i = !1
        if (this.position == 'fixed' && this.manager.tooltipViews.length) {
          let { dom: r } = this.manager.tooltipViews[0]
          if (G.gecko) i = r.offsetParent != this.container.ownerDocument.body
          else if (this.view.scaleX != 1 || this.view.scaleY != 1) i = !0
          else if (r.style.top == _r && r.style.left == '0px') {
            let s = r.getBoundingClientRect()
            i = Math.abs(s.top + 1e4) > 1 || Math.abs(s.left) > 1
          }
        }
        if (i || this.position == 'absolute')
          if (this.parent) {
            let r = this.parent.getBoundingClientRect()
            r.width &&
              r.height &&
              ((e = r.width / this.parent.offsetWidth),
              (t = r.height / this.parent.offsetHeight))
          } else ({ scaleX: e, scaleY: t } = this.view.viewState)
        return {
          editor: n,
          parent: this.parent ? this.container.getBoundingClientRect() : n,
          pos: this.manager.tooltips.map((r, s) => {
            let o = this.manager.tooltipViews[s]
            return o.getCoords
              ? o.getCoords(r.pos)
              : this.view.coordsAtPos(r.pos)
          }),
          size: this.manager.tooltipViews.map(({ dom: r }) =>
            r.getBoundingClientRect()
          ),
          space: this.view.state.facet(hc).tooltipSpace(this.view),
          scaleX: e,
          scaleY: t,
          makeAbsolute: i
        }
      }
      writeMeasure(n) {
        var e
        if (n.makeAbsolute) {
          ;(this.madeAbsolute = !0), (this.position = 'absolute')
          for (let a of this.manager.tooltipViews)
            a.dom.style.position = 'absolute'
        }
        let { editor: t, space: i, scaleX: r, scaleY: s } = n,
          o = []
        for (let a = 0; a < this.manager.tooltips.length; a++) {
          let l = this.manager.tooltips[a],
            c = this.manager.tooltipViews[a],
            { dom: u } = c,
            f = n.pos[a],
            h = n.size[a]
          if (
            !f ||
            f.bottom <= Math.max(t.top, i.top) ||
            f.top >= Math.min(t.bottom, i.bottom) ||
            f.right < Math.max(t.left, i.left) - 0.1 ||
            f.left > Math.min(t.right, i.right) + 0.1
          ) {
            u.style.top = _r
            continue
          }
          let d = l.arrow ? c.dom.querySelector('.cm-tooltip-arrow') : null,
            O = d ? 7 : 0,
            m = h.right - h.left,
            b = (e = Kp.get(c)) !== null && e !== void 0 ? e : h.bottom - h.top,
            x = c.offset || P_,
            w = this.view.textDirection == Pe.LTR,
            T =
              h.width > i.right - i.left
                ? w
                  ? i.left
                  : i.right - h.width
                : w
                  ? Math.min(f.left - (d ? 14 : 0) + x.x, i.right - m)
                  : Math.max(i.left, f.left - m + (d ? 14 : 0) - x.x),
            Q = this.above[a]
          !l.strictSide &&
            (Q
              ? f.top - (h.bottom - h.top) - x.y < i.top
              : f.bottom + (h.bottom - h.top) + x.y > i.bottom) &&
            Q == i.bottom - f.bottom > f.top - i.top &&
            (Q = this.above[a] = !Q)
          let P = (Q ? f.top - i.top : i.bottom - f.bottom) - O
          if (P < b && c.resize !== !1) {
            if (P < this.view.defaultLineHeight) {
              u.style.top = _r
              continue
            }
            Kp.set(c, b), (u.style.height = (b = P) / s + 'px')
          } else u.style.height && (u.style.height = '')
          let C = Q ? f.top - b - O - x.y : f.bottom + O + x.y,
            A = T + m
          if (c.overlap !== !0)
            for (let j of o)
              j.left < A &&
                j.right > T &&
                j.top < C + b &&
                j.bottom > C &&
                (C = Q ? j.top - b - 2 - O : j.bottom + O + 2)
          if (
            (this.position == 'absolute'
              ? ((u.style.top = (C - n.parent.top) / s + 'px'),
                (u.style.left = (T - n.parent.left) / r + 'px'))
              : ((u.style.top = C / s + 'px'), (u.style.left = T / r + 'px')),
            d)
          ) {
            let j = f.left + (w ? x.x : -x.x) - (T + 14 - 7)
            d.style.left = j / r + 'px'
          }
          c.overlap !== !0 &&
            o.push({ left: T, top: C, right: A, bottom: C + b }),
            u.classList.toggle('cm-tooltip-above', Q),
            u.classList.toggle('cm-tooltip-below', !Q),
            c.positioned && c.positioned(n.space)
        }
      }
      maybeMeasure() {
        if (
          this.manager.tooltips.length &&
          (this.view.inView && this.view.requestMeasure(this.measureReq),
          this.inView != this.view.inView &&
            ((this.inView = this.view.inView), !this.inView))
        )
          for (let n of this.manager.tooltipViews) n.dom.style.top = _r
      }
    },
    {
      eventObservers: {
        scroll() {
          this.maybeMeasure()
        }
      }
    }
  ),
  $_ = /* @__PURE__ */ M.baseTheme({
    '.cm-tooltip': {
      zIndex: 100,
      boxSizing: 'border-box'
    },
    '&light .cm-tooltip': {
      border: '1px solid #bbb',
      backgroundColor: '#f5f5f5'
    },
    '&light .cm-tooltip-section:not(:first-child)': {
      borderTop: '1px solid #bbb'
    },
    '&dark .cm-tooltip': {
      backgroundColor: '#333338',
      color: 'white'
    },
    '.cm-tooltip-arrow': {
      height: '7px',
      width: `${7 * 2}px`,
      position: 'absolute',
      zIndex: -1,
      overflow: 'hidden',
      '&:before, &:after': {
        content: "''",
        position: 'absolute',
        width: 0,
        height: 0,
        borderLeft: '7px solid transparent',
        borderRight: '7px solid transparent'
      },
      '.cm-tooltip-above &': {
        bottom: '-7px',
        '&:before': {
          borderTop: '7px solid #bbb'
        },
        '&:after': {
          borderTop: '7px solid #f5f5f5',
          bottom: '1px'
        }
      },
      '.cm-tooltip-below &': {
        top: '-7px',
        '&:before': {
          borderBottom: '7px solid #bbb'
        },
        '&:after': {
          borderBottom: '7px solid #f5f5f5',
          top: '1px'
        }
      }
    },
    '&dark .cm-tooltip .cm-tooltip-arrow': {
      '&:before': {
        borderTopColor: '#333338',
        borderBottomColor: '#333338'
      },
      '&:after': {
        borderTopColor: 'transparent',
        borderBottomColor: 'transparent'
      }
    }
  }),
  P_ = { x: 0, y: 0 },
  Lf = /* @__PURE__ */ q.define({
    enables: [vb, $_]
  }),
  Ra = /* @__PURE__ */ q.define()
class Uf {
  // Needs to be static so that host tooltip instances always match
  static create(e) {
    return new Uf(e)
  }
  constructor(e) {
    ;(this.view = e),
      (this.mounted = !1),
      (this.dom = document.createElement('div')),
      this.dom.classList.add('cm-tooltip-hover'),
      (this.manager = new bb(e, Ra, (t) => this.createHostedView(t)))
  }
  createHostedView(e) {
    let t = e.create(this.view)
    return (
      t.dom.classList.add('cm-tooltip-section'),
      this.dom.appendChild(t.dom),
      this.mounted && t.mount && t.mount(this.view),
      t
    )
  }
  mount(e) {
    for (let t of this.manager.tooltipViews) t.mount && t.mount(e)
    this.mounted = !0
  }
  positioned(e) {
    for (let t of this.manager.tooltipViews) t.positioned && t.positioned(e)
  }
  update(e) {
    this.manager.update(e)
  }
  destroy() {
    var e
    for (let t of this.manager.tooltipViews)
      (e = t.destroy) === null || e === void 0 || e.call(t)
  }
  passProp(e) {
    let t
    for (let i of this.manager.tooltipViews) {
      let r = i[e]
      if (r !== void 0) {
        if (t === void 0) t = r
        else if (t !== r) return
      }
    }
    return t
  }
  get offset() {
    return this.passProp('offset')
  }
  get getCoords() {
    return this.passProp('getCoords')
  }
  get overlap() {
    return this.passProp('overlap')
  }
  get resize() {
    return this.passProp('resize')
  }
}
const Q_ = /* @__PURE__ */ Lf.compute([Ra], (n) => {
  let e = n.facet(Ra).filter((t) => t)
  return e.length === 0
    ? null
    : {
        pos: Math.min(...e.map((t) => t.pos)),
        end: Math.max(...e.filter((t) => t.end != null).map((t) => t.end)),
        create: Uf.create,
        above: e[0].above,
        arrow: e.some((t) => t.arrow)
      }
})
class k_ {
  constructor(e, t, i, r, s) {
    ;(this.view = e),
      (this.source = t),
      (this.field = i),
      (this.setHover = r),
      (this.hoverTime = s),
      (this.hoverTimeout = -1),
      (this.restartTimeout = -1),
      (this.pending = null),
      (this.lastMove = { x: 0, y: 0, target: e.dom, time: 0 }),
      (this.checkHover = this.checkHover.bind(this)),
      e.dom.addEventListener(
        'mouseleave',
        (this.mouseleave = this.mouseleave.bind(this))
      ),
      e.dom.addEventListener(
        'mousemove',
        (this.mousemove = this.mousemove.bind(this))
      )
  }
  update() {
    this.pending &&
      ((this.pending = null),
      clearTimeout(this.restartTimeout),
      (this.restartTimeout = setTimeout(() => this.startHover(), 20)))
  }
  get active() {
    return this.view.state.field(this.field)
  }
  checkHover() {
    if (((this.hoverTimeout = -1), this.active)) return
    let e = Date.now() - this.lastMove.time
    e < this.hoverTime
      ? (this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - e))
      : this.startHover()
  }
  startHover() {
    clearTimeout(this.restartTimeout)
    let { view: e, lastMove: t } = this,
      i = e.docView.nearest(t.target)
    if (!i) return
    let r,
      s = 1
    if (i instanceof Vn) r = i.posAtStart
    else {
      if (((r = e.posAtCoords(t)), r == null)) return
      let a = e.coordsAtPos(r)
      if (
        !a ||
        t.y < a.top ||
        t.y > a.bottom ||
        t.x < a.left - e.defaultCharacterWidth ||
        t.x > a.right + e.defaultCharacterWidth
      )
        return
      let l = e
          .bidiSpans(e.state.doc.lineAt(r))
          .find((u) => u.from <= r && u.to >= r),
        c = l && l.dir == Pe.RTL ? -1 : 1
      s = t.x < a.left ? -c : c
    }
    let o = this.source(e, r, s)
    if (o != null && o.then) {
      let a = (this.pending = { pos: r })
      o.then(
        (l) => {
          this.pending == a &&
            ((this.pending = null),
            l && e.dispatch({ effects: this.setHover.of(l) }))
        },
        (l) => Rt(e.state, l, 'hover tooltip')
      )
    } else o && e.dispatch({ effects: this.setHover.of(o) })
  }
  mousemove(e) {
    var t
    ;(this.lastMove = {
      x: e.clientX,
      y: e.clientY,
      target: e.target,
      time: Date.now()
    }),
      this.hoverTimeout < 0 &&
        (this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime))
    let i = this.active
    if ((i && !Jp(this.lastMove.target)) || this.pending) {
      let { pos: r } = i || this.pending,
        s = (t = i == null ? void 0 : i.end) !== null && t !== void 0 ? t : r
      ;(r == s
        ? this.view.posAtCoords(this.lastMove) != r
        : !T_(this.view, r, s, e.clientX, e.clientY)) &&
        (this.view.dispatch({ effects: this.setHover.of(null) }),
        (this.pending = null))
    }
  }
  mouseleave(e) {
    clearTimeout(this.hoverTimeout),
      (this.hoverTimeout = -1),
      this.active &&
        !Jp(e.relatedTarget) &&
        this.view.dispatch({ effects: this.setHover.of(null) })
  }
  destroy() {
    clearTimeout(this.hoverTimeout),
      this.view.dom.removeEventListener('mouseleave', this.mouseleave),
      this.view.dom.removeEventListener('mousemove', this.mousemove)
  }
}
function Jp(n) {
  for (let e = n; e; e = e.parentNode)
    if (e.nodeType == 1 && e.classList.contains('cm-tooltip')) return !0
  return !1
}
function T_(n, e, t, i, r, s) {
  let o = n.scrollDOM.getBoundingClientRect(),
    a = n.documentTop + n.documentPadding.top + n.contentHeight
  if (o.left > i || o.right < i || o.top > r || Math.min(o.bottom, a) < r)
    return !1
  let l = n.posAtCoords({ x: i, y: r }, !1)
  return l >= e && l <= t
}
function C_(n, e = {}) {
  let t = ne.define(),
    i = We.define({
      create() {
        return null
      },
      update(r, s) {
        if (
          r &&
          ((e.hideOnChange && (s.docChanged || s.selection)) ||
            (e.hideOn && e.hideOn(s, r)))
        )
          return null
        if (r && s.docChanged) {
          let o = s.changes.mapPos(r.pos, -1, Fe.TrackDel)
          if (o == null) return null
          let a = Object.assign(/* @__PURE__ */ Object.create(null), r)
          ;(a.pos = o),
            r.end != null && (a.end = s.changes.mapPos(r.end)),
            (r = a)
        }
        for (let o of s.effects)
          o.is(t) && (r = o.value), o.is(__) && (r = null)
        return r
      },
      provide: (r) => Ra.from(r)
    })
  return [
    i,
    Re.define(
      (r) =>
        new k_(
          r,
          n,
          i,
          t,
          e.hoverTime || 300
          /* Hover.Time */
        )
    ),
    Q_
  ]
}
function Sb(n, e) {
  let t = n.plugin(vb)
  if (!t) return null
  let i = t.manager.tooltips.indexOf(e)
  return i < 0 ? null : t.manager.tooltipViews[i]
}
const __ = /* @__PURE__ */ ne.define(),
  eO = /* @__PURE__ */ q.define({
    combine(n) {
      let e, t
      for (let i of n) (e = e || i.topContainer), (t = t || i.bottomContainer)
      return { topContainer: e, bottomContainer: t }
    }
  })
function as(n, e) {
  let t = n.plugin(xb),
    i = t ? t.specs.indexOf(e) : -1
  return i > -1 ? t.panels[i] : null
}
const xb = /* @__PURE__ */ Re.fromClass(
  class {
    constructor(n) {
      ;(this.input = n.state.facet(ls)),
        (this.specs = this.input.filter((t) => t)),
        (this.panels = this.specs.map((t) => t(n)))
      let e = n.state.facet(eO)
      ;(this.top = new ao(n, !0, e.topContainer)),
        (this.bottom = new ao(n, !1, e.bottomContainer)),
        this.top.sync(this.panels.filter((t) => t.top)),
        this.bottom.sync(this.panels.filter((t) => !t.top))
      for (let t of this.panels)
        t.dom.classList.add('cm-panel'), t.mount && t.mount()
    }
    update(n) {
      let e = n.state.facet(eO)
      this.top.container != e.topContainer &&
        (this.top.sync([]), (this.top = new ao(n.view, !0, e.topContainer))),
        this.bottom.container != e.bottomContainer &&
          (this.bottom.sync([]),
          (this.bottom = new ao(n.view, !1, e.bottomContainer))),
        this.top.syncClasses(),
        this.bottom.syncClasses()
      let t = n.state.facet(ls)
      if (t != this.input) {
        let i = t.filter((l) => l),
          r = [],
          s = [],
          o = [],
          a = []
        for (let l of i) {
          let c = this.specs.indexOf(l),
            u
          c < 0
            ? ((u = l(n.view)), a.push(u))
            : ((u = this.panels[c]), u.update && u.update(n)),
            r.push(u),
            (u.top ? s : o).push(u)
        }
        ;(this.specs = i),
          (this.panels = r),
          this.top.sync(s),
          this.bottom.sync(o)
        for (let l of a) l.dom.classList.add('cm-panel'), l.mount && l.mount()
      } else for (let i of this.panels) i.update && i.update(n)
    }
    destroy() {
      this.top.sync([]), this.bottom.sync([])
    }
  },
  {
    provide: (n) =>
      M.scrollMargins.of((e) => {
        let t = e.plugin(n)
        return (
          t && { top: t.top.scrollMargin(), bottom: t.bottom.scrollMargin() }
        )
      })
  }
)
class ao {
  constructor(e, t, i) {
    ;(this.view = e),
      (this.top = t),
      (this.container = i),
      (this.dom = void 0),
      (this.classes = ''),
      (this.panels = []),
      this.syncClasses()
  }
  sync(e) {
    for (let t of this.panels) t.destroy && e.indexOf(t) < 0 && t.destroy()
    ;(this.panels = e), this.syncDOM()
  }
  syncDOM() {
    if (this.panels.length == 0) {
      this.dom && (this.dom.remove(), (this.dom = void 0))
      return
    }
    if (!this.dom) {
      ;(this.dom = document.createElement('div')),
        (this.dom.className = this.top
          ? 'cm-panels cm-panels-top'
          : 'cm-panels cm-panels-bottom'),
        (this.dom.style[this.top ? 'top' : 'bottom'] = '0')
      let t = this.container || this.view.dom
      t.insertBefore(this.dom, this.top ? t.firstChild : null)
    }
    let e = this.dom.firstChild
    for (let t of this.panels)
      if (t.dom.parentNode == this.dom) {
        for (; e != t.dom; ) e = tO(e)
        e = e.nextSibling
      } else this.dom.insertBefore(t.dom, e)
    for (; e; ) e = tO(e)
  }
  scrollMargin() {
    return !this.dom || this.container
      ? 0
      : Math.max(
          0,
          this.top
            ? this.dom.getBoundingClientRect().bottom -
                Math.max(0, this.view.scrollDOM.getBoundingClientRect().top)
            : Math.min(
                innerHeight,
                this.view.scrollDOM.getBoundingClientRect().bottom
              ) - this.dom.getBoundingClientRect().top
        )
  }
  syncClasses() {
    if (!(!this.container || this.classes == this.view.themeClasses)) {
      for (let e of this.classes.split(' '))
        e && this.container.classList.remove(e)
      for (let e of (this.classes = this.view.themeClasses).split(' '))
        e && this.container.classList.add(e)
    }
  }
}
function tO(n) {
  let e = n.nextSibling
  return n.remove(), e
}
const ls = /* @__PURE__ */ q.define({
  enables: xb
})
class Pn extends vi {
  /**
  @internal
  */
  compare(e) {
    return this == e || (this.constructor == e.constructor && this.eq(e))
  }
  /**
  Compare this marker to another marker of the same type.
  */
  eq(e) {
    return !1
  }
  /**
  Called if the marker has a `toDOM` method and its representation
  was removed from a gutter.
  */
  destroy(e) {}
}
Pn.prototype.elementClass = ''
Pn.prototype.toDOM = void 0
Pn.prototype.mapMode = Fe.TrackBefore
Pn.prototype.startSide = Pn.prototype.endSide = -1
Pn.prototype.point = !0
const Uo = /* @__PURE__ */ q.define(),
  Z_ = {
    class: '',
    renderEmptyElements: !1,
    elementStyle: '',
    markers: () => fe.empty,
    lineMarker: () => null,
    widgetMarker: () => null,
    lineMarkerChange: null,
    initialSpacer: null,
    updateSpacer: null,
    domEventHandlers: {}
  },
  Hr = /* @__PURE__ */ q.define()
function A_(n) {
  return [wb(), Hr.of(Object.assign(Object.assign({}, Z_), n))]
}
const Fu = /* @__PURE__ */ q.define({
  combine: (n) => n.some((e) => e)
})
function wb(n) {
  let e = [R_]
  return n && n.fixed === !1 && e.push(Fu.of(!0)), e
}
const R_ = /* @__PURE__ */ Re.fromClass(
  class {
    constructor(n) {
      ;(this.view = n),
        (this.prevViewport = n.viewport),
        (this.dom = document.createElement('div')),
        (this.dom.className = 'cm-gutters'),
        this.dom.setAttribute('aria-hidden', 'true'),
        (this.dom.style.minHeight =
          this.view.contentHeight / this.view.scaleY + 'px'),
        (this.gutters = n.state.facet(Hr).map((e) => new iO(n, e)))
      for (let e of this.gutters) this.dom.appendChild(e.dom)
      ;(this.fixed = !n.state.facet(Fu)),
        this.fixed && (this.dom.style.position = 'sticky'),
        this.syncGutters(!1),
        n.scrollDOM.insertBefore(this.dom, n.contentDOM)
    }
    update(n) {
      if (this.updateGutters(n)) {
        let e = this.prevViewport,
          t = n.view.viewport,
          i = Math.min(e.to, t.to) - Math.max(e.from, t.from)
        this.syncGutters(i < (t.to - t.from) * 0.8)
      }
      n.geometryChanged &&
        (this.dom.style.minHeight = this.view.contentHeight + 'px'),
        this.view.state.facet(Fu) != !this.fixed &&
          ((this.fixed = !this.fixed),
          (this.dom.style.position = this.fixed ? 'sticky' : '')),
        (this.prevViewport = n.view.viewport)
    }
    syncGutters(n) {
      let e = this.dom.nextSibling
      n && this.dom.remove()
      let t = fe.iter(this.view.state.facet(Uo), this.view.viewport.from),
        i = [],
        r = this.gutters.map(
          (s) => new E_(s, this.view.viewport, -this.view.documentPadding.top)
        )
      for (let s of this.view.viewportLineBlocks)
        if ((i.length && (i = []), Array.isArray(s.type))) {
          let o = !0
          for (let a of s.type)
            if (a.type == st.Text && o) {
              Gu(t, i, a.from)
              for (let l of r) l.line(this.view, a, i)
              o = !1
            } else if (a.widget) for (let l of r) l.widget(this.view, a)
        } else if (s.type == st.Text) {
          Gu(t, i, s.from)
          for (let o of r) o.line(this.view, s, i)
        } else if (s.widget) for (let o of r) o.widget(this.view, s)
      for (let s of r) s.finish()
      n && this.view.scrollDOM.insertBefore(this.dom, e)
    }
    updateGutters(n) {
      let e = n.startState.facet(Hr),
        t = n.state.facet(Hr),
        i =
          n.docChanged ||
          n.heightChanged ||
          n.viewportChanged ||
          !fe.eq(
            n.startState.facet(Uo),
            n.state.facet(Uo),
            n.view.viewport.from,
            n.view.viewport.to
          )
      if (e == t) for (let r of this.gutters) r.update(n) && (i = !0)
      else {
        i = !0
        let r = []
        for (let s of t) {
          let o = e.indexOf(s)
          o < 0
            ? r.push(new iO(this.view, s))
            : (this.gutters[o].update(n), r.push(this.gutters[o]))
        }
        for (let s of this.gutters)
          s.dom.remove(), r.indexOf(s) < 0 && s.destroy()
        for (let s of r) this.dom.appendChild(s.dom)
        this.gutters = r
      }
      return i
    }
    destroy() {
      for (let n of this.gutters) n.destroy()
      this.dom.remove()
    }
  },
  {
    provide: (n) =>
      M.scrollMargins.of((e) => {
        let t = e.plugin(n)
        return !t || t.gutters.length == 0 || !t.fixed
          ? null
          : e.textDirection == Pe.LTR
            ? { left: t.dom.offsetWidth * e.scaleX }
            : { right: t.dom.offsetWidth * e.scaleX }
      })
  }
)
function nO(n) {
  return Array.isArray(n) ? n : [n]
}
function Gu(n, e, t) {
  for (; n.value && n.from <= t; ) n.from == t && e.push(n.value), n.next()
}
class E_ {
  constructor(e, t, i) {
    ;(this.gutter = e),
      (this.height = i),
      (this.i = 0),
      (this.cursor = fe.iter(e.markers, t.from))
  }
  addElement(e, t, i) {
    let { gutter: r } = this,
      s = (t.top - this.height) / e.scaleY,
      o = t.height / e.scaleY
    if (this.i == r.elements.length) {
      let a = new $b(e, o, s, i)
      r.elements.push(a), r.dom.appendChild(a.dom)
    } else r.elements[this.i].update(e, o, s, i)
    ;(this.height = t.bottom), this.i++
  }
  line(e, t, i) {
    let r = []
    Gu(this.cursor, r, t.from), i.length && (r = r.concat(i))
    let s = this.gutter.config.lineMarker(e, t, r)
    s && r.unshift(s)
    let o = this.gutter
    ;(r.length == 0 && !o.config.renderEmptyElements) ||
      this.addElement(e, t, r)
  }
  widget(e, t) {
    let i = this.gutter.config.widgetMarker(e, t.widget, t)
    i && this.addElement(e, t, [i])
  }
  finish() {
    let e = this.gutter
    for (; e.elements.length > this.i; ) {
      let t = e.elements.pop()
      e.dom.removeChild(t.dom), t.destroy()
    }
  }
}
class iO {
  constructor(e, t) {
    ;(this.view = e),
      (this.config = t),
      (this.elements = []),
      (this.spacer = null),
      (this.dom = document.createElement('div')),
      (this.dom.className =
        'cm-gutter' + (this.config.class ? ' ' + this.config.class : ''))
    for (let i in t.domEventHandlers)
      this.dom.addEventListener(i, (r) => {
        let s = r.target,
          o
        if (s != this.dom && this.dom.contains(s)) {
          for (; s.parentNode != this.dom; ) s = s.parentNode
          let l = s.getBoundingClientRect()
          o = (l.top + l.bottom) / 2
        } else o = r.clientY
        let a = e.lineBlockAtHeight(o - e.documentTop)
        t.domEventHandlers[i](e, a, r) && r.preventDefault()
      })
    ;(this.markers = nO(t.markers(e))),
      t.initialSpacer &&
        ((this.spacer = new $b(e, 0, 0, [t.initialSpacer(e)])),
        this.dom.appendChild(this.spacer.dom),
        (this.spacer.dom.style.cssText +=
          'visibility: hidden; pointer-events: none'))
  }
  update(e) {
    let t = this.markers
    if (
      ((this.markers = nO(this.config.markers(e.view))),
      this.spacer && this.config.updateSpacer)
    ) {
      let r = this.config.updateSpacer(this.spacer.markers[0], e)
      r != this.spacer.markers[0] && this.spacer.update(e.view, 0, 0, [r])
    }
    let i = e.view.viewport
    return (
      !fe.eq(this.markers, t, i.from, i.to) ||
      (this.config.lineMarkerChange ? this.config.lineMarkerChange(e) : !1)
    )
  }
  destroy() {
    for (let e of this.elements) e.destroy()
  }
}
class $b {
  constructor(e, t, i, r) {
    ;(this.height = -1),
      (this.above = 0),
      (this.markers = []),
      (this.dom = document.createElement('div')),
      (this.dom.className = 'cm-gutterElement'),
      this.update(e, t, i, r)
  }
  update(e, t, i, r) {
    this.height != t && ((this.height = t), (this.dom.style.height = t + 'px')),
      this.above != i &&
        (this.dom.style.marginTop = (this.above = i) ? i + 'px' : ''),
      D_(this.markers, r) || this.setMarkers(e, r)
  }
  setMarkers(e, t) {
    let i = 'cm-gutterElement',
      r = this.dom.firstChild
    for (let s = 0, o = 0; ; ) {
      let a = o,
        l = s < t.length ? t[s++] : null,
        c = !1
      if (l) {
        let u = l.elementClass
        u && (i += ' ' + u)
        for (let f = o; f < this.markers.length; f++)
          if (this.markers[f].compare(l)) {
            ;(a = f), (c = !0)
            break
          }
      } else a = this.markers.length
      for (; o < a; ) {
        let u = this.markers[o++]
        if (u.toDOM) {
          u.destroy(r)
          let f = r.nextSibling
          r.remove(), (r = f)
        }
      }
      if (!l) break
      l.toDOM &&
        (c ? (r = r.nextSibling) : this.dom.insertBefore(l.toDOM(e), r)),
        c && o++
    }
    ;(this.dom.className = i), (this.markers = t)
  }
  destroy() {
    this.setMarkers(null, [])
  }
}
function D_(n, e) {
  if (n.length != e.length) return !1
  for (let t = 0; t < n.length; t++) if (!n[t].compare(e[t])) return !1
  return !0
}
const X_ = /* @__PURE__ */ q.define(),
  Mi = /* @__PURE__ */ q.define({
    combine(n) {
      return cn(
        n,
        { formatNumber: String, domEventHandlers: {} },
        {
          domEventHandlers(e, t) {
            let i = Object.assign({}, e)
            for (let r in t) {
              let s = i[r],
                o = t[r]
              i[r] = s ? (a, l, c) => s(a, l, c) || o(a, l, c) : o
            }
            return i
          }
        }
      )
    }
  })
class dc extends Pn {
  constructor(e) {
    super(), (this.number = e)
  }
  eq(e) {
    return this.number == e.number
  }
  toDOM() {
    return document.createTextNode(this.number)
  }
}
function pc(n, e) {
  return n.state.facet(Mi).formatNumber(e, n.state)
}
const Y_ = /* @__PURE__ */ Hr.compute([Mi], (n) => ({
  class: 'cm-lineNumbers',
  renderEmptyElements: !1,
  markers(e) {
    return e.state.facet(X_)
  },
  lineMarker(e, t, i) {
    return i.some((r) => r.toDOM)
      ? null
      : new dc(pc(e, e.state.doc.lineAt(t.from).number))
  },
  widgetMarker: () => null,
  lineMarkerChange: (e) => e.startState.facet(Mi) != e.state.facet(Mi),
  initialSpacer(e) {
    return new dc(pc(e, rO(e.state.doc.lines)))
  },
  updateSpacer(e, t) {
    let i = pc(t.view, rO(t.view.state.doc.lines))
    return i == e.number ? e : new dc(i)
  },
  domEventHandlers: n.facet(Mi).domEventHandlers
}))
function I_(n = {}) {
  return [Mi.of(n), wb(), Y_]
}
function rO(n) {
  let e = 9
  for (; e < n; ) e = e * 10 + 9
  return e
}
const N_ = /* @__PURE__ */ new (class extends Pn {
    constructor() {
      super(...arguments), (this.elementClass = 'cm-activeLineGutter')
    }
  })(),
  M_ = /* @__PURE__ */ Uo.compute(['selection'], (n) => {
    let e = [],
      t = -1
    for (let i of n.selection.ranges) {
      let r = n.doc.lineAt(i.head).from
      r > t && ((t = r), e.push(N_.range(r)))
    }
    return fe.of(e)
  })
function V_() {
  return M_
}
const Pb = 1024
let W_ = 0
class Zt {
  constructor(e, t) {
    ;(this.from = e), (this.to = t)
  }
}
class se {
  /**
  Create a new node prop type.
  */
  constructor(e = {}) {
    ;(this.id = W_++),
      (this.perNode = !!e.perNode),
      (this.deserialize =
        e.deserialize ||
        (() => {
          throw new Error(
            "This node type doesn't define a deserialize function"
          )
        }))
  }
  /**
  This is meant to be used with
  [`NodeSet.extend`](#common.NodeSet.extend) or
  [`LRParser.configure`](#lr.ParserConfig.props) to compute
  prop values for each node type in the set. Takes a [match
  object](#common.NodeType^match) or function that returns undefined
  if the node type doesn't get this prop, and the prop's value if
  it does.
  */
  add(e) {
    if (this.perNode)
      throw new RangeError("Can't add per-node props to node types")
    return (
      typeof e != 'function' && (e = at.match(e)),
      (t) => {
        let i = e(t)
        return i === void 0 ? null : [this, i]
      }
    )
  }
}
se.closedBy = new se({ deserialize: (n) => n.split(' ') })
se.openedBy = new se({ deserialize: (n) => n.split(' ') })
se.group = new se({ deserialize: (n) => n.split(' ') })
se.contextHash = new se({ perNode: !0 })
se.lookAhead = new se({ perNode: !0 })
se.mounted = new se({ perNode: !0 })
class cs {
  constructor(e, t, i) {
    ;(this.tree = e), (this.overlay = t), (this.parser = i)
  }
  /**
  @internal
  */
  static get(e) {
    return e && e.props && e.props[se.mounted.id]
  }
}
const j_ = /* @__PURE__ */ Object.create(null)
class at {
  /**
  @internal
  */
  constructor(e, t, i, r = 0) {
    ;(this.name = e), (this.props = t), (this.id = i), (this.flags = r)
  }
  /**
  Define a node type.
  */
  static define(e) {
    let t =
        e.props && e.props.length ? /* @__PURE__ */ Object.create(null) : j_,
      i =
        (e.top ? 1 : 0) |
        (e.skipped ? 2 : 0) |
        (e.error ? 4 : 0) |
        (e.name == null ? 8 : 0),
      r = new at(e.name || '', t, e.id, i)
    if (e.props) {
      for (let s of e.props)
        if ((Array.isArray(s) || (s = s(r)), s)) {
          if (s[0].perNode)
            throw new RangeError("Can't store a per-node prop on a node type")
          t[s[0].id] = s[1]
        }
    }
    return r
  }
  /**
  Retrieves a node prop for this type. Will return `undefined` if
  the prop isn't present on this node.
  */
  prop(e) {
    return this.props[e.id]
  }
  /**
  True when this is the top node of a grammar.
  */
  get isTop() {
    return (this.flags & 1) > 0
  }
  /**
  True when this node is produced by a skip rule.
  */
  get isSkipped() {
    return (this.flags & 2) > 0
  }
  /**
  Indicates whether this is an error node.
  */
  get isError() {
    return (this.flags & 4) > 0
  }
  /**
  When true, this node type doesn't correspond to a user-declared
  named node, for example because it is used to cache repetition.
  */
  get isAnonymous() {
    return (this.flags & 8) > 0
  }
  /**
  Returns true when this node's name or one of its
  [groups](#common.NodeProp^group) matches the given string.
  */
  is(e) {
    if (typeof e == 'string') {
      if (this.name == e) return !0
      let t = this.prop(se.group)
      return t ? t.indexOf(e) > -1 : !1
    }
    return this.id == e
  }
  /**
  Create a function from node types to arbitrary values by
  specifying an object whose property names are node or
  [group](#common.NodeProp^group) names. Often useful with
  [`NodeProp.add`](#common.NodeProp.add). You can put multiple
  names, separated by spaces, in a single property name to map
  multiple node names to a single value.
  */
  static match(e) {
    let t = /* @__PURE__ */ Object.create(null)
    for (let i in e) for (let r of i.split(' ')) t[r] = e[i]
    return (i) => {
      for (let r = i.prop(se.group), s = -1; s < (r ? r.length : 0); s++) {
        let o = t[s < 0 ? i.name : r[s]]
        if (o) return o
      }
    }
  }
}
at.none = new at(
  '',
  /* @__PURE__ */ Object.create(null),
  0,
  8
  /* NodeFlag.Anonymous */
)
class qf {
  /**
  Create a set with the given types. The `id` property of each
  type should correspond to its position within the array.
  */
  constructor(e) {
    this.types = e
    for (let t = 0; t < e.length; t++)
      if (e[t].id != t)
        throw new RangeError(
          'Node type ids should correspond to array positions when creating a node set'
        )
  }
  /**
  Create a copy of this set with some node properties added. The
  arguments to this method can be created with
  [`NodeProp.add`](#common.NodeProp.add).
  */
  extend(...e) {
    let t = []
    for (let i of this.types) {
      let r = null
      for (let s of e) {
        let o = s(i)
        o && (r || (r = Object.assign({}, i.props)), (r[o[0].id] = o[1]))
      }
      t.push(r ? new at(i.name, r, i.id, i.flags) : i)
    }
    return new qf(t)
  }
}
const lo = /* @__PURE__ */ new WeakMap(),
  sO = /* @__PURE__ */ new WeakMap()
var me
;(function (n) {
  ;(n[(n.ExcludeBuffers = 1)] = 'ExcludeBuffers'),
    (n[(n.IncludeAnonymous = 2)] = 'IncludeAnonymous'),
    (n[(n.IgnoreMounts = 4)] = 'IgnoreMounts'),
    (n[(n.IgnoreOverlays = 8)] = 'IgnoreOverlays')
})(me || (me = {}))
class Qe {
  /**
  Construct a new tree. See also [`Tree.build`](#common.Tree^build).
  */
  constructor(e, t, i, r, s) {
    if (
      ((this.type = e),
      (this.children = t),
      (this.positions = i),
      (this.length = r),
      (this.props = null),
      s && s.length)
    ) {
      this.props = /* @__PURE__ */ Object.create(null)
      for (let [o, a] of s) this.props[typeof o == 'number' ? o : o.id] = a
    }
  }
  /**
  @internal
  */
  toString() {
    let e = cs.get(this)
    if (e && !e.overlay) return e.tree.toString()
    let t = ''
    for (let i of this.children) {
      let r = i.toString()
      r && (t && (t += ','), (t += r))
    }
    return this.type.name
      ? (/\W/.test(this.type.name) && !this.type.isError
          ? JSON.stringify(this.type.name)
          : this.type.name) + (t.length ? '(' + t + ')' : '')
      : t
  }
  /**
  Get a [tree cursor](#common.TreeCursor) positioned at the top of
  the tree. Mode can be used to [control](#common.IterMode) which
  nodes the cursor visits.
  */
  cursor(e = 0) {
    return new Ea(this.topNode, e)
  }
  /**
  Get a [tree cursor](#common.TreeCursor) pointing into this tree
  at the given position and side (see
  [`moveTo`](#common.TreeCursor.moveTo).
  */
  cursorAt(e, t = 0, i = 0) {
    let r = lo.get(this) || this.topNode,
      s = new Ea(r)
    return s.moveTo(e, t), lo.set(this, s._tree), s
  }
  /**
  Get a [syntax node](#common.SyntaxNode) object for the top of the
  tree.
  */
  get topNode() {
    return new tt(this, 0, 0, null)
  }
  /**
  Get the [syntax node](#common.SyntaxNode) at the given position.
  If `side` is -1, this will move into nodes that end at the
  position. If 1, it'll move into nodes that start at the
  position. With 0, it'll only enter nodes that cover the position
  from both sides.
  
  Note that this will not enter
  [overlays](#common.MountedTree.overlay), and you often want
  [`resolveInner`](#common.Tree.resolveInner) instead.
  */
  resolve(e, t = 0) {
    let i = us(lo.get(this) || this.topNode, e, t, !1)
    return lo.set(this, i), i
  }
  /**
  Like [`resolve`](#common.Tree.resolve), but will enter
  [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
  pointing into the innermost overlaid tree at the given position
  (with parent links going through all parent structure, including
  the host trees).
  */
  resolveInner(e, t = 0) {
    let i = us(sO.get(this) || this.topNode, e, t, !0)
    return sO.set(this, i), i
  }
  /**
  In some situations, it can be useful to iterate through all
  nodes around a position, including those in overlays that don't
  directly cover the position. This method gives you an iterator
  that will produce all nodes, from small to big, around the given
  position.
  */
  resolveStack(e, t = 0) {
    return U_(this, e, t)
  }
  /**
  Iterate over the tree and its children, calling `enter` for any
  node that touches the `from`/`to` region (if given) before
  running over such a node's children, and `leave` (if given) when
  leaving the node. When `enter` returns `false`, that node will
  not have its children iterated over (or `leave` called).
  */
  iterate(e) {
    let { enter: t, leave: i, from: r = 0, to: s = this.length } = e,
      o = e.mode || 0,
      a = (o & me.IncludeAnonymous) > 0
    for (let l = this.cursor(o | me.IncludeAnonymous); ; ) {
      let c = !1
      if (
        l.from <= s &&
        l.to >= r &&
        ((!a && l.type.isAnonymous) || t(l) !== !1)
      ) {
        if (l.firstChild()) continue
        c = !0
      }
      for (; c && i && (a || !l.type.isAnonymous) && i(l), !l.nextSibling(); ) {
        if (!l.parent()) return
        c = !0
      }
    }
  }
  /**
  Get the value of the given [node prop](#common.NodeProp) for this
  node. Works with both per-node and per-type props.
  */
  prop(e) {
    return e.perNode
      ? this.props
        ? this.props[e.id]
        : void 0
      : this.type.prop(e)
  }
  /**
  Returns the node's [per-node props](#common.NodeProp.perNode) in a
  format that can be passed to the [`Tree`](#common.Tree)
  constructor.
  */
  get propValues() {
    let e = []
    if (this.props) for (let t in this.props) e.push([+t, this.props[t]])
    return e
  }
  /**
  Balance the direct children of this tree, producing a copy of
  which may have children grouped into subtrees with type
  [`NodeType.none`](#common.NodeType^none).
  */
  balance(e = {}) {
    return this.children.length <= 8
      ? this
      : Gf(
          at.none,
          this.children,
          this.positions,
          0,
          this.children.length,
          0,
          this.length,
          (t, i, r) => new Qe(this.type, t, i, r, this.propValues),
          e.makeTree || ((t, i, r) => new Qe(at.none, t, i, r))
        )
  }
  /**
  Build a tree from a postfix-ordered buffer of node information,
  or a cursor over such a buffer.
  */
  static build(e) {
    return q_(e)
  }
}
Qe.empty = new Qe(at.none, [], [], 0)
class zf {
  constructor(e, t) {
    ;(this.buffer = e), (this.index = t)
  }
  get id() {
    return this.buffer[this.index - 4]
  }
  get start() {
    return this.buffer[this.index - 3]
  }
  get end() {
    return this.buffer[this.index - 2]
  }
  get size() {
    return this.buffer[this.index - 1]
  }
  get pos() {
    return this.index
  }
  next() {
    this.index -= 4
  }
  fork() {
    return new zf(this.buffer, this.index)
  }
}
class Kn {
  /**
  Create a tree buffer.
  */
  constructor(e, t, i) {
    ;(this.buffer = e), (this.length = t), (this.set = i)
  }
  /**
  @internal
  */
  get type() {
    return at.none
  }
  /**
  @internal
  */
  toString() {
    let e = []
    for (let t = 0; t < this.buffer.length; )
      e.push(this.childString(t)), (t = this.buffer[t + 3])
    return e.join(',')
  }
  /**
  @internal
  */
  childString(e) {
    let t = this.buffer[e],
      i = this.buffer[e + 3],
      r = this.set.types[t],
      s = r.name
    if (
      (/\W/.test(s) && !r.isError && (s = JSON.stringify(s)), (e += 4), i == e)
    )
      return s
    let o = []
    for (; e < i; ) o.push(this.childString(e)), (e = this.buffer[e + 3])
    return s + '(' + o.join(',') + ')'
  }
  /**
  @internal
  */
  findChild(e, t, i, r, s) {
    let { buffer: o } = this,
      a = -1
    for (
      let l = e;
      l != t && !(Qb(s, r, o[l + 1], o[l + 2]) && ((a = l), i > 0));
      l = o[l + 3]
    );
    return a
  }
  /**
  @internal
  */
  slice(e, t, i) {
    let r = this.buffer,
      s = new Uint16Array(t - e),
      o = 0
    for (let a = e, l = 0; a < t; ) {
      ;(s[l++] = r[a++]), (s[l++] = r[a++] - i)
      let c = (s[l++] = r[a++] - i)
      ;(s[l++] = r[a++] - e), (o = Math.max(o, c))
    }
    return new Kn(s, o, this.set)
  }
}
function Qb(n, e, t, i) {
  switch (n) {
    case -2:
      return t < e
    case -1:
      return i >= e && t < e
    case 0:
      return t < e && i > e
    case 1:
      return t <= e && i > e
    case 2:
      return i > e
    case 4:
      return !0
  }
}
function us(n, e, t, i) {
  for (
    var r;
    n.from == n.to ||
    (t < 1 ? n.from >= e : n.from > e) ||
    (t > -1 ? n.to <= e : n.to < e);

  ) {
    let o = !i && n instanceof tt && n.index < 0 ? null : n.parent
    if (!o) return n
    n = o
  }
  let s = i ? 0 : me.IgnoreOverlays
  if (i)
    for (let o = n, a = o.parent; a; o = a, a = o.parent)
      o instanceof tt &&
        o.index < 0 &&
        ((r = a.enter(e, t, s)) === null || r === void 0 ? void 0 : r.from) !=
          o.from &&
        (n = a)
  for (;;) {
    let o = n.enter(e, t, s)
    if (!o) return n
    n = o
  }
}
class kb {
  cursor(e = 0) {
    return new Ea(this, e)
  }
  getChild(e, t = null, i = null) {
    let r = oO(this, e, t, i)
    return r.length ? r[0] : null
  }
  getChildren(e, t = null, i = null) {
    return oO(this, e, t, i)
  }
  resolve(e, t = 0) {
    return us(this, e, t, !1)
  }
  resolveInner(e, t = 0) {
    return us(this, e, t, !0)
  }
  matchContext(e) {
    return Hu(this, e)
  }
  enterUnfinishedNodesBefore(e) {
    let t = this.childBefore(e),
      i = this
    for (; t; ) {
      let r = t.lastChild
      if (!r || r.to != t.to) break
      r.type.isError && r.from == r.to
        ? ((i = t), (t = r.prevSibling))
        : (t = r)
    }
    return i
  }
  get node() {
    return this
  }
  get next() {
    return this.parent
  }
}
class tt extends kb {
  constructor(e, t, i, r) {
    super(),
      (this._tree = e),
      (this.from = t),
      (this.index = i),
      (this._parent = r)
  }
  get type() {
    return this._tree.type
  }
  get name() {
    return this._tree.type.name
  }
  get to() {
    return this.from + this._tree.length
  }
  nextChild(e, t, i, r, s = 0) {
    for (let o = this; ; ) {
      for (
        let { children: a, positions: l } = o._tree, c = t > 0 ? a.length : -1;
        e != c;
        e += t
      ) {
        let u = a[e],
          f = l[e] + o.from
        if (Qb(r, i, f, f + u.length)) {
          if (u instanceof Kn) {
            if (s & me.ExcludeBuffers) continue
            let h = u.findChild(0, u.buffer.length, t, i - f, r)
            if (h > -1) return new nn(new B_(o, u, e, f), null, h)
          } else if (s & me.IncludeAnonymous || !u.type.isAnonymous || Ff(u)) {
            let h
            if (!(s & me.IgnoreMounts) && (h = cs.get(u)) && !h.overlay)
              return new tt(h.tree, f, e, o)
            let d = new tt(u, f, e, o)
            return s & me.IncludeAnonymous || !d.type.isAnonymous
              ? d
              : d.nextChild(t < 0 ? u.children.length - 1 : 0, t, i, r)
          }
        }
      }
      if (
        s & me.IncludeAnonymous ||
        !o.type.isAnonymous ||
        (o.index >= 0
          ? (e = o.index + t)
          : (e = t < 0 ? -1 : o._parent._tree.children.length),
        (o = o._parent),
        !o)
      )
        return null
    }
  }
  get firstChild() {
    return this.nextChild(
      0,
      1,
      0,
      4
      /* Side.DontCare */
    )
  }
  get lastChild() {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      0,
      4
      /* Side.DontCare */
    )
  }
  childAfter(e) {
    return this.nextChild(
      0,
      1,
      e,
      2
      /* Side.After */
    )
  }
  childBefore(e) {
    return this.nextChild(
      this._tree.children.length - 1,
      -1,
      e,
      -2
      /* Side.Before */
    )
  }
  enter(e, t, i = 0) {
    let r
    if (!(i & me.IgnoreOverlays) && (r = cs.get(this._tree)) && r.overlay) {
      let s = e - this.from
      for (let { from: o, to: a } of r.overlay)
        if ((t > 0 ? o <= s : o < s) && (t < 0 ? a >= s : a > s))
          return new tt(r.tree, r.overlay[0].from + this.from, -1, this)
    }
    return this.nextChild(0, 1, e, t, i)
  }
  nextSignificantParent() {
    let e = this
    for (; e.type.isAnonymous && e._parent; ) e = e._parent
    return e
  }
  get parent() {
    return this._parent ? this._parent.nextSignificantParent() : null
  }
  get nextSibling() {
    return this._parent && this.index >= 0
      ? this._parent.nextChild(
          this.index + 1,
          1,
          0,
          4
          /* Side.DontCare */
        )
      : null
  }
  get prevSibling() {
    return this._parent && this.index >= 0
      ? this._parent.nextChild(
          this.index - 1,
          -1,
          0,
          4
          /* Side.DontCare */
        )
      : null
  }
  get tree() {
    return this._tree
  }
  toTree() {
    return this._tree
  }
  /**
  @internal
  */
  toString() {
    return this._tree.toString()
  }
}
function oO(n, e, t, i) {
  let r = n.cursor(),
    s = []
  if (!r.firstChild()) return s
  if (t != null) {
    for (; !r.type.is(t); ) if (!r.nextSibling()) return s
  }
  for (;;) {
    if (i != null && r.type.is(i)) return s
    if ((r.type.is(e) && s.push(r.node), !r.nextSibling()))
      return i == null ? s : []
  }
}
function Hu(n, e, t = e.length - 1) {
  for (let i = n.parent; t >= 0; i = i.parent) {
    if (!i) return !1
    if (!i.type.isAnonymous) {
      if (e[t] && e[t] != i.name) return !1
      t--
    }
  }
  return !0
}
class B_ {
  constructor(e, t, i, r) {
    ;(this.parent = e), (this.buffer = t), (this.index = i), (this.start = r)
  }
}
class nn extends kb {
  get name() {
    return this.type.name
  }
  get from() {
    return this.context.start + this.context.buffer.buffer[this.index + 1]
  }
  get to() {
    return this.context.start + this.context.buffer.buffer[this.index + 2]
  }
  constructor(e, t, i) {
    super(),
      (this.context = e),
      (this._parent = t),
      (this.index = i),
      (this.type = e.buffer.set.types[e.buffer.buffer[i]])
  }
  child(e, t, i) {
    let { buffer: r } = this.context,
      s = r.findChild(
        this.index + 4,
        r.buffer[this.index + 3],
        e,
        t - this.context.start,
        i
      )
    return s < 0 ? null : new nn(this.context, this, s)
  }
  get firstChild() {
    return this.child(
      1,
      0,
      4
      /* Side.DontCare */
    )
  }
  get lastChild() {
    return this.child(
      -1,
      0,
      4
      /* Side.DontCare */
    )
  }
  childAfter(e) {
    return this.child(
      1,
      e,
      2
      /* Side.After */
    )
  }
  childBefore(e) {
    return this.child(
      -1,
      e,
      -2
      /* Side.Before */
    )
  }
  enter(e, t, i = 0) {
    if (i & me.ExcludeBuffers) return null
    let { buffer: r } = this.context,
      s = r.findChild(
        this.index + 4,
        r.buffer[this.index + 3],
        t > 0 ? 1 : -1,
        e - this.context.start,
        t
      )
    return s < 0 ? null : new nn(this.context, this, s)
  }
  get parent() {
    return this._parent || this.context.parent.nextSignificantParent()
  }
  externalSibling(e) {
    return this._parent
      ? null
      : this.context.parent.nextChild(
          this.context.index + e,
          e,
          0,
          4
          /* Side.DontCare */
        )
  }
  get nextSibling() {
    let { buffer: e } = this.context,
      t = e.buffer[this.index + 3]
    return t <
      (this._parent ? e.buffer[this._parent.index + 3] : e.buffer.length)
      ? new nn(this.context, this._parent, t)
      : this.externalSibling(1)
  }
  get prevSibling() {
    let { buffer: e } = this.context,
      t = this._parent ? this._parent.index + 4 : 0
    return this.index == t
      ? this.externalSibling(-1)
      : new nn(
          this.context,
          this._parent,
          e.findChild(
            t,
            this.index,
            -1,
            0,
            4
            /* Side.DontCare */
          )
        )
  }
  get tree() {
    return null
  }
  toTree() {
    let e = [],
      t = [],
      { buffer: i } = this.context,
      r = this.index + 4,
      s = i.buffer[this.index + 3]
    if (s > r) {
      let o = i.buffer[this.index + 1]
      e.push(i.slice(r, s, o)), t.push(0)
    }
    return new Qe(this.type, e, t, this.to - this.from)
  }
  /**
  @internal
  */
  toString() {
    return this.context.buffer.childString(this.index)
  }
}
function Tb(n) {
  if (!n.length) return null
  let e = 0,
    t = n[0]
  for (let s = 1; s < n.length; s++) {
    let o = n[s]
    ;(o.from > t.from || o.to < t.to) && ((t = o), (e = s))
  }
  let i = t instanceof tt && t.index < 0 ? null : t.parent,
    r = n.slice()
  return i ? (r[e] = i) : r.splice(e, 1), new L_(r, t)
}
class L_ {
  constructor(e, t) {
    ;(this.heads = e), (this.node = t)
  }
  get next() {
    return Tb(this.heads)
  }
}
function U_(n, e, t) {
  let i = n.resolveInner(e, t),
    r = null
  for (let s = i instanceof tt ? i : i.context.parent; s; s = s.parent)
    if (s.index < 0) {
      let o = s.parent
      ;(r || (r = [i])).push(o.resolve(e, t)), (s = o)
    } else {
      let o = cs.get(s.tree)
      if (
        o &&
        o.overlay &&
        o.overlay[0].from <= e &&
        o.overlay[o.overlay.length - 1].to >= e
      ) {
        let a = new tt(o.tree, o.overlay[0].from + s.from, -1, s)
        ;(r || (r = [i])).push(us(a, e, t, !1))
      }
    }
  return r ? Tb(r) : i
}
class Ea {
  /**
  Shorthand for `.type.name`.
  */
  get name() {
    return this.type.name
  }
  /**
  @internal
  */
  constructor(e, t = 0) {
    if (
      ((this.mode = t),
      (this.buffer = null),
      (this.stack = []),
      (this.index = 0),
      (this.bufferNode = null),
      e instanceof tt)
    )
      this.yieldNode(e)
    else {
      ;(this._tree = e.context.parent), (this.buffer = e.context)
      for (let i = e._parent; i; i = i._parent) this.stack.unshift(i.index)
      ;(this.bufferNode = e), this.yieldBuf(e.index)
    }
  }
  yieldNode(e) {
    return e
      ? ((this._tree = e),
        (this.type = e.type),
        (this.from = e.from),
        (this.to = e.to),
        !0)
      : !1
  }
  yieldBuf(e, t) {
    this.index = e
    let { start: i, buffer: r } = this.buffer
    return (
      (this.type = t || r.set.types[r.buffer[e]]),
      (this.from = i + r.buffer[e + 1]),
      (this.to = i + r.buffer[e + 2]),
      !0
    )
  }
  /**
  @internal
  */
  yield(e) {
    return e
      ? e instanceof tt
        ? ((this.buffer = null), this.yieldNode(e))
        : ((this.buffer = e.context), this.yieldBuf(e.index, e.type))
      : !1
  }
  /**
  @internal
  */
  toString() {
    return this.buffer
      ? this.buffer.buffer.childString(this.index)
      : this._tree.toString()
  }
  /**
  @internal
  */
  enterChild(e, t, i) {
    if (!this.buffer)
      return this.yield(
        this._tree.nextChild(
          e < 0 ? this._tree._tree.children.length - 1 : 0,
          e,
          t,
          i,
          this.mode
        )
      )
    let { buffer: r } = this.buffer,
      s = r.findChild(
        this.index + 4,
        r.buffer[this.index + 3],
        e,
        t - this.buffer.start,
        i
      )
    return s < 0 ? !1 : (this.stack.push(this.index), this.yieldBuf(s))
  }
  /**
  Move the cursor to this node's first child. When this returns
  false, the node has no child, and the cursor has not been moved.
  */
  firstChild() {
    return this.enterChild(
      1,
      0,
      4
      /* Side.DontCare */
    )
  }
  /**
  Move the cursor to this node's last child.
  */
  lastChild() {
    return this.enterChild(
      -1,
      0,
      4
      /* Side.DontCare */
    )
  }
  /**
  Move the cursor to the first child that ends after `pos`.
  */
  childAfter(e) {
    return this.enterChild(
      1,
      e,
      2
      /* Side.After */
    )
  }
  /**
  Move to the last child that starts before `pos`.
  */
  childBefore(e) {
    return this.enterChild(
      -1,
      e,
      -2
      /* Side.Before */
    )
  }
  /**
  Move the cursor to the child around `pos`. If side is -1 the
  child may end at that position, when 1 it may start there. This
  will also enter [overlaid](#common.MountedTree.overlay)
  [mounted](#common.NodeProp^mounted) trees unless `overlays` is
  set to false.
  */
  enter(e, t, i = this.mode) {
    return this.buffer
      ? i & me.ExcludeBuffers
        ? !1
        : this.enterChild(1, e, t)
      : this.yield(this._tree.enter(e, t, i))
  }
  /**
  Move to the node's parent node, if this isn't the top node.
  */
  parent() {
    if (!this.buffer)
      return this.yieldNode(
        this.mode & me.IncludeAnonymous ? this._tree._parent : this._tree.parent
      )
    if (this.stack.length) return this.yieldBuf(this.stack.pop())
    let e =
      this.mode & me.IncludeAnonymous
        ? this.buffer.parent
        : this.buffer.parent.nextSignificantParent()
    return (this.buffer = null), this.yieldNode(e)
  }
  /**
  @internal
  */
  sibling(e) {
    if (!this.buffer)
      return this._tree._parent
        ? this.yield(
            this._tree.index < 0
              ? null
              : this._tree._parent.nextChild(
                  this._tree.index + e,
                  e,
                  0,
                  4,
                  this.mode
                )
          )
        : !1
    let { buffer: t } = this.buffer,
      i = this.stack.length - 1
    if (e < 0) {
      let r = i < 0 ? 0 : this.stack[i] + 4
      if (this.index != r)
        return this.yieldBuf(
          t.findChild(
            r,
            this.index,
            -1,
            0,
            4
            /* Side.DontCare */
          )
        )
    } else {
      let r = t.buffer[this.index + 3]
      if (r < (i < 0 ? t.buffer.length : t.buffer[this.stack[i] + 3]))
        return this.yieldBuf(r)
    }
    return i < 0
      ? this.yield(
          this.buffer.parent.nextChild(
            this.buffer.index + e,
            e,
            0,
            4,
            this.mode
          )
        )
      : !1
  }
  /**
  Move to this node's next sibling, if any.
  */
  nextSibling() {
    return this.sibling(1)
  }
  /**
  Move to this node's previous sibling, if any.
  */
  prevSibling() {
    return this.sibling(-1)
  }
  atLastNode(e) {
    let t,
      i,
      { buffer: r } = this
    if (r) {
      if (e > 0) {
        if (this.index < r.buffer.buffer.length) return !1
      } else
        for (let s = 0; s < this.index; s++)
          if (r.buffer.buffer[s + 3] < this.index) return !1
      ;({ index: t, parent: i } = r)
    } else ({ index: t, _parent: i } = this._tree)
    for (; i; { index: t, _parent: i } = i)
      if (t > -1)
        for (
          let s = t + e, o = e < 0 ? -1 : i._tree.children.length;
          s != o;
          s += e
        ) {
          let a = i._tree.children[s]
          if (
            this.mode & me.IncludeAnonymous ||
            a instanceof Kn ||
            !a.type.isAnonymous ||
            Ff(a)
          )
            return !1
        }
    return !0
  }
  move(e, t) {
    if (
      t &&
      this.enterChild(
        e,
        0,
        4
        /* Side.DontCare */
      )
    )
      return !0
    for (;;) {
      if (this.sibling(e)) return !0
      if (this.atLastNode(e) || !this.parent()) return !1
    }
  }
  /**
  Move to the next node in a
  [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
  traversal, going from a node to its first child or, if the
  current node is empty or `enter` is false, its next sibling or
  the next sibling of the first parent node that has one.
  */
  next(e = !0) {
    return this.move(1, e)
  }
  /**
  Move to the next node in a last-to-first pre-order traveral. A
  node is followed by its last child or, if it has none, its
  previous sibling or the previous sibling of the first parent
  node that has one.
  */
  prev(e = !0) {
    return this.move(-1, e)
  }
  /**
  Move the cursor to the innermost node that covers `pos`. If
  `side` is -1, it will enter nodes that end at `pos`. If it is 1,
  it will enter nodes that start at `pos`.
  */
  moveTo(e, t = 0) {
    for (
      ;
      (this.from == this.to ||
        (t < 1 ? this.from >= e : this.from > e) ||
        (t > -1 ? this.to <= e : this.to < e)) &&
      this.parent();

    );
    for (; this.enterChild(1, e, t); );
    return this
  }
  /**
  Get a [syntax node](#common.SyntaxNode) at the cursor's current
  position.
  */
  get node() {
    if (!this.buffer) return this._tree
    let e = this.bufferNode,
      t = null,
      i = 0
    if (e && e.context == this.buffer)
      e: for (let r = this.index, s = this.stack.length; s >= 0; ) {
        for (let o = e; o; o = o._parent)
          if (o.index == r) {
            if (r == this.index) return o
            ;(t = o), (i = s + 1)
            break e
          }
        r = this.stack[--s]
      }
    for (let r = i; r < this.stack.length; r++)
      t = new nn(this.buffer, t, this.stack[r])
    return (this.bufferNode = new nn(this.buffer, t, this.index))
  }
  /**
  Get the [tree](#common.Tree) that represents the current node, if
  any. Will return null when the node is in a [tree
  buffer](#common.TreeBuffer).
  */
  get tree() {
    return this.buffer ? null : this._tree._tree
  }
  /**
  Iterate over the current node and all its descendants, calling
  `enter` when entering a node and `leave`, if given, when leaving
  one. When `enter` returns `false`, any children of that node are
  skipped, and `leave` isn't called for it.
  */
  iterate(e, t) {
    for (let i = 0; ; ) {
      let r = !1
      if (this.type.isAnonymous || e(this) !== !1) {
        if (this.firstChild()) {
          i++
          continue
        }
        this.type.isAnonymous || (r = !0)
      }
      for (
        ;
        r && t && t(this), (r = this.type.isAnonymous), !this.nextSibling();

      ) {
        if (!i) return
        this.parent(), i--, (r = !0)
      }
    }
  }
  /**
  Test whether the current node matches a given context—a sequence
  of direct parent node names. Empty strings in the context array
  are treated as wildcards.
  */
  matchContext(e) {
    if (!this.buffer) return Hu(this.node, e)
    let { buffer: t } = this.buffer,
      { types: i } = t.set
    for (let r = e.length - 1, s = this.stack.length - 1; r >= 0; s--) {
      if (s < 0) return Hu(this.node, e, r)
      let o = i[t.buffer[this.stack[s]]]
      if (!o.isAnonymous) {
        if (e[r] && e[r] != o.name) return !1
        r--
      }
    }
    return !0
  }
}
function Ff(n) {
  return n.children.some((e) => e instanceof Kn || !e.type.isAnonymous || Ff(e))
}
function q_(n) {
  var e
  let {
      buffer: t,
      nodeSet: i,
      maxBufferLength: r = Pb,
      reused: s = [],
      minRepeatType: o = i.types.length
    } = n,
    a = Array.isArray(t) ? new zf(t, t.length) : t,
    l = i.types,
    c = 0,
    u = 0
  function f(P, C, A, j, X, L) {
    let { id: U, start: E, end: I, size: B } = a,
      ee = u
    for (; B < 0; )
      if ((a.next(), B == -1)) {
        let he = s[U]
        A.push(he), j.push(E - P)
        return
      } else if (B == -3) {
        c = U
        return
      } else if (B == -4) {
        u = U
        return
      } else throw new RangeError(`Unrecognized record size: ${B}`)
    let ie = l[U],
      te,
      ce,
      ye = E - P
    if (I - E <= r && (ce = b(a.pos - C, X))) {
      let he = new Uint16Array(ce.size - ce.skip),
        Ne = a.pos - ce.size,
        it = he.length
      for (; a.pos > Ne; ) it = x(ce.start, he, it)
      ;(te = new Kn(he, I - ce.start, i)), (ye = ce.start - P)
    } else {
      let he = a.pos - B
      a.next()
      let Ne = [],
        it = [],
        xt = U >= o ? U : -1,
        jt = 0,
        le = I
      for (; a.pos > he; )
        xt >= 0 && a.id == xt && a.size >= 0
          ? (a.end <= le - r &&
              (O(Ne, it, E, jt, a.end, le, xt, ee),
              (jt = Ne.length),
              (le = a.end)),
            a.next())
          : L > 2500
            ? h(E, he, Ne, it)
            : f(E, he, Ne, it, xt, L + 1)
      if (
        (xt >= 0 && jt > 0 && jt < Ne.length && O(Ne, it, E, jt, E, le, xt, ee),
        Ne.reverse(),
        it.reverse(),
        xt > -1 && jt > 0)
      ) {
        let ni = d(ie)
        te = Gf(ie, Ne, it, 0, Ne.length, 0, I - E, ni, ni)
      } else te = m(ie, Ne, it, I - E, ee - I)
    }
    A.push(te), j.push(ye)
  }
  function h(P, C, A, j) {
    let X = [],
      L = 0,
      U = -1
    for (; a.pos > C; ) {
      let { id: E, start: I, end: B, size: ee } = a
      if (ee > 4) a.next()
      else {
        if (U > -1 && I < U) break
        U < 0 && (U = B - r), X.push(E, I, B), L++, a.next()
      }
    }
    if (L) {
      let E = new Uint16Array(L * 4),
        I = X[X.length - 2]
      for (let B = X.length - 3, ee = 0; B >= 0; B -= 3)
        (E[ee++] = X[B]),
          (E[ee++] = X[B + 1] - I),
          (E[ee++] = X[B + 2] - I),
          (E[ee++] = ee)
      A.push(new Kn(E, X[2] - I, i)), j.push(I - P)
    }
  }
  function d(P) {
    return (C, A, j) => {
      let X = 0,
        L = C.length - 1,
        U,
        E
      if (L >= 0 && (U = C[L]) instanceof Qe) {
        if (!L && U.type == P && U.length == j) return U
        ;(E = U.prop(se.lookAhead)) && (X = A[L] + U.length + E)
      }
      return m(P, C, A, j, X)
    }
  }
  function O(P, C, A, j, X, L, U, E) {
    let I = [],
      B = []
    for (; P.length > j; ) I.push(P.pop()), B.push(C.pop() + A - X)
    P.push(m(i.types[U], I, B, L - X, E - L)), C.push(X - A)
  }
  function m(P, C, A, j, X = 0, L) {
    if (c) {
      let U = [se.contextHash, c]
      L = L ? [U].concat(L) : [U]
    }
    if (X > 25) {
      let U = [se.lookAhead, X]
      L = L ? [U].concat(L) : [U]
    }
    return new Qe(P, C, A, j, L)
  }
  function b(P, C) {
    let A = a.fork(),
      j = 0,
      X = 0,
      L = 0,
      U = A.end - r,
      E = { size: 0, start: 0, skip: 0 }
    e: for (let I = A.pos - P; A.pos > I; ) {
      let B = A.size
      if (A.id == C && B >= 0) {
        ;(E.size = j), (E.start = X), (E.skip = L), (L += 4), (j += 4), A.next()
        continue
      }
      let ee = A.pos - B
      if (B < 0 || ee < I || A.start < U) break
      let ie = A.id >= o ? 4 : 0,
        te = A.start
      for (A.next(); A.pos > ee; ) {
        if (A.size < 0)
          if (A.size == -3) ie += 4
          else break e
        else A.id >= o && (ie += 4)
        A.next()
      }
      ;(X = te), (j += B), (L += ie)
    }
    return (
      (C < 0 || j == P) && ((E.size = j), (E.start = X), (E.skip = L)),
      E.size > 4 ? E : void 0
    )
  }
  function x(P, C, A) {
    let { id: j, start: X, end: L, size: U } = a
    if ((a.next(), U >= 0 && j < o)) {
      let E = A
      if (U > 4) {
        let I = a.pos - (U - 4)
        for (; a.pos > I; ) A = x(P, C, A)
      }
      ;(C[--A] = E), (C[--A] = L - P), (C[--A] = X - P), (C[--A] = j)
    } else U == -3 ? (c = j) : U == -4 && (u = j)
    return A
  }
  let w = [],
    T = []
  for (; a.pos > 0; ) f(n.start || 0, n.bufferStart || 0, w, T, -1, 0)
  let Q =
    (e = n.length) !== null && e !== void 0
      ? e
      : w.length
        ? T[0] + w[0].length
        : 0
  return new Qe(l[n.topID], w.reverse(), T.reverse(), Q)
}
const aO = /* @__PURE__ */ new WeakMap()
function qo(n, e) {
  if (!n.isAnonymous || e instanceof Kn || e.type != n) return 1
  let t = aO.get(e)
  if (t == null) {
    t = 1
    for (let i of e.children) {
      if (i.type != n || !(i instanceof Qe)) {
        t = 1
        break
      }
      t += qo(n, i)
    }
    aO.set(e, t)
  }
  return t
}
function Gf(n, e, t, i, r, s, o, a, l) {
  let c = 0
  for (let O = i; O < r; O++) c += qo(n, e[O])
  let u = Math.ceil(
      (c * 1.5) / 8
      /* Balance.BranchFactor */
    ),
    f = [],
    h = []
  function d(O, m, b, x, w) {
    for (let T = b; T < x; ) {
      let Q = T,
        P = m[T],
        C = qo(n, O[T])
      for (T++; T < x; T++) {
        let A = qo(n, O[T])
        if (C + A >= u) break
        C += A
      }
      if (T == Q + 1) {
        if (C > u) {
          let A = O[Q]
          d(A.children, A.positions, 0, A.children.length, m[Q] + w)
          continue
        }
        f.push(O[Q])
      } else {
        let A = m[T - 1] + O[T - 1].length - P
        f.push(Gf(n, O, m, Q, T, P, A, null, l))
      }
      h.push(P + w - s)
    }
  }
  return d(e, t, i, r, 0), (a || l)(f, h, o)
}
class Cb {
  constructor() {
    this.map = /* @__PURE__ */ new WeakMap()
  }
  setBuffer(e, t, i) {
    let r = this.map.get(e)
    r || this.map.set(e, (r = /* @__PURE__ */ new Map())), r.set(t, i)
  }
  getBuffer(e, t) {
    let i = this.map.get(e)
    return i && i.get(t)
  }
  /**
  Set the value for this syntax node.
  */
  set(e, t) {
    e instanceof nn
      ? this.setBuffer(e.context.buffer, e.index, t)
      : e instanceof tt && this.map.set(e.tree, t)
  }
  /**
  Retrieve value for this syntax node, if it exists in the map.
  */
  get(e) {
    return e instanceof nn
      ? this.getBuffer(e.context.buffer, e.index)
      : e instanceof tt
        ? this.map.get(e.tree)
        : void 0
  }
  /**
  Set the value for the node that a cursor currently points to.
  */
  cursorSet(e, t) {
    e.buffer
      ? this.setBuffer(e.buffer.buffer, e.index, t)
      : this.map.set(e.tree, t)
  }
  /**
  Retrieve the value for the node that a cursor currently points
  to.
  */
  cursorGet(e) {
    return e.buffer
      ? this.getBuffer(e.buffer.buffer, e.index)
      : this.map.get(e.tree)
  }
}
class Sn {
  /**
  Construct a tree fragment. You'll usually want to use
  [`addTree`](#common.TreeFragment^addTree) and
  [`applyChanges`](#common.TreeFragment^applyChanges) instead of
  calling this directly.
  */
  constructor(e, t, i, r, s = !1, o = !1) {
    ;(this.from = e),
      (this.to = t),
      (this.tree = i),
      (this.offset = r),
      (this.open = (s ? 1 : 0) | (o ? 2 : 0))
  }
  /**
  Whether the start of the fragment represents the start of a
  parse, or the end of a change. (In the second case, it may not
  be safe to reuse some nodes at the start, depending on the
  parsing algorithm.)
  */
  get openStart() {
    return (this.open & 1) > 0
  }
  /**
  Whether the end of the fragment represents the end of a
  full-document parse, or the start of a change.
  */
  get openEnd() {
    return (this.open & 2) > 0
  }
  /**
  Create a set of fragments from a freshly parsed tree, or update
  an existing set of fragments by replacing the ones that overlap
  with a tree with content from the new tree. When `partial` is
  true, the parse is treated as incomplete, and the resulting
  fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
  true.
  */
  static addTree(e, t = [], i = !1) {
    let r = [new Sn(0, e.length, e, 0, !1, i)]
    for (let s of t) s.to > e.length && r.push(s)
    return r
  }
  /**
  Apply a set of edits to an array of fragments, removing or
  splitting fragments as necessary to remove edited ranges, and
  adjusting offsets for fragments that moved.
  */
  static applyChanges(e, t, i = 128) {
    if (!t.length) return e
    let r = [],
      s = 1,
      o = e.length ? e[0] : null
    for (let a = 0, l = 0, c = 0; ; a++) {
      let u = a < t.length ? t[a] : null,
        f = u ? u.fromA : 1e9
      if (f - l >= i)
        for (; o && o.from < f; ) {
          let h = o
          if (l >= h.from || f <= h.to || c) {
            let d = Math.max(h.from, l) - c,
              O = Math.min(h.to, f) - c
            h = d >= O ? null : new Sn(d, O, h.tree, h.offset + c, a > 0, !!u)
          }
          if ((h && r.push(h), o.to > f)) break
          o = s < e.length ? e[s++] : null
        }
      if (!u) break
      ;(l = u.toA), (c = u.toA - u.toB)
    }
    return r
  }
}
class _b {
  /**
  Start a parse, returning a [partial parse](#common.PartialParse)
  object. [`fragments`](#common.TreeFragment) can be passed in to
  make the parse incremental.
  
  By default, the entire input is parsed. You can pass `ranges`,
  which should be a sorted array of non-empty, non-overlapping
  ranges, to parse only those ranges. The tree returned in that
  case will start at `ranges[0].from`.
  */
  startParse(e, t, i) {
    return (
      typeof e == 'string' && (e = new z_(e)),
      (i = i
        ? i.length
          ? i.map((r) => new Zt(r.from, r.to))
          : [new Zt(0, 0)]
        : [new Zt(0, e.length)]),
      this.createParse(e, t || [], i)
    )
  }
  /**
  Run a full parse, returning the resulting tree.
  */
  parse(e, t, i) {
    let r = this.startParse(e, t, i)
    for (;;) {
      let s = r.advance()
      if (s) return s
    }
  }
}
class z_ {
  constructor(e) {
    this.string = e
  }
  get length() {
    return this.string.length
  }
  chunk(e) {
    return this.string.slice(e)
  }
  get lineChunks() {
    return !1
  }
  read(e, t) {
    return this.string.slice(e, t)
  }
}
function F_(n) {
  return (e, t, i, r) => new H_(e, n, t, i, r)
}
class lO {
  constructor(e, t, i, r, s) {
    ;(this.parser = e),
      (this.parse = t),
      (this.overlay = i),
      (this.target = r),
      (this.from = s)
  }
}
function cO(n) {
  if (!n.length || n.some((e) => e.from >= e.to))
    throw new RangeError(
      'Invalid inner parse ranges given: ' + JSON.stringify(n)
    )
}
class G_ {
  constructor(e, t, i, r, s, o, a) {
    ;(this.parser = e),
      (this.predicate = t),
      (this.mounts = i),
      (this.index = r),
      (this.start = s),
      (this.target = o),
      (this.prev = a),
      (this.depth = 0),
      (this.ranges = [])
  }
}
const Ku = new se({ perNode: !0 })
class H_ {
  constructor(e, t, i, r, s) {
    ;(this.nest = t),
      (this.input = i),
      (this.fragments = r),
      (this.ranges = s),
      (this.inner = []),
      (this.innerDone = 0),
      (this.baseTree = null),
      (this.stoppedAt = null),
      (this.baseParse = e)
  }
  advance() {
    if (this.baseParse) {
      let i = this.baseParse.advance()
      if (!i) return null
      if (
        ((this.baseParse = null),
        (this.baseTree = i),
        this.startInner(),
        this.stoppedAt != null)
      )
        for (let r of this.inner) r.parse.stopAt(this.stoppedAt)
    }
    if (this.innerDone == this.inner.length) {
      let i = this.baseTree
      return (
        this.stoppedAt != null &&
          (i = new Qe(
            i.type,
            i.children,
            i.positions,
            i.length,
            i.propValues.concat([[Ku, this.stoppedAt]])
          )),
        i
      )
    }
    let e = this.inner[this.innerDone],
      t = e.parse.advance()
    if (t) {
      this.innerDone++
      let i = Object.assign(/* @__PURE__ */ Object.create(null), e.target.props)
      ;(i[se.mounted.id] = new cs(t, e.overlay, e.parser)), (e.target.props = i)
    }
    return null
  }
  get parsedPos() {
    if (this.baseParse) return 0
    let e = this.input.length
    for (let t = this.innerDone; t < this.inner.length; t++)
      this.inner[t].from < e && (e = Math.min(e, this.inner[t].parse.parsedPos))
    return e
  }
  stopAt(e) {
    if (((this.stoppedAt = e), this.baseParse)) this.baseParse.stopAt(e)
    else
      for (let t = this.innerDone; t < this.inner.length; t++)
        this.inner[t].parse.stopAt(e)
  }
  startInner() {
    let e = new eZ(this.fragments),
      t = null,
      i = null,
      r = new Ea(
        new tt(this.baseTree, this.ranges[0].from, 0, null),
        me.IncludeAnonymous | me.IgnoreMounts
      )
    e: for (let s, o; ; ) {
      let a = !0,
        l
      if (this.stoppedAt != null && r.from >= this.stoppedAt) a = !1
      else if (e.hasNode(r)) {
        if (t) {
          let c = t.mounts.find(
            (u) => u.frag.from <= r.from && u.frag.to >= r.to && u.mount.overlay
          )
          if (c)
            for (let u of c.mount.overlay) {
              let f = u.from + c.pos,
                h = u.to + c.pos
              f >= r.from &&
                h <= r.to &&
                !t.ranges.some((d) => d.from < h && d.to > f) &&
                t.ranges.push({ from: f, to: h })
            }
        }
        a = !1
      } else if (i && (o = K_(i.ranges, r.from, r.to))) a = o != 2
      else if (
        !r.type.isAnonymous &&
        (s = this.nest(r, this.input)) &&
        (r.from < r.to || !s.overlay)
      ) {
        r.tree || J_(r)
        let c = e.findMounts(r.from, s.parser)
        if (typeof s.overlay == 'function')
          t = new G_(
            s.parser,
            s.overlay,
            c,
            this.inner.length,
            r.from,
            r.tree,
            t
          )
        else {
          let u = hO(
            this.ranges,
            s.overlay || (r.from < r.to ? [new Zt(r.from, r.to)] : [])
          )
          u.length && cO(u),
            (u.length || !s.overlay) &&
              this.inner.push(
                new lO(
                  s.parser,
                  u.length
                    ? s.parser.startParse(this.input, dO(c, u), u)
                    : s.parser.startParse(''),
                  s.overlay
                    ? s.overlay.map(
                        (f) => new Zt(f.from - r.from, f.to - r.from)
                      )
                    : null,
                  r.tree,
                  u.length ? u[0].from : r.from
                )
              ),
            s.overlay
              ? u.length && (i = { ranges: u, depth: 0, prev: i })
              : (a = !1)
        }
      } else
        t &&
          (l = t.predicate(r)) &&
          (l === !0 && (l = new Zt(r.from, r.to)),
          l.from < l.to && t.ranges.push(l))
      if (a && r.firstChild()) t && t.depth++, i && i.depth++
      else
        for (; !r.nextSibling(); ) {
          if (!r.parent()) break e
          if (t && !--t.depth) {
            let c = hO(this.ranges, t.ranges)
            c.length &&
              (cO(c),
              this.inner.splice(
                t.index,
                0,
                new lO(
                  t.parser,
                  t.parser.startParse(this.input, dO(t.mounts, c), c),
                  t.ranges.map((u) => new Zt(u.from - t.start, u.to - t.start)),
                  t.target,
                  c[0].from
                )
              )),
              (t = t.prev)
          }
          i && !--i.depth && (i = i.prev)
        }
    }
  }
}
function K_(n, e, t) {
  for (let i of n) {
    if (i.from >= t) break
    if (i.to > e) return i.from <= e && i.to >= t ? 2 : 1
  }
  return 0
}
function uO(n, e, t, i, r, s) {
  if (e < t) {
    let o = n.buffer[e + 1]
    i.push(n.slice(e, t, o)), r.push(o - s)
  }
}
function J_(n) {
  let { node: e } = n,
    t = []
  do t.push(n.index), n.parent()
  while (!n.tree)
  let i = 0,
    r = n.tree,
    s = 0
  for (
    ;
    (s = r.positions[i] + n.from),
      !(s <= e.from && s + r.children[i].length >= e.to);
    i++
  );
  let o = r.children[i],
    a = o.buffer,
    l = [i]
  function c(u, f, h, d, O, m) {
    let b = t[m],
      x = [],
      w = []
    uO(o, u, b, x, w, d)
    let T = a[b + 1],
      Q = a[b + 2]
    l.push(x.length)
    let P = m
      ? c(b + 4, a[b + 3], o.set.types[a[b]], T, Q - T, m - 1)
      : e.toTree()
    return (
      x.push(P), w.push(T - d), uO(o, a[b + 3], f, x, w, d), new Qe(h, x, w, O)
    )
  }
  r.children[i] = c(0, a.length, at.none, 0, o.length, t.length - 1)
  for (let u of l) {
    let f = n.tree.children[u],
      h = n.tree.positions[u]
    n.yield(new tt(f, h + n.from, u, n._tree))
  }
}
class fO {
  constructor(e, t) {
    ;(this.offset = t),
      (this.done = !1),
      (this.cursor = e.cursor(me.IncludeAnonymous | me.IgnoreMounts))
  }
  // Move to the first node (in pre-order) that starts at or after `pos`.
  moveTo(e) {
    let { cursor: t } = this,
      i = e - this.offset
    for (; !this.done && t.from < i; )
      (t.to >= e && t.enter(i, 1, me.IgnoreOverlays | me.ExcludeBuffers)) ||
        t.next(!1) ||
        (this.done = !0)
  }
  hasNode(e) {
    if (
      (this.moveTo(e.from),
      !this.done &&
        this.cursor.from + this.offset == e.from &&
        this.cursor.tree)
    )
      for (let t = this.cursor.tree; ; ) {
        if (t == e.tree) return !0
        if (
          t.children.length &&
          t.positions[0] == 0 &&
          t.children[0] instanceof Qe
        )
          t = t.children[0]
        else break
      }
    return !1
  }
}
let eZ = class {
  constructor(e) {
    var t
    if (((this.fragments = e), (this.curTo = 0), (this.fragI = 0), e.length)) {
      let i = (this.curFrag = e[0])
      ;(this.curTo = (t = i.tree.prop(Ku)) !== null && t !== void 0 ? t : i.to),
        (this.inner = new fO(i.tree, -i.offset))
    } else this.curFrag = this.inner = null
  }
  hasNode(e) {
    for (; this.curFrag && e.from >= this.curTo; ) this.nextFrag()
    return (
      this.curFrag &&
      this.curFrag.from <= e.from &&
      this.curTo >= e.to &&
      this.inner.hasNode(e)
    )
  }
  nextFrag() {
    var e
    if ((this.fragI++, this.fragI == this.fragments.length))
      this.curFrag = this.inner = null
    else {
      let t = (this.curFrag = this.fragments[this.fragI])
      ;(this.curTo = (e = t.tree.prop(Ku)) !== null && e !== void 0 ? e : t.to),
        (this.inner = new fO(t.tree, -t.offset))
    }
  }
  findMounts(e, t) {
    var i
    let r = []
    if (this.inner) {
      this.inner.cursor.moveTo(e, 1)
      for (let s = this.inner.cursor.node; s; s = s.parent) {
        let o =
          (i = s.tree) === null || i === void 0 ? void 0 : i.prop(se.mounted)
        if (o && o.parser == t)
          for (let a = this.fragI; a < this.fragments.length; a++) {
            let l = this.fragments[a]
            if (l.from >= s.to) break
            l.tree == this.curFrag.tree &&
              r.push({
                frag: l,
                pos: s.from - l.offset,
                mount: o
              })
          }
      }
    }
    return r
  }
}
function hO(n, e) {
  let t = null,
    i = e
  for (let r = 1, s = 0; r < n.length; r++) {
    let o = n[r - 1].to,
      a = n[r].from
    for (; s < i.length; s++) {
      let l = i[s]
      if (l.from >= a) break
      l.to <= o ||
        (t || (i = t = e.slice()),
        l.from < o
          ? ((t[s] = new Zt(l.from, o)),
            l.to > a && t.splice(s + 1, 0, new Zt(a, l.to)))
          : l.to > a
            ? (t[s--] = new Zt(a, l.to))
            : t.splice(s--, 1))
    }
  }
  return i
}
function tZ(n, e, t, i) {
  let r = 0,
    s = 0,
    o = !1,
    a = !1,
    l = -1e9,
    c = []
  for (;;) {
    let u = r == n.length ? 1e9 : o ? n[r].to : n[r].from,
      f = s == e.length ? 1e9 : a ? e[s].to : e[s].from
    if (o != a) {
      let h = Math.max(l, t),
        d = Math.min(u, f, i)
      h < d && c.push(new Zt(h, d))
    }
    if (((l = Math.min(u, f)), l == 1e9)) break
    u == l && (o ? ((o = !1), r++) : (o = !0)),
      f == l && (a ? ((a = !1), s++) : (a = !0))
  }
  return c
}
function dO(n, e) {
  let t = []
  for (let { pos: i, mount: r, frag: s } of n) {
    let o = i + (r.overlay ? r.overlay[0].from : 0),
      a = o + r.tree.length,
      l = Math.max(s.from, o),
      c = Math.min(s.to, a)
    if (r.overlay) {
      let u = r.overlay.map((h) => new Zt(h.from + i, h.to + i)),
        f = tZ(e, u, l, c)
      for (let h = 0, d = l; ; h++) {
        let O = h == f.length,
          m = O ? c : f[h].from
        if (
          (m > d &&
            t.push(
              new Sn(
                d,
                m,
                r.tree,
                -o,
                s.from >= d || s.openStart,
                s.to <= m || s.openEnd
              )
            ),
          O)
        )
          break
        d = f[h].to
      }
    } else
      t.push(
        new Sn(
          l,
          c,
          r.tree,
          -o,
          s.from >= o || s.openStart,
          s.to <= a || s.openEnd
        )
      )
  }
  return t
}
let nZ = 0
class Ht {
  /**
  @internal
  */
  constructor(e, t, i) {
    ;(this.set = e), (this.base = t), (this.modified = i), (this.id = nZ++)
  }
  /**
  Define a new tag. If `parent` is given, the tag is treated as a
  sub-tag of that parent, and
  [highlighters](#highlight.tagHighlighter) that don't mention
  this tag will try to fall back to the parent tag (or grandparent
  tag, etc).
  */
  static define(e) {
    if (e != null && e.base)
      throw new Error('Can not derive from a modified tag')
    let t = new Ht([], null, [])
    if ((t.set.push(t), e)) for (let i of e.set) t.set.push(i)
    return t
  }
  /**
  Define a tag _modifier_, which is a function that, given a tag,
  will return a tag that is a subtag of the original. Applying the
  same modifier to a twice tag will return the same value (`m1(t1)
  == m1(t1)`) and applying multiple modifiers will, regardless or
  order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
  
  When multiple modifiers are applied to a given base tag, each
  smaller set of modifiers is registered as a parent, so that for
  example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
  `m1(m3(t1)`, and so on.
  */
  static defineModifier() {
    let e = new Da()
    return (t) =>
      t.modified.indexOf(e) > -1
        ? t
        : Da.get(
            t.base || t,
            t.modified.concat(e).sort((i, r) => i.id - r.id)
          )
  }
}
let iZ = 0
class Da {
  constructor() {
    ;(this.instances = []), (this.id = iZ++)
  }
  static get(e, t) {
    if (!t.length) return e
    let i = t[0].instances.find((a) => a.base == e && rZ(t, a.modified))
    if (i) return i
    let r = [],
      s = new Ht(r, e, t)
    for (let a of t) a.instances.push(s)
    let o = sZ(t)
    for (let a of e.set)
      if (!a.modified.length) for (let l of o) r.push(Da.get(a, l))
    return s
  }
}
function rZ(n, e) {
  return n.length == e.length && n.every((t, i) => t == e[i])
}
function sZ(n) {
  let e = [[]]
  for (let t = 0; t < n.length; t++)
    for (let i = 0, r = e.length; i < r; i++) e.push(e[i].concat(n[t]))
  return e.sort((t, i) => i.length - t.length)
}
function Pl(n) {
  let e = /* @__PURE__ */ Object.create(null)
  for (let t in n) {
    let i = n[t]
    Array.isArray(i) || (i = [i])
    for (let r of t.split(' '))
      if (r) {
        let s = [],
          o = 2,
          a = r
        for (let f = 0; ; ) {
          if (a == '...' && f > 0 && f + 3 == r.length) {
            o = 1
            break
          }
          let h = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(a)
          if (!h) throw new RangeError('Invalid path: ' + r)
          if (
            (s.push(
              h[0] == '*' ? '' : h[0][0] == '"' ? JSON.parse(h[0]) : h[0]
            ),
            (f += h[0].length),
            f == r.length)
          )
            break
          let d = r[f++]
          if (f == r.length && d == '!') {
            o = 0
            break
          }
          if (d != '/') throw new RangeError('Invalid path: ' + r)
          a = r.slice(f)
        }
        let l = s.length - 1,
          c = s[l]
        if (!c) throw new RangeError('Invalid path: ' + r)
        let u = new Xa(i, o, l > 0 ? s.slice(0, l) : null)
        e[c] = u.sort(e[c])
      }
  }
  return Zb.add(e)
}
const Zb = new se()
class Xa {
  constructor(e, t, i, r) {
    ;(this.tags = e), (this.mode = t), (this.context = i), (this.next = r)
  }
  get opaque() {
    return this.mode == 0
  }
  get inherit() {
    return this.mode == 1
  }
  sort(e) {
    return !e || e.depth < this.depth
      ? ((this.next = e), this)
      : ((e.next = this.sort(e.next)), e)
  }
  get depth() {
    return this.context ? this.context.length : 0
  }
}
Xa.empty = new Xa([], 2, null)
function Ab(n, e) {
  let t = /* @__PURE__ */ Object.create(null)
  for (let s of n)
    if (!Array.isArray(s.tag)) t[s.tag.id] = s.class
    else for (let o of s.tag) t[o.id] = s.class
  let { scope: i, all: r = null } = e || {}
  return {
    style: (s) => {
      let o = r
      for (let a of s)
        for (let l of a.set) {
          let c = t[l.id]
          if (c) {
            o = o ? o + ' ' + c : c
            break
          }
        }
      return o
    },
    scope: i
  }
}
function oZ(n, e) {
  let t = null
  for (let i of n) {
    let r = i.style(e)
    r && (t = t ? t + ' ' + r : r)
  }
  return t
}
function aZ(n, e, t, i = 0, r = n.length) {
  let s = new lZ(i, Array.isArray(e) ? e : [e], t)
  s.highlightRange(n.cursor(), i, r, '', s.highlighters), s.flush(r)
}
class lZ {
  constructor(e, t, i) {
    ;(this.at = e), (this.highlighters = t), (this.span = i), (this.class = '')
  }
  startSpan(e, t) {
    t != this.class &&
      (this.flush(e), e > this.at && (this.at = e), (this.class = t))
  }
  flush(e) {
    e > this.at && this.class && this.span(this.at, e, this.class)
  }
  highlightRange(e, t, i, r, s) {
    let { type: o, from: a, to: l } = e
    if (a >= i || l <= t) return
    o.isTop && (s = this.highlighters.filter((d) => !d.scope || d.scope(o)))
    let c = r,
      u = cZ(e) || Xa.empty,
      f = oZ(s, u.tags)
    if (
      (f &&
        (c && (c += ' '), (c += f), u.mode == 1 && (r += (r ? ' ' : '') + f)),
      this.startSpan(Math.max(t, a), c),
      u.opaque)
    )
      return
    let h = e.tree && e.tree.prop(se.mounted)
    if (h && h.overlay) {
      let d = e.node.enter(h.overlay[0].from + a, 1),
        O = this.highlighters.filter((b) => !b.scope || b.scope(h.tree.type)),
        m = e.firstChild()
      for (let b = 0, x = a; ; b++) {
        let w = b < h.overlay.length ? h.overlay[b] : null,
          T = w ? w.from + a : l,
          Q = Math.max(t, x),
          P = Math.min(i, T)
        if (Q < P && m)
          for (
            ;
            e.from < P &&
            (this.highlightRange(e, Q, P, r, s),
            this.startSpan(Math.min(P, e.to), c),
            !(e.to >= T || !e.nextSibling()));

          );
        if (!w || T > i) break
        ;(x = w.to + a),
          x > t &&
            (this.highlightRange(
              d.cursor(),
              Math.max(t, w.from + a),
              Math.min(i, x),
              '',
              O
            ),
            this.startSpan(Math.min(i, x), c))
      }
      m && e.parent()
    } else if (e.firstChild()) {
      h && (r = '')
      do
        if (!(e.to <= t)) {
          if (e.from >= i) break
          this.highlightRange(e, t, i, r, s),
            this.startSpan(Math.min(i, e.to), c)
        }
      while (e.nextSibling())
      e.parent()
    }
  }
}
function cZ(n) {
  let e = n.type.prop(Zb)
  for (; e && e.context && !n.matchContext(e.context); ) e = e.next
  return e || null
}
const Y = Ht.define,
  co = Y(),
  En = Y(),
  pO = Y(En),
  OO = Y(En),
  Dn = Y(),
  uo = Y(Dn),
  Oc = Y(Dn),
  zt = Y(),
  li = Y(zt),
  Lt = Y(),
  Ut = Y(),
  Ju = Y(),
  Zr = Y(Ju),
  fo = Y(),
  g = {
    /**
  A comment.
  */
    comment: co,
    /**
  A line [comment](#highlight.tags.comment).
  */
    lineComment: Y(co),
    /**
  A block [comment](#highlight.tags.comment).
  */
    blockComment: Y(co),
    /**
  A documentation [comment](#highlight.tags.comment).
  */
    docComment: Y(co),
    /**
  Any kind of identifier.
  */
    name: En,
    /**
  The [name](#highlight.tags.name) of a variable.
  */
    variableName: Y(En),
    /**
  A type [name](#highlight.tags.name).
  */
    typeName: pO,
    /**
  A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
  */
    tagName: Y(pO),
    /**
  A property or field [name](#highlight.tags.name).
  */
    propertyName: OO,
    /**
  An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
  */
    attributeName: Y(OO),
    /**
  The [name](#highlight.tags.name) of a class.
  */
    className: Y(En),
    /**
  A label [name](#highlight.tags.name).
  */
    labelName: Y(En),
    /**
  A namespace [name](#highlight.tags.name).
  */
    namespace: Y(En),
    /**
  The [name](#highlight.tags.name) of a macro.
  */
    macroName: Y(En),
    /**
  A literal value.
  */
    literal: Dn,
    /**
  A string [literal](#highlight.tags.literal).
  */
    string: uo,
    /**
  A documentation [string](#highlight.tags.string).
  */
    docString: Y(uo),
    /**
  A character literal (subtag of [string](#highlight.tags.string)).
  */
    character: Y(uo),
    /**
  An attribute value (subtag of [string](#highlight.tags.string)).
  */
    attributeValue: Y(uo),
    /**
  A number [literal](#highlight.tags.literal).
  */
    number: Oc,
    /**
  An integer [number](#highlight.tags.number) literal.
  */
    integer: Y(Oc),
    /**
  A floating-point [number](#highlight.tags.number) literal.
  */
    float: Y(Oc),
    /**
  A boolean [literal](#highlight.tags.literal).
  */
    bool: Y(Dn),
    /**
  Regular expression [literal](#highlight.tags.literal).
  */
    regexp: Y(Dn),
    /**
  An escape [literal](#highlight.tags.literal), for example a
  backslash escape in a string.
  */
    escape: Y(Dn),
    /**
  A color [literal](#highlight.tags.literal).
  */
    color: Y(Dn),
    /**
  A URL [literal](#highlight.tags.literal).
  */
    url: Y(Dn),
    /**
  A language keyword.
  */
    keyword: Lt,
    /**
  The [keyword](#highlight.tags.keyword) for the self or this
  object.
  */
    self: Y(Lt),
    /**
  The [keyword](#highlight.tags.keyword) for null.
  */
    null: Y(Lt),
    /**
  A [keyword](#highlight.tags.keyword) denoting some atomic value.
  */
    atom: Y(Lt),
    /**
  A [keyword](#highlight.tags.keyword) that represents a unit.
  */
    unit: Y(Lt),
    /**
  A modifier [keyword](#highlight.tags.keyword).
  */
    modifier: Y(Lt),
    /**
  A [keyword](#highlight.tags.keyword) that acts as an operator.
  */
    operatorKeyword: Y(Lt),
    /**
  A control-flow related [keyword](#highlight.tags.keyword).
  */
    controlKeyword: Y(Lt),
    /**
  A [keyword](#highlight.tags.keyword) that defines something.
  */
    definitionKeyword: Y(Lt),
    /**
  A [keyword](#highlight.tags.keyword) related to defining or
  interfacing with modules.
  */
    moduleKeyword: Y(Lt),
    /**
  An operator.
  */
    operator: Ut,
    /**
  An [operator](#highlight.tags.operator) that dereferences something.
  */
    derefOperator: Y(Ut),
    /**
  Arithmetic-related [operator](#highlight.tags.operator).
  */
    arithmeticOperator: Y(Ut),
    /**
  Logical [operator](#highlight.tags.operator).
  */
    logicOperator: Y(Ut),
    /**
  Bit [operator](#highlight.tags.operator).
  */
    bitwiseOperator: Y(Ut),
    /**
  Comparison [operator](#highlight.tags.operator).
  */
    compareOperator: Y(Ut),
    /**
  [Operator](#highlight.tags.operator) that updates its operand.
  */
    updateOperator: Y(Ut),
    /**
  [Operator](#highlight.tags.operator) that defines something.
  */
    definitionOperator: Y(Ut),
    /**
  Type-related [operator](#highlight.tags.operator).
  */
    typeOperator: Y(Ut),
    /**
  Control-flow [operator](#highlight.tags.operator).
  */
    controlOperator: Y(Ut),
    /**
  Program or markup punctuation.
  */
    punctuation: Ju,
    /**
  [Punctuation](#highlight.tags.punctuation) that separates
  things.
  */
    separator: Y(Ju),
    /**
  Bracket-style [punctuation](#highlight.tags.punctuation).
  */
    bracket: Zr,
    /**
  Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
  tokens).
  */
    angleBracket: Y(Zr),
    /**
  Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
  tokens).
  */
    squareBracket: Y(Zr),
    /**
  Parentheses (usually `(` and `)` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
    paren: Y(Zr),
    /**
  Braces (usually `{` and `}` tokens). Subtag of
  [bracket](#highlight.tags.bracket).
  */
    brace: Y(Zr),
    /**
  Content, for example plain text in XML or markup documents.
  */
    content: zt,
    /**
  [Content](#highlight.tags.content) that represents a heading.
  */
    heading: li,
    /**
  A level 1 [heading](#highlight.tags.heading).
  */
    heading1: Y(li),
    /**
  A level 2 [heading](#highlight.tags.heading).
  */
    heading2: Y(li),
    /**
  A level 3 [heading](#highlight.tags.heading).
  */
    heading3: Y(li),
    /**
  A level 4 [heading](#highlight.tags.heading).
  */
    heading4: Y(li),
    /**
  A level 5 [heading](#highlight.tags.heading).
  */
    heading5: Y(li),
    /**
  A level 6 [heading](#highlight.tags.heading).
  */
    heading6: Y(li),
    /**
  A prose separator (such as a horizontal rule).
  */
    contentSeparator: Y(zt),
    /**
  [Content](#highlight.tags.content) that represents a list.
  */
    list: Y(zt),
    /**
  [Content](#highlight.tags.content) that represents a quote.
  */
    quote: Y(zt),
    /**
  [Content](#highlight.tags.content) that is emphasized.
  */
    emphasis: Y(zt),
    /**
  [Content](#highlight.tags.content) that is styled strong.
  */
    strong: Y(zt),
    /**
  [Content](#highlight.tags.content) that is part of a link.
  */
    link: Y(zt),
    /**
  [Content](#highlight.tags.content) that is styled as code or
  monospace.
  */
    monospace: Y(zt),
    /**
  [Content](#highlight.tags.content) that has a strike-through
  style.
  */
    strikethrough: Y(zt),
    /**
  Inserted text in a change-tracking format.
  */
    inserted: Y(),
    /**
  Deleted text.
  */
    deleted: Y(),
    /**
  Changed text.
  */
    changed: Y(),
    /**
  An invalid or unsyntactic element.
  */
    invalid: Y(),
    /**
  Metadata or meta-instruction.
  */
    meta: fo,
    /**
  [Metadata](#highlight.tags.meta) that applies to the entire
  document.
  */
    documentMeta: Y(fo),
    /**
  [Metadata](#highlight.tags.meta) that annotates or adds
  attributes to a given syntactic element.
  */
    annotation: Y(fo),
    /**
  Processing instruction or preprocessor directive. Subtag of
  [meta](#highlight.tags.meta).
  */
    processingInstruction: Y(fo),
    /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that a
  given element is being defined. Expected to be used with the
  various [name](#highlight.tags.name) tags.
  */
    definition: Ht.defineModifier(),
    /**
  [Modifier](#highlight.Tag^defineModifier) that indicates that
  something is constant. Mostly expected to be used with
  [variable names](#highlight.tags.variableName).
  */
    constant: Ht.defineModifier(),
    /**
  [Modifier](#highlight.Tag^defineModifier) used to indicate that
  a [variable](#highlight.tags.variableName) or [property
  name](#highlight.tags.propertyName) is being called or defined
  as a function.
  */
    function: Ht.defineModifier(),
    /**
  [Modifier](#highlight.Tag^defineModifier) that can be applied to
  [names](#highlight.tags.name) to indicate that they belong to
  the language's standard environment.
  */
    standard: Ht.defineModifier(),
    /**
  [Modifier](#highlight.Tag^defineModifier) that indicates a given
  [names](#highlight.tags.name) is local to some scope.
  */
    local: Ht.defineModifier(),
    /**
  A generic variant [modifier](#highlight.Tag^defineModifier) that
  can be used to tag language-specific alternative variants of
  some common tag. It is recommended for themes to define special
  forms of at least the [string](#highlight.tags.string) and
  [variable name](#highlight.tags.variableName) tags, since those
  come up a lot.
  */
    special: Ht.defineModifier()
  }
Ab([
  { tag: g.link, class: 'tok-link' },
  { tag: g.heading, class: 'tok-heading' },
  { tag: g.emphasis, class: 'tok-emphasis' },
  { tag: g.strong, class: 'tok-strong' },
  { tag: g.keyword, class: 'tok-keyword' },
  { tag: g.atom, class: 'tok-atom' },
  { tag: g.bool, class: 'tok-bool' },
  { tag: g.url, class: 'tok-url' },
  { tag: g.labelName, class: 'tok-labelName' },
  { tag: g.inserted, class: 'tok-inserted' },
  { tag: g.deleted, class: 'tok-deleted' },
  { tag: g.literal, class: 'tok-literal' },
  { tag: g.string, class: 'tok-string' },
  { tag: g.number, class: 'tok-number' },
  { tag: [g.regexp, g.escape, g.special(g.string)], class: 'tok-string2' },
  { tag: g.variableName, class: 'tok-variableName' },
  { tag: g.local(g.variableName), class: 'tok-variableName tok-local' },
  {
    tag: g.definition(g.variableName),
    class: 'tok-variableName tok-definition'
  },
  { tag: g.special(g.variableName), class: 'tok-variableName2' },
  {
    tag: g.definition(g.propertyName),
    class: 'tok-propertyName tok-definition'
  },
  { tag: g.typeName, class: 'tok-typeName' },
  { tag: g.namespace, class: 'tok-namespace' },
  { tag: g.className, class: 'tok-className' },
  { tag: g.macroName, class: 'tok-macroName' },
  { tag: g.propertyName, class: 'tok-propertyName' },
  { tag: g.operator, class: 'tok-operator' },
  { tag: g.comment, class: 'tok-comment' },
  { tag: g.meta, class: 'tok-meta' },
  { tag: g.invalid, class: 'tok-invalid' },
  { tag: g.punctuation, class: 'tok-punctuation' }
])
var gc
const Vi = /* @__PURE__ */ new se()
function Rb(n) {
  return q.define({
    combine: n ? (e) => e.concat(n) : void 0
  })
}
const Hf = /* @__PURE__ */ new se()
class Nt {
  /**
  Construct a language object. If you need to invoke this
  directly, first define a data facet with
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
  to the language's outer syntax node.
  */
  constructor(e, t, i = [], r = '') {
    ;(this.data = e),
      (this.name = r),
      oe.prototype.hasOwnProperty('tree') ||
        Object.defineProperty(oe.prototype, 'tree', {
          get() {
            return Ze(this)
          }
        }),
      (this.parser = t),
      (this.extension = [
        Jn.of(this),
        oe.languageData.of((s, o, a) => {
          let l = gO(s, o, a),
            c = l.type.prop(Vi)
          if (!c) return []
          let u = s.facet(c),
            f = l.type.prop(Hf)
          if (f) {
            let h = l.resolve(o - l.from, a)
            for (let d of f)
              if (d.test(h, s)) {
                let O = s.facet(d.facet)
                return d.type == 'replace' ? O : O.concat(u)
              }
          }
          return u
        })
      ].concat(i))
  }
  /**
  Query whether this language is active at the given position.
  */
  isActiveAt(e, t, i = -1) {
    return gO(e, t, i).type.prop(Vi) == this.data
  }
  /**
  Find the document regions that were parsed using this language.
  The returned regions will _include_ any nested languages rooted
  in this language, when those exist.
  */
  findRegions(e) {
    let t = e.facet(Jn)
    if ((t == null ? void 0 : t.data) == this.data)
      return [{ from: 0, to: e.doc.length }]
    if (!t || !t.allowsNesting) return []
    let i = [],
      r = (s, o) => {
        if (s.prop(Vi) == this.data) {
          i.push({ from: o, to: o + s.length })
          return
        }
        let a = s.prop(se.mounted)
        if (a) {
          if (a.tree.prop(Vi) == this.data) {
            if (a.overlay)
              for (let l of a.overlay)
                i.push({ from: l.from + o, to: l.to + o })
            else i.push({ from: o, to: o + s.length })
            return
          } else if (a.overlay) {
            let l = i.length
            if ((r(a.tree, a.overlay[0].from + o), i.length > l)) return
          }
        }
        for (let l = 0; l < s.children.length; l++) {
          let c = s.children[l]
          c instanceof Qe && r(c, s.positions[l] + o)
        }
      }
    return r(Ze(e), 0), i
  }
  /**
  Indicates whether this language allows nested languages. The
  default implementation returns true.
  */
  get allowsNesting() {
    return !0
  }
}
Nt.setState = /* @__PURE__ */ ne.define()
function gO(n, e, t) {
  let i = n.facet(Jn),
    r = Ze(n).topNode
  if (!i || i.allowsNesting)
    for (let s = r; s; s = s.enter(e, t, me.ExcludeBuffers))
      s.type.isTop && (r = s)
  return r
}
class ir extends Nt {
  constructor(e, t, i) {
    super(e, t, [], i), (this.parser = t)
  }
  /**
  Define a language from a parser.
  */
  static define(e) {
    let t = Rb(e.languageData)
    return new ir(
      t,
      e.parser.configure({
        props: [Vi.add((i) => (i.isTop ? t : void 0))]
      }),
      e.name
    )
  }
  /**
  Create a new instance of this language with a reconfigured
  version of its parser and optionally a new name.
  */
  configure(e, t) {
    return new ir(this.data, this.parser.configure(e), t || this.name)
  }
  get allowsNesting() {
    return this.parser.hasWrappers()
  }
}
function Ze(n) {
  let e = n.field(Nt.state, !1)
  return e ? e.tree : Qe.empty
}
class uZ {
  /**
  Create an input object for the given document.
  */
  constructor(e) {
    ;(this.doc = e),
      (this.cursorPos = 0),
      (this.string = ''),
      (this.cursor = e.iter())
  }
  get length() {
    return this.doc.length
  }
  syncTo(e) {
    return (
      (this.string = this.cursor.next(e - this.cursorPos).value),
      (this.cursorPos = e + this.string.length),
      this.cursorPos - this.string.length
    )
  }
  chunk(e) {
    return this.syncTo(e), this.string
  }
  get lineChunks() {
    return !0
  }
  read(e, t) {
    let i = this.cursorPos - this.string.length
    return e < i || t >= this.cursorPos
      ? this.doc.sliceString(e, t)
      : this.string.slice(e - i, t - i)
  }
}
let Ar = null
class Ya {
  constructor(e, t, i = [], r, s, o, a, l) {
    ;(this.parser = e),
      (this.state = t),
      (this.fragments = i),
      (this.tree = r),
      (this.treeLen = s),
      (this.viewport = o),
      (this.skipped = a),
      (this.scheduleOn = l),
      (this.parse = null),
      (this.tempSkipped = [])
  }
  /**
  @internal
  */
  static create(e, t, i) {
    return new Ya(e, t, [], Qe.empty, 0, i, [], null)
  }
  startParse() {
    return this.parser.startParse(new uZ(this.state.doc), this.fragments)
  }
  /**
  @internal
  */
  work(e, t) {
    return (
      t != null && t >= this.state.doc.length && (t = void 0),
      this.tree != Qe.empty && this.isDone(t ?? this.state.doc.length)
        ? (this.takeTree(), !0)
        : this.withContext(() => {
            var i
            if (typeof e == 'number') {
              let r = Date.now() + e
              e = () => Date.now() > r
            }
            for (
              this.parse || (this.parse = this.startParse()),
                t != null &&
                  (this.parse.stoppedAt == null || this.parse.stoppedAt > t) &&
                  t < this.state.doc.length &&
                  this.parse.stopAt(t);
              ;

            ) {
              let r = this.parse.advance()
              if (r)
                if (
                  ((this.fragments = this.withoutTempSkipped(
                    Sn.addTree(r, this.fragments, this.parse.stoppedAt != null)
                  )),
                  (this.treeLen =
                    (i = this.parse.stoppedAt) !== null && i !== void 0
                      ? i
                      : this.state.doc.length),
                  (this.tree = r),
                  (this.parse = null),
                  this.treeLen < (t ?? this.state.doc.length))
                )
                  this.parse = this.startParse()
                else return !0
              if (e()) return !1
            }
          })
    )
  }
  /**
  @internal
  */
  takeTree() {
    let e, t
    this.parse &&
      (e = this.parse.parsedPos) >= this.treeLen &&
      ((this.parse.stoppedAt == null || this.parse.stoppedAt > e) &&
        this.parse.stopAt(e),
      this.withContext(() => {
        for (; !(t = this.parse.advance()); );
      }),
      (this.treeLen = e),
      (this.tree = t),
      (this.fragments = this.withoutTempSkipped(
        Sn.addTree(this.tree, this.fragments, !0)
      )),
      (this.parse = null))
  }
  withContext(e) {
    let t = Ar
    Ar = this
    try {
      return e()
    } finally {
      Ar = t
    }
  }
  withoutTempSkipped(e) {
    for (let t; (t = this.tempSkipped.pop()); ) e = mO(e, t.from, t.to)
    return e
  }
  /**
  @internal
  */
  changes(e, t) {
    let { fragments: i, tree: r, treeLen: s, viewport: o, skipped: a } = this
    if ((this.takeTree(), !e.empty)) {
      let l = []
      if (
        (e.iterChangedRanges((c, u, f, h) =>
          l.push({ fromA: c, toA: u, fromB: f, toB: h })
        ),
        (i = Sn.applyChanges(i, l)),
        (r = Qe.empty),
        (s = 0),
        (o = { from: e.mapPos(o.from, -1), to: e.mapPos(o.to, 1) }),
        this.skipped.length)
      ) {
        a = []
        for (let c of this.skipped) {
          let u = e.mapPos(c.from, 1),
            f = e.mapPos(c.to, -1)
          u < f && a.push({ from: u, to: f })
        }
      }
    }
    return new Ya(this.parser, t, i, r, s, o, a, this.scheduleOn)
  }
  /**
  @internal
  */
  updateViewport(e) {
    if (this.viewport.from == e.from && this.viewport.to == e.to) return !1
    this.viewport = e
    let t = this.skipped.length
    for (let i = 0; i < this.skipped.length; i++) {
      let { from: r, to: s } = this.skipped[i]
      r < e.to &&
        s > e.from &&
        ((this.fragments = mO(this.fragments, r, s)),
        this.skipped.splice(i--, 1))
    }
    return this.skipped.length >= t ? !1 : (this.reset(), !0)
  }
  /**
  @internal
  */
  reset() {
    this.parse && (this.takeTree(), (this.parse = null))
  }
  /**
  Notify the parse scheduler that the given region was skipped
  because it wasn't in view, and the parse should be restarted
  when it comes into view.
  */
  skipUntilInView(e, t) {
    this.skipped.push({ from: e, to: t })
  }
  /**
  Returns a parser intended to be used as placeholder when
  asynchronously loading a nested parser. It'll skip its input and
  mark it as not-really-parsed, so that the next update will parse
  it again.
  
  When `until` is given, a reparse will be scheduled when that
  promise resolves.
  */
  static getSkippingParser(e) {
    return new (class extends _b {
      createParse(t, i, r) {
        let s = r[0].from,
          o = r[r.length - 1].to
        return {
          parsedPos: s,
          advance() {
            let l = Ar
            if (l) {
              for (let c of r) l.tempSkipped.push(c)
              e &&
                (l.scheduleOn = l.scheduleOn
                  ? Promise.all([l.scheduleOn, e])
                  : e)
            }
            return (this.parsedPos = o), new Qe(at.none, [], [], o - s)
          },
          stoppedAt: null,
          stopAt() {}
        }
      }
    })()
  }
  /**
  @internal
  */
  isDone(e) {
    e = Math.min(e, this.state.doc.length)
    let t = this.fragments
    return this.treeLen >= e && t.length && t[0].from == 0 && t[0].to >= e
  }
  /**
  Get the context for the current parse, or `null` if no editor
  parse is in progress.
  */
  static get() {
    return Ar
  }
}
function mO(n, e, t) {
  return Sn.applyChanges(n, [{ fromA: e, toA: t, fromB: e, toB: t }])
}
class rr {
  constructor(e) {
    ;(this.context = e), (this.tree = e.tree)
  }
  apply(e) {
    if (!e.docChanged && this.tree == this.context.tree) return this
    let t = this.context.changes(e.changes, e.state),
      i =
        this.context.treeLen == e.startState.doc.length
          ? void 0
          : Math.max(e.changes.mapPos(this.context.treeLen), t.viewport.to)
    return t.work(20, i) || t.takeTree(), new rr(t)
  }
  static init(e) {
    let t = Math.min(3e3, e.doc.length),
      i = Ya.create(e.facet(Jn).parser, e, { from: 0, to: t })
    return i.work(20, t) || i.takeTree(), new rr(i)
  }
}
Nt.state = /* @__PURE__ */ We.define({
  create: rr.init,
  update(n, e) {
    for (let t of e.effects) if (t.is(Nt.setState)) return t.value
    return e.startState.facet(Jn) != e.state.facet(Jn)
      ? rr.init(e.state)
      : n.apply(e)
  }
})
let Eb = (n) => {
  let e = setTimeout(
    () => n(),
    500
    /* Work.MaxPause */
  )
  return () => clearTimeout(e)
}
typeof requestIdleCallback < 'u' &&
  (Eb = (n) => {
    let e = -1,
      t = setTimeout(
        () => {
          e = requestIdleCallback(n, {
            timeout: 500 - 100
            /* Work.MinPause */
          })
        },
        100
        /* Work.MinPause */
      )
    return () => (e < 0 ? clearTimeout(t) : cancelIdleCallback(e))
  })
const mc =
    typeof navigator < 'u' &&
    !((gc = navigator.scheduling) === null || gc === void 0) &&
    gc.isInputPending
      ? () => navigator.scheduling.isInputPending()
      : null,
  fZ = /* @__PURE__ */ Re.fromClass(
    class {
      constructor(e) {
        ;(this.view = e),
          (this.working = null),
          (this.workScheduled = 0),
          (this.chunkEnd = -1),
          (this.chunkBudget = -1),
          (this.work = this.work.bind(this)),
          this.scheduleWork()
      }
      update(e) {
        let t = this.view.state.field(Nt.state).context
        ;(t.updateViewport(e.view.viewport) ||
          this.view.viewport.to > t.treeLen) &&
          this.scheduleWork(),
          (e.docChanged || e.selectionSet) &&
            (this.view.hasFocus && (this.chunkBudget += 50),
            this.scheduleWork()),
          this.checkAsyncSchedule(t)
      }
      scheduleWork() {
        if (this.working) return
        let { state: e } = this.view,
          t = e.field(Nt.state)
        ;(t.tree != t.context.tree || !t.context.isDone(e.doc.length)) &&
          (this.working = Eb(this.work))
      }
      work(e) {
        this.working = null
        let t = Date.now()
        if (
          (this.chunkEnd < t &&
            (this.chunkEnd < 0 || this.view.hasFocus) &&
            ((this.chunkEnd = t + 3e4), (this.chunkBudget = 3e3)),
          this.chunkBudget <= 0)
        )
          return
        let {
            state: i,
            viewport: { to: r }
          } = this.view,
          s = i.field(Nt.state)
        if (
          s.tree == s.context.tree &&
          s.context.isDone(
            r + 1e5
            /* Work.MaxParseAhead */
          )
        )
          return
        let o =
            Date.now() +
            Math.min(
              this.chunkBudget,
              100,
              e && !mc ? Math.max(25, e.timeRemaining() - 5) : 1e9
            ),
          a = s.context.treeLen < r && i.doc.length > r + 1e3,
          l = s.context.work(
            () => (mc && mc()) || Date.now() > o,
            r + (a ? 0 : 1e5)
          )
        ;(this.chunkBudget -= Date.now() - t),
          (l || this.chunkBudget <= 0) &&
            (s.context.takeTree(),
            this.view.dispatch({ effects: Nt.setState.of(new rr(s.context)) })),
          this.chunkBudget > 0 && !(l && !a) && this.scheduleWork(),
          this.checkAsyncSchedule(s.context)
      }
      checkAsyncSchedule(e) {
        e.scheduleOn &&
          (this.workScheduled++,
          e.scheduleOn
            .then(() => this.scheduleWork())
            .catch((t) => Rt(this.view.state, t))
            .then(() => this.workScheduled--),
          (e.scheduleOn = null))
      }
      destroy() {
        this.working && this.working()
      }
      isWorking() {
        return !!(this.working || this.workScheduled > 0)
      }
    },
    {
      eventHandlers: {
        focus() {
          this.scheduleWork()
        }
      }
    }
  ),
  Jn = /* @__PURE__ */ q.define({
    combine(n) {
      return n.length ? n[0] : null
    },
    enables: (n) => [
      Nt.state,
      fZ,
      M.contentAttributes.compute([n], (e) => {
        let t = e.facet(n)
        return t && t.name ? { 'data-language': t.name } : {}
      })
    ]
  })
class Kf {
  /**
  Create a language support object.
  */
  constructor(e, t = []) {
    ;(this.language = e), (this.support = t), (this.extension = [e, t])
  }
}
const hZ = /* @__PURE__ */ q.define(),
  Zs = /* @__PURE__ */ q.define({
    combine: (n) => {
      if (!n.length) return '  '
      let e = n[0]
      if (!e || /\S/.test(e) || Array.from(e).some((t) => t != e[0]))
        throw new Error('Invalid indent unit: ' + JSON.stringify(n[0]))
      return e
    }
  })
function Ia(n) {
  let e = n.facet(Zs)
  return e.charCodeAt(0) == 9 ? n.tabSize * e.length : e.length
}
function fs(n, e) {
  let t = '',
    i = n.tabSize,
    r = n.facet(Zs)[0]
  if (r == '	') {
    for (; e >= i; ) (t += '	'), (e -= i)
    r = ' '
  }
  for (let s = 0; s < e; s++) t += r
  return t
}
function Jf(n, e) {
  n instanceof oe && (n = new Ql(n))
  for (let i of n.state.facet(hZ)) {
    let r = i(n, e)
    if (r !== void 0) return r
  }
  let t = Ze(n.state)
  return t.length >= e ? dZ(n, t, e) : null
}
class Ql {
  /**
  Create an indent context.
  */
  constructor(e, t = {}) {
    ;(this.state = e), (this.options = t), (this.unit = Ia(e))
  }
  /**
  Get a description of the line at the given position, taking
  [simulated line
  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  into account. If there is such a break at `pos`, the `bias`
  argument determines whether the part of the line line before or
  after the break is used.
  */
  lineAt(e, t = 1) {
    let i = this.state.doc.lineAt(e),
      { simulateBreak: r, simulateDoubleBreak: s } = this.options
    return r != null && r >= i.from && r <= i.to
      ? s && r == e
        ? { text: '', from: e }
        : (t < 0 ? r < e : r <= e)
          ? { text: i.text.slice(r - i.from), from: r }
          : { text: i.text.slice(0, r - i.from), from: i.from }
      : i
  }
  /**
  Get the text directly after `pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  textAfterPos(e, t = 1) {
    if (this.options.simulateDoubleBreak && e == this.options.simulateBreak)
      return ''
    let { text: i, from: r } = this.lineAt(e, t)
    return i.slice(e - r, Math.min(i.length, e + 100 - r))
  }
  /**
  Find the column for the given position.
  */
  column(e, t = 1) {
    let { text: i, from: r } = this.lineAt(e, t),
      s = this.countColumn(i, e - r),
      o = this.options.overrideIndentation
        ? this.options.overrideIndentation(r)
        : -1
    return o > -1 && (s += o - this.countColumn(i, i.search(/\S|$/))), s
  }
  /**
  Find the column position (taking tabs into account) of the given
  position in the given string.
  */
  countColumn(e, t = e.length) {
    return fr(e, this.state.tabSize, t)
  }
  /**
  Find the indentation column of the line at the given point.
  */
  lineIndent(e, t = 1) {
    let { text: i, from: r } = this.lineAt(e, t),
      s = this.options.overrideIndentation
    if (s) {
      let o = s(r)
      if (o > -1) return o
    }
    return this.countColumn(i, i.search(/\S|$/))
  }
  /**
  Returns the [simulated line
  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
  for this context, if any.
  */
  get simulatedBreak() {
    return this.options.simulateBreak || null
  }
}
const kl = /* @__PURE__ */ new se()
function dZ(n, e, t) {
  let i = e.resolveStack(t),
    r = i.node.enterUnfinishedNodesBefore(t)
  if (r != i.node) {
    let s = []
    for (let o = r; o != i.node; o = o.parent) s.push(o)
    for (let o = s.length - 1; o >= 0; o--) i = { node: s[o], next: i }
  }
  return Db(i, n, t)
}
function Db(n, e, t) {
  for (let i = n; i; i = i.next) {
    let r = OZ(i.node)
    if (r) return r(eh.create(e, t, i))
  }
  return 0
}
function pZ(n) {
  return n.pos == n.options.simulateBreak && n.options.simulateDoubleBreak
}
function OZ(n) {
  let e = n.type.prop(kl)
  if (e) return e
  let t = n.firstChild,
    i
  if (t && (i = t.type.prop(se.closedBy))) {
    let r = n.lastChild,
      s = r && i.indexOf(r.name) > -1
    return (o) => Xb(o, !0, 1, void 0, s && !pZ(o) ? r.from : void 0)
  }
  return n.parent == null ? gZ : null
}
function gZ() {
  return 0
}
class eh extends Ql {
  constructor(e, t, i) {
    super(e.state, e.options),
      (this.base = e),
      (this.pos = t),
      (this.context = i)
  }
  /**
  The syntax tree node to which the indentation strategy
  applies.
  */
  get node() {
    return this.context.node
  }
  /**
  @internal
  */
  static create(e, t, i) {
    return new eh(e, t, i)
  }
  /**
  Get the text directly after `this.pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  get textAfter() {
    return this.textAfterPos(this.pos)
  }
  /**
  Get the indentation at the reference line for `this.node`, which
  is the line on which it starts, unless there is a node that is
  _not_ a parent of this node covering the start of that line. If
  so, the line at the start of that node is tried, again skipping
  on if it is covered by another such node.
  */
  get baseIndent() {
    return this.baseIndentFor(this.node)
  }
  /**
  Get the indentation for the reference line of the given node
  (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
  */
  baseIndentFor(e) {
    let t = this.state.doc.lineAt(e.from)
    for (;;) {
      let i = e.resolve(t.from)
      for (; i.parent && i.parent.from == i.from; ) i = i.parent
      if (mZ(i, e)) break
      t = this.state.doc.lineAt(i.from)
    }
    return this.lineIndent(t.from)
  }
  /**
  Continue looking for indentations in the node's parent nodes,
  and return the result of that.
  */
  continue() {
    return Db(this.context.next, this.base, this.pos)
  }
}
function mZ(n, e) {
  for (let t = e; t; t = t.parent) if (n == t) return !0
  return !1
}
function yZ(n) {
  let e = n.node,
    t = e.childAfter(e.from),
    i = e.lastChild
  if (!t) return null
  let r = n.options.simulateBreak,
    s = n.state.doc.lineAt(t.from),
    o = r == null || r <= s.from ? s.to : Math.min(s.to, r)
  for (let a = t.to; ; ) {
    let l = e.childAfter(a)
    if (!l || l == i) return null
    if (!l.type.isSkipped) return l.from < o ? t : null
    a = l.to
  }
}
function bZ({ closing: n, align: e = !0, units: t = 1 }) {
  return (i) => Xb(i, e, t, n)
}
function Xb(n, e, t, i, r) {
  let s = n.textAfter,
    o = s.match(/^\s*/)[0].length,
    a = (i && s.slice(o, o + i.length) == i) || r == n.pos + o,
    l = e ? yZ(n) : null
  return l
    ? a
      ? n.column(l.from)
      : n.column(l.to)
    : n.baseIndent + (a ? 0 : n.unit * t)
}
const vZ = (n) => n.baseIndent
function zo({ except: n, units: e = 1 } = {}) {
  return (t) => {
    let i = n && n.test(t.textAfter)
    return t.baseIndent + (i ? 0 : e * t.unit)
  }
}
const SZ = 200
function xZ() {
  return oe.transactionFilter.of((n) => {
    if (
      !n.docChanged ||
      (!n.isUserEvent('input.type') && !n.isUserEvent('input.complete'))
    )
      return n
    let e = n.startState.languageDataAt(
      'indentOnInput',
      n.startState.selection.main.head
    )
    if (!e.length) return n
    let t = n.newDoc,
      { head: i } = n.newSelection.main,
      r = t.lineAt(i)
    if (i > r.from + SZ) return n
    let s = t.sliceString(r.from, i)
    if (!e.some((c) => c.test(s))) return n
    let { state: o } = n,
      a = -1,
      l = []
    for (let { head: c } of o.selection.ranges) {
      let u = o.doc.lineAt(c)
      if (u.from == a) continue
      a = u.from
      let f = Jf(o, u.from)
      if (f == null) continue
      let h = /^\s*/.exec(u.text)[0],
        d = fs(o, f)
      h != d && l.push({ from: u.from, to: u.from + h.length, insert: d })
    }
    return l.length ? [n, { changes: l, sequential: !0 }] : n
  })
}
const wZ = /* @__PURE__ */ q.define(),
  Tl = /* @__PURE__ */ new se()
function Yb(n) {
  let e = n.firstChild,
    t = n.lastChild
  return e && e.to < t.from
    ? { from: e.to, to: t.type.isError ? n.to : t.from }
    : null
}
function $Z(n, e, t) {
  let i = Ze(n)
  if (i.length < t) return null
  let r = i.resolveStack(t, 1),
    s = null
  for (let o = r; o; o = o.next) {
    let a = o.node
    if (a.to <= t || a.from > t) continue
    if (s && a.from < e) break
    let l = a.type.prop(Tl)
    if (l && (a.to < i.length - 50 || i.length == n.doc.length || !PZ(a))) {
      let c = l(a, n)
      c && c.from <= t && c.from >= e && c.to > t && (s = c)
    }
  }
  return s
}
function PZ(n) {
  let e = n.lastChild
  return e && e.to == n.to && e.type.isError
}
function Na(n, e, t) {
  for (let i of n.facet(wZ)) {
    let r = i(n, e, t)
    if (r) return r
  }
  return $Z(n, e, t)
}
function Ib(n, e) {
  let t = e.mapPos(n.from, 1),
    i = e.mapPos(n.to, -1)
  return t >= i ? void 0 : { from: t, to: i }
}
const Cl = /* @__PURE__ */ ne.define({ map: Ib }),
  As = /* @__PURE__ */ ne.define({ map: Ib })
function Nb(n) {
  let e = []
  for (let { head: t } of n.state.selection.ranges)
    e.some((i) => i.from <= t && i.to >= t) || e.push(n.lineBlockAt(t))
  return e
}
const xi = /* @__PURE__ */ We.define({
  create() {
    return K.none
  },
  update(n, e) {
    n = n.map(e.changes)
    for (let t of e.effects)
      if (t.is(Cl) && !QZ(n, t.value.from, t.value.to)) {
        let { preparePlaceholder: i } = e.state.facet(th),
          r = i ? K.replace({ widget: new RZ(i(e.state, t.value)) }) : yO
        n = n.update({ add: [r.range(t.value.from, t.value.to)] })
      } else
        t.is(As) &&
          (n = n.update({
            filter: (i, r) => t.value.from != i || t.value.to != r,
            filterFrom: t.value.from,
            filterTo: t.value.to
          }))
    if (e.selection) {
      let t = !1,
        { head: i } = e.selection.main
      n.between(i, i, (r, s) => {
        r < i && s > i && (t = !0)
      }),
        t &&
          (n = n.update({
            filterFrom: i,
            filterTo: i,
            filter: (r, s) => s <= i || r >= i
          }))
    }
    return n
  },
  provide: (n) => M.decorations.from(n),
  toJSON(n, e) {
    let t = []
    return (
      n.between(0, e.doc.length, (i, r) => {
        t.push(i, r)
      }),
      t
    )
  },
  fromJSON(n) {
    if (!Array.isArray(n) || n.length % 2)
      throw new RangeError('Invalid JSON for fold state')
    let e = []
    for (let t = 0; t < n.length; ) {
      let i = n[t++],
        r = n[t++]
      if (typeof i != 'number' || typeof r != 'number')
        throw new RangeError('Invalid JSON for fold state')
      e.push(yO.range(i, r))
    }
    return K.set(e, !0)
  }
})
function Ma(n, e, t) {
  var i
  let r = null
  return (
    (i = n.field(xi, !1)) === null ||
      i === void 0 ||
      i.between(e, t, (s, o) => {
        ;(!r || r.from > s) && (r = { from: s, to: o })
      }),
    r
  )
}
function QZ(n, e, t) {
  let i = !1
  return (
    n.between(e, e, (r, s) => {
      r == e && s == t && (i = !0)
    }),
    i
  )
}
function Mb(n, e) {
  return n.field(xi, !1) ? e : e.concat(ne.appendConfig.of(Wb()))
}
const kZ = (n) => {
    for (let e of Nb(n)) {
      let t = Na(n.state, e.from, e.to)
      if (t)
        return n.dispatch({ effects: Mb(n.state, [Cl.of(t), Vb(n, t)]) }), !0
    }
    return !1
  },
  TZ = (n) => {
    if (!n.state.field(xi, !1)) return !1
    let e = []
    for (let t of Nb(n)) {
      let i = Ma(n.state, t.from, t.to)
      i && e.push(As.of(i), Vb(n, i, !1))
    }
    return e.length && n.dispatch({ effects: e }), e.length > 0
  }
function Vb(n, e, t = !0) {
  let i = n.state.doc.lineAt(e.from).number,
    r = n.state.doc.lineAt(e.to).number
  return M.announce.of(
    `${n.state.phrase(
      t ? 'Folded lines' : 'Unfolded lines'
    )} ${i} ${n.state.phrase('to')} ${r}.`
  )
}
const CZ = (n) => {
    let { state: e } = n,
      t = []
    for (let i = 0; i < e.doc.length; ) {
      let r = n.lineBlockAt(i),
        s = Na(e, r.from, r.to)
      s && t.push(Cl.of(s)), (i = (s ? n.lineBlockAt(s.to) : r).to + 1)
    }
    return t.length && n.dispatch({ effects: Mb(n.state, t) }), !!t.length
  },
  _Z = (n) => {
    let e = n.state.field(xi, !1)
    if (!e || !e.size) return !1
    let t = []
    return (
      e.between(0, n.state.doc.length, (i, r) => {
        t.push(As.of({ from: i, to: r }))
      }),
      n.dispatch({ effects: t }),
      !0
    )
  },
  ZZ = [
    { key: 'Ctrl-Shift-[', mac: 'Cmd-Alt-[', run: kZ },
    { key: 'Ctrl-Shift-]', mac: 'Cmd-Alt-]', run: TZ },
    { key: 'Ctrl-Alt-[', run: CZ },
    { key: 'Ctrl-Alt-]', run: _Z }
  ],
  AZ = {
    placeholderDOM: null,
    preparePlaceholder: null,
    placeholderText: '…'
  },
  th = /* @__PURE__ */ q.define({
    combine(n) {
      return cn(n, AZ)
    }
  })
function Wb(n) {
  let e = [xi, XZ]
  return n && e.push(th.of(n)), e
}
function jb(n, e) {
  let { state: t } = n,
    i = t.facet(th),
    r = (o) => {
      let a = n.lineBlockAt(n.posAtDOM(o.target)),
        l = Ma(n.state, a.from, a.to)
      l && n.dispatch({ effects: As.of(l) }), o.preventDefault()
    }
  if (i.placeholderDOM) return i.placeholderDOM(n, r, e)
  let s = document.createElement('span')
  return (
    (s.textContent = i.placeholderText),
    s.setAttribute('aria-label', t.phrase('folded code')),
    (s.title = t.phrase('unfold')),
    (s.className = 'cm-foldPlaceholder'),
    (s.onclick = r),
    s
  )
}
const yO = /* @__PURE__ */ K.replace({
  widget: /* @__PURE__ */ new (class extends un {
    toDOM(n) {
      return jb(n, null)
    }
  })()
})
class RZ extends un {
  constructor(e) {
    super(), (this.value = e)
  }
  eq(e) {
    return this.value == e.value
  }
  toDOM(e) {
    return jb(e, this.value)
  }
}
const EZ = {
  openText: '⌄',
  closedText: '›',
  markerDOM: null,
  domEventHandlers: {},
  foldingChanged: () => !1
}
class yc extends Pn {
  constructor(e, t) {
    super(), (this.config = e), (this.open = t)
  }
  eq(e) {
    return this.config == e.config && this.open == e.open
  }
  toDOM(e) {
    if (this.config.markerDOM) return this.config.markerDOM(this.open)
    let t = document.createElement('span')
    return (
      (t.textContent = this.open
        ? this.config.openText
        : this.config.closedText),
      (t.title = e.state.phrase(this.open ? 'Fold line' : 'Unfold line')),
      t
    )
  }
}
function DZ(n = {}) {
  let e = Object.assign(Object.assign({}, EZ), n),
    t = new yc(e, !0),
    i = new yc(e, !1),
    r = Re.fromClass(
      class {
        constructor(o) {
          ;(this.from = o.viewport.from), (this.markers = this.buildMarkers(o))
        }
        update(o) {
          ;(o.docChanged ||
            o.viewportChanged ||
            o.startState.facet(Jn) != o.state.facet(Jn) ||
            o.startState.field(xi, !1) != o.state.field(xi, !1) ||
            Ze(o.startState) != Ze(o.state) ||
            e.foldingChanged(o)) &&
            (this.markers = this.buildMarkers(o.view))
        }
        buildMarkers(o) {
          let a = new zn()
          for (let l of o.viewportLineBlocks) {
            let c = Ma(o.state, l.from, l.to)
              ? i
              : Na(o.state, l.from, l.to)
                ? t
                : null
            c && a.add(l.from, l.from, c)
          }
          return a.finish()
        }
      }
    ),
    { domEventHandlers: s } = e
  return [
    r,
    A_({
      class: 'cm-foldGutter',
      markers(o) {
        var a
        return (
          ((a = o.plugin(r)) === null || a === void 0 ? void 0 : a.markers) ||
          fe.empty
        )
      },
      initialSpacer() {
        return new yc(e, !1)
      },
      domEventHandlers: Object.assign(Object.assign({}, s), {
        click: (o, a, l) => {
          if (s.click && s.click(o, a, l)) return !0
          let c = Ma(o.state, a.from, a.to)
          if (c) return o.dispatch({ effects: As.of(c) }), !0
          let u = Na(o.state, a.from, a.to)
          return u ? (o.dispatch({ effects: Cl.of(u) }), !0) : !1
        }
      })
    }),
    Wb()
  ]
}
const XZ = /* @__PURE__ */ M.baseTheme({
  '.cm-foldPlaceholder': {
    backgroundColor: '#eee',
    border: '1px solid #ddd',
    color: '#888',
    borderRadius: '.2em',
    margin: '0 1px',
    padding: '0 1px',
    cursor: 'pointer'
  },
  '.cm-foldGutter span': {
    padding: '0 1px',
    cursor: 'pointer'
  }
})
class hr {
  constructor(e, t) {
    this.specs = e
    let i
    function r(a) {
      let l = Fn.newName()
      return ((i || (i = /* @__PURE__ */ Object.create(null)))['.' + l] = a), l
    }
    const s = typeof t.all == 'string' ? t.all : t.all ? r(t.all) : void 0,
      o = t.scope
    ;(this.scope =
      o instanceof Nt
        ? (a) => a.prop(Vi) == o.data
        : o
          ? (a) => a == o
          : void 0),
      (this.style = Ab(
        e.map((a) => ({
          tag: a.tag,
          class: a.class || r(Object.assign({}, a, { tag: null }))
        })),
        {
          all: s
        }
      ).style),
      (this.module = i ? new Fn(i) : null),
      (this.themeType = t.themeType)
  }
  /**
  Create a highlighter style that associates the given styles to
  the given tags. The specs must be objects that hold a style tag
  or array of tags in their `tag` property, and either a single
  `class` property providing a static CSS class (for highlighter
  that rely on external styling), or a
  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
  set of CSS properties (which define the styling for those tags).
  
  The CSS rules created for a highlighter will be emitted in the
  order of the spec's properties. That means that for elements that
  have multiple tags associated with them, styles defined further
  down in the list will have a higher CSS precedence than styles
  defined earlier.
  */
  static define(e, t) {
    return new hr(e, t || {})
  }
}
const ef = /* @__PURE__ */ q.define(),
  Bb = /* @__PURE__ */ q.define({
    combine(n) {
      return n.length ? [n[0]] : null
    }
  })
function bc(n) {
  let e = n.facet(ef)
  return e.length ? e : n.facet(Bb)
}
function nh(n, e) {
  let t = [IZ],
    i
  return (
    n instanceof hr &&
      (n.module && t.push(M.styleModule.of(n.module)), (i = n.themeType)),
    e != null && e.fallback
      ? t.push(Bb.of(n))
      : i
        ? t.push(
            ef.computeN([M.darkTheme], (r) =>
              r.facet(M.darkTheme) == (i == 'dark') ? [n] : []
            )
          )
        : t.push(ef.of(n)),
    t
  )
}
class YZ {
  constructor(e) {
    ;(this.markCache = /* @__PURE__ */ Object.create(null)),
      (this.tree = Ze(e.state)),
      (this.decorations = this.buildDeco(e, bc(e.state)))
  }
  update(e) {
    let t = Ze(e.state),
      i = bc(e.state),
      r = i != bc(e.startState)
    t.length < e.view.viewport.to && !r && t.type == this.tree.type
      ? (this.decorations = this.decorations.map(e.changes))
      : (t != this.tree || e.viewportChanged || r) &&
        ((this.tree = t), (this.decorations = this.buildDeco(e.view, i)))
  }
  buildDeco(e, t) {
    if (!t || !this.tree.length) return K.none
    let i = new zn()
    for (let { from: r, to: s } of e.visibleRanges)
      aZ(
        this.tree,
        t,
        (o, a, l) => {
          i.add(
            o,
            a,
            this.markCache[l] || (this.markCache[l] = K.mark({ class: l }))
          )
        },
        r,
        s
      )
    return i.finish()
  }
}
const IZ = /* @__PURE__ */ Pi.high(
    /* @__PURE__ */ Re.fromClass(YZ, {
      decorations: (n) => n.decorations
    })
  ),
  NZ = /* @__PURE__ */ hr.define([
    {
      tag: g.meta,
      color: '#404740'
    },
    {
      tag: g.link,
      textDecoration: 'underline'
    },
    {
      tag: g.heading,
      textDecoration: 'underline',
      fontWeight: 'bold'
    },
    {
      tag: g.emphasis,
      fontStyle: 'italic'
    },
    {
      tag: g.strong,
      fontWeight: 'bold'
    },
    {
      tag: g.strikethrough,
      textDecoration: 'line-through'
    },
    {
      tag: g.keyword,
      color: '#708'
    },
    {
      tag: [g.atom, g.bool, g.url, g.contentSeparator, g.labelName],
      color: '#219'
    },
    {
      tag: [g.literal, g.inserted],
      color: '#164'
    },
    {
      tag: [g.string, g.deleted],
      color: '#a11'
    },
    {
      tag: [g.regexp, g.escape, /* @__PURE__ */ g.special(g.string)],
      color: '#e40'
    },
    {
      tag: /* @__PURE__ */ g.definition(g.variableName),
      color: '#00f'
    },
    {
      tag: /* @__PURE__ */ g.local(g.variableName),
      color: '#30a'
    },
    {
      tag: [g.typeName, g.namespace],
      color: '#085'
    },
    {
      tag: g.className,
      color: '#167'
    },
    {
      tag: [/* @__PURE__ */ g.special(g.variableName), g.macroName],
      color: '#256'
    },
    {
      tag: /* @__PURE__ */ g.definition(g.propertyName),
      color: '#00c'
    },
    {
      tag: g.comment,
      color: '#940'
    },
    {
      tag: g.invalid,
      color: '#f00'
    }
  ]),
  MZ = /* @__PURE__ */ M.baseTheme({
    '&.cm-focused .cm-matchingBracket': { backgroundColor: '#328c8252' },
    '&.cm-focused .cm-nonmatchingBracket': { backgroundColor: '#bb555544' }
  }),
  Lb = 1e4,
  Ub = '()[]{}',
  qb = /* @__PURE__ */ q.define({
    combine(n) {
      return cn(n, {
        afterCursor: !0,
        brackets: Ub,
        maxScanDistance: Lb,
        renderMatch: jZ
      })
    }
  }),
  VZ = /* @__PURE__ */ K.mark({ class: 'cm-matchingBracket' }),
  WZ = /* @__PURE__ */ K.mark({ class: 'cm-nonmatchingBracket' })
function jZ(n) {
  let e = [],
    t = n.matched ? VZ : WZ
  return (
    e.push(t.range(n.start.from, n.start.to)),
    n.end && e.push(t.range(n.end.from, n.end.to)),
    e
  )
}
const BZ = /* @__PURE__ */ We.define({
    create() {
      return K.none
    },
    update(n, e) {
      if (!e.docChanged && !e.selection) return n
      let t = [],
        i = e.state.facet(qb)
      for (let r of e.state.selection.ranges) {
        if (!r.empty) continue
        let s =
          rn(e.state, r.head, -1, i) ||
          (r.head > 0 && rn(e.state, r.head - 1, 1, i)) ||
          (i.afterCursor &&
            (rn(e.state, r.head, 1, i) ||
              (r.head < e.state.doc.length && rn(e.state, r.head + 1, -1, i))))
        s && (t = t.concat(i.renderMatch(s, e.state)))
      }
      return K.set(t, !0)
    },
    provide: (n) => M.decorations.from(n)
  }),
  LZ = [BZ, MZ]
function UZ(n = {}) {
  return [qb.of(n), LZ]
}
const zb = /* @__PURE__ */ new se()
function tf(n, e, t) {
  let i = n.prop(e < 0 ? se.openedBy : se.closedBy)
  if (i) return i
  if (n.name.length == 1) {
    let r = t.indexOf(n.name)
    if (r > -1 && r % 2 == (e < 0 ? 1 : 0)) return [t[r + e]]
  }
  return null
}
function nf(n) {
  let e = n.type.prop(zb)
  return e ? e(n.node) : n
}
function rn(n, e, t, i = {}) {
  let r = i.maxScanDistance || Lb,
    s = i.brackets || Ub,
    o = Ze(n),
    a = o.resolveInner(e, t)
  for (let l = a; l; l = l.parent) {
    let c = tf(l.type, t, s)
    if (c && l.from < l.to) {
      let u = nf(l)
      if (u && (t > 0 ? e >= u.from && e < u.to : e > u.from && e <= u.to))
        return qZ(n, e, t, l, u, c, s)
    }
  }
  return zZ(n, e, t, o, a.type, r, s)
}
function qZ(n, e, t, i, r, s, o) {
  let a = i.parent,
    l = { from: r.from, to: r.to },
    c = 0,
    u = a == null ? void 0 : a.cursor()
  if (u && (t < 0 ? u.childBefore(i.from) : u.childAfter(i.to)))
    do
      if (t < 0 ? u.to <= i.from : u.from >= i.to) {
        if (c == 0 && s.indexOf(u.type.name) > -1 && u.from < u.to) {
          let f = nf(u)
          return {
            start: l,
            end: f ? { from: f.from, to: f.to } : void 0,
            matched: !0
          }
        } else if (tf(u.type, t, o)) c++
        else if (tf(u.type, -t, o)) {
          if (c == 0) {
            let f = nf(u)
            return {
              start: l,
              end: f && f.from < f.to ? { from: f.from, to: f.to } : void 0,
              matched: !1
            }
          }
          c--
        }
      }
    while (t < 0 ? u.prevSibling() : u.nextSibling())
  return { start: l, matched: !1 }
}
function zZ(n, e, t, i, r, s, o) {
  let a = t < 0 ? n.sliceDoc(e - 1, e) : n.sliceDoc(e, e + 1),
    l = o.indexOf(a)
  if (l < 0 || (l % 2 == 0) != t > 0) return null
  let c = { from: t < 0 ? e - 1 : e, to: t > 0 ? e + 1 : e },
    u = n.doc.iterRange(e, t > 0 ? n.doc.length : 0),
    f = 0
  for (let h = 0; !u.next().done && h <= s; ) {
    let d = u.value
    t < 0 && (h += d.length)
    let O = e + h * t
    for (
      let m = t > 0 ? 0 : d.length - 1, b = t > 0 ? d.length : -1;
      m != b;
      m += t
    ) {
      let x = o.indexOf(d[m])
      if (!(x < 0 || i.resolveInner(O + m, 1).type != r))
        if ((x % 2 == 0) == t > 0) f++
        else {
          if (f == 1)
            return {
              start: c,
              end: { from: O + m, to: O + m + 1 },
              matched: x >> 1 == l >> 1
            }
          f--
        }
    }
    t > 0 && (h += d.length)
  }
  return u.done ? { start: c, matched: !1 } : null
}
const FZ = /* @__PURE__ */ Object.create(null),
  bO = [at.none],
  vO = [],
  GZ = /* @__PURE__ */ Object.create(null)
for (let [n, e] of [
  ['variable', 'variableName'],
  ['variable-2', 'variableName.special'],
  ['string-2', 'string.special'],
  ['def', 'variableName.definition'],
  ['tag', 'tagName'],
  ['attribute', 'attributeName'],
  ['type', 'typeName'],
  ['builtin', 'variableName.standard'],
  ['qualifier', 'modifier'],
  ['error', 'invalid'],
  ['header', 'heading'],
  ['property', 'propertyName']
])
  GZ[n] = /* @__PURE__ */ HZ(FZ, e)
function vc(n, e) {
  vO.indexOf(n) > -1 || (vO.push(n), console.warn(e))
}
function HZ(n, e) {
  let t = []
  for (let s of e.split(' ')) {
    let o = []
    for (let a of s.split('.')) {
      let l = n[a] || g[a]
      l
        ? typeof l == 'function'
          ? o.length
            ? (o = o.map(l))
            : vc(a, `Modifier ${a} used at start of tag`)
          : o.length
            ? vc(a, `Tag ${a} used as modifier`)
            : (o = Array.isArray(l) ? l : [l])
        : vc(a, `Unknown highlighting tag ${a}`)
    }
    for (let a of o) t.push(a)
  }
  if (!t.length) return 0
  let i = e.replace(/ /g, '_'),
    r = at.define({
      id: bO.length,
      name: i,
      props: [Pl({ [i]: t })]
    })
  return bO.push(r), r.id
}
const KZ = (n) => {
  let { state: e } = n,
    t = e.doc.lineAt(e.selection.main.from),
    i = rh(n.state, t.from)
  return i.line ? JZ(n) : i.block ? tA(n) : !1
}
function ih(n, e) {
  return ({ state: t, dispatch: i }) => {
    if (t.readOnly) return !1
    let r = n(e, t)
    return r ? (i(t.update(r)), !0) : !1
  }
}
const JZ = /* @__PURE__ */ ih(
    rA,
    0
    /* CommentOption.Toggle */
  ),
  eA = /* @__PURE__ */ ih(
    Fb,
    0
    /* CommentOption.Toggle */
  ),
  tA = /* @__PURE__ */ ih(
    (n, e) => Fb(n, e, iA(e)),
    0
    /* CommentOption.Toggle */
  )
function rh(n, e) {
  let t = n.languageDataAt('commentTokens', e)
  return t.length ? t[0] : {}
}
const Rr = 50
function nA(n, { open: e, close: t }, i, r) {
  let s = n.sliceDoc(i - Rr, i),
    o = n.sliceDoc(r, r + Rr),
    a = /\s*$/.exec(s)[0].length,
    l = /^\s*/.exec(o)[0].length,
    c = s.length - a
  if (s.slice(c - e.length, c) == e && o.slice(l, l + t.length) == t)
    return {
      open: { pos: i - a, margin: a && 1 },
      close: { pos: r + l, margin: l && 1 }
    }
  let u, f
  r - i <= 2 * Rr
    ? (u = f = n.sliceDoc(i, r))
    : ((u = n.sliceDoc(i, i + Rr)), (f = n.sliceDoc(r - Rr, r)))
  let h = /^\s*/.exec(u)[0].length,
    d = /\s*$/.exec(f)[0].length,
    O = f.length - d - t.length
  return u.slice(h, h + e.length) == e && f.slice(O, O + t.length) == t
    ? {
        open: {
          pos: i + h + e.length,
          margin: /\s/.test(u.charAt(h + e.length)) ? 1 : 0
        },
        close: {
          pos: r - d - t.length,
          margin: /\s/.test(f.charAt(O - 1)) ? 1 : 0
        }
      }
    : null
}
function iA(n) {
  let e = []
  for (let t of n.selection.ranges) {
    let i = n.doc.lineAt(t.from),
      r = t.to <= i.to ? i : n.doc.lineAt(t.to),
      s = e.length - 1
    s >= 0 && e[s].to > i.from
      ? (e[s].to = r.to)
      : e.push({ from: i.from + /^\s*/.exec(i.text)[0].length, to: r.to })
  }
  return e
}
function Fb(n, e, t = e.selection.ranges) {
  let i = t.map((s) => rh(e, s.from).block)
  if (!i.every((s) => s)) return null
  let r = t.map((s, o) => nA(e, i[o], s.from, s.to))
  if (n != 2 && !r.every((s) => s))
    return {
      changes: e.changes(
        t.map((s, o) =>
          r[o]
            ? []
            : [
                { from: s.from, insert: i[o].open + ' ' },
                { from: s.to, insert: ' ' + i[o].close }
              ]
        )
      )
    }
  if (n != 1 && r.some((s) => s)) {
    let s = []
    for (let o = 0, a; o < r.length; o++)
      if ((a = r[o])) {
        let l = i[o],
          { open: c, close: u } = a
        s.push(
          { from: c.pos - l.open.length, to: c.pos + c.margin },
          { from: u.pos - u.margin, to: u.pos + l.close.length }
        )
      }
    return { changes: s }
  }
  return null
}
function rA(n, e, t = e.selection.ranges) {
  let i = [],
    r = -1
  for (let { from: s, to: o } of t) {
    let a = i.length,
      l = 1e9,
      c = rh(e, s).line
    if (c) {
      for (let u = s; u <= o; ) {
        let f = e.doc.lineAt(u)
        if (f.from > r && (s == o || o > f.from)) {
          r = f.from
          let h = /^\s*/.exec(f.text)[0].length,
            d = h == f.length,
            O = f.text.slice(h, h + c.length) == c ? h : -1
          h < f.text.length && h < l && (l = h),
            i.push({
              line: f,
              comment: O,
              token: c,
              indent: h,
              empty: d,
              single: !1
            })
        }
        u = f.to + 1
      }
      if (l < 1e9)
        for (let u = a; u < i.length; u++)
          i[u].indent < i[u].line.text.length && (i[u].indent = l)
      i.length == a + 1 && (i[a].single = !0)
    }
  }
  if (n != 2 && i.some((s) => s.comment < 0 && (!s.empty || s.single))) {
    let s = []
    for (let { line: a, token: l, indent: c, empty: u, single: f } of i)
      (f || !u) && s.push({ from: a.from + c, insert: l + ' ' })
    let o = e.changes(s)
    return { changes: o, selection: e.selection.map(o, 1) }
  } else if (n != 1 && i.some((s) => s.comment >= 0)) {
    let s = []
    for (let { line: o, comment: a, token: l } of i)
      if (a >= 0) {
        let c = o.from + a,
          u = c + l.length
        o.text[u - o.from] == ' ' && u++, s.push({ from: c, to: u })
      }
    return { changes: s }
  }
  return null
}
const rf = /* @__PURE__ */ ln.define(),
  sA = /* @__PURE__ */ ln.define(),
  oA = /* @__PURE__ */ q.define(),
  Gb = /* @__PURE__ */ q.define({
    combine(n) {
      return cn(
        n,
        {
          minDepth: 100,
          newGroupDelay: 500,
          joinToEvent: (e, t) => t
        },
        {
          minDepth: Math.max,
          newGroupDelay: Math.min,
          joinToEvent: (e, t) => (i, r) => e(i, r) || t(i, r)
        }
      )
    }
  })
function aA(n) {
  let e = 0
  return n.iterChangedRanges((t, i) => (e = i)), e
}
const Hb = /* @__PURE__ */ We.define({
  create() {
    return sn.empty
  },
  update(n, e) {
    let t = e.state.facet(Gb),
      i = e.annotation(rf)
    if (i) {
      let l = e.docChanged ? _.single(aA(e.changes)) : void 0,
        c = ht.fromTransaction(e, l),
        u = i.side,
        f = u == 0 ? n.undone : n.done
      return (
        c
          ? (f = Va(f, f.length, t.minDepth, c))
          : (f = ev(f, e.startState.selection)),
        new sn(u == 0 ? i.rest : f, u == 0 ? f : i.rest)
      )
    }
    let r = e.annotation(sA)
    if (
      ((r == 'full' || r == 'before') && (n = n.isolate()),
      e.annotation(Ye.addToHistory) === !1)
    )
      return e.changes.empty ? n : n.addMapping(e.changes.desc)
    let s = ht.fromTransaction(e),
      o = e.annotation(Ye.time),
      a = e.annotation(Ye.userEvent)
    return (
      s
        ? (n = n.addChanges(s, o, a, t, e))
        : e.selection &&
          (n = n.addSelection(e.startState.selection, o, a, t.newGroupDelay)),
      (r == 'full' || r == 'after') && (n = n.isolate()),
      n
    )
  },
  toJSON(n) {
    return {
      done: n.done.map((e) => e.toJSON()),
      undone: n.undone.map((e) => e.toJSON())
    }
  },
  fromJSON(n) {
    return new sn(n.done.map(ht.fromJSON), n.undone.map(ht.fromJSON))
  }
})
function lA(n = {}) {
  return [
    Hb,
    Gb.of(n),
    M.domEventHandlers({
      beforeinput(e, t) {
        let i =
          e.inputType == 'historyUndo'
            ? Kb
            : e.inputType == 'historyRedo'
              ? sf
              : null
        return i ? (e.preventDefault(), i(t)) : !1
      }
    })
  ]
}
function _l(n, e) {
  return function ({ state: t, dispatch: i }) {
    if (!e && t.readOnly) return !1
    let r = t.field(Hb, !1)
    if (!r) return !1
    let s = r.pop(n, t, e)
    return s ? (i(s), !0) : !1
  }
}
const Kb = /* @__PURE__ */ _l(0, !1),
  sf = /* @__PURE__ */ _l(1, !1),
  cA = /* @__PURE__ */ _l(0, !0),
  uA = /* @__PURE__ */ _l(1, !0)
class ht {
  constructor(e, t, i, r, s) {
    ;(this.changes = e),
      (this.effects = t),
      (this.mapped = i),
      (this.startSelection = r),
      (this.selectionsAfter = s)
  }
  setSelAfter(e) {
    return new ht(
      this.changes,
      this.effects,
      this.mapped,
      this.startSelection,
      e
    )
  }
  toJSON() {
    var e, t, i
    return {
      changes:
        (e = this.changes) === null || e === void 0 ? void 0 : e.toJSON(),
      mapped: (t = this.mapped) === null || t === void 0 ? void 0 : t.toJSON(),
      startSelection:
        (i = this.startSelection) === null || i === void 0
          ? void 0
          : i.toJSON(),
      selectionsAfter: this.selectionsAfter.map((r) => r.toJSON())
    }
  }
  static fromJSON(e) {
    return new ht(
      e.changes && Xe.fromJSON(e.changes),
      [],
      e.mapped && on.fromJSON(e.mapped),
      e.startSelection && _.fromJSON(e.startSelection),
      e.selectionsAfter.map(_.fromJSON)
    )
  }
  // This does not check `addToHistory` and such, it assumes the
  // transaction needs to be converted to an item. Returns null when
  // there are no changes or effects in the transaction.
  static fromTransaction(e, t) {
    let i = At
    for (let r of e.startState.facet(oA)) {
      let s = r(e)
      s.length && (i = i.concat(s))
    }
    return !i.length && e.changes.empty
      ? null
      : new ht(
          e.changes.invert(e.startState.doc),
          i,
          void 0,
          t || e.startState.selection,
          At
        )
  }
  static selection(e) {
    return new ht(void 0, At, void 0, void 0, e)
  }
}
function Va(n, e, t, i) {
  let r = e + 1 > t + 20 ? e - t - 1 : 0,
    s = n.slice(r, e)
  return s.push(i), s
}
function fA(n, e) {
  let t = [],
    i = !1
  return (
    n.iterChangedRanges((r, s) => t.push(r, s)),
    e.iterChangedRanges((r, s, o, a) => {
      for (let l = 0; l < t.length; ) {
        let c = t[l++],
          u = t[l++]
        a >= c && o <= u && (i = !0)
      }
    }),
    i
  )
}
function hA(n, e) {
  return (
    n.ranges.length == e.ranges.length &&
    n.ranges.filter((t, i) => t.empty != e.ranges[i].empty).length === 0
  )
}
function Jb(n, e) {
  return n.length ? (e.length ? n.concat(e) : n) : e
}
const At = [],
  dA = 200
function ev(n, e) {
  if (n.length) {
    let t = n[n.length - 1],
      i = t.selectionsAfter.slice(Math.max(0, t.selectionsAfter.length - dA))
    return i.length && i[i.length - 1].eq(e)
      ? n
      : (i.push(e), Va(n, n.length - 1, 1e9, t.setSelAfter(i)))
  } else return [ht.selection([e])]
}
function pA(n) {
  let e = n[n.length - 1],
    t = n.slice()
  return (
    (t[n.length - 1] = e.setSelAfter(
      e.selectionsAfter.slice(0, e.selectionsAfter.length - 1)
    )),
    t
  )
}
function Sc(n, e) {
  if (!n.length) return n
  let t = n.length,
    i = At
  for (; t; ) {
    let r = OA(n[t - 1], e, i)
    if ((r.changes && !r.changes.empty) || r.effects.length) {
      let s = n.slice(0, t)
      return (s[t - 1] = r), s
    } else (e = r.mapped), t--, (i = r.selectionsAfter)
  }
  return i.length ? [ht.selection(i)] : At
}
function OA(n, e, t) {
  let i = Jb(
    n.selectionsAfter.length ? n.selectionsAfter.map((a) => a.map(e)) : At,
    t
  )
  if (!n.changes) return ht.selection(i)
  let r = n.changes.map(e),
    s = e.mapDesc(n.changes, !0),
    o = n.mapped ? n.mapped.composeDesc(s) : s
  return new ht(r, ne.mapEffects(n.effects, e), o, n.startSelection.map(s), i)
}
const gA = /^(input\.type|delete)($|\.)/
class sn {
  constructor(e, t, i = 0, r = void 0) {
    ;(this.done = e),
      (this.undone = t),
      (this.prevTime = i),
      (this.prevUserEvent = r)
  }
  isolate() {
    return this.prevTime ? new sn(this.done, this.undone) : this
  }
  addChanges(e, t, i, r, s) {
    let o = this.done,
      a = o[o.length - 1]
    return (
      a &&
      a.changes &&
      !a.changes.empty &&
      e.changes &&
      (!i || gA.test(i)) &&
      ((!a.selectionsAfter.length &&
        t - this.prevTime < r.newGroupDelay &&
        r.joinToEvent(s, fA(a.changes, e.changes))) || // For compose (but not compose.start) events, always join with previous event
        i == 'input.type.compose')
        ? (o = Va(
            o,
            o.length - 1,
            r.minDepth,
            new ht(
              e.changes.compose(a.changes),
              Jb(e.effects, a.effects),
              a.mapped,
              a.startSelection,
              At
            )
          ))
        : (o = Va(o, o.length, r.minDepth, e)),
      new sn(o, At, t, i)
    )
  }
  addSelection(e, t, i, r) {
    let s = this.done.length
      ? this.done[this.done.length - 1].selectionsAfter
      : At
    return s.length > 0 &&
      t - this.prevTime < r &&
      i == this.prevUserEvent &&
      i &&
      /^select($|\.)/.test(i) &&
      hA(s[s.length - 1], e)
      ? this
      : new sn(ev(this.done, e), this.undone, t, i)
  }
  addMapping(e) {
    return new sn(
      Sc(this.done, e),
      Sc(this.undone, e),
      this.prevTime,
      this.prevUserEvent
    )
  }
  pop(e, t, i) {
    let r = e == 0 ? this.done : this.undone
    if (r.length == 0) return null
    let s = r[r.length - 1]
    if (i && s.selectionsAfter.length)
      return t.update({
        selection: s.selectionsAfter[s.selectionsAfter.length - 1],
        annotations: rf.of({ side: e, rest: pA(r) }),
        userEvent: e == 0 ? 'select.undo' : 'select.redo',
        scrollIntoView: !0
      })
    if (s.changes) {
      let o = r.length == 1 ? At : r.slice(0, r.length - 1)
      return (
        s.mapped && (o = Sc(o, s.mapped)),
        t.update({
          changes: s.changes,
          selection: s.startSelection,
          effects: s.effects,
          annotations: rf.of({ side: e, rest: o }),
          filter: !1,
          userEvent: e == 0 ? 'undo' : 'redo',
          scrollIntoView: !0
        })
      )
    } else return null
  }
}
sn.empty = /* @__PURE__ */ new sn(At, At)
const mA = [
  { key: 'Mod-z', run: Kb, preventDefault: !0 },
  { key: 'Mod-y', mac: 'Mod-Shift-z', run: sf, preventDefault: !0 },
  { linux: 'Ctrl-Shift-z', run: sf, preventDefault: !0 },
  { key: 'Mod-u', run: cA, preventDefault: !0 },
  { key: 'Alt-u', mac: 'Mod-Shift-u', run: uA, preventDefault: !0 }
]
function dr(n, e) {
  return _.create(n.ranges.map(e), n.mainIndex)
}
function fn(n, e) {
  return n.update({ selection: e, scrollIntoView: !0, userEvent: 'select' })
}
function Wt({ state: n, dispatch: e }, t) {
  let i = dr(n.selection, t)
  return i.eq(n.selection) ? !1 : (e(fn(n, i)), !0)
}
function Zl(n, e) {
  return _.cursor(e ? n.to : n.from)
}
function tv(n, e) {
  return Wt(n, (t) => (t.empty ? n.moveByChar(t, e) : Zl(t, e)))
}
function nt(n) {
  return n.textDirectionAt(n.state.selection.main.head) == Pe.LTR
}
const nv = (n) => tv(n, !nt(n)),
  iv = (n) => tv(n, nt(n))
function rv(n, e) {
  return Wt(n, (t) => (t.empty ? n.moveByGroup(t, e) : Zl(t, e)))
}
const yA = (n) => rv(n, !nt(n)),
  bA = (n) => rv(n, nt(n))
function vA(n, e, t) {
  if (e.type.prop(t)) return !0
  let i = e.to - e.from
  return (
    (i && (i > 2 || /[^\s,.;:]/.test(n.sliceDoc(e.from, e.to)))) || e.firstChild
  )
}
function Al(n, e, t) {
  let i = Ze(n).resolveInner(e.head),
    r = t ? se.closedBy : se.openedBy
  for (let l = e.head; ; ) {
    let c = t ? i.childAfter(l) : i.childBefore(l)
    if (!c) break
    vA(n, c, r) ? (i = c) : (l = t ? c.to : c.from)
  }
  let s = i.type.prop(r),
    o,
    a
  return (
    s && (o = t ? rn(n, i.from, 1) : rn(n, i.to, -1)) && o.matched
      ? (a = t ? o.end.to : o.end.from)
      : (a = t ? i.to : i.from),
    _.cursor(a, t ? -1 : 1)
  )
}
const SA = (n) => Wt(n, (e) => Al(n.state, e, !nt(n))),
  xA = (n) => Wt(n, (e) => Al(n.state, e, nt(n)))
function sv(n, e) {
  return Wt(n, (t) => {
    if (!t.empty) return Zl(t, e)
    let i = n.moveVertically(t, e)
    return i.head != t.head ? i : n.moveToLineBoundary(t, e)
  })
}
const ov = (n) => sv(n, !1),
  av = (n) => sv(n, !0)
function lv(n) {
  let e = n.scrollDOM.clientHeight < n.scrollDOM.scrollHeight - 2,
    t = 0,
    i = 0,
    r
  if (e) {
    for (let s of n.state.facet(M.scrollMargins)) {
      let o = s(n)
      o != null && o.top && (t = Math.max(o == null ? void 0 : o.top, t)),
        o != null &&
          o.bottom &&
          (i = Math.max(o == null ? void 0 : o.bottom, i))
    }
    r = n.scrollDOM.clientHeight - t - i
  } else r = (n.dom.ownerDocument.defaultView || window).innerHeight
  return {
    marginTop: t,
    marginBottom: i,
    selfScroll: e,
    height: Math.max(n.defaultLineHeight, r - 5)
  }
}
function cv(n, e) {
  let t = lv(n),
    { state: i } = n,
    r = dr(i.selection, (o) =>
      o.empty ? n.moveVertically(o, e, t.height) : Zl(o, e)
    )
  if (r.eq(i.selection)) return !1
  let s
  if (t.selfScroll) {
    let o = n.coordsAtPos(i.selection.main.head),
      a = n.scrollDOM.getBoundingClientRect(),
      l = a.top + t.marginTop,
      c = a.bottom - t.marginBottom
    o &&
      o.top > l &&
      o.bottom < c &&
      (s = M.scrollIntoView(r.main.head, { y: 'start', yMargin: o.top - l }))
  }
  return n.dispatch(fn(i, r), { effects: s }), !0
}
const SO = (n) => cv(n, !1),
  of = (n) => cv(n, !0)
function ti(n, e, t) {
  let i = n.lineBlockAt(e.head),
    r = n.moveToLineBoundary(e, t)
  if (
    (r.head == e.head &&
      r.head != (t ? i.to : i.from) &&
      (r = n.moveToLineBoundary(e, t, !1)),
    !t && r.head == i.from && i.length)
  ) {
    let s = /^\s*/.exec(
      n.state.sliceDoc(i.from, Math.min(i.from + 100, i.to))
    )[0].length
    s && e.head != i.from + s && (r = _.cursor(i.from + s))
  }
  return r
}
const wA = (n) => Wt(n, (e) => ti(n, e, !0)),
  $A = (n) => Wt(n, (e) => ti(n, e, !1)),
  PA = (n) => Wt(n, (e) => ti(n, e, !nt(n))),
  QA = (n) => Wt(n, (e) => ti(n, e, nt(n))),
  kA = (n) => Wt(n, (e) => _.cursor(n.lineBlockAt(e.head).from, 1)),
  TA = (n) => Wt(n, (e) => _.cursor(n.lineBlockAt(e.head).to, -1))
function CA(n, e, t) {
  let i = !1,
    r = dr(n.selection, (s) => {
      let o =
        rn(n, s.head, -1) ||
        rn(n, s.head, 1) ||
        (s.head > 0 && rn(n, s.head - 1, 1)) ||
        (s.head < n.doc.length && rn(n, s.head + 1, -1))
      if (!o || !o.end) return s
      i = !0
      let a = o.start.from == s.head ? o.end.to : o.end.from
      return t ? _.range(s.anchor, a) : _.cursor(a)
    })
  return i ? (e(fn(n, r)), !0) : !1
}
const _A = ({ state: n, dispatch: e }) => CA(n, e, !1)
function Dt(n, e) {
  let t = dr(n.state.selection, (i) => {
    let r = e(i)
    return _.range(i.anchor, r.head, r.goalColumn, r.bidiLevel || void 0)
  })
  return t.eq(n.state.selection) ? !1 : (n.dispatch(fn(n.state, t)), !0)
}
function uv(n, e) {
  return Dt(n, (t) => n.moveByChar(t, e))
}
const fv = (n) => uv(n, !nt(n)),
  hv = (n) => uv(n, nt(n))
function dv(n, e) {
  return Dt(n, (t) => n.moveByGroup(t, e))
}
const ZA = (n) => dv(n, !nt(n)),
  AA = (n) => dv(n, nt(n)),
  RA = (n) => Dt(n, (e) => Al(n.state, e, !nt(n))),
  EA = (n) => Dt(n, (e) => Al(n.state, e, nt(n)))
function pv(n, e) {
  return Dt(n, (t) => n.moveVertically(t, e))
}
const Ov = (n) => pv(n, !1),
  gv = (n) => pv(n, !0)
function mv(n, e) {
  return Dt(n, (t) => n.moveVertically(t, e, lv(n).height))
}
const xO = (n) => mv(n, !1),
  wO = (n) => mv(n, !0),
  DA = (n) => Dt(n, (e) => ti(n, e, !0)),
  XA = (n) => Dt(n, (e) => ti(n, e, !1)),
  YA = (n) => Dt(n, (e) => ti(n, e, !nt(n))),
  IA = (n) => Dt(n, (e) => ti(n, e, nt(n))),
  NA = (n) => Dt(n, (e) => _.cursor(n.lineBlockAt(e.head).from)),
  MA = (n) => Dt(n, (e) => _.cursor(n.lineBlockAt(e.head).to)),
  $O = ({ state: n, dispatch: e }) => (e(fn(n, { anchor: 0 })), !0),
  PO = ({ state: n, dispatch: e }) => (e(fn(n, { anchor: n.doc.length })), !0),
  QO = ({ state: n, dispatch: e }) => (
    e(fn(n, { anchor: n.selection.main.anchor, head: 0 })), !0
  ),
  kO = ({ state: n, dispatch: e }) => (
    e(fn(n, { anchor: n.selection.main.anchor, head: n.doc.length })), !0
  ),
  VA = ({ state: n, dispatch: e }) => (
    e(
      n.update({
        selection: { anchor: 0, head: n.doc.length },
        userEvent: 'select'
      })
    ),
    !0
  ),
  WA = ({ state: n, dispatch: e }) => {
    let t = Rl(n).map(({ from: i, to: r }) =>
      _.range(i, Math.min(r + 1, n.doc.length))
    )
    return e(n.update({ selection: _.create(t), userEvent: 'select' })), !0
  },
  jA = ({ state: n, dispatch: e }) => {
    let t = dr(n.selection, (i) => {
      var r
      let s = Ze(n).resolveStack(i.from, 1)
      for (let o = s; o; o = o.next) {
        let { node: a } = o
        if (
          ((a.from < i.from && a.to >= i.to) ||
            (a.to > i.to && a.from <= i.from)) &&
          !((r = a.parent) === null || r === void 0) &&
          r.parent
        )
          return _.range(a.to, a.from)
      }
      return i
    })
    return e(fn(n, t)), !0
  },
  BA = ({ state: n, dispatch: e }) => {
    let t = n.selection,
      i = null
    return (
      t.ranges.length > 1
        ? (i = _.create([t.main]))
        : t.main.empty || (i = _.create([_.cursor(t.main.head)])),
      i ? (e(fn(n, i)), !0) : !1
    )
  }
function Rs(n, e) {
  if (n.state.readOnly) return !1
  let t = 'delete.selection',
    { state: i } = n,
    r = i.changeByRange((s) => {
      let { from: o, to: a } = s
      if (o == a) {
        let l = e(s)
        l < o
          ? ((t = 'delete.backward'), (l = ho(n, l, !1)))
          : l > o && ((t = 'delete.forward'), (l = ho(n, l, !0))),
          (o = Math.min(o, l)),
          (a = Math.max(a, l))
      } else (o = ho(n, o, !1)), (a = ho(n, a, !0))
      return o == a
        ? { range: s }
        : {
            changes: { from: o, to: a },
            range: _.cursor(o, o < s.head ? -1 : 1)
          }
    })
  return r.changes.empty
    ? !1
    : (n.dispatch(
        i.update(r, {
          scrollIntoView: !0,
          userEvent: t,
          effects:
            t == 'delete.selection'
              ? M.announce.of(i.phrase('Selection deleted'))
              : void 0
        })
      ),
      !0)
}
function ho(n, e, t) {
  if (n instanceof M)
    for (let i of n.state.facet(M.atomicRanges).map((r) => r(n)))
      i.between(e, e, (r, s) => {
        r < e && s > e && (e = t ? s : r)
      })
  return e
}
const yv = (n, e) =>
    Rs(n, (t) => {
      let i = t.from,
        { state: r } = n,
        s = r.doc.lineAt(i),
        o,
        a
      if (
        !e &&
        i > s.from &&
        i < s.from + 200 &&
        !/[^ \t]/.test((o = s.text.slice(0, i - s.from)))
      ) {
        if (o[o.length - 1] == '	') return i - 1
        let l = fr(o, r.tabSize),
          c = l % Ia(r) || Ia(r)
        for (let u = 0; u < c && o[o.length - 1 - u] == ' '; u++) i--
        a = i
      } else
        (a = et(s.text, i - s.from, e, e) + s.from),
          a == i && s.number != (e ? r.doc.lines : 1) && (a += e ? 1 : -1)
      return a
    }),
  af = (n) => yv(n, !1),
  bv = (n) => yv(n, !0),
  vv = (n, e) =>
    Rs(n, (t) => {
      let i = t.head,
        { state: r } = n,
        s = r.doc.lineAt(i),
        o = r.charCategorizer(i)
      for (let a = null; ; ) {
        if (i == (e ? s.to : s.from)) {
          i == t.head && s.number != (e ? r.doc.lines : 1) && (i += e ? 1 : -1)
          break
        }
        let l = et(s.text, i - s.from, e) + s.from,
          c = s.text.slice(Math.min(i, l) - s.from, Math.max(i, l) - s.from),
          u = o(c)
        if (a != null && u != a) break
        ;(c != ' ' || i != t.head) && (a = u), (i = l)
      }
      return i
    }),
  Sv = (n) => vv(n, !1),
  LA = (n) => vv(n, !0),
  UA = (n) =>
    Rs(n, (e) => {
      let t = n.lineBlockAt(e.head).to
      return e.head < t ? t : Math.min(n.state.doc.length, e.head + 1)
    }),
  qA = (n) =>
    Rs(n, (e) => {
      let t = n.moveToLineBoundary(e, !1).head
      return e.head > t ? t : Math.max(0, e.head - 1)
    }),
  zA = (n) =>
    Rs(n, (e) => {
      let t = n.moveToLineBoundary(e, !0).head
      return e.head < t ? t : Math.min(n.state.doc.length, e.head + 1)
    }),
  FA = ({ state: n, dispatch: e }) => {
    if (n.readOnly) return !1
    let t = n.changeByRange((i) => ({
      changes: { from: i.from, to: i.to, insert: ue.of(['', '']) },
      range: _.cursor(i.from)
    }))
    return e(n.update(t, { scrollIntoView: !0, userEvent: 'input' })), !0
  },
  GA = ({ state: n, dispatch: e }) => {
    if (n.readOnly) return !1
    let t = n.changeByRange((i) => {
      if (!i.empty || i.from == 0 || i.from == n.doc.length) return { range: i }
      let r = i.from,
        s = n.doc.lineAt(r),
        o = r == s.from ? r - 1 : et(s.text, r - s.from, !1) + s.from,
        a = r == s.to ? r + 1 : et(s.text, r - s.from, !0) + s.from
      return {
        changes: {
          from: o,
          to: a,
          insert: n.doc.slice(r, a).append(n.doc.slice(o, r))
        },
        range: _.cursor(a)
      }
    })
    return t.changes.empty
      ? !1
      : (e(n.update(t, { scrollIntoView: !0, userEvent: 'move.character' })),
        !0)
  }
function Rl(n) {
  let e = [],
    t = -1
  for (let i of n.selection.ranges) {
    let r = n.doc.lineAt(i.from),
      s = n.doc.lineAt(i.to)
    if (
      (!i.empty && i.to == s.from && (s = n.doc.lineAt(i.to - 1)),
      t >= r.number)
    ) {
      let o = e[e.length - 1]
      ;(o.to = s.to), o.ranges.push(i)
    } else e.push({ from: r.from, to: s.to, ranges: [i] })
    t = s.number + 1
  }
  return e
}
function xv(n, e, t) {
  if (n.readOnly) return !1
  let i = [],
    r = []
  for (let s of Rl(n)) {
    if (t ? s.to == n.doc.length : s.from == 0) continue
    let o = n.doc.lineAt(t ? s.to + 1 : s.from - 1),
      a = o.length + 1
    if (t) {
      i.push(
        { from: s.to, to: o.to },
        { from: s.from, insert: o.text + n.lineBreak }
      )
      for (let l of s.ranges)
        r.push(
          _.range(
            Math.min(n.doc.length, l.anchor + a),
            Math.min(n.doc.length, l.head + a)
          )
        )
    } else {
      i.push(
        { from: o.from, to: s.from },
        { from: s.to, insert: n.lineBreak + o.text }
      )
      for (let l of s.ranges) r.push(_.range(l.anchor - a, l.head - a))
    }
  }
  return i.length
    ? (e(
        n.update({
          changes: i,
          scrollIntoView: !0,
          selection: _.create(r, n.selection.mainIndex),
          userEvent: 'move.line'
        })
      ),
      !0)
    : !1
}
const HA = ({ state: n, dispatch: e }) => xv(n, e, !1),
  KA = ({ state: n, dispatch: e }) => xv(n, e, !0)
function wv(n, e, t) {
  if (n.readOnly) return !1
  let i = []
  for (let r of Rl(n))
    t
      ? i.push({
          from: r.from,
          insert: n.doc.slice(r.from, r.to) + n.lineBreak
        })
      : i.push({ from: r.to, insert: n.lineBreak + n.doc.slice(r.from, r.to) })
  return (
    e(
      n.update({ changes: i, scrollIntoView: !0, userEvent: 'input.copyline' })
    ),
    !0
  )
}
const JA = ({ state: n, dispatch: e }) => wv(n, e, !1),
  eR = ({ state: n, dispatch: e }) => wv(n, e, !0),
  tR = (n) => {
    if (n.state.readOnly) return !1
    let { state: e } = n,
      t = e.changes(
        Rl(e).map(
          ({ from: r, to: s }) => (
            r > 0 ? r-- : s < e.doc.length && s++, { from: r, to: s }
          )
        )
      ),
      i = dr(e.selection, (r) => n.moveVertically(r, !0)).map(t)
    return (
      n.dispatch({
        changes: t,
        selection: i,
        scrollIntoView: !0,
        userEvent: 'delete.line'
      }),
      !0
    )
  }
function nR(n, e) {
  if (/\(\)|\[\]|\{\}/.test(n.sliceDoc(e - 1, e + 1))) return { from: e, to: e }
  let t = Ze(n).resolveInner(e),
    i = t.childBefore(e),
    r = t.childAfter(e),
    s
  return i &&
    r &&
    i.to <= e &&
    r.from >= e &&
    (s = i.type.prop(se.closedBy)) &&
    s.indexOf(r.name) > -1 &&
    n.doc.lineAt(i.to).from == n.doc.lineAt(r.from).from &&
    !/\S/.test(n.sliceDoc(i.to, r.from))
    ? { from: i.to, to: r.from }
    : null
}
const iR = /* @__PURE__ */ $v(!1),
  rR = /* @__PURE__ */ $v(!0)
function $v(n) {
  return ({ state: e, dispatch: t }) => {
    if (e.readOnly) return !1
    let i = e.changeByRange((r) => {
      let { from: s, to: o } = r,
        a = e.doc.lineAt(s),
        l = !n && s == o && nR(e, s)
      n && (s = o = (o <= a.to ? a : e.doc.lineAt(o)).to)
      let c = new Ql(e, { simulateBreak: s, simulateDoubleBreak: !!l }),
        u = Jf(c, s)
      for (
        u == null && (u = fr(/^\s*/.exec(e.doc.lineAt(s).text)[0], e.tabSize));
        o < a.to && /\s/.test(a.text[o - a.from]);

      )
        o++
      l
        ? ({ from: s, to: o } = l)
        : s > a.from &&
          s < a.from + 100 &&
          !/\S/.test(a.text.slice(0, s)) &&
          (s = a.from)
      let f = ['', fs(e, u)]
      return (
        l && f.push(fs(e, c.lineIndent(a.from, -1))),
        {
          changes: { from: s, to: o, insert: ue.of(f) },
          range: _.cursor(s + 1 + f[1].length)
        }
      )
    })
    return t(e.update(i, { scrollIntoView: !0, userEvent: 'input' })), !0
  }
}
function sh(n, e) {
  let t = -1
  return n.changeByRange((i) => {
    let r = []
    for (let o = i.from; o <= i.to; ) {
      let a = n.doc.lineAt(o)
      a.number > t &&
        (i.empty || i.to > a.from) &&
        (e(a, r, i), (t = a.number)),
        (o = a.to + 1)
    }
    let s = n.changes(r)
    return {
      changes: r,
      range: _.range(s.mapPos(i.anchor, 1), s.mapPos(i.head, 1))
    }
  })
}
const sR = ({ state: n, dispatch: e }) => {
    if (n.readOnly) return !1
    let t = /* @__PURE__ */ Object.create(null),
      i = new Ql(n, {
        overrideIndentation: (s) => {
          let o = t[s]
          return o ?? -1
        }
      }),
      r = sh(n, (s, o, a) => {
        let l = Jf(i, s.from)
        if (l == null) return
        ;/\S/.test(s.text) || (l = 0)
        let c = /^\s*/.exec(s.text)[0],
          u = fs(n, l)
        ;(c != u || a.from < s.from + c.length) &&
          ((t[s.from] = l),
          o.push({ from: s.from, to: s.from + c.length, insert: u }))
      })
    return r.changes.empty || e(n.update(r, { userEvent: 'indent' })), !0
  },
  Pv = ({ state: n, dispatch: e }) =>
    n.readOnly
      ? !1
      : (e(
          n.update(
            sh(n, (t, i) => {
              i.push({ from: t.from, insert: n.facet(Zs) })
            }),
            { userEvent: 'input.indent' }
          )
        ),
        !0),
  Qv = ({ state: n, dispatch: e }) =>
    n.readOnly
      ? !1
      : (e(
          n.update(
            sh(n, (t, i) => {
              let r = /^\s*/.exec(t.text)[0]
              if (!r) return
              let s = fr(r, n.tabSize),
                o = 0,
                a = fs(n, Math.max(0, s - Ia(n)))
              for (
                ;
                o < r.length &&
                o < a.length &&
                r.charCodeAt(o) == a.charCodeAt(o);

              )
                o++
              i.push({
                from: t.from + o,
                to: t.from + r.length,
                insert: a.slice(o)
              })
            }),
            { userEvent: 'delete.dedent' }
          )
        ),
        !0),
  oR = [
    { key: 'Ctrl-b', run: nv, shift: fv, preventDefault: !0 },
    { key: 'Ctrl-f', run: iv, shift: hv },
    { key: 'Ctrl-p', run: ov, shift: Ov },
    { key: 'Ctrl-n', run: av, shift: gv },
    { key: 'Ctrl-a', run: kA, shift: NA },
    { key: 'Ctrl-e', run: TA, shift: MA },
    { key: 'Ctrl-d', run: bv },
    { key: 'Ctrl-h', run: af },
    { key: 'Ctrl-k', run: UA },
    { key: 'Ctrl-Alt-h', run: Sv },
    { key: 'Ctrl-o', run: FA },
    { key: 'Ctrl-t', run: GA },
    { key: 'Ctrl-v', run: of }
  ],
  aR = /* @__PURE__ */ [
    { key: 'ArrowLeft', run: nv, shift: fv, preventDefault: !0 },
    {
      key: 'Mod-ArrowLeft',
      mac: 'Alt-ArrowLeft',
      run: yA,
      shift: ZA,
      preventDefault: !0
    },
    { mac: 'Cmd-ArrowLeft', run: PA, shift: YA, preventDefault: !0 },
    { key: 'ArrowRight', run: iv, shift: hv, preventDefault: !0 },
    {
      key: 'Mod-ArrowRight',
      mac: 'Alt-ArrowRight',
      run: bA,
      shift: AA,
      preventDefault: !0
    },
    { mac: 'Cmd-ArrowRight', run: QA, shift: IA, preventDefault: !0 },
    { key: 'ArrowUp', run: ov, shift: Ov, preventDefault: !0 },
    { mac: 'Cmd-ArrowUp', run: $O, shift: QO },
    { mac: 'Ctrl-ArrowUp', run: SO, shift: xO },
    { key: 'ArrowDown', run: av, shift: gv, preventDefault: !0 },
    { mac: 'Cmd-ArrowDown', run: PO, shift: kO },
    { mac: 'Ctrl-ArrowDown', run: of, shift: wO },
    { key: 'PageUp', run: SO, shift: xO },
    { key: 'PageDown', run: of, shift: wO },
    { key: 'Home', run: $A, shift: XA, preventDefault: !0 },
    { key: 'Mod-Home', run: $O, shift: QO },
    { key: 'End', run: wA, shift: DA, preventDefault: !0 },
    { key: 'Mod-End', run: PO, shift: kO },
    { key: 'Enter', run: iR },
    { key: 'Mod-a', run: VA },
    { key: 'Backspace', run: af, shift: af },
    { key: 'Delete', run: bv },
    { key: 'Mod-Backspace', mac: 'Alt-Backspace', run: Sv },
    { key: 'Mod-Delete', mac: 'Alt-Delete', run: LA },
    { mac: 'Mod-Backspace', run: qA },
    { mac: 'Mod-Delete', run: zA }
  ].concat(
    /* @__PURE__ */ oR.map((n) => ({ mac: n.key, run: n.run, shift: n.shift }))
  ),
  lR = /* @__PURE__ */ [
    { key: 'Alt-ArrowLeft', mac: 'Ctrl-ArrowLeft', run: SA, shift: RA },
    { key: 'Alt-ArrowRight', mac: 'Ctrl-ArrowRight', run: xA, shift: EA },
    { key: 'Alt-ArrowUp', run: HA },
    { key: 'Shift-Alt-ArrowUp', run: JA },
    { key: 'Alt-ArrowDown', run: KA },
    { key: 'Shift-Alt-ArrowDown', run: eR },
    { key: 'Escape', run: BA },
    { key: 'Mod-Enter', run: rR },
    { key: 'Alt-l', mac: 'Ctrl-l', run: WA },
    { key: 'Mod-i', run: jA, preventDefault: !0 },
    { key: 'Mod-[', run: Qv },
    { key: 'Mod-]', run: Pv },
    { key: 'Mod-Alt-\\', run: sR },
    { key: 'Shift-Mod-k', run: tR },
    { key: 'Shift-Mod-\\', run: _A },
    { key: 'Mod-/', run: KZ },
    { key: 'Alt-A', run: eA }
  ].concat(aR),
  cR = { key: 'Tab', run: Pv, shift: Qv }
function ge() {
  var n = arguments[0]
  typeof n == 'string' && (n = document.createElement(n))
  var e = 1,
    t = arguments[1]
  if (t && typeof t == 'object' && t.nodeType == null && !Array.isArray(t)) {
    for (var i in t)
      if (Object.prototype.hasOwnProperty.call(t, i)) {
        var r = t[i]
        typeof r == 'string' ? n.setAttribute(i, r) : r != null && (n[i] = r)
      }
    e++
  }
  for (; e < arguments.length; e++) kv(n, arguments[e])
  return n
}
function kv(n, e) {
  if (typeof e == 'string') n.appendChild(document.createTextNode(e))
  else if (e != null)
    if (e.nodeType != null) n.appendChild(e)
    else if (Array.isArray(e)) for (var t = 0; t < e.length; t++) kv(n, e[t])
    else throw new RangeError('Unsupported child node: ' + e)
}
const TO =
  typeof String.prototype.normalize == 'function'
    ? (n) => n.normalize('NFKD')
    : (n) => n
class sr {
  /**
  Create a text cursor. The query is the search string, `from` to
  `to` provides the region to search.
  
  When `normalize` is given, it will be called, on both the query
  string and the content it is matched against, before comparing.
  You can, for example, create a case-insensitive search by
  passing `s => s.toLowerCase()`.
  
  Text is always normalized with
  [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
  (when supported).
  */
  constructor(e, t, i = 0, r = e.length, s, o) {
    ;(this.test = o),
      (this.value = { from: 0, to: 0 }),
      (this.done = !1),
      (this.matches = []),
      (this.buffer = ''),
      (this.bufferPos = 0),
      (this.iter = e.iterRange(i, r)),
      (this.bufferStart = i),
      (this.normalize = s ? (a) => s(TO(a)) : TO),
      (this.query = this.normalize(t))
  }
  peek() {
    if (this.bufferPos == this.buffer.length) {
      if (
        ((this.bufferStart += this.buffer.length),
        this.iter.next(),
        this.iter.done)
      )
        return -1
      ;(this.bufferPos = 0), (this.buffer = this.iter.value)
    }
    return qe(this.buffer, this.bufferPos)
  }
  /**
  Look for the next match. Updates the iterator's
  [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
  [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
  at least once before using the cursor.
  */
  next() {
    for (; this.matches.length; ) this.matches.pop()
    return this.nextOverlapping()
  }
  /**
  The `next` method will ignore matches that partially overlap a
  previous match. This method behaves like `next`, but includes
  such matches.
  */
  nextOverlapping() {
    for (;;) {
      let e = this.peek()
      if (e < 0) return (this.done = !0), this
      let t = Xf(e),
        i = this.bufferStart + this.bufferPos
      this.bufferPos += Ct(e)
      let r = this.normalize(t)
      for (let s = 0, o = i; ; s++) {
        let a = r.charCodeAt(s),
          l = this.match(a, o)
        if (s == r.length - 1) {
          if (l) return (this.value = l), this
          break
        }
        o == i && s < t.length && t.charCodeAt(s) == a && o++
      }
    }
  }
  match(e, t) {
    let i = null
    for (let r = 0; r < this.matches.length; r += 2) {
      let s = this.matches[r],
        o = !1
      this.query.charCodeAt(s) == e &&
        (s == this.query.length - 1
          ? (i = { from: this.matches[r + 1], to: t + 1 })
          : (this.matches[r]++, (o = !0))),
        o || (this.matches.splice(r, 2), (r -= 2))
    }
    return (
      this.query.charCodeAt(0) == e &&
        (this.query.length == 1
          ? (i = { from: t, to: t + 1 })
          : this.matches.push(1, t)),
      i &&
        this.test &&
        !this.test(i.from, i.to, this.buffer, this.bufferStart) &&
        (i = null),
      i
    )
  }
}
typeof Symbol < 'u' &&
  (sr.prototype[Symbol.iterator] = function () {
    return this
  })
const Tv = { from: -1, to: -1, match: /* @__PURE__ */ /.*/.exec('') },
  oh = 'gm' + (/x/.unicode == null ? '' : 'u')
class Cv {
  /**
  Create a cursor that will search the given range in the given
  document. `query` should be the raw pattern (as you'd pass it to
  `new RegExp`).
  */
  constructor(e, t, i, r = 0, s = e.length) {
    if (
      ((this.text = e),
      (this.to = s),
      (this.curLine = ''),
      (this.done = !1),
      (this.value = Tv),
      /\\[sWDnr]|\n|\r|\[\^/.test(t))
    )
      return new _v(e, t, i, r, s)
    ;(this.re = new RegExp(t, oh + (i != null && i.ignoreCase ? 'i' : ''))),
      (this.test = i == null ? void 0 : i.test),
      (this.iter = e.iter())
    let o = e.lineAt(r)
    ;(this.curLineStart = o.from),
      (this.matchPos = Wa(e, r)),
      this.getLine(this.curLineStart)
  }
  getLine(e) {
    this.iter.next(e),
      this.iter.lineBreak
        ? (this.curLine = '')
        : ((this.curLine = this.iter.value),
          this.curLineStart + this.curLine.length > this.to &&
            (this.curLine = this.curLine.slice(0, this.to - this.curLineStart)),
          this.iter.next())
  }
  nextLine() {
    ;(this.curLineStart = this.curLineStart + this.curLine.length + 1),
      this.curLineStart > this.to ? (this.curLine = '') : this.getLine(0)
  }
  /**
  Move to the next match, if there is one.
  */
  next() {
    for (let e = this.matchPos - this.curLineStart; ; ) {
      this.re.lastIndex = e
      let t = this.matchPos <= this.to && this.re.exec(this.curLine)
      if (t) {
        let i = this.curLineStart + t.index,
          r = i + t[0].length
        if (
          ((this.matchPos = Wa(this.text, r + (i == r ? 1 : 0))),
          i == this.curLineStart + this.curLine.length && this.nextLine(),
          (i < r || i > this.value.to) && (!this.test || this.test(i, r, t)))
        )
          return (this.value = { from: i, to: r, match: t }), this
        e = this.matchPos - this.curLineStart
      } else if (this.curLineStart + this.curLine.length < this.to)
        this.nextLine(), (e = 0)
      else return (this.done = !0), this
    }
  }
}
const xc = /* @__PURE__ */ new WeakMap()
class qi {
  constructor(e, t) {
    ;(this.from = e), (this.text = t)
  }
  get to() {
    return this.from + this.text.length
  }
  static get(e, t, i) {
    let r = xc.get(e)
    if (!r || r.from >= i || r.to <= t) {
      let a = new qi(t, e.sliceString(t, i))
      return xc.set(e, a), a
    }
    if (r.from == t && r.to == i) return r
    let { text: s, from: o } = r
    return (
      o > t && ((s = e.sliceString(t, o) + s), (o = t)),
      r.to < i && (s += e.sliceString(r.to, i)),
      xc.set(e, new qi(o, s)),
      new qi(t, s.slice(t - o, i - o))
    )
  }
}
class _v {
  constructor(e, t, i, r, s) {
    ;(this.text = e),
      (this.to = s),
      (this.done = !1),
      (this.value = Tv),
      (this.matchPos = Wa(e, r)),
      (this.re = new RegExp(t, oh + (i != null && i.ignoreCase ? 'i' : ''))),
      (this.test = i == null ? void 0 : i.test),
      (this.flat = qi.get(
        e,
        r,
        this.chunkEnd(
          r + 5e3
          /* Chunk.Base */
        )
      ))
  }
  chunkEnd(e) {
    return e >= this.to ? this.to : this.text.lineAt(e).to
  }
  next() {
    for (;;) {
      let e = (this.re.lastIndex = this.matchPos - this.flat.from),
        t = this.re.exec(this.flat.text)
      if (
        (t &&
          !t[0] &&
          t.index == e &&
          ((this.re.lastIndex = e + 1), (t = this.re.exec(this.flat.text))),
        t)
      ) {
        let i = this.flat.from + t.index,
          r = i + t[0].length
        if (
          (this.flat.to >= this.to ||
            t.index + t[0].length <= this.flat.text.length - 10) &&
          (!this.test || this.test(i, r, t))
        )
          return (
            (this.value = { from: i, to: r, match: t }),
            (this.matchPos = Wa(this.text, r + (i == r ? 1 : 0))),
            this
          )
      }
      if (this.flat.to == this.to) return (this.done = !0), this
      this.flat = qi.get(
        this.text,
        this.flat.from,
        this.chunkEnd(this.flat.from + this.flat.text.length * 2)
      )
    }
  }
}
typeof Symbol < 'u' &&
  (Cv.prototype[Symbol.iterator] = _v.prototype[Symbol.iterator] =
    function () {
      return this
    })
function uR(n) {
  try {
    return new RegExp(n, oh), !0
  } catch {
    return !1
  }
}
function Wa(n, e) {
  if (e >= n.length) return e
  let t = n.lineAt(e),
    i
  for (
    ;
    e < t.to && (i = t.text.charCodeAt(e - t.from)) >= 56320 && i < 57344;

  )
    e++
  return e
}
function lf(n) {
  let e = String(n.state.doc.lineAt(n.state.selection.main.head).number),
    t = ge('input', { class: 'cm-textfield', name: 'line', value: e }),
    i = ge(
      'form',
      {
        class: 'cm-gotoLine',
        onkeydown: (s) => {
          s.keyCode == 27
            ? (s.preventDefault(),
              n.dispatch({ effects: ja.of(!1) }),
              n.focus())
            : s.keyCode == 13 && (s.preventDefault(), r())
        },
        onsubmit: (s) => {
          s.preventDefault(), r()
        }
      },
      ge('label', n.state.phrase('Go to line'), ': ', t),
      ' ',
      ge('button', { class: 'cm-button', type: 'submit' }, n.state.phrase('go'))
    )
  function r() {
    let s = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(t.value)
    if (!s) return
    let { state: o } = n,
      a = o.doc.lineAt(o.selection.main.head),
      [, l, c, u, f] = s,
      h = u ? +u.slice(1) : 0,
      d = c ? +c : a.number
    if (c && f) {
      let b = d / 100
      l && (b = b * (l == '-' ? -1 : 1) + a.number / o.doc.lines),
        (d = Math.round(o.doc.lines * b))
    } else c && l && (d = d * (l == '-' ? -1 : 1) + a.number)
    let O = o.doc.line(Math.max(1, Math.min(o.doc.lines, d))),
      m = _.cursor(O.from + Math.max(0, Math.min(h, O.length)))
    n.dispatch({
      effects: [ja.of(!1), M.scrollIntoView(m.from, { y: 'center' })],
      selection: m
    }),
      n.focus()
  }
  return { dom: i }
}
const ja = /* @__PURE__ */ ne.define(),
  CO = /* @__PURE__ */ We.define({
    create() {
      return !0
    },
    update(n, e) {
      for (let t of e.effects) t.is(ja) && (n = t.value)
      return n
    },
    provide: (n) => ls.from(n, (e) => (e ? lf : null))
  }),
  fR = (n) => {
    let e = as(n, lf)
    if (!e) {
      let t = [ja.of(!0)]
      n.state.field(CO, !1) == null && t.push(ne.appendConfig.of([CO, hR])),
        n.dispatch({ effects: t }),
        (e = as(n, lf))
    }
    return e && e.dom.querySelector('input').select(), !0
  },
  hR = /* @__PURE__ */ M.baseTheme({
    '.cm-panel.cm-gotoLine': {
      padding: '2px 6px 4px',
      '& label': { fontSize: '80%' }
    }
  }),
  dR = {
    highlightWordAroundCursor: !1,
    minSelectionLength: 1,
    maxMatches: 100,
    wholeWords: !1
  },
  Zv = /* @__PURE__ */ q.define({
    combine(n) {
      return cn(n, dR, {
        highlightWordAroundCursor: (e, t) => e || t,
        minSelectionLength: Math.min,
        maxMatches: Math.min
      })
    }
  })
function pR(n) {
  let e = [bR, yR]
  return n && e.push(Zv.of(n)), e
}
const OR = /* @__PURE__ */ K.mark({ class: 'cm-selectionMatch' }),
  gR = /* @__PURE__ */ K.mark({
    class: 'cm-selectionMatch cm-selectionMatch-main'
  })
function _O(n, e, t, i) {
  return (
    (t == 0 || n(e.sliceDoc(t - 1, t)) != we.Word) &&
    (i == e.doc.length || n(e.sliceDoc(i, i + 1)) != we.Word)
  )
}
function mR(n, e, t, i) {
  return (
    n(e.sliceDoc(t, t + 1)) == we.Word && n(e.sliceDoc(i - 1, i)) == we.Word
  )
}
const yR = /* @__PURE__ */ Re.fromClass(
    class {
      constructor(n) {
        this.decorations = this.getDeco(n)
      }
      update(n) {
        ;(n.selectionSet || n.docChanged || n.viewportChanged) &&
          (this.decorations = this.getDeco(n.view))
      }
      getDeco(n) {
        let e = n.state.facet(Zv),
          { state: t } = n,
          i = t.selection
        if (i.ranges.length > 1) return K.none
        let r = i.main,
          s,
          o = null
        if (r.empty) {
          if (!e.highlightWordAroundCursor) return K.none
          let l = t.wordAt(r.head)
          if (!l) return K.none
          ;(o = t.charCategorizer(r.head)), (s = t.sliceDoc(l.from, l.to))
        } else {
          let l = r.to - r.from
          if (l < e.minSelectionLength || l > 200) return K.none
          if (e.wholeWords) {
            if (
              ((s = t.sliceDoc(r.from, r.to)),
              (o = t.charCategorizer(r.head)),
              !(_O(o, t, r.from, r.to) && mR(o, t, r.from, r.to)))
            )
              return K.none
          } else if (((s = t.sliceDoc(r.from, r.to).trim()), !s)) return K.none
        }
        let a = []
        for (let l of n.visibleRanges) {
          let c = new sr(t.doc, s, l.from, l.to)
          for (; !c.next().done; ) {
            let { from: u, to: f } = c.value
            if (
              (!o || _O(o, t, u, f)) &&
              (r.empty && u <= r.from && f >= r.to
                ? a.push(gR.range(u, f))
                : (u >= r.to || f <= r.from) && a.push(OR.range(u, f)),
              a.length > e.maxMatches)
            )
              return K.none
          }
        }
        return K.set(a)
      }
    },
    {
      decorations: (n) => n.decorations
    }
  ),
  bR = /* @__PURE__ */ M.baseTheme({
    '.cm-selectionMatch': { backgroundColor: '#99ff7780' },
    '.cm-searchMatch .cm-selectionMatch': { backgroundColor: 'transparent' }
  }),
  vR = ({ state: n, dispatch: e }) => {
    let { selection: t } = n,
      i = _.create(
        t.ranges.map((r) => n.wordAt(r.head) || _.cursor(r.head)),
        t.mainIndex
      )
    return i.eq(t) ? !1 : (e(n.update({ selection: i })), !0)
  }
function SR(n, e) {
  let { main: t, ranges: i } = n.selection,
    r = n.wordAt(t.head),
    s = r && r.from == t.from && r.to == t.to
  for (let o = !1, a = new sr(n.doc, e, i[i.length - 1].to); ; )
    if ((a.next(), a.done)) {
      if (o) return null
      ;(a = new sr(n.doc, e, 0, Math.max(0, i[i.length - 1].from - 1))),
        (o = !0)
    } else {
      if (o && i.some((l) => l.from == a.value.from)) continue
      if (s) {
        let l = n.wordAt(a.value.from)
        if (!l || l.from != a.value.from || l.to != a.value.to) continue
      }
      return a.value
    }
}
const xR = ({ state: n, dispatch: e }) => {
    let { ranges: t } = n.selection
    if (t.some((s) => s.from === s.to)) return vR({ state: n, dispatch: e })
    let i = n.sliceDoc(t[0].from, t[0].to)
    if (n.selection.ranges.some((s) => n.sliceDoc(s.from, s.to) != i)) return !1
    let r = SR(n, i)
    return r
      ? (e(
          n.update({
            selection: n.selection.addRange(_.range(r.from, r.to), !1),
            effects: M.scrollIntoView(r.to)
          })
        ),
        !0)
      : !1
  },
  pr = /* @__PURE__ */ q.define({
    combine(n) {
      return cn(n, {
        top: !1,
        caseSensitive: !1,
        literal: !1,
        regexp: !1,
        wholeWord: !1,
        createPanel: (e) => new ER(e),
        scrollToMatch: (e) => M.scrollIntoView(e)
      })
    }
  })
class Av {
  /**
  Create a query object.
  */
  constructor(e) {
    ;(this.search = e.search),
      (this.caseSensitive = !!e.caseSensitive),
      (this.literal = !!e.literal),
      (this.regexp = !!e.regexp),
      (this.replace = e.replace || ''),
      (this.valid = !!this.search && (!this.regexp || uR(this.search))),
      (this.unquoted = this.unquote(this.search)),
      (this.wholeWord = !!e.wholeWord)
  }
  /**
  @internal
  */
  unquote(e) {
    return this.literal
      ? e
      : e.replace(/\\([nrt\\])/g, (t, i) =>
          i == 'n'
            ? `
`
            : i == 'r'
              ? '\r'
              : i == 't'
                ? '	'
                : '\\'
        )
  }
  /**
  Compare this query to another query.
  */
  eq(e) {
    return (
      this.search == e.search &&
      this.replace == e.replace &&
      this.caseSensitive == e.caseSensitive &&
      this.regexp == e.regexp &&
      this.wholeWord == e.wholeWord
    )
  }
  /**
  @internal
  */
  create() {
    return this.regexp ? new QR(this) : new $R(this)
  }
  /**
  Get a search cursor for this query, searching through the given
  range in the given state.
  */
  getCursor(e, t = 0, i) {
    let r = e.doc ? e : oe.create({ doc: e })
    return (
      i == null && (i = r.doc.length),
      this.regexp ? Xi(this, r, t, i) : Di(this, r, t, i)
    )
  }
}
class Rv {
  constructor(e) {
    this.spec = e
  }
}
function Di(n, e, t, i) {
  return new sr(
    e.doc,
    n.unquoted,
    t,
    i,
    n.caseSensitive ? void 0 : (r) => r.toLowerCase(),
    n.wholeWord ? wR(e.doc, e.charCategorizer(e.selection.main.head)) : void 0
  )
}
function wR(n, e) {
  return (t, i, r, s) => (
    (s > t || s + r.length < i) &&
      ((s = Math.max(0, t - 2)),
      (r = n.sliceString(s, Math.min(n.length, i + 2)))),
    (e(Ba(r, t - s)) != we.Word || e(La(r, t - s)) != we.Word) &&
      (e(La(r, i - s)) != we.Word || e(Ba(r, i - s)) != we.Word)
  )
}
class $R extends Rv {
  constructor(e) {
    super(e)
  }
  nextMatch(e, t, i) {
    let r = Di(this.spec, e, i, e.doc.length).nextOverlapping()
    return (
      r.done && (r = Di(this.spec, e, 0, t).nextOverlapping()),
      r.done ? null : r.value
    )
  }
  // Searching in reverse is, rather than implementing an inverted search
  // cursor, done by scanning chunk after chunk forward.
  prevMatchInRange(e, t, i) {
    for (let r = i; ; ) {
      let s = Math.max(t, r - 1e4 - this.spec.unquoted.length),
        o = Di(this.spec, e, s, r),
        a = null
      for (; !o.nextOverlapping().done; ) a = o.value
      if (a) return a
      if (s == t) return null
      r -= 1e4
    }
  }
  prevMatch(e, t, i) {
    return (
      this.prevMatchInRange(e, 0, t) ||
      this.prevMatchInRange(e, i, e.doc.length)
    )
  }
  getReplacement(e) {
    return this.spec.unquote(this.spec.replace)
  }
  matchAll(e, t) {
    let i = Di(this.spec, e, 0, e.doc.length),
      r = []
    for (; !i.next().done; ) {
      if (r.length >= t) return null
      r.push(i.value)
    }
    return r
  }
  highlight(e, t, i, r) {
    let s = Di(
      this.spec,
      e,
      Math.max(0, t - this.spec.unquoted.length),
      Math.min(i + this.spec.unquoted.length, e.doc.length)
    )
    for (; !s.next().done; ) r(s.value.from, s.value.to)
  }
}
function Xi(n, e, t, i) {
  return new Cv(
    e.doc,
    n.search,
    {
      ignoreCase: !n.caseSensitive,
      test: n.wholeWord ? PR(e.charCategorizer(e.selection.main.head)) : void 0
    },
    t,
    i
  )
}
function Ba(n, e) {
  return n.slice(et(n, e, !1), e)
}
function La(n, e) {
  return n.slice(e, et(n, e))
}
function PR(n) {
  return (e, t, i) =>
    !i[0].length ||
    ((n(Ba(i.input, i.index)) != we.Word ||
      n(La(i.input, i.index)) != we.Word) &&
      (n(La(i.input, i.index + i[0].length)) != we.Word ||
        n(Ba(i.input, i.index + i[0].length)) != we.Word))
}
class QR extends Rv {
  nextMatch(e, t, i) {
    let r = Xi(this.spec, e, i, e.doc.length).next()
    return (
      r.done && (r = Xi(this.spec, e, 0, t).next()), r.done ? null : r.value
    )
  }
  prevMatchInRange(e, t, i) {
    for (let r = 1; ; r++) {
      let s = Math.max(
          t,
          i - r * 1e4
          /* FindPrev.ChunkSize */
        ),
        o = Xi(this.spec, e, s, i),
        a = null
      for (; !o.next().done; ) a = o.value
      if (a && (s == t || a.from > s + 10)) return a
      if (s == t) return null
    }
  }
  prevMatch(e, t, i) {
    return (
      this.prevMatchInRange(e, 0, t) ||
      this.prevMatchInRange(e, i, e.doc.length)
    )
  }
  getReplacement(e) {
    return this.spec.unquote(
      this.spec.replace.replace(/\$([$&\d+])/g, (t, i) =>
        i == '$'
          ? '$'
          : i == '&'
            ? e.match[0]
            : i != '0' && +i < e.match.length
              ? e.match[i]
              : t
      )
    )
  }
  matchAll(e, t) {
    let i = Xi(this.spec, e, 0, e.doc.length),
      r = []
    for (; !i.next().done; ) {
      if (r.length >= t) return null
      r.push(i.value)
    }
    return r
  }
  highlight(e, t, i, r) {
    let s = Xi(
      this.spec,
      e,
      Math.max(
        0,
        t - 250
        /* RegExp.HighlightMargin */
      ),
      Math.min(i + 250, e.doc.length)
    )
    for (; !s.next().done; ) r(s.value.from, s.value.to)
  }
}
const hs = /* @__PURE__ */ ne.define(),
  ah = /* @__PURE__ */ ne.define(),
  Bn = /* @__PURE__ */ We.define({
    create(n) {
      return new wc(cf(n).create(), null)
    },
    update(n, e) {
      for (let t of e.effects)
        t.is(hs)
          ? (n = new wc(t.value.create(), n.panel))
          : t.is(ah) && (n = new wc(n.query, t.value ? lh : null))
      return n
    },
    provide: (n) => ls.from(n, (e) => e.panel)
  })
class wc {
  constructor(e, t) {
    ;(this.query = e), (this.panel = t)
  }
}
const kR = /* @__PURE__ */ K.mark({ class: 'cm-searchMatch' }),
  TR = /* @__PURE__ */ K.mark({
    class: 'cm-searchMatch cm-searchMatch-selected'
  }),
  CR = /* @__PURE__ */ Re.fromClass(
    class {
      constructor(n) {
        ;(this.view = n), (this.decorations = this.highlight(n.state.field(Bn)))
      }
      update(n) {
        let e = n.state.field(Bn)
        ;(e != n.startState.field(Bn) ||
          n.docChanged ||
          n.selectionSet ||
          n.viewportChanged) &&
          (this.decorations = this.highlight(e))
      }
      highlight({ query: n, panel: e }) {
        if (!e || !n.spec.valid) return K.none
        let { view: t } = this,
          i = new zn()
        for (let r = 0, s = t.visibleRanges, o = s.length; r < o; r++) {
          let { from: a, to: l } = s[r]
          for (; r < o - 1 && l > s[r + 1].from - 2 * 250; ) l = s[++r].to
          n.highlight(t.state, a, l, (c, u) => {
            let f = t.state.selection.ranges.some(
              (h) => h.from == c && h.to == u
            )
            i.add(c, u, f ? TR : kR)
          })
        }
        return i.finish()
      }
    },
    {
      decorations: (n) => n.decorations
    }
  )
function Es(n) {
  return (e) => {
    let t = e.state.field(Bn, !1)
    return t && t.query.spec.valid ? n(e, t) : Xv(e)
  }
}
const Ua = /* @__PURE__ */ Es((n, { query: e }) => {
    let { to: t } = n.state.selection.main,
      i = e.nextMatch(n.state, t, t)
    if (!i) return !1
    let r = _.single(i.from, i.to),
      s = n.state.facet(pr)
    return (
      n.dispatch({
        selection: r,
        effects: [ch(n, i), s.scrollToMatch(r.main, n)],
        userEvent: 'select.search'
      }),
      Dv(n),
      !0
    )
  }),
  qa = /* @__PURE__ */ Es((n, { query: e }) => {
    let { state: t } = n,
      { from: i } = t.selection.main,
      r = e.prevMatch(t, i, i)
    if (!r) return !1
    let s = _.single(r.from, r.to),
      o = n.state.facet(pr)
    return (
      n.dispatch({
        selection: s,
        effects: [ch(n, r), o.scrollToMatch(s.main, n)],
        userEvent: 'select.search'
      }),
      Dv(n),
      !0
    )
  }),
  _R = /* @__PURE__ */ Es((n, { query: e }) => {
    let t = e.matchAll(n.state, 1e3)
    return !t || !t.length
      ? !1
      : (n.dispatch({
          selection: _.create(t.map((i) => _.range(i.from, i.to))),
          userEvent: 'select.search.matches'
        }),
        !0)
  }),
  ZR = ({ state: n, dispatch: e }) => {
    let t = n.selection
    if (t.ranges.length > 1 || t.main.empty) return !1
    let { from: i, to: r } = t.main,
      s = [],
      o = 0
    for (let a = new sr(n.doc, n.sliceDoc(i, r)); !a.next().done; ) {
      if (s.length > 1e3) return !1
      a.value.from == i && (o = s.length),
        s.push(_.range(a.value.from, a.value.to))
    }
    return (
      e(
        n.update({
          selection: _.create(s, o),
          userEvent: 'select.search.matches'
        })
      ),
      !0
    )
  },
  ZO = /* @__PURE__ */ Es((n, { query: e }) => {
    let { state: t } = n,
      { from: i, to: r } = t.selection.main
    if (t.readOnly) return !1
    let s = e.nextMatch(t, i, i)
    if (!s) return !1
    let o = [],
      a,
      l,
      c = []
    if (
      (s.from == i &&
        s.to == r &&
        ((l = t.toText(e.getReplacement(s))),
        o.push({ from: s.from, to: s.to, insert: l }),
        (s = e.nextMatch(t, s.from, s.to)),
        c.push(
          M.announce.of(
            t.phrase('replaced match on line $', t.doc.lineAt(i).number) + '.'
          )
        )),
      s)
    ) {
      let u = o.length == 0 || o[0].from >= s.to ? 0 : s.to - s.from - l.length
      ;(a = _.single(s.from - u, s.to - u)),
        c.push(ch(n, s)),
        c.push(t.facet(pr).scrollToMatch(a.main, n))
    }
    return (
      n.dispatch({
        changes: o,
        selection: a,
        effects: c,
        userEvent: 'input.replace'
      }),
      !0
    )
  }),
  AR = /* @__PURE__ */ Es((n, { query: e }) => {
    if (n.state.readOnly) return !1
    let t = e.matchAll(n.state, 1e9).map((r) => {
      let { from: s, to: o } = r
      return { from: s, to: o, insert: e.getReplacement(r) }
    })
    if (!t.length) return !1
    let i = n.state.phrase('replaced $ matches', t.length) + '.'
    return (
      n.dispatch({
        changes: t,
        effects: M.announce.of(i),
        userEvent: 'input.replace.all'
      }),
      !0
    )
  })
function lh(n) {
  return n.state.facet(pr).createPanel(n)
}
function cf(n, e) {
  var t, i, r, s, o
  let a = n.selection.main,
    l = a.empty || a.to > a.from + 100 ? '' : n.sliceDoc(a.from, a.to)
  if (e && !l) return e
  let c = n.facet(pr)
  return new Av({
    search: (
      (t = e == null ? void 0 : e.literal) !== null && t !== void 0
        ? t
        : c.literal
    )
      ? l
      : l.replace(/\n/g, '\\n'),
    caseSensitive:
      (i = e == null ? void 0 : e.caseSensitive) !== null && i !== void 0
        ? i
        : c.caseSensitive,
    literal:
      (r = e == null ? void 0 : e.literal) !== null && r !== void 0
        ? r
        : c.literal,
    regexp:
      (s = e == null ? void 0 : e.regexp) !== null && s !== void 0
        ? s
        : c.regexp,
    wholeWord:
      (o = e == null ? void 0 : e.wholeWord) !== null && o !== void 0
        ? o
        : c.wholeWord
  })
}
function Ev(n) {
  let e = as(n, lh)
  return e && e.dom.querySelector('[main-field]')
}
function Dv(n) {
  let e = Ev(n)
  e && e == n.root.activeElement && e.select()
}
const Xv = (n) => {
    let e = n.state.field(Bn, !1)
    if (e && e.panel) {
      let t = Ev(n)
      if (t && t != n.root.activeElement) {
        let i = cf(n.state, e.query.spec)
        i.valid && n.dispatch({ effects: hs.of(i) }), t.focus(), t.select()
      }
    } else
      n.dispatch({
        effects: [
          ah.of(!0),
          e ? hs.of(cf(n.state, e.query.spec)) : ne.appendConfig.of(XR)
        ]
      })
    return !0
  },
  Yv = (n) => {
    let e = n.state.field(Bn, !1)
    if (!e || !e.panel) return !1
    let t = as(n, lh)
    return (
      t && t.dom.contains(n.root.activeElement) && n.focus(),
      n.dispatch({ effects: ah.of(!1) }),
      !0
    )
  },
  RR = [
    { key: 'Mod-f', run: Xv, scope: 'editor search-panel' },
    {
      key: 'F3',
      run: Ua,
      shift: qa,
      scope: 'editor search-panel',
      preventDefault: !0
    },
    {
      key: 'Mod-g',
      run: Ua,
      shift: qa,
      scope: 'editor search-panel',
      preventDefault: !0
    },
    { key: 'Escape', run: Yv, scope: 'editor search-panel' },
    { key: 'Mod-Shift-l', run: ZR },
    { key: 'Alt-g', run: fR },
    { key: 'Mod-d', run: xR, preventDefault: !0 }
  ]
class ER {
  constructor(e) {
    this.view = e
    let t = (this.query = e.state.field(Bn).query.spec)
    ;(this.commit = this.commit.bind(this)),
      (this.searchField = ge('input', {
        value: t.search,
        placeholder: pt(e, 'Find'),
        'aria-label': pt(e, 'Find'),
        class: 'cm-textfield',
        name: 'search',
        form: '',
        'main-field': 'true',
        onchange: this.commit,
        onkeyup: this.commit
      })),
      (this.replaceField = ge('input', {
        value: t.replace,
        placeholder: pt(e, 'Replace'),
        'aria-label': pt(e, 'Replace'),
        class: 'cm-textfield',
        name: 'replace',
        form: '',
        onchange: this.commit,
        onkeyup: this.commit
      })),
      (this.caseField = ge('input', {
        type: 'checkbox',
        name: 'case',
        form: '',
        checked: t.caseSensitive,
        onchange: this.commit
      })),
      (this.reField = ge('input', {
        type: 'checkbox',
        name: 're',
        form: '',
        checked: t.regexp,
        onchange: this.commit
      })),
      (this.wordField = ge('input', {
        type: 'checkbox',
        name: 'word',
        form: '',
        checked: t.wholeWord,
        onchange: this.commit
      }))
    function i(r, s, o) {
      return ge(
        'button',
        { class: 'cm-button', name: r, onclick: s, type: 'button' },
        o
      )
    }
    this.dom = ge(
      'div',
      { onkeydown: (r) => this.keydown(r), class: 'cm-search' },
      [
        this.searchField,
        i('next', () => Ua(e), [pt(e, 'next')]),
        i('prev', () => qa(e), [pt(e, 'previous')]),
        i('select', () => _R(e), [pt(e, 'all')]),
        ge('label', null, [this.caseField, pt(e, 'match case')]),
        ge('label', null, [this.reField, pt(e, 'regexp')]),
        ge('label', null, [this.wordField, pt(e, 'by word')]),
        ...(e.state.readOnly
          ? []
          : [
              ge('br'),
              this.replaceField,
              i('replace', () => ZO(e), [pt(e, 'replace')]),
              i('replaceAll', () => AR(e), [pt(e, 'replace all')])
            ]),
        ge(
          'button',
          {
            name: 'close',
            onclick: () => Yv(e),
            'aria-label': pt(e, 'close'),
            type: 'button'
          },
          ['×']
        )
      ]
    )
  }
  commit() {
    let e = new Av({
      search: this.searchField.value,
      caseSensitive: this.caseField.checked,
      regexp: this.reField.checked,
      wholeWord: this.wordField.checked,
      replace: this.replaceField.value
    })
    e.eq(this.query) ||
      ((this.query = e), this.view.dispatch({ effects: hs.of(e) }))
  }
  keydown(e) {
    WC(this.view, e, 'search-panel')
      ? e.preventDefault()
      : e.keyCode == 13 && e.target == this.searchField
        ? (e.preventDefault(), (e.shiftKey ? qa : Ua)(this.view))
        : e.keyCode == 13 &&
          e.target == this.replaceField &&
          (e.preventDefault(), ZO(this.view))
  }
  update(e) {
    for (let t of e.transactions)
      for (let i of t.effects)
        i.is(hs) && !i.value.eq(this.query) && this.setQuery(i.value)
  }
  setQuery(e) {
    ;(this.query = e),
      (this.searchField.value = e.search),
      (this.replaceField.value = e.replace),
      (this.caseField.checked = e.caseSensitive),
      (this.reField.checked = e.regexp),
      (this.wordField.checked = e.wholeWord)
  }
  mount() {
    this.searchField.select()
  }
  get pos() {
    return 80
  }
  get top() {
    return this.view.state.facet(pr).top
  }
}
function pt(n, e) {
  return n.state.phrase(e)
}
const po = 30,
  Oo = /[\s\.,:;?!]/
function ch(n, { from: e, to: t }) {
  let i = n.state.doc.lineAt(e),
    r = n.state.doc.lineAt(t).to,
    s = Math.max(i.from, e - po),
    o = Math.min(r, t + po),
    a = n.state.sliceDoc(s, o)
  if (s != i.from) {
    for (let l = 0; l < po; l++)
      if (!Oo.test(a[l + 1]) && Oo.test(a[l])) {
        a = a.slice(l)
        break
      }
  }
  if (o != r) {
    for (let l = a.length - 1; l > a.length - po; l--)
      if (!Oo.test(a[l - 1]) && Oo.test(a[l])) {
        a = a.slice(0, l)
        break
      }
  }
  return M.announce.of(
    `${n.state.phrase('current match')}. ${a} ${n.state.phrase('on line')} ${
      i.number
    }.`
  )
}
const DR = /* @__PURE__ */ M.baseTheme({
    '.cm-panel.cm-search': {
      padding: '2px 6px 4px',
      position: 'relative',
      '& [name=close]': {
        position: 'absolute',
        top: '0',
        right: '4px',
        backgroundColor: 'inherit',
        border: 'none',
        font: 'inherit',
        padding: 0,
        margin: 0
      },
      '& input, & button, & label': {
        margin: '.2em .6em .2em 0'
      },
      '& input[type=checkbox]': {
        marginRight: '.2em'
      },
      '& label': {
        fontSize: '80%',
        whiteSpace: 'pre'
      }
    },
    '&light .cm-searchMatch': { backgroundColor: '#ffff0054' },
    '&dark .cm-searchMatch': { backgroundColor: '#00ffff8a' },
    '&light .cm-searchMatch-selected': { backgroundColor: '#ff6a0054' },
    '&dark .cm-searchMatch-selected': { backgroundColor: '#ff00ff8a' }
  }),
  XR = [Bn, /* @__PURE__ */ Pi.low(CR), DR]
class Iv {
  /**
  Create a new completion context. (Mostly useful for testing
  completion sources—in the editor, the extension will create
  these for you.)
  */
  constructor(e, t, i) {
    ;(this.state = e),
      (this.pos = t),
      (this.explicit = i),
      (this.abortListeners = [])
  }
  /**
  Get the extent, content, and (if there is a token) type of the
  token before `this.pos`.
  */
  tokenBefore(e) {
    let t = Ze(this.state).resolveInner(this.pos, -1)
    for (; t && e.indexOf(t.name) < 0; ) t = t.parent
    return t
      ? {
          from: t.from,
          to: this.pos,
          text: this.state.sliceDoc(t.from, this.pos),
          type: t.type
        }
      : null
  }
  /**
  Get the match of the given expression directly before the
  cursor.
  */
  matchBefore(e) {
    let t = this.state.doc.lineAt(this.pos),
      i = Math.max(t.from, this.pos - 250),
      r = t.text.slice(i - t.from, this.pos - t.from),
      s = r.search(Mv(e, !1))
    return s < 0 ? null : { from: i + s, to: this.pos, text: r.slice(s) }
  }
  /**
  Yields true when the query has been aborted. Can be useful in
  asynchronous queries to avoid doing work that will be ignored.
  */
  get aborted() {
    return this.abortListeners == null
  }
  /**
  Allows you to register abort handlers, which will be called when
  the query is
  [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
  */
  addEventListener(e, t) {
    e == 'abort' && this.abortListeners && this.abortListeners.push(t)
  }
}
function AO(n) {
  let e = Object.keys(n).join(''),
    t = /\w/.test(e)
  return (
    t && (e = e.replace(/\w/g, '')),
    `[${t ? '\\w' : ''}${e.replace(/[^\w\s]/g, '\\$&')}]`
  )
}
function YR(n) {
  let e = /* @__PURE__ */ Object.create(null),
    t = /* @__PURE__ */ Object.create(null)
  for (let { label: r } of n) {
    e[r[0]] = !0
    for (let s = 1; s < r.length; s++) t[r[s]] = !0
  }
  let i = AO(e) + AO(t) + '*$'
  return [new RegExp('^' + i), new RegExp(i)]
}
function Nv(n) {
  let e = n.map((r) => (typeof r == 'string' ? { label: r } : r)),
    [t, i] = e.every((r) => /^\w+$/.test(r.label)) ? [/\w*$/, /\w+$/] : YR(e)
  return (r) => {
    let s = r.matchBefore(i)
    return s || r.explicit
      ? { from: s ? s.from : r.pos, options: e, validFor: t }
      : null
  }
}
function IR(n, e) {
  return (t) => {
    for (let i = Ze(t.state).resolveInner(t.pos, -1); i; i = i.parent) {
      if (n.indexOf(i.name) > -1) return null
      if (i.type.isTop) break
    }
    return e(t)
  }
}
class RO {
  constructor(e, t, i, r) {
    ;(this.completion = e),
      (this.source = t),
      (this.match = i),
      (this.score = r)
  }
}
function Ln(n) {
  return n.selection.main.from
}
function Mv(n, e) {
  var t
  let { source: i } = n,
    r = e && i[0] != '^',
    s = i[i.length - 1] != '$'
  return !r && !s
    ? n
    : new RegExp(
        `${r ? '^' : ''}(?:${i})${s ? '$' : ''}`,
        (t = n.flags) !== null && t !== void 0 ? t : n.ignoreCase ? 'i' : ''
      )
}
const Vv = /* @__PURE__ */ ln.define()
function NR(n, e, t, i) {
  let { main: r } = n.selection,
    s = t - r.from,
    o = i - r.from
  return Object.assign(
    Object.assign(
      {},
      n.changeByRange((a) =>
        a != r &&
        t != i &&
        n.sliceDoc(a.from + s, a.from + o) != n.sliceDoc(t, i)
          ? { range: a }
          : {
              changes: {
                from: a.from + s,
                to: i == r.from ? a.to : a.from + o,
                insert: e
              },
              range: _.cursor(a.from + s + e.length)
            }
      )
    ),
    { scrollIntoView: !0, userEvent: 'input.complete' }
  )
}
const EO = /* @__PURE__ */ new WeakMap()
function MR(n) {
  if (!Array.isArray(n)) return n
  let e = EO.get(n)
  return e || EO.set(n, (e = Nv(n))), e
}
const uh = /* @__PURE__ */ ne.define(),
  ds = /* @__PURE__ */ ne.define()
class VR {
  constructor(e) {
    ;(this.pattern = e),
      (this.chars = []),
      (this.folded = []),
      (this.any = []),
      (this.precise = []),
      (this.byWord = []),
      (this.score = 0),
      (this.matched = [])
    for (let t = 0; t < e.length; ) {
      let i = qe(e, t),
        r = Ct(i)
      this.chars.push(i)
      let s = e.slice(t, t + r),
        o = s.toUpperCase()
      this.folded.push(qe(o == s ? s.toLowerCase() : o, 0)), (t += r)
    }
    this.astral = e.length != this.chars.length
  }
  ret(e, t) {
    return (this.score = e), (this.matched = t), !0
  }
  // Matches a given word (completion) against the pattern (input).
  // Will return a boolean indicating whether there was a match and,
  // on success, set `this.score` to the score, `this.matched` to an
  // array of `from, to` pairs indicating the matched parts of `word`.
  //
  // The score is a number that is more negative the worse the match
  // is. See `Penalty` above.
  match(e) {
    if (this.pattern.length == 0) return this.ret(-100, [])
    if (e.length < this.pattern.length) return !1
    let { chars: t, folded: i, any: r, precise: s, byWord: o } = this
    if (t.length == 1) {
      let w = qe(e, 0),
        T = Ct(w),
        Q = T == e.length ? 0 : -100
      if (w != t[0])
        if (w == i[0]) Q += -200
        else return !1
      return this.ret(Q, [0, T])
    }
    let a = e.indexOf(this.pattern)
    if (a == 0)
      return this.ret(e.length == this.pattern.length ? 0 : -100, [
        0,
        this.pattern.length
      ])
    let l = t.length,
      c = 0
    if (a < 0) {
      for (let w = 0, T = Math.min(e.length, 200); w < T && c < l; ) {
        let Q = qe(e, w)
        ;(Q == t[c] || Q == i[c]) && (r[c++] = w), (w += Ct(Q))
      }
      if (c < l) return !1
    }
    let u = 0,
      f = 0,
      h = !1,
      d = 0,
      O = -1,
      m = -1,
      b = /[a-z]/.test(e),
      x = !0
    for (let w = 0, T = Math.min(e.length, 200), Q = 0; w < T && f < l; ) {
      let P = qe(e, w)
      a < 0 &&
        (u < l && P == t[u] && (s[u++] = w),
        d < l &&
          (P == t[d] || P == i[d]
            ? (d == 0 && (O = w), (m = w + 1), d++)
            : (d = 0)))
      let C,
        A =
          P < 255
            ? (P >= 48 && P <= 57) || (P >= 97 && P <= 122)
              ? 2
              : P >= 65 && P <= 90
                ? 1
                : 0
            : (C = Xf(P)) != C.toLowerCase()
              ? 1
              : C != C.toUpperCase()
                ? 2
                : 0
      ;(!w || (A == 1 && b) || (Q == 0 && A != 0)) &&
        (t[f] == P || (i[f] == P && (h = !0))
          ? (o[f++] = w)
          : o.length && (x = !1)),
        (Q = A),
        (w += Ct(P))
    }
    return f == l && o[0] == 0 && x
      ? this.result(-100 + (h ? -200 : 0), o, e)
      : d == l && O == 0
        ? this.ret(-200 - e.length + (m == e.length ? 0 : -100), [0, m])
        : a > -1
          ? this.ret(-700 - e.length, [a, a + this.pattern.length])
          : d == l
            ? this.ret(-200 + -700 - e.length, [O, m])
            : f == l
              ? this.result(
                  -100 + (h ? -200 : 0) + -700 + (x ? 0 : -1100),
                  o,
                  e
                )
              : t.length == 2
                ? !1
                : this.result((r[0] ? -700 : 0) + -200 + -1100, r, e)
  }
  result(e, t, i) {
    let r = [],
      s = 0
    for (let o of t) {
      let a = o + (this.astral ? Ct(qe(i, o)) : 1)
      s && r[s - 1] == o ? (r[s - 1] = a) : ((r[s++] = o), (r[s++] = a))
    }
    return this.ret(e - i.length, r)
  }
}
const Je = /* @__PURE__ */ q.define({
  combine(n) {
    return cn(
      n,
      {
        activateOnTyping: !0,
        selectOnOpen: !0,
        override: null,
        closeOnBlur: !0,
        maxRenderedOptions: 100,
        defaultKeymap: !0,
        tooltipClass: () => '',
        optionClass: () => '',
        aboveCursor: !1,
        icons: !0,
        addToOptions: [],
        positionInfo: WR,
        compareCompletions: (e, t) => e.label.localeCompare(t.label),
        interactionDelay: 75,
        updateSyncTime: 100
      },
      {
        defaultKeymap: (e, t) => e && t,
        closeOnBlur: (e, t) => e && t,
        icons: (e, t) => e && t,
        tooltipClass: (e, t) => (i) => DO(e(i), t(i)),
        optionClass: (e, t) => (i) => DO(e(i), t(i)),
        addToOptions: (e, t) => e.concat(t)
      }
    )
  }
})
function DO(n, e) {
  return n ? (e ? n + ' ' + e : n) : e
}
function WR(n, e, t, i, r, s) {
  let o = n.textDirection == Pe.RTL,
    a = o,
    l = !1,
    c = 'top',
    u,
    f,
    h = e.left - r.left,
    d = r.right - e.right,
    O = i.right - i.left,
    m = i.bottom - i.top
  if (
    (a && h < Math.min(O, d) ? (a = !1) : !a && d < Math.min(O, h) && (a = !0),
    O <= (a ? h : d))
  )
    (u = Math.max(r.top, Math.min(t.top, r.bottom - m)) - e.top),
      (f = Math.min(400, a ? h : d))
  else {
    ;(l = !0),
      (f = Math.min(
        400,
        (o ? e.right : r.right - e.left) - 30
        /* Info.Margin */
      ))
    let w = r.bottom - e.bottom
    w >= m || w > e.top
      ? (u = t.bottom - e.top)
      : ((c = 'bottom'), (u = e.bottom - t.top))
  }
  let b = (e.bottom - e.top) / s.offsetHeight,
    x = (e.right - e.left) / s.offsetWidth
  return {
    style: `${c}: ${u / b}px; max-width: ${f / x}px`,
    class:
      'cm-completionInfo-' +
      (l ? (o ? 'left-narrow' : 'right-narrow') : a ? 'left' : 'right')
  }
}
function jR(n) {
  let e = n.addToOptions.slice()
  return (
    n.icons &&
      e.push({
        render(t) {
          let i = document.createElement('div')
          return (
            i.classList.add('cm-completionIcon'),
            t.type &&
              i.classList.add(
                ...t.type.split(/\s+/g).map((r) => 'cm-completionIcon-' + r)
              ),
            i.setAttribute('aria-hidden', 'true'),
            i
          )
        },
        position: 20
      }),
    e.push(
      {
        render(t, i, r, s) {
          let o = document.createElement('span')
          o.className = 'cm-completionLabel'
          let a = t.displayLabel || t.label,
            l = 0
          for (let c = 0; c < s.length; ) {
            let u = s[c++],
              f = s[c++]
            u > l && o.appendChild(document.createTextNode(a.slice(l, u)))
            let h = o.appendChild(document.createElement('span'))
            h.appendChild(document.createTextNode(a.slice(u, f))),
              (h.className = 'cm-completionMatchedText'),
              (l = f)
          }
          return (
            l < a.length && o.appendChild(document.createTextNode(a.slice(l))),
            o
          )
        },
        position: 50
      },
      {
        render(t) {
          if (!t.detail) return null
          let i = document.createElement('span')
          return (
            (i.className = 'cm-completionDetail'), (i.textContent = t.detail), i
          )
        },
        position: 80
      }
    ),
    e.sort((t, i) => t.position - i.position).map((t) => t.render)
  )
}
function $c(n, e, t) {
  if (n <= t) return { from: 0, to: n }
  if ((e < 0 && (e = 0), e <= n >> 1)) {
    let r = Math.floor(e / t)
    return { from: r * t, to: (r + 1) * t }
  }
  let i = Math.floor((n - e) / t)
  return { from: n - (i + 1) * t, to: n - i * t }
}
class BR {
  constructor(e, t, i) {
    ;(this.view = e),
      (this.stateField = t),
      (this.applyCompletion = i),
      (this.info = null),
      (this.infoDestroy = null),
      (this.placeInfoReq = {
        read: () => this.measureInfo(),
        write: (l) => this.placeInfo(l),
        key: this
      }),
      (this.space = null),
      (this.currentClass = '')
    let r = e.state.field(t),
      { options: s, selected: o } = r.open,
      a = e.state.facet(Je)
    ;(this.optionContent = jR(a)),
      (this.optionClass = a.optionClass),
      (this.tooltipClass = a.tooltipClass),
      (this.range = $c(s.length, o, a.maxRenderedOptions)),
      (this.dom = document.createElement('div')),
      (this.dom.className = 'cm-tooltip-autocomplete'),
      this.updateTooltipClass(e.state),
      this.dom.addEventListener('mousedown', (l) => {
        let { options: c } = e.state.field(t).open
        for (let u = l.target, f; u && u != this.dom; u = u.parentNode)
          if (
            u.nodeName == 'LI' &&
            (f = /-(\d+)$/.exec(u.id)) &&
            +f[1] < c.length
          ) {
            this.applyCompletion(e, c[+f[1]]), l.preventDefault()
            return
          }
      }),
      this.dom.addEventListener('focusout', (l) => {
        let c = e.state.field(this.stateField, !1)
        c &&
          c.tooltip &&
          e.state.facet(Je).closeOnBlur &&
          l.relatedTarget != e.contentDOM &&
          e.dispatch({ effects: ds.of(null) })
      }),
      this.showOptions(s, r.id)
  }
  mount() {
    this.updateSel()
  }
  showOptions(e, t) {
    this.list && this.list.remove(),
      (this.list = this.dom.appendChild(this.createListBox(e, t, this.range))),
      this.list.addEventListener('scroll', () => {
        this.info && this.view.requestMeasure(this.placeInfoReq)
      })
  }
  update(e) {
    var t
    let i = e.state.field(this.stateField),
      r = e.startState.field(this.stateField)
    if ((this.updateTooltipClass(e.state), i != r)) {
      let { options: s, selected: o, disabled: a } = i.open
      ;(!r.open || r.open.options != s) &&
        ((this.range = $c(s.length, o, e.state.facet(Je).maxRenderedOptions)),
        this.showOptions(s, i.id)),
        this.updateSel(),
        a != ((t = r.open) === null || t === void 0 ? void 0 : t.disabled) &&
          this.dom.classList.toggle('cm-tooltip-autocomplete-disabled', !!a)
    }
  }
  updateTooltipClass(e) {
    let t = this.tooltipClass(e)
    if (t != this.currentClass) {
      for (let i of this.currentClass.split(' '))
        i && this.dom.classList.remove(i)
      for (let i of t.split(' ')) i && this.dom.classList.add(i)
      this.currentClass = t
    }
  }
  positioned(e) {
    ;(this.space = e), this.info && this.view.requestMeasure(this.placeInfoReq)
  }
  updateSel() {
    let e = this.view.state.field(this.stateField),
      t = e.open
    if (
      (((t.selected > -1 && t.selected < this.range.from) ||
        t.selected >= this.range.to) &&
        ((this.range = $c(
          t.options.length,
          t.selected,
          this.view.state.facet(Je).maxRenderedOptions
        )),
        this.showOptions(t.options, e.id)),
      this.updateSelectedOption(t.selected))
    ) {
      this.destroyInfo()
      let { completion: i } = t.options[t.selected],
        { info: r } = i
      if (!r) return
      let s = typeof r == 'string' ? document.createTextNode(r) : r(i)
      if (!s) return
      'then' in s
        ? s
            .then((o) => {
              o &&
                this.view.state.field(this.stateField, !1) == e &&
                this.addInfoPane(o, i)
            })
            .catch((o) => Rt(this.view.state, o, 'completion info'))
        : this.addInfoPane(s, i)
    }
  }
  addInfoPane(e, t) {
    this.destroyInfo()
    let i = (this.info = document.createElement('div'))
    if (((i.className = 'cm-tooltip cm-completionInfo'), e.nodeType != null))
      i.appendChild(e), (this.infoDestroy = null)
    else {
      let { dom: r, destroy: s } = e
      i.appendChild(r), (this.infoDestroy = s || null)
    }
    this.dom.appendChild(i), this.view.requestMeasure(this.placeInfoReq)
  }
  updateSelectedOption(e) {
    let t = null
    for (
      let i = this.list.firstChild, r = this.range.from;
      i;
      i = i.nextSibling, r++
    )
      i.nodeName != 'LI' || !i.id
        ? r--
        : r == e
          ? i.hasAttribute('aria-selected') ||
            (i.setAttribute('aria-selected', 'true'), (t = i))
          : i.hasAttribute('aria-selected') &&
            i.removeAttribute('aria-selected')
    return t && UR(this.list, t), t
  }
  measureInfo() {
    let e = this.dom.querySelector('[aria-selected]')
    if (!e || !this.info) return null
    let t = this.dom.getBoundingClientRect(),
      i = this.info.getBoundingClientRect(),
      r = e.getBoundingClientRect(),
      s = this.space
    if (!s) {
      let o = this.dom.ownerDocument.defaultView || window
      s = { left: 0, top: 0, right: o.innerWidth, bottom: o.innerHeight }
    }
    return r.top > Math.min(s.bottom, t.bottom) - 10 ||
      r.bottom < Math.max(s.top, t.top) + 10
      ? null
      : this.view.state.facet(Je).positionInfo(this.view, t, r, i, s, this.dom)
  }
  placeInfo(e) {
    this.info &&
      (e
        ? (e.style && (this.info.style.cssText = e.style),
          (this.info.className =
            'cm-tooltip cm-completionInfo ' + (e.class || '')))
        : (this.info.style.cssText = 'top: -1e6px'))
  }
  createListBox(e, t, i) {
    const r = document.createElement('ul')
    ;(r.id = t),
      r.setAttribute('role', 'listbox'),
      r.setAttribute('aria-expanded', 'true'),
      r.setAttribute('aria-label', this.view.state.phrase('Completions'))
    let s = null
    for (let o = i.from; o < i.to; o++) {
      let { completion: a, match: l } = e[o],
        { section: c } = a
      if (c) {
        let h = typeof c == 'string' ? c : c.name
        if (h != s && (o > i.from || i.from == 0))
          if (((s = h), typeof c != 'string' && c.header))
            r.appendChild(c.header(c))
          else {
            let d = r.appendChild(document.createElement('completion-section'))
            d.textContent = h
          }
      }
      const u = r.appendChild(document.createElement('li'))
      ;(u.id = t + '-' + o), u.setAttribute('role', 'option')
      let f = this.optionClass(a)
      f && (u.className = f)
      for (let h of this.optionContent) {
        let d = h(a, this.view.state, this.view, l)
        d && u.appendChild(d)
      }
    }
    return (
      i.from && r.classList.add('cm-completionListIncompleteTop'),
      i.to < e.length && r.classList.add('cm-completionListIncompleteBottom'),
      r
    )
  }
  destroyInfo() {
    this.info &&
      (this.infoDestroy && this.infoDestroy(),
      this.info.remove(),
      (this.info = null))
  }
  destroy() {
    this.destroyInfo()
  }
}
function LR(n, e) {
  return (t) => new BR(t, n, e)
}
function UR(n, e) {
  let t = n.getBoundingClientRect(),
    i = e.getBoundingClientRect(),
    r = t.height / n.offsetHeight
  i.top < t.top
    ? (n.scrollTop -= (t.top - i.top) / r)
    : i.bottom > t.bottom && (n.scrollTop += (i.bottom - t.bottom) / r)
}
function XO(n) {
  return (
    (n.boost || 0) * 100 +
    (n.apply ? 10 : 0) +
    (n.info ? 5 : 0) +
    (n.type ? 1 : 0)
  )
}
function qR(n, e) {
  let t = [],
    i = null,
    r = (l) => {
      t.push(l)
      let { section: c } = l.completion
      if (c) {
        i || (i = [])
        let u = typeof c == 'string' ? c : c.name
        i.some((f) => f.name == u) ||
          i.push(typeof c == 'string' ? { name: u } : c)
      }
    }
  for (let l of n)
    if (l.hasResult()) {
      let c = l.result.getMatch
      if (l.result.filter === !1)
        for (let u of l.result.options)
          r(new RO(u, l.source, c ? c(u) : [], 1e9 - t.length))
      else {
        let u = new VR(e.sliceDoc(l.from, l.to))
        for (let f of l.result.options)
          if (u.match(f.label)) {
            let h = f.displayLabel ? (c ? c(f, u.matched) : []) : u.matched
            r(new RO(f, l.source, h, u.score + (f.boost || 0)))
          }
      }
    }
  if (i) {
    let l = /* @__PURE__ */ Object.create(null),
      c = 0,
      u = (f, h) => {
        var d, O
        return (
          ((d = f.rank) !== null && d !== void 0 ? d : 1e9) -
            ((O = h.rank) !== null && O !== void 0 ? O : 1e9) ||
          (f.name < h.name ? -1 : 1)
        )
      }
    for (let f of i.sort(u)) (c -= 1e5), (l[f.name] = c)
    for (let f of t) {
      let { section: h } = f.completion
      h && (f.score += l[typeof h == 'string' ? h : h.name])
    }
  }
  let s = [],
    o = null,
    a = e.facet(Je).compareCompletions
  for (let l of t.sort(
    (c, u) => u.score - c.score || a(c.completion, u.completion)
  )) {
    let c = l.completion
    !o ||
    o.label != c.label ||
    o.detail != c.detail ||
    (o.type != null && c.type != null && o.type != c.type) ||
    o.apply != c.apply ||
    o.boost != c.boost
      ? s.push(l)
      : XO(l.completion) > XO(o) && (s[s.length - 1] = l),
      (o = l.completion)
  }
  return s
}
class Wi {
  constructor(e, t, i, r, s, o) {
    ;(this.options = e),
      (this.attrs = t),
      (this.tooltip = i),
      (this.timestamp = r),
      (this.selected = s),
      (this.disabled = o)
  }
  setSelected(e, t) {
    return e == this.selected || e >= this.options.length
      ? this
      : new Wi(
          this.options,
          YO(t, e),
          this.tooltip,
          this.timestamp,
          e,
          this.disabled
        )
  }
  static build(e, t, i, r, s) {
    let o = qR(e, t)
    if (!o.length)
      return r &&
        e.some(
          (l) => l.state == 1
          /* State.Pending */
        )
        ? new Wi(r.options, r.attrs, r.tooltip, r.timestamp, r.selected, !0)
        : null
    let a = t.facet(Je).selectOnOpen ? 0 : -1
    if (r && r.selected != a && r.selected != -1) {
      let l = r.options[r.selected].completion
      for (let c = 0; c < o.length; c++)
        if (o[c].completion == l) {
          a = c
          break
        }
    }
    return new Wi(
      o,
      YO(i, a),
      {
        pos: e.reduce((l, c) => (c.hasResult() ? Math.min(l, c.from) : l), 1e8),
        create: KR,
        above: s.aboveCursor
      },
      r ? r.timestamp : Date.now(),
      a,
      !1
    )
  }
  map(e) {
    return new Wi(
      this.options,
      this.attrs,
      Object.assign(Object.assign({}, this.tooltip), {
        pos: e.mapPos(this.tooltip.pos)
      }),
      this.timestamp,
      this.selected,
      this.disabled
    )
  }
}
class za {
  constructor(e, t, i) {
    ;(this.active = e), (this.id = t), (this.open = i)
  }
  static start() {
    return new za(
      GR,
      'cm-ac-' + Math.floor(Math.random() * 2e6).toString(36),
      null
    )
  }
  update(e) {
    let { state: t } = e,
      i = t.facet(Je),
      s = (i.override || t.languageDataAt('autocomplete', Ln(t)).map(MR)).map(
        (a) =>
          (
            this.active.find((c) => c.source == a) ||
            new ut(
              a,
              this.active.some(
                (c) => c.state != 0
                /* State.Inactive */
              )
                ? 1
                : 0
              /* State.Inactive */
            )
          ).update(e, i)
      )
    s.length == this.active.length &&
      s.every((a, l) => a == this.active[l]) &&
      (s = this.active)
    let o = this.open
    o && e.docChanged && (o = o.map(e.changes)),
      e.selection ||
      s.some((a) => a.hasResult() && e.changes.touchesRange(a.from, a.to)) ||
      !zR(s, this.active)
        ? (o = Wi.build(s, t, this.id, o, i))
        : o &&
          o.disabled &&
          !s.some(
            (a) => a.state == 1
            /* State.Pending */
          ) &&
          (o = null),
      !o &&
        s.every(
          (a) => a.state != 1
          /* State.Pending */
        ) &&
        s.some((a) => a.hasResult()) &&
        (s = s.map((a) =>
          a.hasResult()
            ? new ut(
                a.source,
                0
                /* State.Inactive */
              )
            : a
        ))
    for (let a of e.effects)
      a.is(jv) && (o = o && o.setSelected(a.value, this.id))
    return s == this.active && o == this.open ? this : new za(s, this.id, o)
  }
  get tooltip() {
    return this.open ? this.open.tooltip : null
  }
  get attrs() {
    return this.open ? this.open.attrs : FR
  }
}
function zR(n, e) {
  if (n == e) return !0
  for (let t = 0, i = 0; ; ) {
    for (; t < n.length && !n[t].hasResult; ) t++
    for (; i < e.length && !e[i].hasResult; ) i++
    let r = t == n.length,
      s = i == e.length
    if (r || s) return r == s
    if (n[t++].result != e[i++].result) return !1
  }
}
const FR = {
  'aria-autocomplete': 'list'
}
function YO(n, e) {
  let t = {
    'aria-autocomplete': 'list',
    'aria-haspopup': 'listbox',
    'aria-controls': n
  }
  return e > -1 && (t['aria-activedescendant'] = n + '-' + e), t
}
const GR = []
function uf(n) {
  return n.isUserEvent('input.type')
    ? 'input'
    : n.isUserEvent('delete.backward')
      ? 'delete'
      : null
}
class ut {
  constructor(e, t, i = -1) {
    ;(this.source = e), (this.state = t), (this.explicitPos = i)
  }
  hasResult() {
    return !1
  }
  update(e, t) {
    let i = uf(e),
      r = this
    i
      ? (r = r.handleUserEvent(e, i, t))
      : e.docChanged
        ? (r = r.handleChange(e))
        : e.selection &&
          r.state != 0 &&
          (r = new ut(
            r.source,
            0
            /* State.Inactive */
          ))
    for (let s of e.effects)
      if (s.is(uh)) r = new ut(r.source, 1, s.value ? Ln(e.state) : -1)
      else if (s.is(ds))
        r = new ut(
          r.source,
          0
          /* State.Inactive */
        )
      else if (s.is(Wv)) for (let o of s.value) o.source == r.source && (r = o)
    return r
  }
  handleUserEvent(e, t, i) {
    return t == 'delete' || !i.activateOnTyping
      ? this.map(e.changes)
      : new ut(
          this.source,
          1
          /* State.Pending */
        )
  }
  handleChange(e) {
    return e.changes.touchesRange(Ln(e.startState))
      ? new ut(
          this.source,
          0
          /* State.Inactive */
        )
      : this.map(e.changes)
  }
  map(e) {
    return e.empty || this.explicitPos < 0
      ? this
      : new ut(this.source, this.state, e.mapPos(this.explicitPos))
  }
}
class zi extends ut {
  constructor(e, t, i, r, s) {
    super(e, 2, t), (this.result = i), (this.from = r), (this.to = s)
  }
  hasResult() {
    return !0
  }
  handleUserEvent(e, t, i) {
    var r
    let s = e.changes.mapPos(this.from),
      o = e.changes.mapPos(this.to, 1),
      a = Ln(e.state)
    if (
      (this.explicitPos < 0 ? a <= s : a < this.from) ||
      a > o ||
      (t == 'delete' && Ln(e.startState) == this.from)
    )
      return new ut(
        this.source,
        t == 'input' && i.activateOnTyping ? 1 : 0
        /* State.Inactive */
      )
    let l = this.explicitPos < 0 ? -1 : e.changes.mapPos(this.explicitPos),
      c
    return HR(this.result.validFor, e.state, s, o)
      ? new zi(this.source, l, this.result, s, o)
      : this.result.update &&
          (c = this.result.update(
            this.result,
            s,
            o,
            new Iv(e.state, a, l >= 0)
          ))
        ? new zi(
            this.source,
            l,
            c,
            c.from,
            (r = c.to) !== null && r !== void 0 ? r : Ln(e.state)
          )
        : new ut(this.source, 1, l)
  }
  handleChange(e) {
    return e.changes.touchesRange(this.from, this.to)
      ? new ut(
          this.source,
          0
          /* State.Inactive */
        )
      : this.map(e.changes)
  }
  map(e) {
    return e.empty
      ? this
      : new zi(
          this.source,
          this.explicitPos < 0 ? -1 : e.mapPos(this.explicitPos),
          this.result,
          e.mapPos(this.from),
          e.mapPos(this.to, 1)
        )
  }
}
function HR(n, e, t, i) {
  if (!n) return !1
  let r = e.sliceDoc(t, i)
  return typeof n == 'function' ? n(r, t, i, e) : Mv(n, !0).test(r)
}
const Wv = /* @__PURE__ */ ne.define({
    map(n, e) {
      return n.map((t) => t.map(e))
    }
  }),
  jv = /* @__PURE__ */ ne.define(),
  bt = /* @__PURE__ */ We.define({
    create() {
      return za.start()
    },
    update(n, e) {
      return n.update(e)
    },
    provide: (n) => [
      Lf.from(n, (e) => e.tooltip),
      M.contentAttributes.from(n, (e) => e.attrs)
    ]
  })
function Bv(n, e) {
  const t = e.completion.apply || e.completion.label
  let i = n.state.field(bt).active.find((r) => r.source == e.source)
  return i instanceof zi
    ? (typeof t == 'string'
        ? n.dispatch(
            Object.assign(Object.assign({}, NR(n.state, t, i.from, i.to)), {
              annotations: Vv.of(e.completion)
            })
          )
        : t(n, e.completion, i.from, i.to),
      !0)
    : !1
}
const KR = /* @__PURE__ */ LR(bt, Bv)
function go(n, e = 'option') {
  return (t) => {
    let i = t.state.field(bt, !1)
    if (
      !i ||
      !i.open ||
      i.open.disabled ||
      Date.now() - i.open.timestamp < t.state.facet(Je).interactionDelay
    )
      return !1
    let r = 1,
      s
    e == 'page' &&
      (s = Sb(t, i.open.tooltip)) &&
      (r = Math.max(
        2,
        Math.floor(
          s.dom.offsetHeight / s.dom.querySelector('li').offsetHeight
        ) - 1
      ))
    let { length: o } = i.open.options,
      a =
        i.open.selected > -1
          ? i.open.selected + r * (n ? 1 : -1)
          : n
            ? 0
            : o - 1
    return (
      a < 0
        ? (a = e == 'page' ? 0 : o - 1)
        : a >= o && (a = e == 'page' ? o - 1 : 0),
      t.dispatch({ effects: jv.of(a) }),
      !0
    )
  }
}
const JR = (n) => {
    let e = n.state.field(bt, !1)
    return n.state.readOnly ||
      !e ||
      !e.open ||
      e.open.selected < 0 ||
      e.open.disabled ||
      Date.now() - e.open.timestamp < n.state.facet(Je).interactionDelay
      ? !1
      : Bv(n, e.open.options[e.open.selected])
  },
  eE = (n) =>
    n.state.field(bt, !1) ? (n.dispatch({ effects: uh.of(!0) }), !0) : !1,
  tE = (n) => {
    let e = n.state.field(bt, !1)
    return !e ||
      !e.active.some(
        (t) => t.state != 0
        /* State.Inactive */
      )
      ? !1
      : (n.dispatch({ effects: ds.of(null) }), !0)
  }
class nE {
  constructor(e, t) {
    ;(this.active = e),
      (this.context = t),
      (this.time = Date.now()),
      (this.updates = []),
      (this.done = void 0)
  }
}
const iE = 50,
  rE = 1e3,
  sE = /* @__PURE__ */ Re.fromClass(
    class {
      constructor(n) {
        ;(this.view = n),
          (this.debounceUpdate = -1),
          (this.running = []),
          (this.debounceAccept = -1),
          (this.composing = 0)
        for (let e of n.state.field(bt).active)
          e.state == 1 && this.startQuery(e)
      }
      update(n) {
        let e = n.state.field(bt)
        if (!n.selectionSet && !n.docChanged && n.startState.field(bt) == e)
          return
        let t = n.transactions.some(
          (i) => (i.selection || i.docChanged) && !uf(i)
        )
        for (let i = 0; i < this.running.length; i++) {
          let r = this.running[i]
          if (
            t ||
            (r.updates.length + n.transactions.length > iE &&
              Date.now() - r.time > rE)
          ) {
            for (let s of r.context.abortListeners)
              try {
                s()
              } catch (o) {
                Rt(this.view.state, o)
              }
            ;(r.context.abortListeners = null), this.running.splice(i--, 1)
          } else r.updates.push(...n.transactions)
        }
        if (
          (this.debounceUpdate > -1 && clearTimeout(this.debounceUpdate),
          (this.debounceUpdate = e.active.some(
            (i) =>
              i.state == 1 &&
              !this.running.some((r) => r.active.source == i.source)
          )
            ? setTimeout(() => this.startUpdate(), 50)
            : -1),
          this.composing != 0)
        )
          for (let i of n.transactions)
            uf(i) == 'input'
              ? (this.composing = 2)
              : this.composing == 2 && i.selection && (this.composing = 3)
      }
      startUpdate() {
        this.debounceUpdate = -1
        let { state: n } = this.view,
          e = n.field(bt)
        for (let t of e.active)
          t.state == 1 &&
            !this.running.some((i) => i.active.source == t.source) &&
            this.startQuery(t)
      }
      startQuery(n) {
        let { state: e } = this.view,
          t = Ln(e),
          i = new Iv(e, t, n.explicitPos == t),
          r = new nE(n, i)
        this.running.push(r),
          Promise.resolve(n.source(i)).then(
            (s) => {
              r.context.aborted || ((r.done = s || null), this.scheduleAccept())
            },
            (s) => {
              this.view.dispatch({ effects: ds.of(null) }),
                Rt(this.view.state, s)
            }
          )
      }
      scheduleAccept() {
        this.running.every((n) => n.done !== void 0)
          ? this.accept()
          : this.debounceAccept < 0 &&
            (this.debounceAccept = setTimeout(
              () => this.accept(),
              this.view.state.facet(Je).updateSyncTime
            ))
      }
      // For each finished query in this.running, try to create a result
      // or, if appropriate, restart the query.
      accept() {
        var n
        this.debounceAccept > -1 && clearTimeout(this.debounceAccept),
          (this.debounceAccept = -1)
        let e = [],
          t = this.view.state.facet(Je)
        for (let i = 0; i < this.running.length; i++) {
          let r = this.running[i]
          if (r.done === void 0) continue
          if ((this.running.splice(i--, 1), r.done)) {
            let o = new zi(
              r.active.source,
              r.active.explicitPos,
              r.done,
              r.done.from,
              (n = r.done.to) !== null && n !== void 0
                ? n
                : Ln(
                    r.updates.length ? r.updates[0].startState : this.view.state
                  )
            )
            for (let a of r.updates) o = o.update(a, t)
            if (o.hasResult()) {
              e.push(o)
              continue
            }
          }
          let s = this.view.state
            .field(bt)
            .active.find((o) => o.source == r.active.source)
          if (s && s.state == 1)
            if (r.done == null) {
              let o = new ut(
                r.active.source,
                0
                /* State.Inactive */
              )
              for (let a of r.updates) o = o.update(a, t)
              o.state != 1 && e.push(o)
            } else this.startQuery(s)
        }
        e.length && this.view.dispatch({ effects: Wv.of(e) })
      }
    },
    {
      eventHandlers: {
        blur(n) {
          let e = this.view.state.field(bt, !1)
          if (e && e.tooltip && this.view.state.facet(Je).closeOnBlur) {
            let t = e.open && Sb(this.view, e.open.tooltip)
            ;(!t || !t.dom.contains(n.relatedTarget)) &&
              this.view.dispatch({ effects: ds.of(null) })
          }
        },
        compositionstart() {
          this.composing = 1
        },
        compositionend() {
          this.composing == 3 &&
            setTimeout(() => this.view.dispatch({ effects: uh.of(!1) }), 20),
            (this.composing = 0)
        }
      }
    }
  ),
  Lv = /* @__PURE__ */ M.baseTheme({
    '.cm-tooltip.cm-tooltip-autocomplete': {
      '& > ul': {
        fontFamily: 'monospace',
        whiteSpace: 'nowrap',
        overflow: 'hidden auto',
        maxWidth_fallback: '700px',
        maxWidth: 'min(700px, 95vw)',
        minWidth: '250px',
        maxHeight: '10em',
        height: '100%',
        listStyle: 'none',
        margin: 0,
        padding: 0,
        '& > li, & > completion-section': {
          padding: '1px 3px',
          lineHeight: 1.2
        },
        '& > li': {
          overflowX: 'hidden',
          textOverflow: 'ellipsis',
          cursor: 'pointer'
        },
        '& > completion-section': {
          display: 'list-item',
          borderBottom: '1px solid silver',
          paddingLeft: '0.5em',
          opacity: 0.7
        }
      }
    },
    '&light .cm-tooltip-autocomplete ul li[aria-selected]': {
      background: '#17c',
      color: 'white'
    },
    '&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]': {
      background: '#777'
    },
    '&dark .cm-tooltip-autocomplete ul li[aria-selected]': {
      background: '#347',
      color: 'white'
    },
    '&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]': {
      background: '#444'
    },
    '.cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after':
      {
        content: '"···"',
        opacity: 0.5,
        display: 'block',
        textAlign: 'center'
      },
    '.cm-tooltip.cm-completionInfo': {
      position: 'absolute',
      padding: '3px 9px',
      width: 'max-content',
      maxWidth: '400px',
      boxSizing: 'border-box'
    },
    '.cm-completionInfo.cm-completionInfo-left': { right: '100%' },
    '.cm-completionInfo.cm-completionInfo-right': { left: '100%' },
    '.cm-completionInfo.cm-completionInfo-left-narrow': { right: '30px' },
    '.cm-completionInfo.cm-completionInfo-right-narrow': { left: '30px' },
    '&light .cm-snippetField': { backgroundColor: '#00000022' },
    '&dark .cm-snippetField': { backgroundColor: '#ffffff22' },
    '.cm-snippetFieldPosition': {
      verticalAlign: 'text-top',
      width: 0,
      height: '1.15em',
      display: 'inline-block',
      margin: '0 -0.7px -.7em',
      borderLeft: '1.4px dotted #888'
    },
    '.cm-completionMatchedText': {
      textDecoration: 'underline'
    },
    '.cm-completionDetail': {
      marginLeft: '0.5em',
      fontStyle: 'italic'
    },
    '.cm-completionIcon': {
      fontSize: '90%',
      width: '.8em',
      display: 'inline-block',
      textAlign: 'center',
      paddingRight: '.6em',
      opacity: '0.6',
      boxSizing: 'content-box'
    },
    '.cm-completionIcon-function, .cm-completionIcon-method': {
      '&:after': { content: "'ƒ'" }
    },
    '.cm-completionIcon-class': {
      '&:after': { content: "'○'" }
    },
    '.cm-completionIcon-interface': {
      '&:after': { content: "'◌'" }
    },
    '.cm-completionIcon-variable': {
      '&:after': { content: "'𝑥'" }
    },
    '.cm-completionIcon-constant': {
      '&:after': { content: "'𝐶'" }
    },
    '.cm-completionIcon-type': {
      '&:after': { content: "'𝑡'" }
    },
    '.cm-completionIcon-enum': {
      '&:after': { content: "'∪'" }
    },
    '.cm-completionIcon-property': {
      '&:after': { content: "'□'" }
    },
    '.cm-completionIcon-keyword': {
      '&:after': { content: "'🔑︎'" }
      // Disable emoji rendering
    },
    '.cm-completionIcon-namespace': {
      '&:after': { content: "'▢'" }
    },
    '.cm-completionIcon-text': {
      '&:after': { content: "'abc'", fontSize: '50%', verticalAlign: 'middle' }
    }
  })
class oE {
  constructor(e, t, i, r) {
    ;(this.field = e), (this.line = t), (this.from = i), (this.to = r)
  }
}
class fh {
  constructor(e, t, i) {
    ;(this.field = e), (this.from = t), (this.to = i)
  }
  map(e) {
    let t = e.mapPos(this.from, -1, Fe.TrackDel),
      i = e.mapPos(this.to, 1, Fe.TrackDel)
    return t == null || i == null ? null : new fh(this.field, t, i)
  }
}
class hh {
  constructor(e, t) {
    ;(this.lines = e), (this.fieldPositions = t)
  }
  instantiate(e, t) {
    let i = [],
      r = [t],
      s = e.doc.lineAt(t),
      o = /^\s*/.exec(s.text)[0]
    for (let l of this.lines) {
      if (i.length) {
        let c = o,
          u = /^\t*/.exec(l)[0].length
        for (let f = 0; f < u; f++) c += e.facet(Zs)
        r.push(t + c.length - u), (l = c + l.slice(u))
      }
      i.push(l), (t += l.length + 1)
    }
    let a = this.fieldPositions.map(
      (l) => new fh(l.field, r[l.line] + l.from, r[l.line] + l.to)
    )
    return { text: i, ranges: a }
  }
  static parse(e) {
    let t = [],
      i = [],
      r = [],
      s
    for (let o of e.split(/\r\n?|\n/)) {
      for (; (s = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(o)); ) {
        let a = s[1] ? +s[1] : null,
          l = s[2] || s[3] || '',
          c = -1
        for (let u = 0; u < t.length; u++)
          (a != null ? t[u].seq == a : l && t[u].name == l) && (c = u)
        if (c < 0) {
          let u = 0
          for (
            ;
            u < t.length && (a == null || (t[u].seq != null && t[u].seq < a));

          )
            u++
          t.splice(u, 0, { seq: a, name: l }), (c = u)
          for (let f of r) f.field >= c && f.field++
        }
        r.push(new oE(c, i.length, s.index, s.index + l.length)),
          (o = o.slice(0, s.index) + l + o.slice(s.index + s[0].length))
      }
      for (let a; (a = /\\([{}])/.exec(o)); ) {
        o = o.slice(0, a.index) + a[1] + o.slice(a.index + a[0].length)
        for (let l of r)
          l.line == i.length && l.from > a.index && (l.from--, l.to--)
      }
      i.push(o)
    }
    return new hh(i, r)
  }
}
let aE = /* @__PURE__ */ K.widget({
    widget: /* @__PURE__ */ new (class extends un {
      toDOM() {
        let n = document.createElement('span')
        return (n.className = 'cm-snippetFieldPosition'), n
      }
      ignoreEvent() {
        return !1
      }
    })()
  }),
  lE = /* @__PURE__ */ K.mark({ class: 'cm-snippetField' })
class Or {
  constructor(e, t) {
    ;(this.ranges = e),
      (this.active = t),
      (this.deco = K.set(
        e.map((i) => (i.from == i.to ? aE : lE).range(i.from, i.to))
      ))
  }
  map(e) {
    let t = []
    for (let i of this.ranges) {
      let r = i.map(e)
      if (!r) return null
      t.push(r)
    }
    return new Or(t, this.active)
  }
  selectionInsideField(e) {
    return e.ranges.every((t) =>
      this.ranges.some(
        (i) => i.field == this.active && i.from <= t.from && i.to >= t.to
      )
    )
  }
}
const Ds = /* @__PURE__ */ ne.define({
    map(n, e) {
      return n && n.map(e)
    }
  }),
  cE = /* @__PURE__ */ ne.define(),
  ps = /* @__PURE__ */ We.define({
    create() {
      return null
    },
    update(n, e) {
      for (let t of e.effects) {
        if (t.is(Ds)) return t.value
        if (t.is(cE) && n) return new Or(n.ranges, t.value)
      }
      return (
        n && e.docChanged && (n = n.map(e.changes)),
        n && e.selection && !n.selectionInsideField(e.selection) && (n = null),
        n
      )
    },
    provide: (n) => M.decorations.from(n, (e) => (e ? e.deco : K.none))
  })
function dh(n, e) {
  return _.create(
    n.filter((t) => t.field == e).map((t) => _.range(t.from, t.to))
  )
}
function uE(n) {
  let e = hh.parse(n)
  return (t, i, r, s) => {
    let { text: o, ranges: a } = e.instantiate(t.state, r),
      l = {
        changes: { from: r, to: s, insert: ue.of(o) },
        scrollIntoView: !0,
        annotations: i ? Vv.of(i) : void 0
      }
    if ((a.length && (l.selection = dh(a, 0)), a.length > 1)) {
      let c = new Or(a, 0),
        u = (l.effects = [Ds.of(c)])
      t.state.field(ps, !1) === void 0 &&
        u.push(ne.appendConfig.of([ps, OE, gE, Lv]))
    }
    t.dispatch(t.state.update(l))
  }
}
function Uv(n) {
  return ({ state: e, dispatch: t }) => {
    let i = e.field(ps, !1)
    if (!i || (n < 0 && i.active == 0)) return !1
    let r = i.active + n,
      s = n > 0 && !i.ranges.some((o) => o.field == r + n)
    return (
      t(
        e.update({
          selection: dh(i.ranges, r),
          effects: Ds.of(s ? null : new Or(i.ranges, r)),
          scrollIntoView: !0
        })
      ),
      !0
    )
  }
}
const fE = ({ state: n, dispatch: e }) =>
    n.field(ps, !1) ? (e(n.update({ effects: Ds.of(null) })), !0) : !1,
  hE = /* @__PURE__ */ Uv(1),
  dE = /* @__PURE__ */ Uv(-1),
  pE = [
    { key: 'Tab', run: hE, shift: dE },
    { key: 'Escape', run: fE }
  ],
  IO = /* @__PURE__ */ q.define({
    combine(n) {
      return n.length ? n[0] : pE
    }
  }),
  OE = /* @__PURE__ */ Pi.highest(
    /* @__PURE__ */ Cs.compute([IO], (n) => n.facet(IO))
  )
function ct(n, e) {
  return Object.assign(Object.assign({}, e), { apply: uE(n) })
}
const gE = /* @__PURE__ */ M.domEventHandlers({
    mousedown(n, e) {
      let t = e.state.field(ps, !1),
        i
      if (!t || (i = e.posAtCoords({ x: n.clientX, y: n.clientY })) == null)
        return !1
      let r = t.ranges.find((s) => s.from <= i && s.to >= i)
      return !r || r.field == t.active
        ? !1
        : (e.dispatch({
            selection: dh(t.ranges, r.field),
            effects: Ds.of(
              t.ranges.some((s) => s.field > r.field)
                ? new Or(t.ranges, r.field)
                : null
            ),
            scrollIntoView: !0
          }),
          !0)
    }
  }),
  Os = {
    brackets: ['(', '[', '{', "'", '"'],
    before: ')]}:;>',
    stringPrefixes: []
  },
  yi = /* @__PURE__ */ ne.define({
    map(n, e) {
      let t = e.mapPos(n, -1, Fe.TrackAfter)
      return t ?? void 0
    }
  }),
  ph = /* @__PURE__ */ new (class extends vi {})()
ph.startSide = 1
ph.endSide = -1
const qv = /* @__PURE__ */ We.define({
  create() {
    return fe.empty
  },
  update(n, e) {
    if (e.selection) {
      let t = e.state.doc.lineAt(e.selection.main.head)
      n = n.update({ filter: (i) => i >= t.from && i <= t.to })
    }
    n = n.map(e.changes)
    for (let t of e.effects)
      t.is(yi) && (n = n.update({ add: [ph.range(t.value, t.value + 1)] }))
    return n
  }
})
function mE() {
  return [bE, qv]
}
const Pc = '()[]{}<>'
function zv(n) {
  for (let e = 0; e < Pc.length; e += 2)
    if (Pc.charCodeAt(e) == n) return Pc.charAt(e + 1)
  return Xf(n < 128 ? n : n + 1)
}
function Fv(n, e) {
  return n.languageDataAt('closeBrackets', e)[0] || Os
}
const yE =
    typeof navigator == 'object' &&
    /* @__PURE__ */ /Android\b/.test(navigator.userAgent),
  bE = /* @__PURE__ */ M.inputHandler.of((n, e, t, i) => {
    if ((yE ? n.composing : n.compositionStarted) || n.state.readOnly) return !1
    let r = n.state.selection.main
    if (
      i.length > 2 ||
      (i.length == 2 && Ct(qe(i, 0)) == 1) ||
      e != r.from ||
      t != r.to
    )
      return !1
    let s = xE(n.state, i)
    return s ? (n.dispatch(s), !0) : !1
  }),
  vE = ({ state: n, dispatch: e }) => {
    if (n.readOnly) return !1
    let i = Fv(n, n.selection.main.head).brackets || Os.brackets,
      r = null,
      s = n.changeByRange((o) => {
        if (o.empty) {
          let a = wE(n.doc, o.head)
          for (let l of i)
            if (l == a && El(n.doc, o.head) == zv(qe(l, 0)))
              return {
                changes: { from: o.head - l.length, to: o.head + l.length },
                range: _.cursor(o.head - l.length)
              }
        }
        return { range: (r = o) }
      })
    return (
      r || e(n.update(s, { scrollIntoView: !0, userEvent: 'delete.backward' })),
      !r
    )
  },
  SE = [{ key: 'Backspace', run: vE }]
function xE(n, e) {
  let t = Fv(n, n.selection.main.head),
    i = t.brackets || Os.brackets
  for (let r of i) {
    let s = zv(qe(r, 0))
    if (e == r)
      return s == r
        ? QE(n, r, i.indexOf(r + r + r) > -1, t)
        : $E(n, r, s, t.before || Os.before)
    if (e == s && Gv(n, n.selection.main.from)) return PE(n, r, s)
  }
  return null
}
function Gv(n, e) {
  let t = !1
  return (
    n.field(qv).between(0, n.doc.length, (i) => {
      i == e && (t = !0)
    }),
    t
  )
}
function El(n, e) {
  let t = n.sliceString(e, e + 2)
  return t.slice(0, Ct(qe(t, 0)))
}
function wE(n, e) {
  let t = n.sliceString(e - 2, e)
  return Ct(qe(t, 0)) == t.length ? t : t.slice(1)
}
function $E(n, e, t, i) {
  let r = null,
    s = n.changeByRange((o) => {
      if (!o.empty)
        return {
          changes: [
            { insert: e, from: o.from },
            { insert: t, from: o.to }
          ],
          effects: yi.of(o.to + e.length),
          range: _.range(o.anchor + e.length, o.head + e.length)
        }
      let a = El(n.doc, o.head)
      return !a || /\s/.test(a) || i.indexOf(a) > -1
        ? {
            changes: { insert: e + t, from: o.head },
            effects: yi.of(o.head + e.length),
            range: _.cursor(o.head + e.length)
          }
        : { range: (r = o) }
    })
  return r
    ? null
    : n.update(s, {
        scrollIntoView: !0,
        userEvent: 'input.type'
      })
}
function PE(n, e, t) {
  let i = null,
    r = n.changeByRange((s) =>
      s.empty && El(n.doc, s.head) == t
        ? {
            changes: { from: s.head, to: s.head + t.length, insert: t },
            range: _.cursor(s.head + t.length)
          }
        : (i = { range: s })
    )
  return i
    ? null
    : n.update(r, {
        scrollIntoView: !0,
        userEvent: 'input.type'
      })
}
function QE(n, e, t, i) {
  let r = i.stringPrefixes || Os.stringPrefixes,
    s = null,
    o = n.changeByRange((a) => {
      if (!a.empty)
        return {
          changes: [
            { insert: e, from: a.from },
            { insert: e, from: a.to }
          ],
          effects: yi.of(a.to + e.length),
          range: _.range(a.anchor + e.length, a.head + e.length)
        }
      let l = a.head,
        c = El(n.doc, l),
        u
      if (c == e) {
        if (NO(n, l))
          return {
            changes: { insert: e + e, from: l },
            effects: yi.of(l + e.length),
            range: _.cursor(l + e.length)
          }
        if (Gv(n, l)) {
          let h =
            t && n.sliceDoc(l, l + e.length * 3) == e + e + e ? e + e + e : e
          return {
            changes: { from: l, to: l + h.length, insert: h },
            range: _.cursor(l + h.length)
          }
        }
      } else {
        if (
          t &&
          n.sliceDoc(l - 2 * e.length, l) == e + e &&
          (u = MO(n, l - 2 * e.length, r)) > -1 &&
          NO(n, u)
        )
          return {
            changes: { insert: e + e + e + e, from: l },
            effects: yi.of(l + e.length),
            range: _.cursor(l + e.length)
          }
        if (
          n.charCategorizer(l)(c) != we.Word &&
          MO(n, l, r) > -1 &&
          !kE(n, l, e, r)
        )
          return {
            changes: { insert: e + e, from: l },
            effects: yi.of(l + e.length),
            range: _.cursor(l + e.length)
          }
      }
      return { range: (s = a) }
    })
  return s
    ? null
    : n.update(o, {
        scrollIntoView: !0,
        userEvent: 'input.type'
      })
}
function NO(n, e) {
  let t = Ze(n).resolveInner(e + 1)
  return t.parent && t.from == e
}
function kE(n, e, t, i) {
  let r = Ze(n).resolveInner(e, -1),
    s = i.reduce((o, a) => Math.max(o, a.length), 0)
  for (let o = 0; o < 5; o++) {
    let a = n.sliceDoc(r.from, Math.min(r.to, r.from + t.length + s)),
      l = a.indexOf(t)
    if (!l || (l > -1 && i.indexOf(a.slice(0, l)) > -1)) {
      let u = r.firstChild
      for (; u && u.from == r.from && u.to - u.from > t.length + l; ) {
        if (n.sliceDoc(u.to - t.length, u.to) == t) return !1
        u = u.firstChild
      }
      return !0
    }
    let c = r.to == e && r.parent
    if (!c) break
    r = c
  }
  return !1
}
function MO(n, e, t) {
  let i = n.charCategorizer(e)
  if (i(n.sliceDoc(e - 1, e)) != we.Word) return e
  for (let r of t) {
    let s = e - r.length
    if (n.sliceDoc(s, e) == r && i(n.sliceDoc(s - 1, s)) != we.Word) return s
  }
  return -1
}
function TE(n = {}) {
  return [bt, Je.of(n), sE, CE, Lv]
}
const Hv = [
    { key: 'Ctrl-Space', run: eE },
    { key: 'Escape', run: tE },
    { key: 'ArrowDown', run: /* @__PURE__ */ go(!0) },
    { key: 'ArrowUp', run: /* @__PURE__ */ go(!1) },
    { key: 'PageDown', run: /* @__PURE__ */ go(!0, 'page') },
    { key: 'PageUp', run: /* @__PURE__ */ go(!1, 'page') },
    { key: 'Enter', run: JR }
  ],
  CE = /* @__PURE__ */ Pi.highest(
    /* @__PURE__ */ Cs.computeN([Je], (n) =>
      n.facet(Je).defaultKeymap ? [Hv] : []
    )
  )
class _E {
  constructor(e, t, i) {
    ;(this.from = e), (this.to = t), (this.diagnostic = i)
  }
}
class Oi {
  constructor(e, t, i) {
    ;(this.diagnostics = e), (this.panel = t), (this.selected = i)
  }
  static init(e, t, i) {
    let r = e,
      s = i.facet(eS).markerFilter
    s && (r = s(r))
    let o = K.set(
      r.map((a) =>
        a.from == a.to ||
        (a.from == a.to - 1 && i.doc.lineAt(a.from).to == a.from)
          ? K.widget({
              widget: new NE(a),
              diagnostic: a
            }).range(a.from)
          : K.mark({
              attributes: {
                class:
                  'cm-lintRange cm-lintRange-' +
                  a.severity +
                  (a.markClass ? ' ' + a.markClass : '')
              },
              diagnostic: a
            }).range(a.from, a.to)
      ),
      !0
    )
    return new Oi(o, t, or(o))
  }
}
function or(n, e = null, t = 0) {
  let i = null
  return (
    n.between(t, 1e9, (r, s, { spec: o }) => {
      if (!(e && o.diagnostic != e)) return (i = new _E(r, s, o.diagnostic)), !1
    }),
    i
  )
}
function ZE(n, e) {
  let t = n.startState.doc.lineAt(e.pos)
  return !!(
    n.effects.some((i) => i.is(Kv)) || n.changes.touchesRange(t.from, t.to)
  )
}
function AE(n, e) {
  return n.field(St, !1) ? e : e.concat(ne.appendConfig.of(WE))
}
const Kv = /* @__PURE__ */ ne.define(),
  Oh = /* @__PURE__ */ ne.define(),
  Jv = /* @__PURE__ */ ne.define(),
  St = /* @__PURE__ */ We.define({
    create() {
      return new Oi(K.none, null, null)
    },
    update(n, e) {
      if (e.docChanged) {
        let t = n.diagnostics.map(e.changes),
          i = null
        if (n.selected) {
          let r = e.changes.mapPos(n.selected.from, 1)
          i = or(t, n.selected.diagnostic, r) || or(t, null, r)
        }
        n = new Oi(t, n.panel, i)
      }
      for (let t of e.effects)
        t.is(Kv)
          ? (n = Oi.init(t.value, n.panel, e.state))
          : t.is(Oh)
            ? (n = new Oi(n.diagnostics, t.value ? Dl.open : null, n.selected))
            : t.is(Jv) && (n = new Oi(n.diagnostics, n.panel, t.value))
      return n
    },
    provide: (n) => [
      ls.from(n, (e) => e.panel),
      M.decorations.from(n, (e) => e.diagnostics)
    ]
  }),
  RE = /* @__PURE__ */ K.mark({ class: 'cm-lintRange cm-lintRange-active' })
function EE(n, e, t) {
  let { diagnostics: i } = n.state.field(St),
    r = [],
    s = 2e8,
    o = 0
  i.between(e - (t < 0 ? 1 : 0), e + (t > 0 ? 1 : 0), (l, c, { spec: u }) => {
    e >= l &&
      e <= c &&
      (l == c || ((e > l || t > 0) && (e < c || t < 0))) &&
      (r.push(u.diagnostic), (s = Math.min(l, s)), (o = Math.max(c, o)))
  })
  let a = n.state.facet(eS).tooltipFilter
  return (
    a && (r = a(r)),
    r.length
      ? {
          pos: s,
          end: o,
          above: n.state.doc.lineAt(s).to < o,
          create() {
            return { dom: DE(n, r) }
          }
        }
      : null
  )
}
function DE(n, e) {
  return ge(
    'ul',
    { class: 'cm-tooltip-lint' },
    e.map((t) => nS(n, t, !1))
  )
}
const XE = (n) => {
    let e = n.state.field(St, !1)
    ;(!e || !e.panel) && n.dispatch({ effects: AE(n.state, [Oh.of(!0)]) })
    let t = as(n, Dl.open)
    return t && t.dom.querySelector('.cm-panel-lint ul').focus(), !0
  },
  VO = (n) => {
    let e = n.state.field(St, !1)
    return !e || !e.panel ? !1 : (n.dispatch({ effects: Oh.of(!1) }), !0)
  },
  YE = (n) => {
    let e = n.state.field(St, !1)
    if (!e) return !1
    let t = n.state.selection.main,
      i = e.diagnostics.iter(t.to + 1)
    return !i.value &&
      ((i = e.diagnostics.iter(0)),
      !i.value || (i.from == t.from && i.to == t.to))
      ? !1
      : (n.dispatch({
          selection: { anchor: i.from, head: i.to },
          scrollIntoView: !0
        }),
        !0)
  },
  IE = [
    { key: 'Mod-Shift-m', run: XE, preventDefault: !0 },
    { key: 'F8', run: YE }
  ],
  eS = /* @__PURE__ */ q.define({
    combine(n) {
      return Object.assign(
        { sources: n.map((e) => e.source) },
        cn(
          n.map((e) => e.config),
          {
            delay: 750,
            markerFilter: null,
            tooltipFilter: null,
            needsRefresh: null
          },
          {
            needsRefresh: (e, t) => (e ? (t ? (i) => e(i) || t(i) : e) : t)
          }
        )
      )
    }
  })
function tS(n) {
  let e = []
  if (n)
    e: for (let { name: t } of n) {
      for (let i = 0; i < t.length; i++) {
        let r = t[i]
        if (
          /[a-zA-Z]/.test(r) &&
          !e.some((s) => s.toLowerCase() == r.toLowerCase())
        ) {
          e.push(r)
          continue e
        }
      }
      e.push('')
    }
  return e
}
function nS(n, e, t) {
  var i
  let r = t ? tS(e.actions) : []
  return ge(
    'li',
    { class: 'cm-diagnostic cm-diagnostic-' + e.severity },
    ge(
      'span',
      { class: 'cm-diagnosticText' },
      e.renderMessage ? e.renderMessage() : e.message
    ),
    (i = e.actions) === null || i === void 0
      ? void 0
      : i.map((s, o) => {
          let a = !1,
            l = (h) => {
              if ((h.preventDefault(), a)) return
              a = !0
              let d = or(n.state.field(St).diagnostics, e)
              d && s.apply(n, d.from, d.to)
            },
            { name: c } = s,
            u = r[o] ? c.indexOf(r[o]) : -1,
            f =
              u < 0
                ? c
                : [c.slice(0, u), ge('u', c.slice(u, u + 1)), c.slice(u + 1)]
          return ge(
            'button',
            {
              type: 'button',
              class: 'cm-diagnosticAction',
              onclick: l,
              onmousedown: l,
              'aria-label': ` Action: ${c}${
                u < 0 ? '' : ` (access key "${r[o]})"`
              }.`
            },
            f
          )
        }),
    e.source && ge('div', { class: 'cm-diagnosticSource' }, e.source)
  )
}
class NE extends un {
  constructor(e) {
    super(), (this.diagnostic = e)
  }
  eq(e) {
    return e.diagnostic == this.diagnostic
  }
  toDOM() {
    return ge('span', {
      class: 'cm-lintPoint cm-lintPoint-' + this.diagnostic.severity
    })
  }
}
class WO {
  constructor(e, t) {
    ;(this.diagnostic = t),
      (this.id = 'item_' + Math.floor(Math.random() * 4294967295).toString(16)),
      (this.dom = nS(e, t, !0)),
      (this.dom.id = this.id),
      this.dom.setAttribute('role', 'option')
  }
}
class Dl {
  constructor(e) {
    ;(this.view = e), (this.items = [])
    let t = (r) => {
        if (r.keyCode == 27) VO(this.view), this.view.focus()
        else if (r.keyCode == 38 || r.keyCode == 33)
          this.moveSelection(
            (this.selectedIndex - 1 + this.items.length) % this.items.length
          )
        else if (r.keyCode == 40 || r.keyCode == 34)
          this.moveSelection((this.selectedIndex + 1) % this.items.length)
        else if (r.keyCode == 36) this.moveSelection(0)
        else if (r.keyCode == 35) this.moveSelection(this.items.length - 1)
        else if (r.keyCode == 13) this.view.focus()
        else if (
          r.keyCode >= 65 &&
          r.keyCode <= 90 &&
          this.selectedIndex >= 0
        ) {
          let { diagnostic: s } = this.items[this.selectedIndex],
            o = tS(s.actions)
          for (let a = 0; a < o.length; a++)
            if (o[a].toUpperCase().charCodeAt(0) == r.keyCode) {
              let l = or(this.view.state.field(St).diagnostics, s)
              l && s.actions[a].apply(e, l.from, l.to)
            }
        } else return
        r.preventDefault()
      },
      i = (r) => {
        for (let s = 0; s < this.items.length; s++)
          this.items[s].dom.contains(r.target) && this.moveSelection(s)
      }
    ;(this.list = ge('ul', {
      tabIndex: 0,
      role: 'listbox',
      'aria-label': this.view.state.phrase('Diagnostics'),
      onkeydown: t,
      onclick: i
    })),
      (this.dom = ge(
        'div',
        { class: 'cm-panel-lint' },
        this.list,
        ge(
          'button',
          {
            type: 'button',
            name: 'close',
            'aria-label': this.view.state.phrase('close'),
            onclick: () => VO(this.view)
          },
          '×'
        )
      )),
      this.update()
  }
  get selectedIndex() {
    let e = this.view.state.field(St).selected
    if (!e) return -1
    for (let t = 0; t < this.items.length; t++)
      if (this.items[t].diagnostic == e.diagnostic) return t
    return -1
  }
  update() {
    let { diagnostics: e, selected: t } = this.view.state.field(St),
      i = 0,
      r = !1,
      s = null
    for (
      e.between(0, this.view.state.doc.length, (o, a, { spec: l }) => {
        let c = -1,
          u
        for (let f = i; f < this.items.length; f++)
          if (this.items[f].diagnostic == l.diagnostic) {
            c = f
            break
          }
        c < 0
          ? ((u = new WO(this.view, l.diagnostic)),
            this.items.splice(i, 0, u),
            (r = !0))
          : ((u = this.items[c]),
            c > i && (this.items.splice(i, c - i), (r = !0))),
          t && u.diagnostic == t.diagnostic
            ? u.dom.hasAttribute('aria-selected') ||
              (u.dom.setAttribute('aria-selected', 'true'), (s = u))
            : u.dom.hasAttribute('aria-selected') &&
              u.dom.removeAttribute('aria-selected'),
          i++
      });
      i < this.items.length &&
      !(this.items.length == 1 && this.items[0].diagnostic.from < 0);

    )
      (r = !0), this.items.pop()
    this.items.length == 0 &&
      (this.items.push(
        new WO(this.view, {
          from: -1,
          to: -1,
          severity: 'info',
          message: this.view.state.phrase('No diagnostics')
        })
      ),
      (r = !0)),
      s
        ? (this.list.setAttribute('aria-activedescendant', s.id),
          this.view.requestMeasure({
            key: this,
            read: () => ({
              sel: s.dom.getBoundingClientRect(),
              panel: this.list.getBoundingClientRect()
            }),
            write: ({ sel: o, panel: a }) => {
              let l = a.height / this.list.offsetHeight
              o.top < a.top
                ? (this.list.scrollTop -= (a.top - o.top) / l)
                : o.bottom > a.bottom &&
                  (this.list.scrollTop += (o.bottom - a.bottom) / l)
            }
          }))
        : this.selectedIndex < 0 &&
          this.list.removeAttribute('aria-activedescendant'),
      r && this.sync()
  }
  sync() {
    let e = this.list.firstChild
    function t() {
      let i = e
      ;(e = i.nextSibling), i.remove()
    }
    for (let i of this.items)
      if (i.dom.parentNode == this.list) {
        for (; e != i.dom; ) t()
        e = i.dom.nextSibling
      } else this.list.insertBefore(i.dom, e)
    for (; e; ) t()
  }
  moveSelection(e) {
    if (this.selectedIndex < 0) return
    let t = this.view.state.field(St),
      i = or(t.diagnostics, this.items[e].diagnostic)
    i &&
      this.view.dispatch({
        selection: { anchor: i.from, head: i.to },
        scrollIntoView: !0,
        effects: Jv.of(i)
      })
  }
  static open(e) {
    return new Dl(e)
  }
}
function ME(n, e = 'viewBox="0 0 40 40"') {
  return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${e}>${encodeURIComponent(
    n
  )}</svg>')`
}
function mo(n) {
  return ME(
    `<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${n}" fill="none" stroke-width=".7"/>`,
    'width="6" height="3"'
  )
}
const VE = /* @__PURE__ */ M.baseTheme({
    '.cm-diagnostic': {
      padding: '3px 6px 3px 8px',
      marginLeft: '-1px',
      display: 'block',
      whiteSpace: 'pre-wrap'
    },
    '.cm-diagnostic-error': { borderLeft: '5px solid #d11' },
    '.cm-diagnostic-warning': { borderLeft: '5px solid orange' },
    '.cm-diagnostic-info': { borderLeft: '5px solid #999' },
    '.cm-diagnostic-hint': { borderLeft: '5px solid #66d' },
    '.cm-diagnosticAction': {
      font: 'inherit',
      border: 'none',
      padding: '2px 4px',
      backgroundColor: '#444',
      color: 'white',
      borderRadius: '3px',
      marginLeft: '8px',
      cursor: 'pointer'
    },
    '.cm-diagnosticSource': {
      fontSize: '70%',
      opacity: 0.7
    },
    '.cm-lintRange': {
      backgroundPosition: 'left bottom',
      backgroundRepeat: 'repeat-x',
      paddingBottom: '0.7px'
    },
    '.cm-lintRange-error': { backgroundImage: /* @__PURE__ */ mo('#d11') },
    '.cm-lintRange-warning': { backgroundImage: /* @__PURE__ */ mo('orange') },
    '.cm-lintRange-info': { backgroundImage: /* @__PURE__ */ mo('#999') },
    '.cm-lintRange-hint': { backgroundImage: /* @__PURE__ */ mo('#66d') },
    '.cm-lintRange-active': { backgroundColor: '#ffdd9980' },
    '.cm-tooltip-lint': {
      padding: 0,
      margin: 0
    },
    '.cm-lintPoint': {
      position: 'relative',
      '&:after': {
        content: '""',
        position: 'absolute',
        bottom: 0,
        left: '-2px',
        borderLeft: '3px solid transparent',
        borderRight: '3px solid transparent',
        borderBottom: '4px solid #d11'
      }
    },
    '.cm-lintPoint-warning': {
      '&:after': { borderBottomColor: 'orange' }
    },
    '.cm-lintPoint-info': {
      '&:after': { borderBottomColor: '#999' }
    },
    '.cm-lintPoint-hint': {
      '&:after': { borderBottomColor: '#66d' }
    },
    '.cm-panel.cm-panel-lint': {
      position: 'relative',
      '& ul': {
        maxHeight: '100px',
        overflowY: 'auto',
        '& [aria-selected]': {
          backgroundColor: '#ddd',
          '& u': { textDecoration: 'underline' }
        },
        '&:focus [aria-selected]': {
          background_fallback: '#bdf',
          backgroundColor: 'Highlight',
          color_fallback: 'white',
          color: 'HighlightText'
        },
        '& u': { textDecoration: 'none' },
        padding: 0,
        margin: 0
      },
      '& [name=close]': {
        position: 'absolute',
        top: '0',
        right: '2px',
        background: 'inherit',
        border: 'none',
        font: 'inherit',
        padding: 0,
        margin: 0
      }
    }
  }),
  WE = [
    St,
    /* @__PURE__ */ M.decorations.compute([St], (n) => {
      let { selected: e, panel: t } = n.field(St)
      return !e || !t || e.from == e.to
        ? K.none
        : K.set([RE.range(e.from, e.to)])
    }),
    /* @__PURE__ */ C_(EE, { hideOn: ZE }),
    VE
  ]
var jO = function (e) {
  e === void 0 && (e = {})
  var { crosshairCursor: t = !1 } = e,
    i = []
  e.closeBracketsKeymap !== !1 && (i = i.concat(SE)),
    e.defaultKeymap !== !1 && (i = i.concat(lR)),
    e.searchKeymap !== !1 && (i = i.concat(RR)),
    e.historyKeymap !== !1 && (i = i.concat(mA)),
    e.foldKeymap !== !1 && (i = i.concat(ZZ)),
    e.completionKeymap !== !1 && (i = i.concat(Hv)),
    e.lintKeymap !== !1 && (i = i.concat(IE))
  var r = []
  return (
    e.lineNumbers !== !1 && r.push(I_()),
    e.highlightActiveLineGutter !== !1 && r.push(V_()),
    e.highlightSpecialChars !== !1 && r.push(s_()),
    e.history !== !1 && r.push(lA()),
    e.foldGutter !== !1 && r.push(DZ()),
    e.drawSelection !== !1 && r.push(zC()),
    e.dropCursor !== !1 && r.push(JC()),
    e.allowMultipleSelections !== !1 &&
      r.push(oe.allowMultipleSelections.of(!0)),
    e.indentOnInput !== !1 && r.push(xZ()),
    e.syntaxHighlighting !== !1 &&
      r.push(
        nh(NZ, {
          fallback: !0
        })
      ),
    e.bracketMatching !== !1 && r.push(UZ()),
    e.closeBrackets !== !1 && r.push(mE()),
    e.autocompletion !== !1 && r.push(TE()),
    e.rectangularSelection !== !1 && r.push(b_()),
    t !== !1 && r.push(x_()),
    e.highlightActiveLine !== !1 && r.push(f_()),
    e.highlightSelectionMatches !== !1 && r.push(pR()),
    e.tabSize &&
      typeof e.tabSize == 'number' &&
      r.push(Zs.of(' '.repeat(e.tabSize))),
    r.concat([Cs.of(i.flat())]).filter(Boolean)
  )
}
const jE = '#e5c07b',
  BO = '#e06c75',
  BE = '#56b6c2',
  LE = '#ffffff',
  Fo = '#abb2bf',
  ff = '#7d8799',
  UE = '#61afef',
  qE = '#98c379',
  LO = '#d19a66',
  zE = '#c678dd',
  FE = '#21252b',
  UO = '#2c313a',
  qO = '#282c34',
  Qc = '#353a42',
  GE = '#3E4451',
  zO = '#528bff',
  HE = /* @__PURE__ */ M.theme(
    {
      '&': {
        color: Fo,
        backgroundColor: qO
      },
      '.cm-content': {
        caretColor: zO
      },
      '.cm-cursor, .cm-dropCursor': { borderLeftColor: zO },
      '&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection':
        { backgroundColor: GE },
      '.cm-panels': { backgroundColor: FE, color: Fo },
      '.cm-panels.cm-panels-top': { borderBottom: '2px solid black' },
      '.cm-panels.cm-panels-bottom': { borderTop: '2px solid black' },
      '.cm-searchMatch': {
        backgroundColor: '#72a1ff59',
        outline: '1px solid #457dff'
      },
      '.cm-searchMatch.cm-searchMatch-selected': {
        backgroundColor: '#6199ff2f'
      },
      '.cm-activeLine': { backgroundColor: '#6699ff0b' },
      '.cm-selectionMatch': { backgroundColor: '#aafe661a' },
      '&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket': {
        backgroundColor: '#bad0f847'
      },
      '.cm-gutters': {
        backgroundColor: qO,
        color: ff,
        border: 'none'
      },
      '.cm-activeLineGutter': {
        backgroundColor: UO
      },
      '.cm-foldPlaceholder': {
        backgroundColor: 'transparent',
        border: 'none',
        color: '#ddd'
      },
      '.cm-tooltip': {
        border: 'none',
        backgroundColor: Qc
      },
      '.cm-tooltip .cm-tooltip-arrow:before': {
        borderTopColor: 'transparent',
        borderBottomColor: 'transparent'
      },
      '.cm-tooltip .cm-tooltip-arrow:after': {
        borderTopColor: Qc,
        borderBottomColor: Qc
      },
      '.cm-tooltip-autocomplete': {
        '& > ul > li[aria-selected]': {
          backgroundColor: UO,
          color: Fo
        }
      }
    },
    { dark: !0 }
  ),
  KE = /* @__PURE__ */ hr.define([
    {
      tag: g.keyword,
      color: zE
    },
    {
      tag: [g.name, g.deleted, g.character, g.propertyName, g.macroName],
      color: BO
    },
    {
      tag: [/* @__PURE__ */ g.function(g.variableName), g.labelName],
      color: UE
    },
    {
      tag: [
        g.color,
        /* @__PURE__ */ g.constant(g.name),
        /* @__PURE__ */ g.standard(g.name)
      ],
      color: LO
    },
    {
      tag: [/* @__PURE__ */ g.definition(g.name), g.separator],
      color: Fo
    },
    {
      tag: [
        g.typeName,
        g.className,
        g.number,
        g.changed,
        g.annotation,
        g.modifier,
        g.self,
        g.namespace
      ],
      color: jE
    },
    {
      tag: [
        g.operator,
        g.operatorKeyword,
        g.url,
        g.escape,
        g.regexp,
        g.link,
        /* @__PURE__ */ g.special(g.string)
      ],
      color: BE
    },
    {
      tag: [g.meta, g.comment],
      color: ff
    },
    {
      tag: g.strong,
      fontWeight: 'bold'
    },
    {
      tag: g.emphasis,
      fontStyle: 'italic'
    },
    {
      tag: g.strikethrough,
      textDecoration: 'line-through'
    },
    {
      tag: g.link,
      color: ff,
      textDecoration: 'underline'
    },
    {
      tag: g.heading,
      fontWeight: 'bold',
      color: BO
    },
    {
      tag: [g.atom, g.bool, /* @__PURE__ */ g.special(g.variableName)],
      color: LO
    },
    {
      tag: [g.processingInstruction, g.string, g.inserted],
      color: qE
    },
    {
      tag: g.invalid,
      color: LE
    }
  ]),
  JE = [HE, /* @__PURE__ */ nh(KE)]
var e2 = M.theme(
    {
      '&': {
        backgroundColor: '#fff'
      }
    },
    {
      dark: !1
    }
  ),
  t2 = function (e) {
    e === void 0 && (e = {})
    var {
        indentWithTab: t = !0,
        editable: i = !0,
        readOnly: r = !1,
        theme: s = 'light',
        placeholder: o = '',
        basicSetup: a = !0
      } = e,
      l = []
    switch (
      (t && l.unshift(Cs.of([cR])),
      a && (typeof a == 'boolean' ? l.unshift(jO()) : l.unshift(jO(a))),
      o && l.unshift(O_(o)),
      s)
    ) {
      case 'light':
        l.push(e2)
        break
      case 'dark':
        l.push(JE)
        break
      case 'none':
        break
      default:
        l.push(s)
        break
    }
    return (
      i === !1 && l.push(M.editable.of(!1)),
      r && l.push(oe.readOnly.of(!0)),
      [...l]
    )
  },
  n2 = (n) => ({
    line: n.state.doc.lineAt(n.state.selection.main.from),
    lineCount: n.state.doc.lines,
    lineBreak: n.state.lineBreak,
    length: n.state.doc.length,
    readOnly: n.state.readOnly,
    tabSize: n.state.tabSize,
    selection: n.state.selection,
    selectionAsSingle: n.state.selection.asSingle().main,
    ranges: n.state.selection.ranges,
    selectionCode: n.state.sliceDoc(
      n.state.selection.main.from,
      n.state.selection.main.to
    ),
    selections: n.state.selection.ranges.map((e) =>
      n.state.sliceDoc(e.from, e.to)
    ),
    selectedText: n.state.selection.ranges.some((e) => !e.empty)
  }),
  FO = ln.define(),
  i2 = []
function r2(n) {
  var {
      value: e,
      selection: t,
      onChange: i,
      onStatistics: r,
      onCreateEditor: s,
      onUpdate: o,
      extensions: a = i2,
      autoFocus: l,
      theme: c = 'light',
      height: u = null,
      minHeight: f = null,
      maxHeight: h = null,
      width: d = null,
      minWidth: O = null,
      maxWidth: m = null,
      placeholder: b = '',
      editable: x = !0,
      readOnly: w = !1,
      indentWithTab: T = !0,
      basicSetup: Q = !0,
      root: P,
      initialState: C
    } = n,
    [A, j] = Te.useState(),
    [X, L] = Te.useState(),
    [U, E] = Te.useState(),
    I = M.theme({
      '&': {
        height: u,
        minHeight: f,
        maxHeight: h,
        width: d,
        minWidth: O,
        maxWidth: m
      },
      '& .cm-scroller': {
        height: '100% !important'
      }
    }),
    B = M.updateListener.of((te) => {
      if (
        te.docChanged &&
        typeof i == 'function' && // Fix echoing of the remote changes:
        // If transaction is market as remote we don't have to call `onChange` handler again
        !te.transactions.some((he) => he.annotation(FO))
      ) {
        var ce = te.state.doc,
          ye = ce.toString()
        i(ye, te)
      }
      r && r(n2(te))
    }),
    ee = t2({
      theme: c,
      editable: x,
      readOnly: w,
      placeholder: b,
      indentWithTab: T,
      basicSetup: Q
    }),
    ie = [B, I, ...ee]
  return (
    o && typeof o == 'function' && ie.push(M.updateListener.of(o)),
    (ie = ie.concat(a)),
    Te.useEffect(() => {
      if (A && !U) {
        var te = {
            doc: e,
            selection: t,
            extensions: ie
          },
          ce = C ? oe.fromJSON(C.json, te, C.fields) : oe.create(te)
        if ((E(ce), !X)) {
          var ye = new M({
            state: ce,
            parent: A,
            root: P
          })
          L(ye), s && s(ye, ce)
        }
      }
      return () => {
        X && (E(void 0), L(void 0))
      }
    }, [A, U]),
    Te.useEffect(() => j(n.container), [n.container]),
    Te.useEffect(
      () => () => {
        X && (X.destroy(), L(void 0))
      },
      [X]
    ),
    Te.useEffect(() => {
      l && X && X.focus()
    }, [l, X]),
    Te.useEffect(() => {
      X &&
        X.dispatch({
          effects: ne.reconfigure.of(ie)
        })
    }, [c, a, u, f, h, d, O, m, b, x, w, T, Q, i, o]),
    Te.useEffect(() => {
      if (e !== void 0) {
        var te = X ? X.state.doc.toString() : ''
        X &&
          e !== te &&
          X.dispatch({
            changes: {
              from: 0,
              to: te.length,
              insert: e || ''
            },
            annotations: [FO.of(!0)]
          })
      }
    }, [e, X]),
    {
      state: U,
      setState: E,
      view: X,
      setView: L,
      container: A,
      setContainer: j
    }
  )
}
var s2 = [
    'className',
    'value',
    'selection',
    'extensions',
    'onChange',
    'onStatistics',
    'onCreateEditor',
    'onUpdate',
    'autoFocus',
    'theme',
    'height',
    'minHeight',
    'maxHeight',
    'width',
    'minWidth',
    'maxWidth',
    'basicSetup',
    'placeholder',
    'indentWithTab',
    'editable',
    'readOnly',
    'root',
    'initialState'
  ],
  hf = /* @__PURE__ */ Te.forwardRef((n, e) => {
    var {
        className: t,
        value: i = '',
        selection: r,
        extensions: s = [],
        onChange: o,
        onStatistics: a,
        onCreateEditor: l,
        onUpdate: c,
        autoFocus: u,
        theme: f = 'light',
        height: h,
        minHeight: d,
        maxHeight: O,
        width: m,
        minWidth: b,
        maxWidth: x,
        basicSetup: w,
        placeholder: T,
        indentWithTab: Q,
        editable: P,
        readOnly: C,
        root: A,
        initialState: j
      } = n,
      X = I0(n, s2),
      L = Te.useRef(null),
      {
        state: U,
        view: E,
        container: I
      } = r2({
        container: L.current,
        root: A,
        value: i,
        autoFocus: u,
        theme: f,
        height: h,
        minHeight: d,
        maxHeight: O,
        width: m,
        minWidth: b,
        maxWidth: x,
        basicSetup: w,
        placeholder: T,
        indentWithTab: Q,
        editable: P,
        readOnly: C,
        selection: r,
        onChange: o,
        onStatistics: a,
        onCreateEditor: l,
        onUpdate: c,
        extensions: s,
        initialState: j
      })
    if (
      (Te.useImperativeHandle(
        e,
        () => ({
          editor: L.current,
          state: U,
          view: E
        }),
        [L, I, U, E]
      ),
      typeof i != 'string')
    )
      throw new Error('value must be typeof string but got ' + typeof i)
    var B = typeof f == 'string' ? 'cm-theme-' + f : 'cm-theme'
    return /* @__PURE__ */ z.jsx(
      'div',
      Of(
        {
          ref: L,
          className: '' + B + (t ? ' ' + t : '')
        },
        X
      )
    )
  })
hf.displayName = 'CodeMirror'
class Fa {
  /**
  @internal
  */
  constructor(e, t, i, r, s, o, a, l, c, u = 0, f) {
    ;(this.p = e),
      (this.stack = t),
      (this.state = i),
      (this.reducePos = r),
      (this.pos = s),
      (this.score = o),
      (this.buffer = a),
      (this.bufferBase = l),
      (this.curContext = c),
      (this.lookAhead = u),
      (this.parent = f)
  }
  /**
  @internal
  */
  toString() {
    return `[${this.stack.filter((e, t) => t % 3 == 0).concat(this.state)}]@${
      this.pos
    }${this.score ? '!' + this.score : ''}`
  }
  // Start an empty stack
  /**
  @internal
  */
  static start(e, t, i = 0) {
    let r = e.parser.context
    return new Fa(
      e,
      [],
      t,
      i,
      i,
      0,
      [],
      0,
      r ? new GO(r, r.start) : null,
      0,
      null
    )
  }
  /**
  The stack's current [context](#lr.ContextTracker) value, if
  any. Its type will depend on the context tracker's type
  parameter, or it will be `null` if there is no context
  tracker.
  */
  get context() {
    return this.curContext ? this.curContext.context : null
  }
  // Push a state onto the stack, tracking its start position as well
  // as the buffer base at that point.
  /**
  @internal
  */
  pushState(e, t) {
    this.stack.push(this.state, t, this.bufferBase + this.buffer.length),
      (this.state = e)
  }
  // Apply a reduce action
  /**
  @internal
  */
  reduce(e) {
    var t
    let i = e >> 19,
      r = e & 65535,
      { parser: s } = this.p,
      o = s.dynamicPrecedence(r)
    if ((o && (this.score += o), i == 0)) {
      this.pushState(s.getGoto(this.state, r, !0), this.reducePos),
        r < s.minRepeatTerm &&
          this.storeNode(r, this.reducePos, this.reducePos, 4, !0),
        this.reduceContext(r, this.reducePos)
      return
    }
    let a = this.stack.length - (i - 1) * 3 - (e & 262144 ? 6 : 0),
      l = a ? this.stack[a - 2] : this.p.ranges[0].from,
      c = this.reducePos - l
    c >= 2e3 &&
      !(
        !((t = this.p.parser.nodeSet.types[r]) === null || t === void 0) &&
        t.isAnonymous
      ) &&
      (l == this.p.lastBigReductionStart
        ? (this.p.bigReductionCount++, (this.p.lastBigReductionSize = c))
        : this.p.lastBigReductionSize < c &&
          ((this.p.bigReductionCount = 1),
          (this.p.lastBigReductionStart = l),
          (this.p.lastBigReductionSize = c)))
    let u = a ? this.stack[a - 1] : 0,
      f = this.bufferBase + this.buffer.length - u
    if (r < s.minRepeatTerm || e & 131072) {
      let h = s.stateFlag(
        this.state,
        1
        /* StateFlag.Skipped */
      )
        ? this.pos
        : this.reducePos
      this.storeNode(r, l, h, f + 4, !0)
    }
    if (e & 262144) this.state = this.stack[a]
    else {
      let h = this.stack[a - 3]
      this.state = s.getGoto(h, r, !0)
    }
    for (; this.stack.length > a; ) this.stack.pop()
    this.reduceContext(r, l)
  }
  // Shift a value into the buffer
  /**
  @internal
  */
  storeNode(e, t, i, r = 4, s = !1) {
    if (
      e == 0 &&
      (!this.stack.length ||
        this.stack[this.stack.length - 1] <
          this.buffer.length + this.bufferBase)
    ) {
      let o = this,
        a = this.buffer.length
      if (
        (a == 0 &&
          o.parent &&
          ((a = o.bufferBase - o.parent.bufferBase), (o = o.parent)),
        a > 0 && o.buffer[a - 4] == 0 && o.buffer[a - 1] > -1)
      ) {
        if (t == i) return
        if (o.buffer[a - 2] >= t) {
          o.buffer[a - 2] = i
          return
        }
      }
    }
    if (!s || this.pos == i) this.buffer.push(e, t, i, r)
    else {
      let o = this.buffer.length
      if (o > 0 && this.buffer[o - 4] != 0)
        for (; o > 0 && this.buffer[o - 2] > i; )
          (this.buffer[o] = this.buffer[o - 4]),
            (this.buffer[o + 1] = this.buffer[o - 3]),
            (this.buffer[o + 2] = this.buffer[o - 2]),
            (this.buffer[o + 3] = this.buffer[o - 1]),
            (o -= 4),
            r > 4 && (r -= 4)
      ;(this.buffer[o] = e),
        (this.buffer[o + 1] = t),
        (this.buffer[o + 2] = i),
        (this.buffer[o + 3] = r)
    }
  }
  // Apply a shift action
  /**
  @internal
  */
  shift(e, t, i, r) {
    if (e & 131072) this.pushState(e & 65535, this.pos)
    else if (e & 262144)
      (this.pos = r),
        this.shiftContext(t, i),
        t <= this.p.parser.maxNode && this.buffer.push(t, i, r, 4)
    else {
      let s = e,
        { parser: o } = this.p
      ;(r > this.pos || t <= o.maxNode) &&
        ((this.pos = r),
        o.stateFlag(
          s,
          1
          /* StateFlag.Skipped */
        ) || (this.reducePos = r)),
        this.pushState(s, i),
        this.shiftContext(t, i),
        t <= o.maxNode && this.buffer.push(t, i, r, 4)
    }
  }
  // Apply an action
  /**
  @internal
  */
  apply(e, t, i, r) {
    e & 65536 ? this.reduce(e) : this.shift(e, t, i, r)
  }
  // Add a prebuilt (reused) node into the buffer.
  /**
  @internal
  */
  useNode(e, t) {
    let i = this.p.reused.length - 1
    ;(i < 0 || this.p.reused[i] != e) && (this.p.reused.push(e), i++)
    let r = this.pos
    ;(this.reducePos = this.pos = r + e.length),
      this.pushState(t, r),
      this.buffer.push(
        i,
        r,
        this.reducePos,
        -1
        /* size == -1 means this is a reused value */
      ),
      this.curContext &&
        this.updateContext(
          this.curContext.tracker.reuse(
            this.curContext.context,
            e,
            this,
            this.p.stream.reset(this.pos - e.length)
          )
        )
  }
  // Split the stack. Due to the buffer sharing and the fact
  // that `this.stack` tends to stay quite shallow, this isn't very
  // expensive.
  /**
  @internal
  */
  split() {
    let e = this,
      t = e.buffer.length
    for (; t > 0 && e.buffer[t - 2] > e.reducePos; ) t -= 4
    let i = e.buffer.slice(t),
      r = e.bufferBase + t
    for (; e && r == e.bufferBase; ) e = e.parent
    return new Fa(
      this.p,
      this.stack.slice(),
      this.state,
      this.reducePos,
      this.pos,
      this.score,
      i,
      r,
      this.curContext,
      this.lookAhead,
      e
    )
  }
  // Try to recover from an error by 'deleting' (ignoring) one token.
  /**
  @internal
  */
  recoverByDelete(e, t) {
    let i = e <= this.p.parser.maxNode
    i && this.storeNode(e, this.pos, t, 4),
      this.storeNode(0, this.pos, t, i ? 8 : 4),
      (this.pos = this.reducePos = t),
      (this.score -= 190)
  }
  /**
  Check if the given term would be able to be shifted (optionally
  after some reductions) on this stack. This can be useful for
  external tokenizers that want to make sure they only provide a
  given token when it applies.
  */
  canShift(e) {
    for (let t = new o2(this); ; ) {
      let i =
        this.p.parser.stateSlot(
          t.state,
          4
          /* ParseState.DefaultReduce */
        ) || this.p.parser.hasAction(t.state, e)
      if (i == 0) return !1
      if (!(i & 65536)) return !0
      t.reduce(i)
    }
  }
  // Apply up to Recover.MaxNext recovery actions that conceptually
  // inserts some missing token or rule.
  /**
  @internal
  */
  recoverByInsert(e) {
    if (this.stack.length >= 300) return []
    let t = this.p.parser.nextStates(this.state)
    if (t.length > 8 || this.stack.length >= 120) {
      let r = []
      for (let s = 0, o; s < t.length; s += 2)
        (o = t[s + 1]) != this.state &&
          this.p.parser.hasAction(o, e) &&
          r.push(t[s], o)
      if (this.stack.length < 120)
        for (let s = 0; r.length < 8 && s < t.length; s += 2) {
          let o = t[s + 1]
          r.some((a, l) => l & 1 && a == o) || r.push(t[s], o)
        }
      t = r
    }
    let i = []
    for (let r = 0; r < t.length && i.length < 4; r += 2) {
      let s = t[r + 1]
      if (s == this.state) continue
      let o = this.split()
      o.pushState(s, this.pos),
        o.storeNode(0, o.pos, o.pos, 4, !0),
        o.shiftContext(t[r], this.pos),
        (o.reducePos = this.pos),
        (o.score -= 200),
        i.push(o)
    }
    return i
  }
  // Force a reduce, if possible. Return false if that can't
  // be done.
  /**
  @internal
  */
  forceReduce() {
    let { parser: e } = this.p,
      t = e.stateSlot(
        this.state,
        5
        /* ParseState.ForcedReduce */
      )
    if (!(t & 65536)) return !1
    if (!e.validAction(this.state, t)) {
      let i = t >> 19,
        r = t & 65535,
        s = this.stack.length - i * 3
      if (s < 0 || e.getGoto(this.stack[s], r, !1) < 0) {
        let o = this.findForcedReduction()
        if (o == null) return !1
        t = o
      }
      this.storeNode(0, this.pos, this.pos, 4, !0), (this.score -= 100)
    }
    return (this.reducePos = this.pos), this.reduce(t), !0
  }
  /**
  Try to scan through the automaton to find some kind of reduction
  that can be applied. Used when the regular ForcedReduce field
  isn't a valid action. @internal
  */
  findForcedReduction() {
    let { parser: e } = this.p,
      t = [],
      i = (r, s) => {
        if (!t.includes(r))
          return (
            t.push(r),
            e.allActions(r, (o) => {
              if (!(o & 393216))
                if (o & 65536) {
                  let a = (o >> 19) - s
                  if (a > 1) {
                    let l = o & 65535,
                      c = this.stack.length - a * 3
                    if (c >= 0 && e.getGoto(this.stack[c], l, !1) >= 0)
                      return (a << 19) | 65536 | l
                  }
                } else {
                  let a = i(o, s + 1)
                  if (a != null) return a
                }
            })
          )
      }
    return i(this.state, 0)
  }
  /**
  @internal
  */
  forceAll() {
    for (
      ;
      !this.p.parser.stateFlag(
        this.state,
        2
        /* StateFlag.Accepting */
      );

    )
      if (!this.forceReduce()) {
        this.storeNode(0, this.pos, this.pos, 4, !0)
        break
      }
    return this
  }
  /**
  Check whether this state has no further actions (assumed to be a direct descendant of the
  top state, since any other states must be able to continue
  somehow). @internal
  */
  get deadEnd() {
    if (this.stack.length != 3) return !1
    let { parser: e } = this.p
    return (
      e.data[
        e.stateSlot(
          this.state,
          1
          /* ParseState.Actions */
        )
      ] == 65535 &&
      !e.stateSlot(
        this.state,
        4
        /* ParseState.DefaultReduce */
      )
    )
  }
  /**
  Restart the stack (put it back in its start state). Only safe
  when this.stack.length == 3 (state is directly below the top
  state). @internal
  */
  restart() {
    this.storeNode(0, this.pos, this.pos, 4, !0),
      (this.state = this.stack[0]),
      (this.stack.length = 0)
  }
  /**
  @internal
  */
  sameState(e) {
    if (this.state != e.state || this.stack.length != e.stack.length) return !1
    for (let t = 0; t < this.stack.length; t += 3)
      if (this.stack[t] != e.stack[t]) return !1
    return !0
  }
  /**
  Get the parser used by this stack.
  */
  get parser() {
    return this.p.parser
  }
  /**
  Test whether a given dialect (by numeric ID, as exported from
  the terms file) is enabled.
  */
  dialectEnabled(e) {
    return this.p.parser.dialect.flags[e]
  }
  shiftContext(e, t) {
    this.curContext &&
      this.updateContext(
        this.curContext.tracker.shift(
          this.curContext.context,
          e,
          this,
          this.p.stream.reset(t)
        )
      )
  }
  reduceContext(e, t) {
    this.curContext &&
      this.updateContext(
        this.curContext.tracker.reduce(
          this.curContext.context,
          e,
          this,
          this.p.stream.reset(t)
        )
      )
  }
  /**
  @internal
  */
  emitContext() {
    let e = this.buffer.length - 1
    ;(e < 0 || this.buffer[e] != -3) &&
      this.buffer.push(this.curContext.hash, this.pos, this.pos, -3)
  }
  /**
  @internal
  */
  emitLookAhead() {
    let e = this.buffer.length - 1
    ;(e < 0 || this.buffer[e] != -4) &&
      this.buffer.push(this.lookAhead, this.pos, this.pos, -4)
  }
  updateContext(e) {
    if (e != this.curContext.context) {
      let t = new GO(this.curContext.tracker, e)
      t.hash != this.curContext.hash && this.emitContext(),
        (this.curContext = t)
    }
  }
  /**
  @internal
  */
  setLookAhead(e) {
    e > this.lookAhead && (this.emitLookAhead(), (this.lookAhead = e))
  }
  /**
  @internal
  */
  close() {
    this.curContext && this.curContext.tracker.strict && this.emitContext(),
      this.lookAhead > 0 && this.emitLookAhead()
  }
}
class GO {
  constructor(e, t) {
    ;(this.tracker = e),
      (this.context = t),
      (this.hash = e.strict ? e.hash(t) : 0)
  }
}
class o2 {
  constructor(e) {
    ;(this.start = e),
      (this.state = e.state),
      (this.stack = e.stack),
      (this.base = this.stack.length)
  }
  reduce(e) {
    let t = e & 65535,
      i = e >> 19
    i == 0
      ? (this.stack == this.start.stack && (this.stack = this.stack.slice()),
        this.stack.push(this.state, 0, 0),
        (this.base += 3))
      : (this.base -= (i - 1) * 3)
    let r = this.start.p.parser.getGoto(this.stack[this.base - 3], t, !0)
    this.state = r
  }
}
class Ga {
  constructor(e, t, i) {
    ;(this.stack = e),
      (this.pos = t),
      (this.index = i),
      (this.buffer = e.buffer),
      this.index == 0 && this.maybeNext()
  }
  static create(e, t = e.bufferBase + e.buffer.length) {
    return new Ga(e, t, t - e.bufferBase)
  }
  maybeNext() {
    let e = this.stack.parent
    e != null &&
      ((this.index = this.stack.bufferBase - e.bufferBase),
      (this.stack = e),
      (this.buffer = e.buffer))
  }
  get id() {
    return this.buffer[this.index - 4]
  }
  get start() {
    return this.buffer[this.index - 3]
  }
  get end() {
    return this.buffer[this.index - 2]
  }
  get size() {
    return this.buffer[this.index - 1]
  }
  next() {
    ;(this.index -= 4), (this.pos -= 4), this.index == 0 && this.maybeNext()
  }
  fork() {
    return new Ga(this.stack, this.pos, this.index)
  }
}
function Ur(n, e = Uint16Array) {
  if (typeof n != 'string') return n
  let t = null
  for (let i = 0, r = 0; i < n.length; ) {
    let s = 0
    for (;;) {
      let o = n.charCodeAt(i++),
        a = !1
      if (o == 126) {
        s = 65535
        break
      }
      o >= 92 && o--, o >= 34 && o--
      let l = o - 32
      if ((l >= 46 && ((l -= 46), (a = !0)), (s += l), a)) break
      s *= 46
    }
    t ? (t[r++] = s) : (t = new e(s))
  }
  return t
}
class Go {
  constructor() {
    ;(this.start = -1),
      (this.value = -1),
      (this.end = -1),
      (this.extended = -1),
      (this.lookAhead = 0),
      (this.mask = 0),
      (this.context = 0)
  }
}
const HO = new Go()
class a2 {
  /**
  @internal
  */
  constructor(e, t) {
    ;(this.input = e),
      (this.ranges = t),
      (this.chunk = ''),
      (this.chunkOff = 0),
      (this.chunk2 = ''),
      (this.chunk2Pos = 0),
      (this.next = -1),
      (this.token = HO),
      (this.rangeIndex = 0),
      (this.pos = this.chunkPos = t[0].from),
      (this.range = t[0]),
      (this.end = t[t.length - 1].to),
      this.readNext()
  }
  /**
  @internal
  */
  resolveOffset(e, t) {
    let i = this.range,
      r = this.rangeIndex,
      s = this.pos + e
    for (; s < i.from; ) {
      if (!r) return null
      let o = this.ranges[--r]
      ;(s -= i.from - o.to), (i = o)
    }
    for (; t < 0 ? s > i.to : s >= i.to; ) {
      if (r == this.ranges.length - 1) return null
      let o = this.ranges[++r]
      ;(s += o.from - i.to), (i = o)
    }
    return s
  }
  /**
  @internal
  */
  clipPos(e) {
    if (e >= this.range.from && e < this.range.to) return e
    for (let t of this.ranges) if (t.to > e) return Math.max(e, t.from)
    return this.end
  }
  /**
  Look at a code unit near the stream position. `.peek(0)` equals
  `.next`, `.peek(-1)` gives you the previous character, and so
  on.
  
  Note that looking around during tokenizing creates dependencies
  on potentially far-away content, which may reduce the
  effectiveness incremental parsing—when looking forward—or even
  cause invalid reparses when looking backward more than 25 code
  units, since the library does not track lookbehind.
  */
  peek(e) {
    let t = this.chunkOff + e,
      i,
      r
    if (t >= 0 && t < this.chunk.length)
      (i = this.pos + e), (r = this.chunk.charCodeAt(t))
    else {
      let s = this.resolveOffset(e, 1)
      if (s == null) return -1
      if (
        ((i = s),
        i >= this.chunk2Pos && i < this.chunk2Pos + this.chunk2.length)
      )
        r = this.chunk2.charCodeAt(i - this.chunk2Pos)
      else {
        let o = this.rangeIndex,
          a = this.range
        for (; a.to <= i; ) a = this.ranges[++o]
        ;(this.chunk2 = this.input.chunk((this.chunk2Pos = i))),
          i + this.chunk2.length > a.to &&
            (this.chunk2 = this.chunk2.slice(0, a.to - i)),
          (r = this.chunk2.charCodeAt(0))
      }
    }
    return i >= this.token.lookAhead && (this.token.lookAhead = i + 1), r
  }
  /**
  Accept a token. By default, the end of the token is set to the
  current stream position, but you can pass an offset (relative to
  the stream position) to change that.
  */
  acceptToken(e, t = 0) {
    let i = t ? this.resolveOffset(t, -1) : this.pos
    if (i == null || i < this.token.start)
      throw new RangeError('Token end out of bounds')
    ;(this.token.value = e), (this.token.end = i)
  }
  getChunk() {
    if (
      this.pos >= this.chunk2Pos &&
      this.pos < this.chunk2Pos + this.chunk2.length
    ) {
      let { chunk: e, chunkPos: t } = this
      ;(this.chunk = this.chunk2),
        (this.chunkPos = this.chunk2Pos),
        (this.chunk2 = e),
        (this.chunk2Pos = t),
        (this.chunkOff = this.pos - this.chunkPos)
    } else {
      ;(this.chunk2 = this.chunk), (this.chunk2Pos = this.chunkPos)
      let e = this.input.chunk(this.pos),
        t = this.pos + e.length
      ;(this.chunk =
        t > this.range.to ? e.slice(0, this.range.to - this.pos) : e),
        (this.chunkPos = this.pos),
        (this.chunkOff = 0)
    }
  }
  readNext() {
    return this.chunkOff >= this.chunk.length &&
      (this.getChunk(), this.chunkOff == this.chunk.length)
      ? (this.next = -1)
      : (this.next = this.chunk.charCodeAt(this.chunkOff))
  }
  /**
  Move the stream forward N (defaults to 1) code units. Returns
  the new value of [`next`](#lr.InputStream.next).
  */
  advance(e = 1) {
    for (this.chunkOff += e; this.pos + e >= this.range.to; ) {
      if (this.rangeIndex == this.ranges.length - 1) return this.setDone()
      ;(e -= this.range.to - this.pos),
        (this.range = this.ranges[++this.rangeIndex]),
        (this.pos = this.range.from)
    }
    return (
      (this.pos += e),
      this.pos >= this.token.lookAhead && (this.token.lookAhead = this.pos + 1),
      this.readNext()
    )
  }
  setDone() {
    return (
      (this.pos = this.chunkPos = this.end),
      (this.range = this.ranges[(this.rangeIndex = this.ranges.length - 1)]),
      (this.chunk = ''),
      (this.next = -1)
    )
  }
  /**
  @internal
  */
  reset(e, t) {
    if (
      (t
        ? ((this.token = t),
          (t.start = e),
          (t.lookAhead = e + 1),
          (t.value = t.extended = -1))
        : (this.token = HO),
      this.pos != e)
    ) {
      if (((this.pos = e), e == this.end)) return this.setDone(), this
      for (; e < this.range.from; ) this.range = this.ranges[--this.rangeIndex]
      for (; e >= this.range.to; ) this.range = this.ranges[++this.rangeIndex]
      e >= this.chunkPos && e < this.chunkPos + this.chunk.length
        ? (this.chunkOff = e - this.chunkPos)
        : ((this.chunk = ''), (this.chunkOff = 0)),
        this.readNext()
    }
    return this
  }
  /**
  @internal
  */
  read(e, t) {
    if (e >= this.chunkPos && t <= this.chunkPos + this.chunk.length)
      return this.chunk.slice(e - this.chunkPos, t - this.chunkPos)
    if (e >= this.chunk2Pos && t <= this.chunk2Pos + this.chunk2.length)
      return this.chunk2.slice(e - this.chunk2Pos, t - this.chunk2Pos)
    if (e >= this.range.from && t <= this.range.to) return this.input.read(e, t)
    let i = ''
    for (let r of this.ranges) {
      if (r.from >= t) break
      r.to > e && (i += this.input.read(Math.max(r.from, e), Math.min(r.to, t)))
    }
    return i
  }
}
class Fi {
  constructor(e, t) {
    ;(this.data = e), (this.id = t)
  }
  token(e, t) {
    let { parser: i } = t.p
    iS(this.data, e, t, this.id, i.data, i.tokenPrecTable)
  }
}
Fi.prototype.contextual = Fi.prototype.fallback = Fi.prototype.extend = !1
class Ha {
  constructor(e, t, i) {
    ;(this.precTable = t),
      (this.elseToken = i),
      (this.data = typeof e == 'string' ? Ur(e) : e)
  }
  token(e, t) {
    let i = e.pos,
      r = 0
    for (;;) {
      let s = e.next < 0,
        o = e.resolveOffset(1, 1)
      if (
        (iS(this.data, e, t, 0, this.data, this.precTable), e.token.value > -1)
      )
        break
      if (this.elseToken == null) return
      if ((s || r++, o == null)) break
      e.reset(o, e.token)
    }
    r && (e.reset(i, e.token), e.acceptToken(this.elseToken, r))
  }
}
Ha.prototype.contextual = Fi.prototype.fallback = Fi.prototype.extend = !1
class hn {
  /**
  Create a tokenizer. The first argument is the function that,
  given an input stream, scans for the types of tokens it
  recognizes at the stream's position, and calls
  [`acceptToken`](#lr.InputStream.acceptToken) when it finds
  one.
  */
  constructor(e, t = {}) {
    ;(this.token = e),
      (this.contextual = !!t.contextual),
      (this.fallback = !!t.fallback),
      (this.extend = !!t.extend)
  }
}
function iS(n, e, t, i, r, s) {
  let o = 0,
    a = 1 << i,
    { dialect: l } = t.p.parser
  e: for (; a & n[o]; ) {
    let c = n[o + 1]
    for (let d = o + 3; d < c; d += 2)
      if ((n[d + 1] & a) > 0) {
        let O = n[d]
        if (
          l.allows(O) &&
          (e.token.value == -1 ||
            e.token.value == O ||
            l2(O, e.token.value, r, s))
        ) {
          e.acceptToken(O)
          break
        }
      }
    let u = e.next,
      f = 0,
      h = n[o + 2]
    if (e.next < 0 && h > f && n[c + h * 3 - 3] == 65535) {
      o = n[c + h * 3 - 1]
      continue e
    }
    for (; f < h; ) {
      let d = (f + h) >> 1,
        O = c + d + (d << 1),
        m = n[O],
        b = n[O + 1] || 65536
      if (u < m) h = d
      else if (u >= b) f = d + 1
      else {
        ;(o = n[O + 2]), e.advance()
        continue e
      }
    }
    break
  }
}
function KO(n, e, t) {
  for (let i = e, r; (r = n[i]) != 65535; i++) if (r == t) return i - e
  return -1
}
function l2(n, e, t, i) {
  let r = KO(t, i, e)
  return r < 0 || KO(t, i, n) < r
}
const Ot =
  typeof process < 'u' && process.env && /\bparse\b/.test(process.env.LOG)
let kc = null
function JO(n, e, t) {
  let i = n.cursor(me.IncludeAnonymous)
  for (i.moveTo(e); ; )
    if (!(t < 0 ? i.childBefore(e) : i.childAfter(e)))
      for (;;) {
        if ((t < 0 ? i.to < e : i.from > e) && !i.type.isError)
          return t < 0
            ? Math.max(
                0,
                Math.min(
                  i.to - 1,
                  e - 25
                  /* Safety.Margin */
                )
              )
            : Math.min(
                n.length,
                Math.max(
                  i.from + 1,
                  e + 25
                  /* Safety.Margin */
                )
              )
        if (t < 0 ? i.prevSibling() : i.nextSibling()) break
        if (!i.parent()) return t < 0 ? 0 : n.length
      }
}
class c2 {
  constructor(e, t) {
    ;(this.fragments = e),
      (this.nodeSet = t),
      (this.i = 0),
      (this.fragment = null),
      (this.safeFrom = -1),
      (this.safeTo = -1),
      (this.trees = []),
      (this.start = []),
      (this.index = []),
      this.nextFragment()
  }
  nextFragment() {
    let e = (this.fragment =
      this.i == this.fragments.length ? null : this.fragments[this.i++])
    if (e) {
      for (
        this.safeFrom = e.openStart
          ? JO(e.tree, e.from + e.offset, 1) - e.offset
          : e.from,
          this.safeTo = e.openEnd
            ? JO(e.tree, e.to + e.offset, -1) - e.offset
            : e.to;
        this.trees.length;

      )
        this.trees.pop(), this.start.pop(), this.index.pop()
      this.trees.push(e.tree),
        this.start.push(-e.offset),
        this.index.push(0),
        (this.nextStart = this.safeFrom)
    } else this.nextStart = 1e9
  }
  // `pos` must be >= any previously given `pos` for this cursor
  nodeAt(e) {
    if (e < this.nextStart) return null
    for (; this.fragment && this.safeTo <= e; ) this.nextFragment()
    if (!this.fragment) return null
    for (;;) {
      let t = this.trees.length - 1
      if (t < 0) return this.nextFragment(), null
      let i = this.trees[t],
        r = this.index[t]
      if (r == i.children.length) {
        this.trees.pop(), this.start.pop(), this.index.pop()
        continue
      }
      let s = i.children[r],
        o = this.start[t] + i.positions[r]
      if (o > e) return (this.nextStart = o), null
      if (s instanceof Qe) {
        if (o == e) {
          if (o < this.safeFrom) return null
          let a = o + s.length
          if (a <= this.safeTo) {
            let l = s.prop(se.lookAhead)
            if (!l || a + l < this.fragment.to) return s
          }
        }
        this.index[t]++,
          o + s.length >= Math.max(this.safeFrom, e) &&
            (this.trees.push(s), this.start.push(o), this.index.push(0))
      } else this.index[t]++, (this.nextStart = o + s.length)
    }
  }
}
class u2 {
  constructor(e, t) {
    ;(this.stream = t),
      (this.tokens = []),
      (this.mainToken = null),
      (this.actions = []),
      (this.tokens = e.tokenizers.map((i) => new Go()))
  }
  getActions(e) {
    let t = 0,
      i = null,
      { parser: r } = e.p,
      { tokenizers: s } = r,
      o = r.stateSlot(
        e.state,
        3
        /* ParseState.TokenizerMask */
      ),
      a = e.curContext ? e.curContext.hash : 0,
      l = 0
    for (let c = 0; c < s.length; c++) {
      if (!((1 << c) & o)) continue
      let u = s[c],
        f = this.tokens[c]
      if (
        !(i && !u.fallback) &&
        ((u.contextual || f.start != e.pos || f.mask != o || f.context != a) &&
          (this.updateCachedToken(f, u, e), (f.mask = o), (f.context = a)),
        f.lookAhead > f.end + 25 && (l = Math.max(f.lookAhead, l)),
        f.value != 0)
      ) {
        let h = t
        if (
          (f.extended > -1 && (t = this.addActions(e, f.extended, f.end, t)),
          (t = this.addActions(e, f.value, f.end, t)),
          !u.extend && ((i = f), t > h))
        )
          break
      }
    }
    for (; this.actions.length > t; ) this.actions.pop()
    return (
      l && e.setLookAhead(l),
      !i &&
        e.pos == this.stream.end &&
        ((i = new Go()),
        (i.value = e.p.parser.eofTerm),
        (i.start = i.end = e.pos),
        (t = this.addActions(e, i.value, i.end, t))),
      (this.mainToken = i),
      this.actions
    )
  }
  getMainToken(e) {
    if (this.mainToken) return this.mainToken
    let t = new Go(),
      { pos: i, p: r } = e
    return (
      (t.start = i),
      (t.end = Math.min(i + 1, r.stream.end)),
      (t.value = i == r.stream.end ? r.parser.eofTerm : 0),
      t
    )
  }
  updateCachedToken(e, t, i) {
    let r = this.stream.clipPos(i.pos)
    if ((t.token(this.stream.reset(r, e), i), e.value > -1)) {
      let { parser: s } = i.p
      for (let o = 0; o < s.specialized.length; o++)
        if (s.specialized[o] == e.value) {
          let a = s.specializers[o](this.stream.read(e.start, e.end), i)
          if (a >= 0 && i.p.parser.dialect.allows(a >> 1)) {
            a & 1 ? (e.extended = a >> 1) : (e.value = a >> 1)
            break
          }
        }
    } else (e.value = 0), (e.end = this.stream.clipPos(r + 1))
  }
  putAction(e, t, i, r) {
    for (let s = 0; s < r; s += 3) if (this.actions[s] == e) return r
    return (
      (this.actions[r++] = e),
      (this.actions[r++] = t),
      (this.actions[r++] = i),
      r
    )
  }
  addActions(e, t, i, r) {
    let { state: s } = e,
      { parser: o } = e.p,
      { data: a } = o
    for (let l = 0; l < 2; l++)
      for (
        let c = o.stateSlot(
          s,
          l ? 2 : 1
          /* ParseState.Actions */
        );
        ;
        c += 3
      ) {
        if (a[c] == 65535)
          if (a[c + 1] == 1) c = vn(a, c + 2)
          else {
            r == 0 &&
              a[c + 1] == 2 &&
              (r = this.putAction(vn(a, c + 2), t, i, r))
            break
          }
        a[c] == t && (r = this.putAction(vn(a, c + 1), t, i, r))
      }
    return r
  }
}
class f2 {
  constructor(e, t, i, r) {
    ;(this.parser = e),
      (this.input = t),
      (this.ranges = r),
      (this.recovering = 0),
      (this.nextStackID = 9812),
      (this.minStackPos = 0),
      (this.reused = []),
      (this.stoppedAt = null),
      (this.lastBigReductionStart = -1),
      (this.lastBigReductionSize = 0),
      (this.bigReductionCount = 0),
      (this.stream = new a2(t, r)),
      (this.tokens = new u2(e, this.stream)),
      (this.topTerm = e.top[1])
    let { from: s } = r[0]
    ;(this.stacks = [Fa.start(this, e.top[0], s)]),
      (this.fragments =
        i.length && this.stream.end - s > e.bufferLength * 4
          ? new c2(i, e.nodeSet)
          : null)
  }
  get parsedPos() {
    return this.minStackPos
  }
  // Move the parser forward. This will process all parse stacks at
  // `this.pos` and try to advance them to a further position. If no
  // stack for such a position is found, it'll start error-recovery.
  //
  // When the parse is finished, this will return a syntax tree. When
  // not, it returns `null`.
  advance() {
    let e = this.stacks,
      t = this.minStackPos,
      i = (this.stacks = []),
      r,
      s
    if (this.bigReductionCount > 300 && e.length == 1) {
      let [o] = e
      for (
        ;
        o.forceReduce() &&
        o.stack.length &&
        o.stack[o.stack.length - 2] >= this.lastBigReductionStart;

      );
      this.bigReductionCount = this.lastBigReductionSize = 0
    }
    for (let o = 0; o < e.length; o++) {
      let a = e[o]
      for (;;) {
        if (((this.tokens.mainToken = null), a.pos > t)) i.push(a)
        else {
          if (this.advanceStack(a, i, e)) continue
          {
            r || ((r = []), (s = [])), r.push(a)
            let l = this.tokens.getMainToken(a)
            s.push(l.value, l.end)
          }
        }
        break
      }
    }
    if (!i.length) {
      let o = r && d2(r)
      if (o)
        return (
          Ot && console.log('Finish with ' + this.stackID(o)),
          this.stackToTree(o)
        )
      if (this.parser.strict)
        throw (
          (Ot &&
            r &&
            console.log(
              'Stuck with token ' +
                (this.tokens.mainToken
                  ? this.parser.getName(this.tokens.mainToken.value)
                  : 'none')
            ),
          new SyntaxError('No parse at ' + t))
        )
      this.recovering || (this.recovering = 5)
    }
    if (this.recovering && r) {
      let o =
        this.stoppedAt != null && r[0].pos > this.stoppedAt
          ? r[0]
          : this.runRecovery(r, s, i)
      if (o)
        return (
          Ot && console.log('Force-finish ' + this.stackID(o)),
          this.stackToTree(o.forceAll())
        )
    }
    if (this.recovering) {
      let o = this.recovering == 1 ? 1 : this.recovering * 3
      if (i.length > o)
        for (i.sort((a, l) => l.score - a.score); i.length > o; ) i.pop()
      i.some((a) => a.reducePos > t) && this.recovering--
    } else if (i.length > 1) {
      e: for (let o = 0; o < i.length - 1; o++) {
        let a = i[o]
        for (let l = o + 1; l < i.length; l++) {
          let c = i[l]
          if (
            a.sameState(c) ||
            (a.buffer.length > 500 && c.buffer.length > 500)
          )
            if ((a.score - c.score || a.buffer.length - c.buffer.length) > 0)
              i.splice(l--, 1)
            else {
              i.splice(o--, 1)
              continue e
            }
        }
      }
      i.length > 12 &&
        i.splice(
          12,
          i.length - 12
          /* Rec.MaxStackCount */
        )
    }
    this.minStackPos = i[0].pos
    for (let o = 1; o < i.length; o++)
      i[o].pos < this.minStackPos && (this.minStackPos = i[o].pos)
    return null
  }
  stopAt(e) {
    if (this.stoppedAt != null && this.stoppedAt < e)
      throw new RangeError("Can't move stoppedAt forward")
    this.stoppedAt = e
  }
  // Returns an updated version of the given stack, or null if the
  // stack can't advance normally. When `split` and `stacks` are
  // given, stacks split off by ambiguous operations will be pushed to
  // `split`, or added to `stacks` if they move `pos` forward.
  advanceStack(e, t, i) {
    let r = e.pos,
      { parser: s } = this,
      o = Ot ? this.stackID(e) + ' -> ' : ''
    if (this.stoppedAt != null && r > this.stoppedAt)
      return e.forceReduce() ? e : null
    if (this.fragments) {
      let c = e.curContext && e.curContext.tracker.strict,
        u = c ? e.curContext.hash : 0
      for (let f = this.fragments.nodeAt(r); f; ) {
        let h =
          this.parser.nodeSet.types[f.type.id] == f.type
            ? s.getGoto(e.state, f.type.id)
            : -1
        if (h > -1 && f.length && (!c || (f.prop(se.contextHash) || 0) == u))
          return (
            e.useNode(f, h),
            Ot &&
              console.log(
                o + this.stackID(e) + ` (via reuse of ${s.getName(f.type.id)})`
              ),
            !0
          )
        if (!(f instanceof Qe) || f.children.length == 0 || f.positions[0] > 0)
          break
        let d = f.children[0]
        if (d instanceof Qe && f.positions[0] == 0) f = d
        else break
      }
    }
    let a = s.stateSlot(
      e.state,
      4
      /* ParseState.DefaultReduce */
    )
    if (a > 0)
      return (
        e.reduce(a),
        Ot &&
          console.log(
            o +
              this.stackID(e) +
              ` (via always-reduce ${s.getName(
                a & 65535
                /* Action.ValueMask */
              )})`
          ),
        !0
      )
    if (e.stack.length >= 8400)
      for (; e.stack.length > 6e3 && e.forceReduce(); );
    let l = this.tokens.getActions(e)
    for (let c = 0; c < l.length; ) {
      let u = l[c++],
        f = l[c++],
        h = l[c++],
        d = c == l.length || !i,
        O = d ? e : e.split(),
        m = this.tokens.mainToken
      if (
        (O.apply(u, f, m ? m.start : O.pos, h),
        Ot &&
          console.log(
            o +
              this.stackID(O) +
              ` (via ${
                u & 65536
                  ? `reduce of ${s.getName(
                      u & 65535
                      /* Action.ValueMask */
                    )}`
                  : 'shift'
              } for ${s.getName(f)} @ ${r}${O == e ? '' : ', split'})`
          ),
        d)
      )
        return !0
      O.pos > r ? t.push(O) : i.push(O)
    }
    return !1
  }
  // Advance a given stack forward as far as it will go. Returns the
  // (possibly updated) stack if it got stuck, or null if it moved
  // forward and was given to `pushStackDedup`.
  advanceFully(e, t) {
    let i = e.pos
    for (;;) {
      if (!this.advanceStack(e, null, null)) return !1
      if (e.pos > i) return eg(e, t), !0
    }
  }
  runRecovery(e, t, i) {
    let r = null,
      s = !1
    for (let o = 0; o < e.length; o++) {
      let a = e[o],
        l = t[o << 1],
        c = t[(o << 1) + 1],
        u = Ot ? this.stackID(a) + ' -> ' : ''
      if (
        a.deadEnd &&
        (s ||
          ((s = !0),
          a.restart(),
          Ot && console.log(u + this.stackID(a) + ' (restarted)'),
          this.advanceFully(a, i)))
      )
        continue
      let f = a.split(),
        h = u
      for (
        let d = 0;
        f.forceReduce() &&
        d < 10 &&
        (Ot && console.log(h + this.stackID(f) + ' (via force-reduce)'),
        !this.advanceFully(f, i));
        d++
      )
        Ot && (h = this.stackID(f) + ' -> ')
      for (let d of a.recoverByInsert(l))
        Ot && console.log(u + this.stackID(d) + ' (via recover-insert)'),
          this.advanceFully(d, i)
      this.stream.end > a.pos
        ? (c == a.pos && (c++, (l = 0)),
          a.recoverByDelete(l, c),
          Ot &&
            console.log(
              u +
                this.stackID(a) +
                ` (via recover-delete ${this.parser.getName(l)})`
            ),
          eg(a, i))
        : (!r || r.score < a.score) && (r = a)
    }
    return r
  }
  // Convert the stack's buffer to a syntax tree.
  stackToTree(e) {
    return (
      e.close(),
      Qe.build({
        buffer: Ga.create(e),
        nodeSet: this.parser.nodeSet,
        topID: this.topTerm,
        maxBufferLength: this.parser.bufferLength,
        reused: this.reused,
        start: this.ranges[0].from,
        length: e.pos - this.ranges[0].from,
        minRepeatType: this.parser.minRepeatTerm
      })
    )
  }
  stackID(e) {
    let t = (kc || (kc = /* @__PURE__ */ new WeakMap())).get(e)
    return t || kc.set(e, (t = String.fromCodePoint(this.nextStackID++))), t + e
  }
}
function eg(n, e) {
  for (let t = 0; t < e.length; t++) {
    let i = e[t]
    if (i.pos == n.pos && i.sameState(n)) {
      e[t].score < n.score && (e[t] = n)
      return
    }
  }
  e.push(n)
}
class h2 {
  constructor(e, t, i) {
    ;(this.source = e), (this.flags = t), (this.disabled = i)
  }
  allows(e) {
    return !this.disabled || this.disabled[e] == 0
  }
}
const Tc = (n) => n
class rS {
  /**
  Define a context tracker.
  */
  constructor(e) {
    ;(this.start = e.start),
      (this.shift = e.shift || Tc),
      (this.reduce = e.reduce || Tc),
      (this.reuse = e.reuse || Tc),
      (this.hash = e.hash || (() => 0)),
      (this.strict = e.strict !== !1)
  }
}
class ar extends _b {
  /**
  @internal
  */
  constructor(e) {
    if ((super(), (this.wrappers = []), e.version != 14))
      throw new RangeError(
        `Parser version (${e.version}) doesn't match runtime version (14)`
      )
    let t = e.nodeNames.split(' ')
    this.minRepeatTerm = t.length
    for (let a = 0; a < e.repeatNodeCount; a++) t.push('')
    let i = Object.keys(e.topRules).map((a) => e.topRules[a][1]),
      r = []
    for (let a = 0; a < t.length; a++) r.push([])
    function s(a, l, c) {
      r[a].push([l, l.deserialize(String(c))])
    }
    if (e.nodeProps)
      for (let a of e.nodeProps) {
        let l = a[0]
        typeof l == 'string' && (l = se[l])
        for (let c = 1; c < a.length; ) {
          let u = a[c++]
          if (u >= 0) s(u, l, a[c++])
          else {
            let f = a[c + -u]
            for (let h = -u; h > 0; h--) s(a[c++], l, f)
            c++
          }
        }
      }
    ;(this.nodeSet = new qf(
      t.map((a, l) =>
        at.define({
          name: l >= this.minRepeatTerm ? void 0 : a,
          id: l,
          props: r[l],
          top: i.indexOf(l) > -1,
          error: l == 0,
          skipped: e.skippedNodes && e.skippedNodes.indexOf(l) > -1
        })
      )
    )),
      e.propSources && (this.nodeSet = this.nodeSet.extend(...e.propSources)),
      (this.strict = !1),
      (this.bufferLength = Pb)
    let o = Ur(e.tokenData)
    ;(this.context = e.context),
      (this.specializerSpecs = e.specialized || []),
      (this.specialized = new Uint16Array(this.specializerSpecs.length))
    for (let a = 0; a < this.specializerSpecs.length; a++)
      this.specialized[a] = this.specializerSpecs[a].term
    ;(this.specializers = this.specializerSpecs.map(tg)),
      (this.states = Ur(e.states, Uint32Array)),
      (this.data = Ur(e.stateData)),
      (this.goto = Ur(e.goto)),
      (this.maxTerm = e.maxTerm),
      (this.tokenizers = e.tokenizers.map((a) =>
        typeof a == 'number' ? new Fi(o, a) : a
      )),
      (this.topRules = e.topRules),
      (this.dialects = e.dialects || {}),
      (this.dynamicPrecedences = e.dynamicPrecedences || null),
      (this.tokenPrecTable = e.tokenPrec),
      (this.termNames = e.termNames || null),
      (this.maxNode = this.nodeSet.types.length - 1),
      (this.dialect = this.parseDialect()),
      (this.top = this.topRules[Object.keys(this.topRules)[0]])
  }
  createParse(e, t, i) {
    let r = new f2(this, e, t, i)
    for (let s of this.wrappers) r = s(r, e, t, i)
    return r
  }
  /**
  Get a goto table entry @internal
  */
  getGoto(e, t, i = !1) {
    let r = this.goto
    if (t >= r[0]) return -1
    for (let s = r[t + 1]; ; ) {
      let o = r[s++],
        a = o & 1,
        l = r[s++]
      if (a && i) return l
      for (let c = s + (o >> 1); s < c; s++) if (r[s] == e) return l
      if (a) return -1
    }
  }
  /**
  Check if this state has an action for a given terminal @internal
  */
  hasAction(e, t) {
    let i = this.data
    for (let r = 0; r < 2; r++)
      for (
        let s = this.stateSlot(
            e,
            r ? 2 : 1
            /* ParseState.Actions */
          ),
          o;
        ;
        s += 3
      ) {
        if ((o = i[s]) == 65535)
          if (i[s + 1] == 1) o = i[(s = vn(i, s + 2))]
          else {
            if (i[s + 1] == 2) return vn(i, s + 2)
            break
          }
        if (o == t || o == 0) return vn(i, s + 1)
      }
    return 0
  }
  /**
  @internal
  */
  stateSlot(e, t) {
    return this.states[e * 6 + t]
  }
  /**
  @internal
  */
  stateFlag(e, t) {
    return (
      (this.stateSlot(
        e,
        0
        /* ParseState.Flags */
      ) &
        t) >
      0
    )
  }
  /**
  @internal
  */
  validAction(e, t) {
    return !!this.allActions(e, (i) => (i == t ? !0 : null))
  }
  /**
  @internal
  */
  allActions(e, t) {
    let i = this.stateSlot(
        e,
        4
        /* ParseState.DefaultReduce */
      ),
      r = i ? t(i) : void 0
    for (
      let s = this.stateSlot(
        e,
        1
        /* ParseState.Actions */
      );
      r == null;
      s += 3
    ) {
      if (this.data[s] == 65535)
        if (this.data[s + 1] == 1) s = vn(this.data, s + 2)
        else break
      r = t(vn(this.data, s + 1))
    }
    return r
  }
  /**
  Get the states that can follow this one through shift actions or
  goto jumps. @internal
  */
  nextStates(e) {
    let t = []
    for (
      let i = this.stateSlot(
        e,
        1
        /* ParseState.Actions */
      );
      ;
      i += 3
    ) {
      if (this.data[i] == 65535)
        if (this.data[i + 1] == 1) i = vn(this.data, i + 2)
        else break
      if (!(this.data[i + 2] & 1)) {
        let r = this.data[i + 1]
        t.some((s, o) => o & 1 && s == r) || t.push(this.data[i], r)
      }
    }
    return t
  }
  /**
  Configure the parser. Returns a new parser instance that has the
  given settings modified. Settings not provided in `config` are
  kept from the original parser.
  */
  configure(e) {
    let t = Object.assign(Object.create(ar.prototype), this)
    if ((e.props && (t.nodeSet = this.nodeSet.extend(...e.props)), e.top)) {
      let i = this.topRules[e.top]
      if (!i) throw new RangeError(`Invalid top rule name ${e.top}`)
      t.top = i
    }
    return (
      e.tokenizers &&
        (t.tokenizers = this.tokenizers.map((i) => {
          let r = e.tokenizers.find((s) => s.from == i)
          return r ? r.to : i
        })),
      e.specializers &&
        ((t.specializers = this.specializers.slice()),
        (t.specializerSpecs = this.specializerSpecs.map((i, r) => {
          let s = e.specializers.find((a) => a.from == i.external)
          if (!s) return i
          let o = Object.assign(Object.assign({}, i), { external: s.to })
          return (t.specializers[r] = tg(o)), o
        }))),
      e.contextTracker && (t.context = e.contextTracker),
      e.dialect && (t.dialect = this.parseDialect(e.dialect)),
      e.strict != null && (t.strict = e.strict),
      e.wrap && (t.wrappers = t.wrappers.concat(e.wrap)),
      e.bufferLength != null && (t.bufferLength = e.bufferLength),
      t
    )
  }
  /**
  Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
  are registered for this parser.
  */
  hasWrappers() {
    return this.wrappers.length > 0
  }
  /**
  Returns the name associated with a given term. This will only
  work for all terms when the parser was generated with the
  `--names` option. By default, only the names of tagged terms are
  stored.
  */
  getName(e) {
    return this.termNames
      ? this.termNames[e]
      : String((e <= this.maxNode && this.nodeSet.types[e].name) || e)
  }
  /**
  The eof term id is always allocated directly after the node
  types. @internal
  */
  get eofTerm() {
    return this.maxNode + 1
  }
  /**
  The type of top node produced by the parser.
  */
  get topNode() {
    return this.nodeSet.types[this.top[1]]
  }
  /**
  @internal
  */
  dynamicPrecedence(e) {
    let t = this.dynamicPrecedences
    return t == null ? 0 : t[e] || 0
  }
  /**
  @internal
  */
  parseDialect(e) {
    let t = Object.keys(this.dialects),
      i = t.map(() => !1)
    if (e)
      for (let s of e.split(' ')) {
        let o = t.indexOf(s)
        o >= 0 && (i[o] = !0)
      }
    let r = null
    for (let s = 0; s < t.length; s++)
      if (!i[s])
        for (let o = this.dialects[t[s]], a; (a = this.data[o++]) != 65535; )
          (r || (r = new Uint8Array(this.maxTerm + 1)))[a] = 1
    return new h2(e, i, r)
  }
  /**
  Used by the output of the parser generator. Not available to
  user code. @hide
  */
  static deserialize(e) {
    return new ar(e)
  }
}
function vn(n, e) {
  return n[e] | (n[e + 1] << 16)
}
function d2(n) {
  let e = null
  for (let t of n) {
    let i = t.p.stoppedAt
    ;(t.pos == t.p.stream.end || (i != null && t.pos > i)) &&
      t.p.parser.stateFlag(
        t.state,
        2
        /* StateFlag.Accepting */
      ) &&
      (!e || e.score < t.score) &&
      (e = t)
  }
  return e
}
function tg(n) {
  if (n.external) {
    let e = n.extend ? 1 : 0
    return (t, i) => (n.external(t, i) << 1) | e
  }
  return n.get
}
const p2 = 304,
  ng = 1,
  O2 = 2,
  g2 = 305,
  m2 = 307,
  y2 = 308,
  b2 = 3,
  v2 = 4,
  S2 = [
    9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197,
    8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288
  ],
  sS = 125,
  x2 = 59,
  ig = 47,
  w2 = 42,
  $2 = 43,
  P2 = 45,
  Q2 = new rS({
    start: !1,
    shift(n, e) {
      return e == b2 || e == v2 || e == m2 ? n : e == y2
    },
    strict: !1
  }),
  k2 = new hn(
    (n, e) => {
      let { next: t } = n
      ;(t == sS || t == -1 || e.context) && n.acceptToken(g2)
    },
    { contextual: !0, fallback: !0 }
  ),
  T2 = new hn(
    (n, e) => {
      let { next: t } = n,
        i
      S2.indexOf(t) > -1 ||
        (t == ig && ((i = n.peek(1)) == ig || i == w2)) ||
        (t != sS && t != x2 && t != -1 && !e.context && n.acceptToken(p2))
    },
    { contextual: !0 }
  ),
  C2 = new hn(
    (n, e) => {
      let { next: t } = n
      if ((t == $2 || t == P2) && (n.advance(), t == n.next)) {
        n.advance()
        let i = !e.context && e.canShift(ng)
        n.acceptToken(i ? ng : O2)
      }
    },
    { contextual: !0 }
  ),
  _2 = Pl({
    'get set async static': g.modifier,
    'for while do if else switch try catch finally return throw break continue default case':
      g.controlKeyword,
    'in of await yield void typeof delete instanceof': g.operatorKeyword,
    'let var const using function class extends': g.definitionKeyword,
    'import export from': g.moduleKeyword,
    'with debugger as new': g.keyword,
    TemplateString: g.special(g.string),
    super: g.atom,
    BooleanLiteral: g.bool,
    this: g.self,
    null: g.null,
    Star: g.modifier,
    VariableName: g.variableName,
    'CallExpression/VariableName TaggedTemplateExpression/VariableName':
      g.function(g.variableName),
    VariableDefinition: g.definition(g.variableName),
    Label: g.labelName,
    PropertyName: g.propertyName,
    PrivatePropertyName: g.special(g.propertyName),
    'CallExpression/MemberExpression/PropertyName': g.function(g.propertyName),
    'FunctionDeclaration/VariableDefinition': g.function(
      g.definition(g.variableName)
    ),
    'ClassDeclaration/VariableDefinition': g.definition(g.className),
    PropertyDefinition: g.definition(g.propertyName),
    PrivatePropertyDefinition: g.definition(g.special(g.propertyName)),
    UpdateOp: g.updateOperator,
    'LineComment Hashbang': g.lineComment,
    BlockComment: g.blockComment,
    Number: g.number,
    String: g.string,
    Escape: g.escape,
    ArithOp: g.arithmeticOperator,
    LogicOp: g.logicOperator,
    BitOp: g.bitwiseOperator,
    CompareOp: g.compareOperator,
    RegExp: g.regexp,
    Equals: g.definitionOperator,
    Arrow: g.function(g.punctuation),
    ': Spread': g.punctuation,
    '( )': g.paren,
    '[ ]': g.squareBracket,
    '{ }': g.brace,
    'InterpolationStart InterpolationEnd': g.special(g.brace),
    '.': g.derefOperator,
    ', ;': g.separator,
    '@': g.meta,
    TypeName: g.typeName,
    TypeDefinition: g.definition(g.typeName),
    'type enum interface implements namespace module declare':
      g.definitionKeyword,
    'abstract global Privacy readonly override': g.modifier,
    'is keyof unique infer': g.operatorKeyword,
    JSXAttributeValue: g.attributeValue,
    JSXText: g.content,
    'JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag': g.angleBracket,
    'JSXIdentifier JSXNameSpacedName': g.tagName,
    'JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName':
      g.attributeName,
    'JSXBuiltin/JSXIdentifier': g.standard(g.tagName)
  }),
  Z2 = {
    __proto__: null,
    export: 16,
    as: 21,
    from: 29,
    default: 32,
    async: 37,
    function: 38,
    extends: 48,
    this: 52,
    true: 60,
    false: 60,
    null: 72,
    void: 76,
    typeof: 80,
    super: 98,
    new: 132,
    delete: 148,
    yield: 157,
    await: 161,
    class: 166,
    public: 223,
    private: 223,
    protected: 223,
    readonly: 225,
    instanceof: 244,
    satisfies: 247,
    in: 248,
    const: 250,
    import: 282,
    keyof: 337,
    unique: 341,
    infer: 347,
    is: 383,
    abstract: 403,
    implements: 405,
    type: 407,
    let: 410,
    var: 412,
    using: 415,
    interface: 421,
    enum: 425,
    namespace: 431,
    module: 433,
    declare: 437,
    global: 441,
    for: 460,
    of: 469,
    while: 472,
    with: 476,
    do: 480,
    if: 484,
    else: 486,
    switch: 490,
    case: 496,
    try: 502,
    catch: 506,
    finally: 510,
    return: 514,
    throw: 518,
    break: 522,
    continue: 526,
    debugger: 530
  },
  A2 = {
    __proto__: null,
    async: 119,
    get: 121,
    set: 123,
    declare: 183,
    public: 185,
    private: 185,
    protected: 185,
    static: 187,
    abstract: 189,
    override: 191,
    readonly: 197,
    accessor: 199,
    new: 387
  },
  R2 = { __proto__: null, '<': 139 },
  E2 = ar.deserialize({
    version: 14,
    states:
      "$6zO%TQUOOO%[QUOOO'_QWOOP(lOSOOO*zQ(CjO'#CgO+ROpO'#ChO+aO!bO'#ChO+oO07`O'#D[O.QQUO'#DbO.bQUO'#DmO%[QUO'#DwO0fQUO'#EPOOQ(CY'#EX'#EXO1PQSO'#EUOOQO'#Ej'#EjOOQO'#Id'#IdO1XQSO'#GlO1dQSO'#EiO1iQSO'#EiO3kQ(CjO'#JeO6[Q(CjO'#JfO6xQSO'#FXO6}Q#tO'#FpOOQ(CY'#Fa'#FaO7YO&jO'#FaO7hQ,UO'#FwO9OQSO'#FvOOQ(CY'#Jf'#JfOOQ(CW'#Je'#JeO9TQSO'#GpOOQQ'#KQ'#KQO9`QSO'#IQO9eQ(C[O'#IROOQQ'#JR'#JROOQQ'#IV'#IVQ`QUOOO`QUOOO%[QUO'#DoO9mQUO'#D{O9tQUO'#D}O9ZQSO'#GlO9{Q,UO'#CmO:ZQSO'#EhO:fQSO'#EsO:kQ,UO'#F`O;YQSO'#GlOOQO'#KR'#KRO;_QSO'#KRO;mQSO'#GtO;mQSO'#GuO;mQSO'#GwO9ZQSO'#GzO<dQSO'#G}O={QSO'#CcO>]QSO'#HZO>eQSO'#HaO>eQSO'#HcO`QUO'#HeO>eQSO'#HgO>eQSO'#HjO>jQSO'#HpO>oQ(C]O'#HvO%[QUO'#HxO>zQ(C]O'#HzO?VQ(C]O'#H|O9eQ(C[O'#IOO?bQ(CjO'#CgO@dQWO'#DgQOQSOOO%[QUO'#D}O@zQSO'#EQO9{Q,UO'#EhOAVQSO'#EhOAbQ`O'#F`OOQQ'#Ce'#CeOOQ(CW'#Dl'#DlOOQ(CW'#Ji'#JiO%[QUO'#JiOOQO'#Jm'#JmOOQO'#Ia'#IaOBbQWO'#EaOOQ(CW'#E`'#E`OC^Q(C`O'#EaOChQWO'#ETOOQO'#Jl'#JlOC|QWO'#JmOEZQWO'#ETOChQWO'#EaPEhO?MpO'#C`POOO)CDp)CDpOOOO'#IW'#IWOEsOpO,59SOOQ(CY,59S,59SOOOO'#IX'#IXOFRO!bO,59SO%[QUO'#D^OOOO'#IZ'#IZOFaO07`O,59vOOQ(CY,59v,59vOFoQUO'#I[OGSQSO'#JgOIUQbO'#JgO+}QUO'#JgOI]QSO,59|OIsQSO'#EjOJQQSO'#JuOJ]QSO'#JtOJ]QSO'#JtOJeQSO,5;WOJjQSO'#JsOOQ(CY,5:X,5:XOJqQUO,5:XOLrQ(CjO,5:cOMcQSO,5:kOM|Q(C[O'#JrONTQSO'#JqO9TQSO'#JqONiQSO'#JqONqQSO,5;VONvQSO'#JqO!#OQbO'#JfOOQ(CY'#Cg'#CgO%[QUO'#EPO!#nQ`O,5:pOOQO'#Jn'#JnOOQO-E<b-E<bO9ZQSO,5=WO!$UQSO,5=WO!$ZQUO,5;TO!&^Q,UO'#EeO!'qQSO,5;TO!)ZQ,UO'#DqO!)bQUO'#DvO!)lQWO,5;^O!)tQWO,5;^O%[QUO,5;^OOQQ'#FP'#FPOOQQ'#FR'#FRO%[QUO,5;_O%[QUO,5;_O%[QUO,5;_O%[QUO,5;_O%[QUO,5;_O%[QUO,5;_O%[QUO,5;_O%[QUO,5;_O%[QUO,5;_O%[QUO,5;_O%[QUO,5;_OOQQ'#FV'#FVO!*SQUO,5;pOOQ(CY,5;u,5;uOOQ(CY,5;v,5;vO!,VQSO,5;vOOQ(CY,5;w,5;wO%[QUO'#IhO!,_Q(C[O,5<dO!&^Q,UO,5;_O!,|Q,UO,5;_O%[QUO,5;sO!-TQ#tO'#FfO!.QQ#tO'#JyO!-lQ#tO'#JyO!.XQ#tO'#JyOOQO'#Jy'#JyO!.mQ#tO,5<OOOOO,5<[,5<[O!/OQUO'#FrOOOO'#Ig'#IgO7YO&jO,5;{O!/VQ#tO'#FtOOQ(CY,5;{,5;{O!/vQ7[O'#CsOOQ(CY'#Cw'#CwO!0ZQSO'#CwO!0`O07`O'#C{O!0|Q,UO,5<aO!1TQSO,5<cO!2jQMhO'#GRO!2wQSO'#GSO!2|QSO'#GSO!3RQMhO'#GWO!4QQWO'#G[O!4sQ7[O'#J`OOQ(CY'#J`'#J`O!4}QSO'#J_O!5]QSO'#J^O!5eQSO'#CrOOQ(CY'#Cu'#CuOOQ(CY'#DP'#DPOOQ(CY'#DR'#DRO1SQSO'#DTO!'vQ,UO'#FyO!'vQ,UO'#F{O!5mQSO'#F}O!5rQSO'#GOO!2|QSO'#GUO!'vQ,UO'#GZO!5wQSO'#EkO!6fQSO,5<bOOQ(CW'#Cp'#CpO!6nQSO'#ElO!7hQWO'#EmOOQ(CW'#Js'#JsO!7oQ(C[O'#KSO9eQ(C[O,5=[O`QUO,5>lOOQQ'#JZ'#JZOOQQ,5>m,5>mOOQQ-E<T-E<TO!9qQ(CjO,5:ZO!<_Q(CjO,5:gO%[QUO,5:gO!>xQ(CjO,5:iOOQO,5@m,5@mO!?iQ,UO,5=WO!?wQ(C[O'#J[O9OQSO'#J[O!@YQ(C[O,59XO!@eQWO,59XO!@mQ,UO,59XO9{Q,UO,59XO!@xQSO,5;TO!AQQSO'#HYO!AfQSO'#KVO%[QUO,5;xO!7cQWO,5;zO!AnQSO,5=sO!AsQSO,5=sO!AxQSO,5=sO9eQ(C[O,5=sO;mQSO,5=cOOQO'#Cs'#CsO!BWQWO,5=`O!B`Q,UO,5=aO!BkQSO,5=cO!BpQ`O,5=fO!BxQSO'#KRO>jQSO'#HPO9ZQSO'#HRO!B}QSO'#HRO9{Q,UO'#HTO!CSQSO'#HTOOQQ,5=i,5=iO!CXQSO'#HUO!CjQSO'#CmO!CoQSO,58}O!CyQSO,58}O!FOQUO,58}OOQQ,58},58}O!F`Q(C[O,58}O%[QUO,58}O!HkQUO'#H]OOQQ'#H^'#H^OOQQ'#H_'#H_O`QUO,5=uO!IRQSO,5=uO`QUO,5={O`QUO,5=}O!IWQSO,5>PO`QUO,5>RO!I]QSO,5>UO!IbQUO,5>[OOQQ,5>b,5>bO%[QUO,5>bO9eQ(C[O,5>dOOQQ,5>f,5>fO!MlQSO,5>fOOQQ,5>h,5>hO!MlQSO,5>hOOQQ,5>j,5>jO!MqQWO'#DYO%[QUO'#JiO!N`QWO'#JiO!N}QWO'#DhO# `QWO'#DhO##qQUO'#DhO##xQSO'#JhO#$QQSO,5:RO#$VQSO'#EnO#$eQSO'#JvO#$mQSO,5;XO#$rQWO'#DhO#%PQWO'#ESOOQ(CY,5:l,5:lO%[QUO,5:lO#%WQSO,5:lO>jQSO,5;SO!@eQWO,5;SO!@mQ,UO,5;SO9{Q,UO,5;SO#%`QSO,5@TO#%eQ!LQO,5:pOOQO-E<_-E<_O#&kQ(C`O,5:{OChQWO,5:oO#&uQWO,5:oOChQWO,5:{O!@YQ(C[O,5:oOOQ(CW'#Ed'#EdOOQO,5:{,5:{O%[QUO,5:{O#'SQ(C[O,5:{O#'_Q(C[O,5:{O!@eQWO,5:oOOQO,5;R,5;RO#'mQ(C[O,5:{POOO'#IU'#IUP#(RO?MpO,58zPOOO,58z,58zOOOO-E<U-E<UOOQ(CY1G.n1G.nOOOO-E<V-E<VO#(^Q`O,59xOOOO-E<X-E<XOOQ(CY1G/b1G/bO#(cQbO,5>vO+}QUO,5>vOOQO,5>|,5>|O#(mQUO'#I[OOQO-E<Y-E<YO#(zQSO,5@RO#)SQbO,5@RO#)ZQSO,5@`OOQ(CY1G/h1G/hO%[QUO,5@aO#)cQSO'#IbOOQO-E<`-E<`O#)ZQSO,5@`OOQ(CW1G0r1G0rOOQ(CY1G/s1G/sOOQ(CY1G0V1G0VO%[QUO,5@^O#)wQ(C[O,5@^O#*YQ(C[O,5@^O#*aQSO,5@]O9TQSO,5@]O#*iQSO,5@]O#*wQSO'#IeO#*aQSO,5@]OOQ(CW1G0q1G0qO!)lQWO,5:rO!)wQWO,5:rOOQO,5:t,5:tO#+iQSO,5:tO#+qQ,UO1G2rO9ZQSO1G2rOOQ(CY1G0o1G0oO#,PQ(CjO1G0oO#-UQ(ChO,5;POOQ(CY'#GQ'#GQO#-rQ(CjO'#J`O!$ZQUO1G0oO#/zQ,UO'#JjO#0UQSO,5:]O#0ZQbO'#JkO%[QUO'#JkO#0eQSO,5:bOOQ(CY'#DY'#DYOOQ(CY1G0x1G0xO%[QUO1G0xOOQ(CY1G1b1G1bO#0jQSO1G0xO#3RQ(CjO1G0yO#3YQ(CjO1G0yO#5sQ(CjO1G0yO#5zQ(CjO1G0yO#8UQ(CjO1G0yO#8lQ(CjO1G0yO#;fQ(CjO1G0yO#;mQ(CjO1G0yO#>WQ(CjO1G0yO#>_Q(CjO1G0yO#@VQ(CjO1G0yO#CVQ$IUO'#CgO#ETQ$IUO1G1[O#E[Q$IUO'#JfO!,YQSO1G1bO#ElQ(CjO,5?SOOQ(CW-E<f-E<fO#F`Q(CjO1G0yOOQ(CY1G0y1G0yO#HkQ(CjO1G1_O#I_Q#tO,5<SO#IgQ#tO,5<TO#IoQ#tO'#FkO#JWQSO'#FjOOQO'#Jz'#JzOOQO'#If'#IfO#J]Q#tO1G1jOOQ(CY1G1j1G1jOOOO1G1u1G1uO#JnQ$IUO'#JeO#JxQSO,5<^O!*SQUO,5<^OOOO-E<e-E<eOOQ(CY1G1g1G1gO#J}QWO'#JyOOQ(CY,5<`,5<`O#KVQWO,5<`OOQ(CY,59c,59cO!&^Q,UO'#C}OOOO'#IY'#IYO#K[O07`O,59gOOQ(CY,59g,59gO%[QUO1G1{O!5rQSO'#IjO#KgQ,UO,5<tOOQ(CY,5<q,5<qOOQO'#Gg'#GgO!'vQ,UO,5=QOOQO'#Gi'#GiO!'vQ,UO,5=SO!&^Q,UO,5=UOOQO1G1}1G1}O#KnQ`O'#CpO#LRQ`O,5<mO#LYQSO'#J}O9ZQSO'#J}O#LhQSO,5<oO!'vQ,UO,5<nO#LmQSO'#GTO#LxQSO,5<nO#L}Q`O'#GQO#M[Q`O'#KOO#MfQSO'#KOO!&^Q,UO'#KOO#MkQSO,5<rO#MpQWO'#G]O!3{QWO'#G]O#NRQSO'#G_O#NWQSO'#GaO!2|QSO'#GdO#N]Q(C[O'#IlO#NhQWO,5<vOOQ(CY,5<v,5<vO#NoQWO'#G]O#N}QWO'#G^O$ VQWO'#G^OOQ(CY,5=V,5=VO!'vQ,UO,5?yO!'vQ,UO,5?yO$ [QSO'#ImO$ gQSO,5?xO$ oQSO,59^O$!`Q,UO,59oOOQ(CY,59o,59oO$#RQ,UO,5<eO$#tQ,UO,5<gO@[QSO,5<iOOQ(CY,5<j,5<jO$$OQSO,5<pO$$TQ,UO,5<uO$$eQSO'#JqO!$ZQUO1G1|O$$jQSO1G1|O9TQSO'#JtO9TQSO'#EnO%[QUO'#EnO9TQSO'#IoO$$oQ(C[O,5@nOOQQ1G2v1G2vOOQQ1G4W1G4WOOQ(CY1G/u1G/uO!,VQSO1G/uO$&tQ(CjO1G0ROOQQ1G2r1G2rO!&^Q,UO1G2rO%[QUO1G2rO$'eQSO1G2rO$'pQ,UO'#EeOOQ(CW,5?v,5?vO$'zQ(C[O,5?vOOQQ1G.s1G.sO!@YQ(C[O1G.sO!@eQWO1G.sO!@mQ,UO1G.sO$(]QSO1G0oO$(bQSO'#CgO$(mQSO'#KWO$(uQSO,5=tO$(zQSO'#KWO$)PQSO'#KWO$)_QSO'#IuO$)mQSO,5@qO$)uQbO1G1dOOQ(CY1G1f1G1fO9ZQSO1G3_O@[QSO1G3_O$)|QSO1G3_O$*RQSO1G3_OOQQ1G3_1G3_O!BkQSO1G2}O!&^Q,UO1G2zO$*WQSO1G2zOOQQ1G2{1G2{O!&^Q,UO1G2{O$*]QSO1G2{O$*eQWO'#GyOOQQ1G2}1G2}O!3{QWO'#IqO!BpQ`O1G3QOOQQ1G3Q1G3QOOQQ,5=k,5=kO$*mQ,UO,5=mO9ZQSO,5=mO#NWQSO,5=oO9OQSO,5=oO!@eQWO,5=oO!@mQ,UO,5=oO9{Q,UO,5=oO$*{QSO'#KUO$+WQSO,5=pOOQQ1G.i1G.iO$+]Q(C[O1G.iO@[QSO1G.iO$+hQSO1G.iO9eQ(C[O1G.iO$-mQbO,5@sO$-}QSO,5@sO9TQSO,5@sO$.YQUO,5=wO$.aQSO,5=wOOQQ1G3a1G3aO`QUO1G3aOOQQ1G3g1G3gOOQQ1G3i1G3iO>eQSO1G3kO$.fQUO1G3mO$2jQUO'#HlOOQQ1G3p1G3pO$2wQSO'#HrO>jQSO'#HtOOQQ1G3v1G3vO$3PQUO1G3vO9eQ(C[O1G3|OOQQ1G4O1G4OOOQ(CW'#GX'#GXO9eQ(C[O1G4QO9eQ(C[O1G4SO$7WQSO,5@TO!*SQUO,5;YO9TQSO,5;YO>jQSO,5:SO!*SQUO,5:SO!@eQWO,5:SO$7]Q$IUO,5:SOOQO,5;Y,5;YO$7gQWO'#I]O$7}QSO,5@SOOQ(CY1G/m1G/mO$8VQWO'#IcO$8aQSO,5@bOOQ(CW1G0s1G0sO# `QWO,5:SOOQO'#I`'#I`O$8iQWO,5:nOOQ(CY,5:n,5:nO#%ZQSO1G0WOOQ(CY1G0W1G0WO%[QUO1G0WOOQ(CY1G0n1G0nO>jQSO1G0nO!@eQWO1G0nO!@mQ,UO1G0nOOQ(CW1G5o1G5oO!@YQ(C[O1G0ZOOQO1G0g1G0gO%[QUO1G0gO$8pQ(C[O1G0gO$8{Q(C[O1G0gO!@eQWO1G0ZOChQWO1G0ZO$9ZQ(C[O1G0gOOQO1G0Z1G0ZO$9oQ(CjO1G0gPOOO-E<S-E<SPOOO1G.f1G.fOOOO1G/d1G/dO$9yQ`O,5<dO$:RQbO1G4bOOQO1G4h1G4hO%[QUO,5>vO$:]QSO1G5mO$:eQSO1G5zO$:mQbO1G5{O9TQSO,5>|O$:wQ(CjO1G5xO%[QUO1G5xO$;XQ(C[O1G5xO$;jQSO1G5wO$;jQSO1G5wO9TQSO1G5wO$;rQSO,5?PO9TQSO,5?POOQO,5?P,5?PO$<WQSO,5?PO$$eQSO,5?POOQO-E<c-E<cOOQO1G0^1G0^OOQO1G0`1G0`O!,YQSO1G0`OOQQ7+(^7+(^O!&^Q,UO7+(^O%[QUO7+(^O$<fQSO7+(^O$<qQ,UO7+(^O$=PQ(CjO,59oO$?XQ(CjO,5<eO$AdQ(CjO,5<gO$CoQ(CjO,5<uOOQ(CY7+&Z7+&ZO$FQQ(CjO7+&ZO$FtQ,UO'#I^O$GOQSO,5@UOOQ(CY1G/w1G/wO$GWQUO'#I_O$GeQSO,5@VO$GmQbO,5@VOOQ(CY1G/|1G/|O$GwQSO7+&dOOQ(CY7+&d7+&dO$G|Q$IUO,5:cO%[QUO7+&vO$HWQ$IUO,5:ZO$HeQ$IUO,5:gO$HoQ$IUO,5:iOOQ(CY7+&|7+&|OOQO1G1n1G1nOOQO1G1o1G1oO$HyQ#tO,5<VO!*SQUO,5<UOOQO-E<d-E<dOOQ(CY7+'U7+'UOOOO7+'a7+'aOOOO1G1x1G1xO$IUQSO1G1xOOQ(CY1G1z1G1zO$IZQ`O,59iOOOO-E<W-E<WOOQ(CY1G/R1G/RO$IbQ(CjO7+'gOOQ(CY,5?U,5?UO$JUQ`O,5?UOOQ(CY1G2`1G2`P!&^Q,UO'#IjPOQ(CY-E<h-E<hO$JtQ,UO1G2lO$KgQ,UO1G2nO$KqQ`O1G2pOOQ(CY1G2X1G2XO$KxQSO'#IiO$LWQSO,5@iO$LWQSO,5@iO$L`QSO,5@iO$LkQSO,5@iOOQO1G2Z1G2ZO$LyQ,UO1G2YO!'vQ,UO1G2YO$MZQMhO'#IkO$MkQSO,5@jO!&^Q,UO,5@jO$MsQ`O,5@jOOQ(CY1G2^1G2^OOQ(CW,5<w,5<wOOQ(CW,5<x,5<xO$$eQSO,5<xOCXQSO,5<xO!@eQWO,5<wOOQO'#G`'#G`O$M}QSO,5<yOOQ(CW,5<{,5<{O$$eQSO,5=OOOQO,5?W,5?WOOQO-E<j-E<jOOQ(CY1G2b1G2bO!3{QWO,5<wO$NVQSO,5<xO#NRQSO,5<yO!3{QWO,5<xO$NbQ,UO1G5eO$NlQ,UO1G5eOOQO,5?X,5?XOOQO-E<k-E<kOOQO1G.x1G.xO!7cQWO,59qO%[QUO,59qO$NyQSO1G2TO!'vQ,UO1G2[O% OQ(CjO7+'hOOQ(CY7+'h7+'hO!$ZQUO7+'hO% rQSO,5;YOOQ(CW,5?Z,5?ZOOQ(CW-E<m-E<mOOQ(CY7+%a7+%aO% wQ`O'#KPO#%ZQSO7+(^O%!RQbO7+(^O$<iQSO7+(^O%!YQ(ChO'#CgO%!mQ(ChO,5<|O%#_QSO,5<|OOQ(CW1G5b1G5bOOQQ7+$_7+$_O!@YQ(C[O7+$_O!@eQWO7+$_O!$ZQUO7+&ZO%#dQSO'#ItO%#{QSO,5@rOOQO1G3`1G3`O9ZQSO,5@rO%#{QSO,5@rO%$TQSO,5@rOOQO,5?a,5?aOOQO-E<s-E<sOOQ(CY7+'O7+'OO%$YQSO7+(yO9eQ(C[O7+(yO9ZQSO7+(yO@[QSO7+(yOOQQ7+(i7+(iO%$_Q(ChO7+(fO!&^Q,UO7+(fO%$iQ`O7+(gOOQQ7+(g7+(gO!&^Q,UO7+(gO%$pQSO'#KTO%${QSO,5=eOOQO,5?],5?]OOQO-E<o-E<oOOQQ7+(l7+(lO%&[QWO'#HSOOQQ1G3X1G3XO!&^Q,UO1G3XO%[QUO1G3XO%&cQSO1G3XO%&nQ,UO1G3XO9eQ(C[O1G3ZO#NWQSO1G3ZO9OQSO1G3ZO!@eQWO1G3ZO!@mQ,UO1G3ZO%&|QSO'#IsO%'bQSO,5@pO%'jQWO,5@pOOQ(CW1G3[1G3[OOQQ7+$T7+$TO@[QSO7+$TO9eQ(C[O7+$TO%'uQSO7+$TO%[QUO1G6_O%[QUO1G6`O%'zQ(C[O1G6_O%(UQUO1G3cO%(]QSO1G3cO%(bQUO1G3cOOQQ7+({7+({O9eQ(C[O7+)VO`QUO7+)XOOQQ'#KZ'#KZOOQQ'#Iv'#IvO%(iQUO,5>WOOQQ,5>W,5>WO%[QUO'#HmO%(vQSO'#HoOOQQ,5>^,5>^O9TQSO,5>^OOQQ,5>`,5>`OOQQ7+)b7+)bOOQQ7+)h7+)hOOQQ7+)l7+)lOOQQ7+)n7+)nO%({QWO1G5oO%)aQ$IUO1G0tO%)kQSO1G0tOOQO1G/n1G/nO%)vQ$IUO1G/nO>jQSO1G/nO!*SQUO'#DhOOQO,5>w,5>wOOQO-E<Z-E<ZOOQO,5>},5>}OOQO-E<a-E<aO!@eQWO1G/nOOQO-E<^-E<^OOQ(CY1G0Y1G0YOOQ(CY7+%r7+%rO#%ZQSO7+%rOOQ(CY7+&Y7+&YO>jQSO7+&YO!@eQWO7+&YOOQO7+%u7+%uO$9oQ(CjO7+&ROOQO7+&R7+&RO%[QUO7+&RO%*QQ(C[O7+&RO!@YQ(C[O7+%uO!@eQWO7+%uO%*]Q(C[O7+&RO%*kQ(CjO7++dO%[QUO7++dO%*{QSO7++cO%*{QSO7++cOOQO1G4k1G4kO9TQSO1G4kO%+TQSO1G4kOOQO7+%z7+%zO#%ZQSO<<KxO%!RQbO<<KxO%+cQSO<<KxOOQQ<<Kx<<KxO!&^Q,UO<<KxO%[QUO<<KxO%+kQSO<<KxO%+vQ(CjO1G2lO%.RQ(CjO1G2nO%0^Q(CjO1G2YO%2oQ,UO,5>xOOQO-E<[-E<[O%2yQbO,5>yO%[QUO,5>yOOQO-E<]-E<]O%3TQSO1G5qOOQ(CY<<JO<<JOO%3]Q$IUO1G0oO%5gQ$IUO1G0yO%5nQ$IUO1G0yO%7rQ$IUO1G0yO%7yQ$IUO1G0yO%9nQ$IUO1G0yO%:UQ$IUO1G0yO%<iQ$IUO1G0yO%<pQ$IUO1G0yO%>tQ$IUO1G0yO%>{Q$IUO1G0yO%@sQ$IUO1G0yO%AWQ(CjO<<JbO%B]Q$IUO1G0yO%DRQ$IUO'#J`O%FUQ$IUO1G1_O%FcQ$IUO1G0RO!*SQUO'#FmOOQO'#J{'#J{OOQO1G1q1G1qO%FmQSO1G1pO%FrQ$IUO,5?SOOOO7+'d7+'dOOOO1G/T1G/TOOQ(CY1G4p1G4pO!'vQ,UO7+([O%F|QSO,5?TO9ZQSO,5?TOOQO-E<g-E<gO%G[QSO1G6TO%G[QSO1G6TO%GdQSO1G6TO%GoQ,UO7+'tO%HPQ`O,5?VO%HZQSO,5?VO!&^Q,UO,5?VOOQO-E<i-E<iO%H`Q`O1G6UO%HjQSO1G6UOOQ(CW1G2d1G2dO$$eQSO1G2dOOQ(CW1G2c1G2cO%HrQSO1G2eO!&^Q,UO1G2eOOQ(CW1G2j1G2jO!@eQWO1G2cOCXQSO1G2dO%HwQSO1G2eO%IPQSO1G2dO!'vQ,UO7++POOQ(CY1G/]1G/]O%I[QSO1G/]OOQ(CY7+'o7+'oO%IaQ,UO7+'vO%IqQ(CjO<<KSOOQ(CY<<KS<<KSO%JeQSO1G0tO!&^Q,UO'#InO%JjQSO,5@kO!&^Q,UO1G2hOOQQ<<Gy<<GyO!@YQ(C[O<<GyO%JrQ(CjO<<IuOOQ(CY<<Iu<<IuOOQO,5?`,5?`O%KfQSO,5?`O%KkQSO,5?`OOQO-E<r-E<rO%KyQSO1G6^O%KyQSO1G6^O9ZQSO1G6^O@[QSO<<LeOOQQ<<Le<<LeO%LRQSO<<LeO9eQ(C[O<<LeOOQQ<<LQ<<LQO%$_Q(ChO<<LQOOQQ<<LR<<LRO%$iQ`O<<LRO%LWQWO'#IpO%LcQSO,5@oO!*SQUO,5@oOOQQ1G3P1G3PO%LkQUO'#JiOOQO'#Ir'#IrO9eQ(C[O'#IrO%LuQWO,5=nOOQQ,5=n,5=nO%L|QWO'#EaO%MbQSO7+(sO%MgQSO7+(sOOQQ7+(s7+(sO!&^Q,UO7+(sO%[QUO7+(sO%MoQSO7+(sOOQQ7+(u7+(uO9eQ(C[O7+(uO#NWQSO7+(uO9OQSO7+(uO!@eQWO7+(uO%MzQSO,5?_OOQO-E<q-E<qOOQO'#HV'#HVO%NVQSO1G6[O9eQ(C[O<<GoOOQQ<<Go<<GoO@[QSO<<GoO%N_QSO7++yO%NdQSO7++zO%[QUO7++yO%[QUO7++zOOQQ7+(}7+(}O%NiQSO7+(}O%NnQUO7+(}O%NuQSO7+(}OOQQ<<Lq<<LqOOQQ<<Ls<<LsOOQQ-E<t-E<tOOQQ1G3r1G3rO%NzQSO,5>XOOQQ,5>Z,5>ZO& PQSO1G3xO9TQSO7+&`O!*SQUO7+&`OOQO7+%Y7+%YO& UQ$IUO1G5{O>jQSO7+%YOOQ(CY<<I^<<I^OOQ(CY<<It<<ItO>jQSO<<ItOOQO<<Im<<ImO$9oQ(CjO<<ImO%[QUO<<ImOOQO<<Ia<<IaO!@YQ(C[O<<IaO& `Q(C[O<<ImO& kQ(CjO<= OO& {QSO<<N}OOQO7+*V7+*VO9TQSO7+*VOOQQANAdANAdO&!TQSOANAdO!&^Q,UOANAdO#%ZQSOANAdO%!RQbOANAdO%[QUOANAdO&!]Q(CjO7+'tO&$nQ(CjO7+'vO&'PQbO1G4eO&'ZQ$IUO7+&ZO&'hQ$IUO,59oO&)kQ$IUO,5<eO&+nQ$IUO,5<gO&-qQ$IUO,5<uO&/gQ$IUO7+'gO&/tQ$IUO7+'hO&0RQSO,5<XOOQO7+'[7+'[O&0WQ,UO<<KvOOQO1G4o1G4oO&0_QSO1G4oO&0jQSO1G4oO&0xQSO7++oO&0xQSO7++oO!&^Q,UO1G4qO&1QQ`O1G4qO&1[QSO7++pOOQ(CW7+(O7+(OO$$eQSO7+(PO&1dQ`O7+(POOQ(CW7+'}7+'}O$$eQSO7+(OO&1kQSO7+(PO!&^Q,UO7+(POCXQSO7+(OO&1pQ,UO<<NkOOQ(CY7+$w7+$wO&1zQ`O,5?YOOQO-E<l-E<lO&2UQ(ChO7+(SOOQQAN=eAN=eO9ZQSO1G4zOOQO1G4z1G4zO&2fQSO1G4zO&2kQSO7++xO&2kQSO7++xO9eQ(C[OANBPO@[QSOANBPOOQQANBPANBPOOQQANAlANAlOOQQANAmANAmO&2sQSO,5?[OOQO-E<n-E<nO&3OQ$IUO1G6ZO&5`QbO'#CgOOQO,5?^,5?^OOQO-E<p-E<pOOQQ1G3Y1G3YO%LkQUO,5<yOOQQ<<L_<<L_O!&^Q,UO<<L_O%MbQSO<<L_O&5jQSO<<L_O%[QUO<<L_OOQQ<<La<<LaO9eQ(C[O<<LaO#NWQSO<<LaO9OQSO<<LaO&5rQWO1G4yO&5}QSO7++vOOQQAN=ZAN=ZO9eQ(C[OAN=ZOOQQ<= e<= eOOQQ<= f<= fO&6VQSO<= eO&6[QSO<= fOOQQ<<Li<<LiO&6aQSO<<LiO&6fQUO<<LiOOQQ1G3s1G3sO>jQSO7+)dO&6mQSO<<IzO&6xQ$IUO<<IzOOQO<<Ht<<HtOOQ(CYAN?`AN?`OOQOAN?XAN?XO$9oQ(CjOAN?XOOQOAN>{AN>{O%[QUOAN?XOOQO<<Mq<<MqOOQQG27OG27OO!&^Q,UOG27OO#%ZQSOG27OO&7SQSOG27OO%!RQbOG27OO&7[Q$IUO<<JbO&7iQ$IUO1G2YO&9_Q$IUO1G2lO&;bQ$IUO1G2nO&=eQ$IUO<<KSO&=rQ$IUO<<IuOOQO1G1s1G1sO!'vQ,UOANAbOOQO7+*Z7+*ZO&>PQSO7+*ZO&>[QSO<= ZO&>dQ`O7+*]OOQ(CW<<Kk<<KkO$$eQSO<<KkOOQ(CW<<Kj<<KjO&>nQ`O<<KkO$$eQSO<<KjOOQO7+*f7+*fO9ZQSO7+*fO&>uQSO<= dOOQQG27kG27kO9eQ(C[OG27kO!*SQUO1G4vO&>}QSO7++uO%MbQSOANAyOOQQANAyANAyO!&^Q,UOANAyO&?VQSOANAyOOQQANA{ANA{O9eQ(C[OANA{O#NWQSOANA{OOQO'#HW'#HWOOQO7+*e7+*eOOQQG22uG22uOOQQANEPANEPOOQQANEQANEQOOQQANBTANBTO&?_QSOANBTOOQQ<<MO<<MOO!*SQUOAN?fOOQOG24sG24sO$9oQ(CjOG24sO#%ZQSOLD,jOOQQLD,jLD,jO!&^Q,UOLD,jO&?dQSOLD,jO&?lQ$IUO7+'tO&AbQ$IUO7+'vO&CWQ,UOG26|OOQO<<Mu<<MuOOQ(CWANAVANAVO$$eQSOANAVOOQ(CWANAUANAUOOQO<<NQ<<NQOOQQLD-VLD-VO&ChQ$IUO7+*bOOQQG27eG27eO%MbQSOG27eO!&^Q,UOG27eOOQQG27gG27gO9eQ(C[OG27gOOQQG27oG27oO&CrQ$IUOG25QOOQOLD*_LD*_OOQQ!$(!U!$(!UO#%ZQSO!$(!UO!&^Q,UO!$(!UO&C|Q(CjOG26|OOQ(CWG26qG26qOOQQLD-PLD-PO%MbQSOLD-POOQQLD-RLD-ROOQQ!)9Ep!)9EpO#%ZQSO!)9EpOOQQ!$(!k!$(!kOOQQ!.K;[!.K;[O&F_Q$IUOG26|O!*SQUO'#DwO1PQSO'#EUO&HTQbO'#JeO!*SQUO'#DoO&H[QUO'#D{O&HcQbO'#CgO&JyQbO'#CgO!*SQUO'#D}O&KZQUO,5;TO!*SQUO,5;_O!*SQUO,5;_O!*SQUO,5;_O!*SQUO,5;_O!*SQUO,5;_O!*SQUO,5;_O!*SQUO,5;_O!*SQUO,5;_O!*SQUO,5;_O!*SQUO,5;_O!*SQUO,5;_O!*SQUO'#IhO&M^QSO,5<dO&MfQ,UO,5;_O&NyQ,UO,5;_O!*SQUO,5;sO1SQSO'#DTO1SQSO'#DTO!&^Q,UO'#FyO&MfQ,UO'#FyO!&^Q,UO'#F{O&MfQ,UO'#F{O!&^Q,UO'#GZO&MfQ,UO'#GZO!*SQUO,5:gO!*SQUO,5@aO&KZQUO1G0oO' QQ$IUO'#CgO!*SQUO1G1{O!&^Q,UO,5=QO&MfQ,UO,5=QO!&^Q,UO,5=SO&MfQ,UO,5=SO!&^Q,UO,5<nO&MfQ,UO,5<nO&KZQUO1G1|O!*SQUO7+&vO!&^Q,UO1G2YO&MfQ,UO1G2YO!&^Q,UO1G2[O&MfQ,UO1G2[O&KZQUO7+'hO&KZQUO7+&ZO!&^Q,UOANAbO&MfQ,UOANAbO' [QSO'#EiO' aQSO'#EiO' iQSO'#FXO' nQSO'#EsO' sQSO'#JuO'!OQSO'#JsO'!ZQSO,5;TO'!`Q,UO,5<aO'!gQSO'#GSO'!lQSO'#GSO'!qQSO,5<bO'!yQSO,5;TO'#RQ$IUO1G1[O'#YQSO,5<nO'#_QSO,5<nO'#dQSO,5<pO'#iQSO,5<pO'#nQSO1G1|O'#sQSO1G0oO'#xQ,UO<<KvO'$PQ,UO<<KvO7hQ,UO'#FwO9OQSO'#FvOAVQSO'#EhO!*SQUO,5;pO!2|QSO'#GSO!2|QSO'#GSO!2|QSO'#GUO!2|QSO'#GUO!'vQ,UO7+([O!'vQ,UO7+([O$KqQ`O1G2pO$KqQ`O1G2pO!&^Q,UO,5=UO!&^Q,UO,5=U",
    stateData:
      "'%Y~O'oOS'pOSROS'qRQ~OPYOQYOW!VO_qObzOcyOjkOlYOmkOnkOtkOvYOxYO}WO!RkO!SkO!YXO!duO!iZO!lYO!mYO!nYO!pvO!rwO!uxO!y]O#q!PO$R|O$VfO%a}O%c!QO%e!OO%f!OO%g!OO%j!RO%l!SO%o!TO%p!TO%r!UO&O!WO&U!XO&W!YO&Y!ZO&[![O&_!]O&e!^O&k!_O&m!`O&o!aO&q!bO&s!cO'vSO'xTO'{UO(TVO(c[O(piO~OUtO~P`OPYOQYOb!jOc!iOjkOlYOmkOnkOtkOvYOxYO}WO!RkO!SkO!Y!eO!duO!iZO!lYO!mYO!nYO!pvO!r!gO!u!hO$R!kO$VfO'v!dO'xTO'{UO(TVO(c[O(piO~O_!vOm!nO}!oO!]!xO!^!uO!_!uO!y9rO!}!pO#O!pO#P!wO#Q!pO#R!pO#U!yO#V!yO'w!lO'xTO'{UO(W!mO(c!sO~O'q!zO~OPZXYZX_ZXlZXzZX{ZX}ZX!WZX!fZX!gZX!iZX!mZX#YZX#edX#hZX#iZX#jZX#kZX#lZX#mZX#nZX#oZX#pZX#rZX#tZX#vZX#wZX#|ZX'mZX(TZX(dZX(kZX(lZX~O!b${X~P(qO]!|O'x#OO'y!|O'z#OO~O]#PO'z#OO'{#OO'|#PO~Or#RO!P#SO(U#SO(V#UO~OPYOQYOb!jOc!iOjkOlYOmkOnkOtkOvYOxYO}WO!RkO!SkO!Y!eO!duO!iZO!lYO!mYO!nYO!pvO!r!gO!u!hO$R!kO$VfO'v9vO'xTO'{UO(TVO(c[O(piO~O!V#YO!W#VO!T(ZP!T(hP~P+}O!X#bO~P`OPYOQYOb!jOc!iOlYOmkOnkOtkOvYOxYO}WO!RkO!SkO!Y!eO!duO!iZO!lYO!mYO!nYO!pvO!r!gO!u!hO$R!kO$VfO'xTO'{UO(TVO(c[O(piO~Oj#lO!V#hO!y]O#c#kO#d#hO'v9wO!h(eP~P.iO!i#nO'v#mO~O!u#rO!y]O%a#sO~O#e#tO~O!b#uO#e#tO~OP$]OY$dOl$QOz#yO{#zO}#{O!W$aO!f$SO!g#wO!i#xO!m$]O#h$OO#i$PO#j$PO#k$PO#l$RO#m$SO#n$SO#o$cO#p$SO#r$TO#t$VO#v$XO#w$YO(TVO(d$ZO(k#|O(l#}O~O_(XX'm(XX'k(XX!h(XX!T(XX!Y(XX%b(XX!b(XX~P1qO#Y$eO#|$eOP(YXY(YXl(YXz(YX{(YX}(YX!W(YX!f(YX!i(YX!m(YX#h(YX#i(YX#j(YX#k(YX#l(YX#m(YX#n(YX#o(YX#p(YX#r(YX#t(YX#v(YX#w(YX(T(YX(d(YX(k(YX(l(YX!Y(YX%b(YX~O_(YX!g(YX'm(YX'k(YX!T(YX!h(YXp(YX!b(YX~P4XO#Y$eO~O$X$gO$Z$fO$b$lO~O!Y$mO$VfO$e$nO$g$pO~Oj%SOl$tOm$sOn$sOt%TOv%UOx%VO}${O!Y$|O!d%[O!i$xO#d%]O$R%YO$n%WO$p%XO$s%ZO'v$rO'xTO'{UO(P%RO(T$uOe(QP~O!i%^O~O}%aO!Y%bO'v%`O~O!b%fO~O_%gO'm%gO~O'w!lO~P%[O%g%nO~P%[O!i%^O'v%`O'w!lO(P%RO~Oc%uO!i%^O'v%`O~O#p$SO~Oz%zO!Y%wO!i%yO%c%}O'v%`O'w!lO'xTO'{UO^(yP~O!u#rO~O%l&PO}(uX!Y(uX'v(uX~O'v&QO~O!r&VO#q!PO%c!QO%e!OO%f!OO%g!OO%j!RO%l!SO%o!TO%p!TO~Ob&[Oc&ZO!u&XO%a&YO%t&WO~P;rOb&_OcyO!Y&^O!r&VO!uxO!y]O#q!PO%a}O%e!OO%f!OO%g!OO%j!RO%l!SO%o!TO%p!TO%r!UO~O`&bO#Y&eO%c&`O'w!lO~P<wO!i&fO!r&jO~O!i#nO~O!YXO~O_%gO'l&rO'm%gO~O_%gO'l&uO'm%gO~O_%gO'l&wO'm%gO~O'kZX!TZXpZX!hZX&SZX!YZX%bZX!bZX~P(qO!]'UO!^&}O!_&}O'w!lO'xTO'{UO~Om&{O}&zO!V'OO(W&yO!X([P!X(jP~P@OOh'XO!Y'VO'v%`O~Oc'^O!i%^O'v%`O~Oz%zO!i%yO~Om!nO}!oO!y9rO!}!pO#O!pO#Q!pO#R!pO'w!lO'xTO'{UO(W!mO(c!sO~O!]'dO!^'cO!_'cO#P!pO#U'eO#V'eO~PAjO_%gO!b#uO!i%^O'm%gO(P%RO(d'gO~O!m'kO#Y'iO~PBxOm!nO}!oO'xTO'{UO(W!mO(c!sO~O!YXOm(aX}(aX!](aX!^(aX!_(aX!y(aX!}(aX#O(aX#P(aX#Q(aX#R(aX#U(aX#V(aX'w(aX'x(aX'{(aX(W(aX(c(aX~O!^'cO!_'cO'w!lO~PChO'r'oO's'oO't'qO~O]!|O'x'sO'y!|O'z'sO~O]#PO'z'sO'{'sO'|#PO~Or#RO!P#SO(U#SO(V'wO~O!V'yO!T'OX!T'UX!W'OX!W'UX~P+}O!W'{O!T(ZX~OP$]OY$dOl$QOz#yO{#zO}#{O!W'{O!f$SO!g#wO!i#xO!m$]O#h$OO#i$PO#j$PO#k$PO#l$RO#m$SO#n$SO#o$cO#p$SO#r$TO#t$VO#v$XO#w$YO(TVO(d$ZO(k#|O(l#}O~O!T(ZX~PG[O!T(QO~O!T(gX!W(gX!b(gX!h(gX(d(gX~O#Y(gX#e#^X!X(gX~PIbO#Y(RO!T(iX!W(iX~O!W(SO!T(hX~O!T(VO~O#Y$eO~PIbO!X(WO~P`Oz#yO{#zO}#{O!g#wO!i#xO(TVOP!kaY!kal!ka!W!ka!f!ka!m!ka#h!ka#i!ka#j!ka#k!ka#l!ka#m!ka#n!ka#o!ka#p!ka#r!ka#t!ka#v!ka#w!ka(d!ka(k!ka(l!ka~O_!ka'm!ka'k!ka!T!ka!h!kap!ka!Y!ka%b!ka!b!ka~PJxO!h(XO~O!b#uO#Y(YO(d'gO!W(fX_(fX'm(fX~O!h(fX~PMhO}%aO!Y%bO!y]O#c(_O#d(^O'v%`O~O!W(`O!h(eX~O!h(bO~O}%aO!Y%bO#d(^O'v%`O~OP(YXY(YXl(YXz(YX{(YX}(YX!W(YX!f(YX!g(YX!i(YX!m(YX#h(YX#i(YX#j(YX#k(YX#l(YX#m(YX#n(YX#o(YX#p(YX#r(YX#t(YX#v(YX#w(YX(T(YX(d(YX(k(YX(l(YX~O!b#uO!h(YX~P! UOz(cO{(dO!g#wO!i#xO!y!xa}!xa~O!u!xa%a!xa!Y!xa#c!xa#d!xa'v!xa~P!#YO!u(hO~OPYOQYOb!jOc!iOjkOlYOmkOnkOtkOvYOxYO}WO!RkO!SkO!YXO!duO!iZO!lYO!mYO!nYO!pvO!r!gO!u!hO$R!kO$VfO'v!dO'xTO'{UO(TVO(c[O(piO~Oj%SOl$tOm$sOn$sOt%TOv%UOx:[O}${O!Y$|O!d;fO!i$xO#d:bO$R%YO$n:^O$p:`O$s%ZO'v(lO'xTO'{UO(P%RO(T$uO~O#e(nO~Oj%SOl$tOm$sOn$sOt%TOv%UOx%VO}${O!Y$|O!d%[O!i$xO#d%]O$R%YO$n%WO$p%XO$s%ZO'v(lO'xTO'{UO(P%RO(T$uO~Oe(^P~P!'vO!V(rO!h(_P~P%[O(W(tO(c[O~O}(vO!i#xO(W(tO(c[O~OP9qOQ9qOb;bOc!iOjkOl9qOmkOnkOtkOv9qOx9qO}WO!RkO!SkO!Y!eO!d9tO!iZO!l9qO!m9qO!n9qO!p9uO!r9xO!u!hO$R!kO$VfO'v)UO'xTO'{UO(TVO(c[O(p;`O~O{)XO!i#xO~O!W$aO_$la'm$la'k$la!h$la!T$la!Y$la%b$la!b$la~O#q)]O~P!&^Oz)`O!b)_O!Y$YX$U$YX$X$YX$Z$YX$b$YX~O!b)_O!Y(mX$U(mX$X(mX$Z(mX$b(mX~Oz)`O~P!-lOz)`O!Y(mX$U(mX$X(mX$Z(mX$b(mX~O!Y)bO$U)fO$X)aO$Z)aO$b)gO~O!V)jO~P!*SO$X$gO$Z$fO$b)nO~Oh$tXz$tX}$tX!g$tX(k$tX(l$tX~OegXe$tXhgX!WgX#YgX~P!/bOm)pO~Or)qO(U)rO(V)tO~Oh)}Oz)vO})wO(k)yO(l){O~Oe)uO~P!0kOe*OO~Oj%SOl$tOm$sOn$sOt%TOv%UOx:[O}${O!Y$|O!d;fO!i$xO#d:bO$R%YO$n:^O$p:`O$s%ZO'xTO'{UO(P%RO(T$uO~O!V*SO'v*PO!h(qP~P!1YO#e*UO~O!i*VO~O!V*[O'v*XO!T(rP~P!1YOl*hO}*`O!]*fO!^*_O!_*_O!i*VO#U*gO%X*bO'w!lO(W!mO~O!X*eO~P!3`O!g#wOh(SXz(SX}(SX(k(SX(l(SX!W(SX#Y(SX~Oe(SX#z(SX~P!4XOh*kO#Y*jOe(RX!W(RX~O!W*lOe(QX~O'v&QOe(QP~O!i*sO~O'v(lO~Oj*wO}%aO!V#hO!Y%bO!y]O#c#kO#d#hO'v%`O!h(eP~O!b#uO#e*xO~O}%aO!V*zO!W(SO!Y%bO'v%`O!T(hP~Om'RO}*|O!V*{O'xTO'{UO(W(tO~O!X(jP~P!7SO!W*}O_(vX'm(vX~OP$]OY$dOl$QOz#yO{#zO}#{O!f$SO!g#wO!i#xO!m$]O#h$OO#i$PO#j$PO#k$PO#l$RO#m$SO#n$SO#o$cO#p$SO#r$TO#t$VO#v$XO#w$YO(TVO(d$ZO(k#|O(l#}O~O_!ca!W!ca'm!ca'k!ca!T!ca!h!cap!ca!Y!ca%b!ca!b!ca~P!7zOz#yO{#zO}#{O!g#wO!i#xO(TVOP!oaY!oal!oa!W!oa!f!oa!m!oa#h!oa#i!oa#j!oa#k!oa#l!oa#m!oa#n!oa#o!oa#p!oa#r!oa#t!oa#v!oa#w!oa(d!oa(k!oa(l!oa~O_!oa'm!oa'k!oa!T!oa!h!oap!oa!Y!oa%b!oa!b!oa~P!:eOz#yO{#zO}#{O!g#wO!i#xO(TVOP!qaY!qal!qa!W!qa!f!qa!m!qa#h!qa#i!qa#j!qa#k!qa#l!qa#m!qa#n!qa#o!qa#p!qa#r!qa#t!qa#v!qa#w!qa(d!qa(k!qa(l!qa~O_!qa'm!qa'k!qa!T!qa!h!qap!qa!Y!qa%b!qa!b!qa~P!=OOh+WO!Y'VO%b+VO(P%RO~O!b+YO_(OX!Y(OX'm(OX!W(OX~O_%gO!YXO'm%gO~O!i%^O(P%RO~O!i%^O'v%`O(P%RO~O!b#uO#e(nO~O`+eO%c+fO'v+bO'xTO'{UO!X(zP~O!W+gO^(yX~OY+kO~O^+lO~O!Y%wO'v%`O'w!lO^(yP~O#Y+qO(P%RO~Oh+tO!Y$|O(P%RO~O!Y+vO~Oz+xO!YXO~O%g%nO~O!u+}O~Oc,SO~O`,TO'v#mO'xTO'{UO!X(xP~Oc%uO~O%c!QO'v&QO~P<wOY,YO^,XO~OPYOQYObzOcyOjkOlYOmkOnkOtkOvYOxYO}WO!RkO!SkO!duO!iZO!lYO!mYO!nYO!pvO!uxO!y]O$VfO%a}O'xTO'{UO(TVO(c[O(piO~O!Y!eO!r!gO$R!kO'v!dO~P!DRO^,XO_%gO'm%gO~OPYOQYOb!jOc!iOjkOlYOmkOnkOtkOvYOxYO}WO!RkO!SkO!Y!eO!duO!iZO!lYO!mYO!nYO!pvO!u!hO$R!kO$VfO'v!dO'xTO'{UO(TVO(c[O(piO~O_,_O!rwO#q!OO%e!OO%f!OO%g!OO~P!FkO!i&fO~O&U,eO~O!Y,gO~O&g,iO&i,jOP&daQ&daW&da_&dab&dac&daj&dal&dam&dan&dat&dav&dax&da}&da!R&da!S&da!Y&da!d&da!i&da!l&da!m&da!n&da!p&da!r&da!u&da!y&da#q&da$R&da$V&da%a&da%c&da%e&da%f&da%g&da%j&da%l&da%o&da%p&da%r&da&O&da&U&da&W&da&Y&da&[&da&_&da&e&da&k&da&m&da&o&da&q&da&s&da'k&da'v&da'x&da'{&da(T&da(c&da(p&da!X&da&]&da`&da&b&da~O'v,oO~O!W|X!W!`X!X|X!X!`X!b|X!b!`X!i!`X#Y|X(P!`X~O!b,tO#Y,sO!W#bX!W(]X!X#bX!X(]X!b(]X!i(]X(P(]X~O!b,vO!i%^O(P%RO!W![X!X![X~Om!nO}!oO'xTO'{UO(W!mO~OP9qOQ9qOb;bOc!iOjkOl9qOmkOnkOtkOv9qOx9qO}WO!RkO!SkO!Y!eO!d9tO!iZO!l9qO!m9qO!n9qO!p9uO!r9xO!u!hO$R!kO$VfO'xTO'{UO(TVO(c[O(p;`O~O'v:gO~P# qO!W,zO!X([X~O!X,|O~O!b,tO#Y,sO!W#bX!X#bX~O!W,}O!X(jX~O!X-PO~O!^-QO!_-QO'w!lO~P# `O!X-TO~P'_Oh-WO!Y'VO~O!T-]O~Om!xa!]!xa!^!xa!_!xa!}!xa#O!xa#P!xa#Q!xa#R!xa#U!xa#V!xa'w!xa'x!xa'{!xa(W!xa(c!xa~P!#YO!m-bO#Y-`O~PBxO!^-dO!_-dO'w!lO~PChO_%gO#Y-`O'm%gO~O_%gO!b#uO#Y-`O'm%gO~O_%gO!b#uO!m-bO#Y-`O'm%gO(d'gO~O'r'oO's'oO't-iO~Op-jO~O!T'Oa!W'Oa~P!7zO!V-nO!T'OX!W'OX~P%[O!W'{O!T(Za~O!T(Za~PG[O!W(SO!T(ha~O}%aO!V-rO!Y%bO'v%`O!T'UX!W'UX~O#Y-tO!W(fa!h(fa_(fa'm(fa~O!b#uO~P#)wO!W(`O!h(ea~O}%aO!Y%bO#d-xO'v%`O~Oj-}O}%aO!V-zO!Y%bO!y]O#c-|O#d-zO'v%`O!W'XX!h'XX~O{.RO!i#xO~Oh.UO!Y'VO%b.TO(P%RO~O_#]i!W#]i'm#]i'k#]i!T#]i!h#]ip#]i!Y#]i%b#]i!b#]i~P!7zOh;lOz)vO})wO(k)yO(l){O~O#e#Xa_#Xa#Y#Xa'm#Xa!W#Xa!h#Xa!Y#Xa!T#Xa~P#,sO#e(SXP(SXY(SX_(SXl(SX{(SX!f(SX!i(SX!m(SX#h(SX#i(SX#j(SX#k(SX#l(SX#m(SX#n(SX#o(SX#p(SX#r(SX#t(SX#v(SX#w(SX'm(SX(T(SX(d(SX!h(SX!T(SX'k(SXp(SX!Y(SX%b(SX!b(SX~P!4XO!W._Oe(^X~P!0kOe.aO~O!W.bO!h(_X~P!7zO!h.eO~O!T.gO~OP$]Oz#yO{#zO}#{O!g#wO!i#xO!m$]O(TVOY#gi_#gil#gi!W#gi!f#gi#i#gi#j#gi#k#gi#l#gi#m#gi#n#gi#o#gi#p#gi#r#gi#t#gi#v#gi#w#gi'm#gi(d#gi(k#gi(l#gi'k#gi!T#gi!h#gip#gi!Y#gi%b#gi!b#gi~O#h#gi~P#0oO#h$OO~P#0oOP$]Oz#yO{#zO}#{O!g#wO!i#xO!m$]O#h$OO#i$PO#j$PO#k$PO(TVOY#gi_#gi!W#gi!f#gi#l#gi#m#gi#n#gi#o#gi#p#gi#r#gi#t#gi#v#gi#w#gi'm#gi(d#gi(k#gi(l#gi'k#gi!T#gi!h#gip#gi!Y#gi%b#gi!b#gi~Ol#gi~P#3aOl$QO~P#3aOP$]Ol$QOz#yO{#zO}#{O!g#wO!i#xO!m$]O#h$OO#i$PO#j$PO#k$PO#l$RO(TVO_#gi!W#gi#r#gi#t#gi#v#gi#w#gi'm#gi(d#gi(k#gi(l#gi'k#gi!T#gi!h#gip#gi!Y#gi%b#gi!b#gi~OY#gi!f#gi#m#gi#n#gi#o#gi#p#gi~P#6ROY$dO!f$SO#m$SO#n$SO#o$cO#p$SO~P#6ROP$]OY$dOl$QOz#yO{#zO}#{O!f$SO!g#wO!i#xO!m$]O#h$OO#i$PO#j$PO#k$PO#l$RO#m$SO#n$SO#o$cO#p$SO#r$TO(TVO_#gi!W#gi#t#gi#v#gi#w#gi'm#gi(d#gi(l#gi'k#gi!T#gi!h#gip#gi!Y#gi%b#gi!b#gi~O(k#gi~P#9SO(k#|O~P#9SOP$]OY$dOl$QOz#yO{#zO}#{O!f$SO!g#wO!i#xO!m$]O#h$OO#i$PO#j$PO#k$PO#l$RO#m$SO#n$SO#o$cO#p$SO#r$TO#t$VO(TVO(k#|O_#gi!W#gi#v#gi#w#gi'm#gi(d#gi'k#gi!T#gi!h#gip#gi!Y#gi%b#gi!b#gi~O(l#gi~P#;tO(l#}O~P#;tOP$]OY$dOl$QOz#yO{#zO}#{O!f$SO!g#wO!i#xO!m$]O#h$OO#i$PO#j$PO#k$PO#l$RO#m$SO#n$SO#o$cO#p$SO#r$TO#t$VO#v$XO(TVO(k#|O(l#}O~O_#gi!W#gi#w#gi'm#gi(d#gi'k#gi!T#gi!h#gip#gi!Y#gi%b#gi!b#gi~P#>fOPZXYZXlZXzZX{ZX}ZX!fZX!gZX!iZX!mZX#YZX#edX#hZX#iZX#jZX#kZX#lZX#mZX#nZX#oZX#pZX#rZX#tZX#vZX#wZX#|ZX(TZX(dZX(kZX(lZX!WZX!XZX~O#zZX~P#APOP$]OY:YOl9|Oz#yO{#zO}#{O!f:OO!g#wO!i#xO!m$]O#h9zO#i9{O#j9{O#k9{O#l9}O#m:OO#n:OO#o:XO#p:OO#r:PO#t:RO#v:TO#w:UO(TVO(d$ZO(k#|O(l#}O~O#z.iO~P#C^O#Y:ZO#|:ZO#z(YX!X(YX~P! UO_'[a!W'[a'm'[a'k'[a!h'[a!T'[ap'[a!Y'[a%b'[a!b'[a~P!7zOP#giY#gi_#gil#gi{#gi!W#gi!f#gi!g#gi!i#gi!m#gi#h#gi#i#gi#j#gi#k#gi#l#gi#m#gi#n#gi#o#gi#p#gi#r#gi#t#gi#v#gi#w#gi'm#gi(T#gi(d#gi'k#gi!T#gi!h#gip#gi!Y#gi%b#gi!b#gi~P#,sO_#{i!W#{i'm#{i'k#{i!T#{i!h#{ip#{i!Y#{i%b#{i!b#{i~P!7zO$X.nO$Z.nO~O$X.oO$Z.oO~O!b)_O#Y.pO!Y$_X$U$_X$X$_X$Z$_X$b$_X~O!V.qO~O!Y)bO$U.sO$X)aO$Z)aO$b.tO~O!W:VO!X(XX~P#C^O!X.uO~O!b)_O$b(mX~O$b.wO~Or)qO(U)rO(V.zO~O!T/OO~P!&^O!WdX!bdX!hdX!h$tX(ddX~P!/bO!h/UO~P#,sO!W/VO!b#uO(d'gO!h(qX~O!h/[O~O!V*SO'v%`O!h(qP~O#e/^O~O!T$tX!W$tX!b${X~P!/bO!W/_O!T(rX~P#,sO!b/aO~O!T/cO~Ol/gO!b#uO!i%^O(P%RO(d'gO~O'v/iO~O!b+YO~O_%gO!W/mO'm%gO~O!X/oO~P!3`O!^/pO!_/pO'w!lO(W!mO~O}/rO(W!mO~O#U/sO~O'v&QOe'aX!W'aX~O!W*lOe(Qa~Oe/xO~Oz/yO{/yO}/zOhwa(kwa(lwa!Wwa#Ywa~Oewa#zwa~P$ tOz)vO})wOh$ma(k$ma(l$ma!W$ma#Y$ma~Oe$ma#z$ma~P$!jOz)vO})wOh$oa(k$oa(l$oa!W$oa#Y$oa~Oe$oa#z$oa~P$#]O#e/|O~Oe$}a!W$}a#Y$}a#z$}a~P!0kO!b#uO~O#e0PO~O!W*}O_(va'm(va~Oz#yO{#zO}#{O!g#wO!i#xO(TVOP!oiY!oil!oi!W!oi!f!oi!m!oi#h!oi#i!oi#j!oi#k!oi#l!oi#m!oi#n!oi#o!oi#p!oi#r!oi#t!oi#v!oi#w!oi(d!oi(k!oi(l!oi~O_!oi'm!oi'k!oi!T!oi!h!oip!oi!Y!oi%b!oi!b!oi~P$$zOh.UO!Y'VO%b.TO~Oj0ZO'v0YO~P!1]O!b+YO_(Oa!Y(Oa'm(Oa!W(Oa~O#e0aO~OYZX!WdX!XdX~O!W0bO!X(zX~O!X0dO~OY0eO~O`0gO'v+bO'xTO'{UO~O!Y%wO'v%`O^'iX!W'iX~O!W+gO^(ya~O!h0jO~P!7zOY0mO~O^0nO~O#Y0qO~Oh0tO!Y$|O~O(W(tO!X(wP~Oh0}O!Y0zO%b0|O(P%RO~OY1XO!W1VO!X(xX~O!X1YO~O^1[O_%gO'm%gO~O'v#mO'xTO'{UO~O#Y$eO#|$eOP(YXY(YXl(YXz(YX{(YX}(YX!W(YX!f(YX!i(YX!m(YX#h(YX#i(YX#j(YX#k(YX#l(YX#m(YX#n(YX#o(YX#r(YX#t(YX#v(YX#w(YX(T(YX(d(YX(k(YX(l(YX~O#p1_O&S1`O_(YX!g(YX~P$+sO#Y$eO#p1_O&S1`O~O_1bO~P%[O_1dO~O&]1gOP&ZiQ&ZiW&Zi_&Zib&Zic&Zij&Zil&Zim&Zin&Zit&Ziv&Zix&Zi}&Zi!R&Zi!S&Zi!Y&Zi!d&Zi!i&Zi!l&Zi!m&Zi!n&Zi!p&Zi!r&Zi!u&Zi!y&Zi#q&Zi$R&Zi$V&Zi%a&Zi%c&Zi%e&Zi%f&Zi%g&Zi%j&Zi%l&Zi%o&Zi%p&Zi%r&Zi&O&Zi&U&Zi&W&Zi&Y&Zi&[&Zi&_&Zi&e&Zi&k&Zi&m&Zi&o&Zi&q&Zi&s&Zi'k&Zi'v&Zi'x&Zi'{&Zi(T&Zi(c&Zi(p&Zi!X&Zi`&Zi&b&Zi~O`1mO!X1kO&b1lO~P`O!YXO!i1oO~O&i,jOP&diQ&diW&di_&dib&dic&dij&dil&dim&din&dit&div&dix&di}&di!R&di!S&di!Y&di!d&di!i&di!l&di!m&di!n&di!p&di!r&di!u&di!y&di#q&di$R&di$V&di%a&di%c&di%e&di%f&di%g&di%j&di%l&di%o&di%p&di%r&di&O&di&U&di&W&di&Y&di&[&di&_&di&e&di&k&di&m&di&o&di&q&di&s&di'k&di'v&di'x&di'{&di(T&di(c&di(p&di!X&di&]&di`&di&b&di~O!T1uO~O!W![a!X![a~P#C^Om!nO}!oO!V1{O(W!mO!W'PX!X'PX~P@OO!W,zO!X([a~O!W'VX!X'VX~P!7SO!W,}O!X(ja~O!X2SO~P'_O_%gO#Y2]O'm%gO~O_%gO!b#uO#Y2]O'm%gO~O_%gO!b#uO!m2aO#Y2]O'm%gO(d'gO~O_%gO'm%gO~P!7zO!W$aOp$la~O!T'Oi!W'Oi~P!7zO!W'{O!T(Zi~O!W(SO!T(hi~O!T(ii!W(ii~P!7zO!W(fi!h(fi_(fi'm(fi~P!7zO#Y2cO!W(fi!h(fi_(fi'm(fi~O!W(`O!h(ei~O}%aO!Y%bO!y]O#c2hO#d2gO'v%`O~O}%aO!Y%bO#d2gO'v%`O~Oh2oO!Y'VO%b2nO~Oh2oO!Y'VO%b2nO(P%RO~O#ewaPwaYwa_walwa!fwa!gwa!iwa!mwa#hwa#iwa#jwa#kwa#lwa#mwa#nwa#owa#pwa#rwa#twa#vwa#wwa'mwa(Twa(dwa!hwa!Twa'kwapwa!Ywa%bwa!bwa~P$ tO#e$maP$maY$ma_$mal$ma{$ma!f$ma!g$ma!i$ma!m$ma#h$ma#i$ma#j$ma#k$ma#l$ma#m$ma#n$ma#o$ma#p$ma#r$ma#t$ma#v$ma#w$ma'm$ma(T$ma(d$ma!h$ma!T$ma'k$map$ma!Y$ma%b$ma!b$ma~P$!jO#e$oaP$oaY$oa_$oal$oa{$oa!f$oa!g$oa!i$oa!m$oa#h$oa#i$oa#j$oa#k$oa#l$oa#m$oa#n$oa#o$oa#p$oa#r$oa#t$oa#v$oa#w$oa'm$oa(T$oa(d$oa!h$oa!T$oa'k$oap$oa!Y$oa%b$oa!b$oa~P$#]O#e$}aP$}aY$}a_$}al$}a{$}a!W$}a!f$}a!g$}a!i$}a!m$}a#h$}a#i$}a#j$}a#k$}a#l$}a#m$}a#n$}a#o$}a#p$}a#r$}a#t$}a#v$}a#w$}a'm$}a(T$}a(d$}a!h$}a!T$}a'k$}a#Y$}ap$}a!Y$}a%b$}a!b$}a~P#,sO_#]q!W#]q'm#]q'k#]q!T#]q!h#]qp#]q!Y#]q%b#]q!b#]q~P!7zOe'QX!W'QX~P!'vO!W._Oe(^a~O!V2wO!W'RX!h'RX~P%[O!W.bO!h(_a~O!W.bO!h(_a~P!7zO!T2zO~O#z!ka!X!ka~PJxO#z!ca!W!ca!X!ca~P#C^O#z!oa!X!oa~P!:eO#z!qa!X!qa~P!=OO!Y3^O$VfO$`3_O~O!X3cO~Op3dO~P#,sO_$iq!W$iq'm$iq'k$iq!T$iq!h$iqp$iq!Y$iq%b$iq!b$iq~P!7zO!T3eO~P#,sOz)vO})wO(l){Oh%Yi(k%Yi!W%Yi#Y%Yi~Oe%Yi#z%Yi~P$J]Oz)vO})wOh%[i(k%[i(l%[i!W%[i#Y%[i~Oe%[i#z%[i~P$KOO(d$ZO~P#,sO!V3hO'v%`O!W']X!h']X~O!W/VO!h(qa~O!W/VO!b#uO!h(qa~O!W/VO!b#uO(d'gO!h(qa~Oe$vi!W$vi#Y$vi#z$vi~P!0kO!V3pO'v*XO!T'_X!W'_X~P!1YO!W/_O!T(ra~O!W/_O!T(ra~P#,sO!b#uO#p3xO~Ol3{O!b#uO(d'gO~Oe(Ri!W(Ri~P!0kO#Y4OOe(Ri!W(Ri~P!0kO!h4RO~O_$jq!W$jq'm$jq'k$jq!T$jq!h$jqp$jq!Y$jq%b$jq!b$jq~P!7zO!T4VO~O!W4WO!Y(sX~P#,sO!g#wO~P4XO_$tX!Y$tX%VZX'm$tX!W$tX~P!/bO%V4YO_iXhiXziX}iX!YiX'miX(kiX(liX!WiX~O%V4YO~O`4`O%c4aO'v+bO'xTO'{UO!W'hX!X'hX~O!W0bO!X(za~OY4eO~O^4fO~O_%gO'm%gO~P#,sO!Y$|O~P#,sO!W4nO#Y4pO!X(wX~O!X4qO~Om!nO}4rO!]!xO!^!uO!_!uO!y9rO!}!pO#O!pO#P!pO#Q!pO#R!pO#U4wO#V!yO'w!lO'xTO'{UO(W!mO(c!sO~O!X4vO~P%%QOh4|O!Y0zO%b4{O~Oh4|O!Y0zO%b4{O(P%RO~O`5TO'v#mO'xTO'{UO!W'gX!X'gX~O!W1VO!X(xa~O'xTO'{UO(W5VO~O^5ZO~O#p5^O&S5_O~PMhO!h5`O~P%[O_5bO~O_5bO~P%[O`1mO!X5gO&b1lO~P`O!b5iO~O!b5kO!W(]i!X(]i!b(]i!i(]i(P(]i~O!W#bi!X#bi~P#C^O#Y5lO!W#bi!X#bi~O!W![i!X![i~P#C^O_%gO#Y5uO'm%gO~O_%gO!b#uO#Y5uO'm%gO~O!W(fq!h(fq_(fq'm(fq~P!7zO!W(`O!h(eq~O}%aO!Y%bO#d5|O'v%`O~O!Y'VO%b6PO~Oh6SO!Y'VO%b6PO~O#e%YiP%YiY%Yi_%Yil%Yi{%Yi!f%Yi!g%Yi!i%Yi!m%Yi#h%Yi#i%Yi#j%Yi#k%Yi#l%Yi#m%Yi#n%Yi#o%Yi#p%Yi#r%Yi#t%Yi#v%Yi#w%Yi'm%Yi(T%Yi(d%Yi!h%Yi!T%Yi'k%Yip%Yi!Y%Yi%b%Yi!b%Yi~P$J]O#e%[iP%[iY%[i_%[il%[i{%[i!f%[i!g%[i!i%[i!m%[i#h%[i#i%[i#j%[i#k%[i#l%[i#m%[i#n%[i#o%[i#p%[i#r%[i#t%[i#v%[i#w%[i'm%[i(T%[i(d%[i!h%[i!T%[i'k%[ip%[i!Y%[i%b%[i!b%[i~P$KOO#e$viP$viY$vi_$vil$vi{$vi!W$vi!f$vi!g$vi!i$vi!m$vi#h$vi#i$vi#j$vi#k$vi#l$vi#m$vi#n$vi#o$vi#p$vi#r$vi#t$vi#v$vi#w$vi'm$vi(T$vi(d$vi!h$vi!T$vi'k$vi#Y$vip$vi!Y$vi%b$vi!b$vi~P#,sOe'Qa!W'Qa~P!0kO!W'Ra!h'Ra~P!7zO!W.bO!h(_i~O#z#]i!W#]i!X#]i~P#C^OP$]Oz#yO{#zO}#{O!g#wO!i#xO!m$]O(TVOY#gil#gi!f#gi#i#gi#j#gi#k#gi#l#gi#m#gi#n#gi#o#gi#p#gi#r#gi#t#gi#v#gi#w#gi#z#gi(d#gi(k#gi(l#gi!W#gi!X#gi~O#h#gi~P%3jO#h9zO~P%3jOP$]Oz#yO{#zO}#{O!g#wO!i#xO!m$]O#h9zO#i9{O#j9{O#k9{O(TVOY#gi!f#gi#l#gi#m#gi#n#gi#o#gi#p#gi#r#gi#t#gi#v#gi#w#gi#z#gi(d#gi(k#gi(l#gi!W#gi!X#gi~Ol#gi~P%5uOl9|O~P%5uOP$]Ol9|Oz#yO{#zO}#{O!g#wO!i#xO!m$]O#h9zO#i9{O#j9{O#k9{O#l9}O(TVO#r#gi#t#gi#v#gi#w#gi#z#gi(d#gi(k#gi(l#gi!W#gi!X#gi~OY#gi!f#gi#m#gi#n#gi#o#gi#p#gi~P%8QOY:YO!f:OO#m:OO#n:OO#o:XO#p:OO~P%8QOP$]OY:YOl9|Oz#yO{#zO}#{O!f:OO!g#wO!i#xO!m$]O#h9zO#i9{O#j9{O#k9{O#l9}O#m:OO#n:OO#o:XO#p:OO#r:PO(TVO#t#gi#v#gi#w#gi#z#gi(d#gi(l#gi!W#gi!X#gi~O(k#gi~P%:lO(k#|O~P%:lOP$]OY:YOl9|Oz#yO{#zO}#{O!f:OO!g#wO!i#xO!m$]O#h9zO#i9{O#j9{O#k9{O#l9}O#m:OO#n:OO#o:XO#p:OO#r:PO#t:RO(TVO(k#|O#v#gi#w#gi#z#gi(d#gi!W#gi!X#gi~O(l#gi~P%<wO(l#}O~P%<wOP$]OY:YOl9|Oz#yO{#zO}#{O!f:OO!g#wO!i#xO!m$]O#h9zO#i9{O#j9{O#k9{O#l9}O#m:OO#n:OO#o:XO#p:OO#r:PO#t:RO#v:TO(TVO(k#|O(l#}O~O#w#gi#z#gi(d#gi!W#gi!X#gi~P%?SO_#xy!W#xy'm#xy'k#xy!T#xy!h#xyp#xy!Y#xy%b#xy!b#xy~P!7zOh;mOz)vO})wO(k)yO(l){O~OP#giY#gil#gi{#gi!f#gi!g#gi!i#gi!m#gi#h#gi#i#gi#j#gi#k#gi#l#gi#m#gi#n#gi#o#gi#p#gi#r#gi#t#gi#v#gi#w#gi#z#gi(T#gi(d#gi!W#gi!X#gi~P%AzO!g#wOP(SXY(SXh(SXl(SXz(SX{(SX}(SX!f(SX!i(SX!m(SX#h(SX#i(SX#j(SX#k(SX#l(SX#m(SX#n(SX#o(SX#p(SX#r(SX#t(SX#v(SX#w(SX#z(SX(T(SX(d(SX(k(SX(l(SX!W(SX!X(SX~O#z#{i!W#{i!X#{i~P#C^O#z!oi!X!oi~P$$zO!X6`O~O!W'[a!X'[a~P#C^O!b#uO(d'gO!W']a!h']a~O!W/VO!h(qi~O!W/VO!b#uO!h(qi~Oe$vq!W$vq#Y$vq#z$vq~P!0kO!T'_a!W'_a~P#,sO!b6gO~O!W/_O!T(ri~P#,sO!W/_O!T(ri~O!T6kO~O!b#uO#p6pO~Ol6qO!b#uO(d'gO~O!T6sO~Oe$xq!W$xq#Y$xq#z$xq~P!0kO_$jy!W$jy'm$jy'k$jy!T$jy!h$jyp$jy!Y$jy%b$jy!b$jy~P!7zO!b5kO~O!W4WO!Y(sa~O_#]y!W#]y'm#]y'k#]y!T#]y!h#]yp#]y!Y#]y%b#]y!b#]y~P!7zOY6xO~O`6zO'v+bO'xTO'{UO~O!W0bO!X(zi~O^7OO~O(W(tO!W'dX!X'dX~O!W4nO!X(wa~OjkO'v7VO~P.iO!X7YO~P%%QOm!nO}7ZO'xTO'{UO(W!mO(c!sO~O!Y0zO~O!Y0zO%b7]O~Oh7`O!Y0zO%b7]O~OY7eO!W'ga!X'ga~O!W1VO!X(xi~O!h7iO~O!h7jO~O!h7mO~O!h7mO~P%[O_7oO~O!b7pO~O!h7qO~O!W(ii!X(ii~P#C^O_%gO#Y7yO'm%gO~O!W(fy!h(fy_(fy'm(fy~P!7zO!W(`O!h(ey~O!Y'VO%b7|O~O#e$vqP$vqY$vq_$vql$vq{$vq!W$vq!f$vq!g$vq!i$vq!m$vq#h$vq#i$vq#j$vq#k$vq#l$vq#m$vq#n$vq#o$vq#p$vq#r$vq#t$vq#v$vq#w$vq'm$vq(T$vq(d$vq!h$vq!T$vq'k$vq#Y$vqp$vq!Y$vq%b$vq!b$vq~P#,sO#e$xqP$xqY$xq_$xql$xq{$xq!W$xq!f$xq!g$xq!i$xq!m$xq#h$xq#i$xq#j$xq#k$xq#l$xq#m$xq#n$xq#o$xq#p$xq#r$xq#t$xq#v$xq#w$xq'm$xq(T$xq(d$xq!h$xq!T$xq'k$xq#Y$xqp$xq!Y$xq%b$xq!b$xq~P#,sO!W'Ri!h'Ri~P!7zO#z#]q!W#]q!X#]q~P#C^Oz/yO{/yO}/zOPwaYwahwalwa!fwa!gwa!iwa!mwa#hwa#iwa#jwa#kwa#lwa#mwa#nwa#owa#pwa#rwa#twa#vwa#wwa#zwa(Twa(dwa(kwa(lwa!Wwa!Xwa~Oz)vO})wOP$maY$mah$mal$ma{$ma!f$ma!g$ma!i$ma!m$ma#h$ma#i$ma#j$ma#k$ma#l$ma#m$ma#n$ma#o$ma#p$ma#r$ma#t$ma#v$ma#w$ma#z$ma(T$ma(d$ma(k$ma(l$ma!W$ma!X$ma~Oz)vO})wOP$oaY$oah$oal$oa{$oa!f$oa!g$oa!i$oa!m$oa#h$oa#i$oa#j$oa#k$oa#l$oa#m$oa#n$oa#o$oa#p$oa#r$oa#t$oa#v$oa#w$oa#z$oa(T$oa(d$oa(k$oa(l$oa!W$oa!X$oa~OP$}aY$}al$}a{$}a!f$}a!g$}a!i$}a!m$}a#h$}a#i$}a#j$}a#k$}a#l$}a#m$}a#n$}a#o$}a#p$}a#r$}a#t$}a#v$}a#w$}a#z$}a(T$}a(d$}a!W$}a!X$}a~P%AzO#z$iq!W$iq!X$iq~P#C^O#z$jq!W$jq!X$jq~P#C^O!X8WO~O#z8XO~P!0kO!b#uO!W']i!h']i~O!b#uO(d'gO!W']i!h']i~O!W/VO!h(qq~O!T'_i!W'_i~P#,sO!W/_O!T(rq~O!T8_O~P#,sO!T8_O~Oe(Ry!W(Ry~P!0kO!W'ba!Y'ba~P#,sO_%Uq!Y%Uq'm%Uq!W%Uq~P#,sOY8dO~O!W0bO!X(zq~O#Y8hO!W'da!X'da~O!W4nO!X(wi~P#C^OPZXYZXlZXzZX{ZX}ZX!TZX!WZX!fZX!gZX!iZX!mZX#YZX#edX#hZX#iZX#jZX#kZX#lZX#mZX#nZX#oZX#pZX#rZX#tZX#vZX#wZX#|ZX(TZX(dZX(kZX(lZX~O!b%SX#p%SX~P&3YO!Y0zO%b8lO~O'xTO'{UO(W8qO~O!W1VO!X(xq~O!h8tO~O!h8uO~O!h8vO~O!h8vO~P%[O#Y8yO!W#by!X#by~O!W#by!X#by~P#C^O!Y'VO%b9OO~O#z#xy!W#xy!X#xy~P#C^OP$viY$vil$vi{$vi!f$vi!g$vi!i$vi!m$vi#h$vi#i$vi#j$vi#k$vi#l$vi#m$vi#n$vi#o$vi#p$vi#r$vi#t$vi#v$vi#w$vi#z$vi(T$vi(d$vi!W$vi!X$vi~P%AzOz)vO})wO(l){OP%YiY%Yih%Yil%Yi{%Yi!f%Yi!g%Yi!i%Yi!m%Yi#h%Yi#i%Yi#j%Yi#k%Yi#l%Yi#m%Yi#n%Yi#o%Yi#p%Yi#r%Yi#t%Yi#v%Yi#w%Yi#z%Yi(T%Yi(d%Yi(k%Yi!W%Yi!X%Yi~Oz)vO})wOP%[iY%[ih%[il%[i{%[i!f%[i!g%[i!i%[i!m%[i#h%[i#i%[i#j%[i#k%[i#l%[i#m%[i#n%[i#o%[i#p%[i#r%[i#t%[i#v%[i#w%[i#z%[i(T%[i(d%[i(k%[i(l%[i!W%[i!X%[i~O#z$jy!W$jy!X$jy~P#C^O#z#]y!W#]y!X#]y~P#C^O!b#uO!W']q!h']q~O!W/VO!h(qy~O!T'_q!W'_q~P#,sO!T9VO~P#,sO!W0bO!X(zy~O!W4nO!X(wq~O!Y0zO%b9^O~O!h9aO~O!Y'VO%b9fO~OP$vqY$vql$vq{$vq!f$vq!g$vq!i$vq!m$vq#h$vq#i$vq#j$vq#k$vq#l$vq#m$vq#n$vq#o$vq#p$vq#r$vq#t$vq#v$vq#w$vq#z$vq(T$vq(d$vq!W$vq!X$vq~P%AzOP$xqY$xql$xq{$xq!f$xq!g$xq!i$xq!m$xq#h$xq#i$xq#j$xq#k$xq#l$xq#m$xq#n$xq#o$xq#p$xq#r$xq#t$xq#v$xq#w$xq#z$xq(T$xq(d$xq!W$xq!X$xq~P%AzOe%^!Z!W%^!Z#Y%^!Z#z%^!Z~P!0kO!W'dq!X'dq~P#C^O!W#b!Z!X#b!Z~P#C^O#e%^!ZP%^!ZY%^!Z_%^!Zl%^!Z{%^!Z!W%^!Z!f%^!Z!g%^!Z!i%^!Z!m%^!Z#h%^!Z#i%^!Z#j%^!Z#k%^!Z#l%^!Z#m%^!Z#n%^!Z#o%^!Z#p%^!Z#r%^!Z#t%^!Z#v%^!Z#w%^!Z'm%^!Z(T%^!Z(d%^!Z!h%^!Z!T%^!Z'k%^!Z#Y%^!Zp%^!Z!Y%^!Z%b%^!Z!b%^!Z~P#,sOP%^!ZY%^!Zl%^!Z{%^!Z!f%^!Z!g%^!Z!i%^!Z!m%^!Z#h%^!Z#i%^!Z#j%^!Z#k%^!Z#l%^!Z#m%^!Z#n%^!Z#o%^!Z#p%^!Z#r%^!Z#t%^!Z#v%^!Z#w%^!Z#z%^!Z(T%^!Z(d%^!Z!W%^!Z!X%^!Z~P%AzOp(XX~P1qO'w!lO~P!*SO!TdX!WdX#YdX~P&3YOPZXYZXlZXzZX{ZX}ZX!WZX!WdX!fZX!gZX!iZX!mZX#YZX#YdX#edX#hZX#iZX#jZX#kZX#lZX#mZX#nZX#oZX#pZX#rZX#tZX#vZX#wZX#|ZX(TZX(dZX(kZX(lZX~O!bdX!hZX!hdX(ddX~P&HpOP9qOQ9qOb;bOc!iOjkOl9qOmkOnkOtkOv9qOx9qO}WO!RkO!SkO!YXO!d9tO!iZO!l9qO!m9qO!n9qO!p9uO!r9xO!u!hO$R!kO$VfO'v)UO'xTO'{UO(TVO(c[O(p;`O~O!W:VO!X$la~Oj%SOl$tOm$sOn$sOt%TOv%UOx:]O}${O!Y$|O!d;gO!i$xO#d:cO$R%YO$n:_O$p:aO$s%ZO'v(lO'xTO'{UO(P%RO(T$uO~O#q)]O~P&MfO!XZX!XdX~P&HpO#e9yO~O!b#uO#e9yO~O#Y:ZO~O#p:OO~O#Y:eO!W(iX!X(iX~O#Y:ZO!W(gX!X(gX~O#e:fO~Oe:hO~P!0kO#e:mO~O#e:nO~O!b#uO#e:oO~O!b#uO#e:fO~O#z:pO~P#C^O#e:qO~O#e:rO~O#e:sO~O#e:tO~O#e:uO~O#e:vO~O#z:wO~P!0kO#z:xO~P!0kO$V~!g!}#O#Q#R#U#c#d#o(p$n$p$s%V%a%b%c%j%l%o%p%r%t~'qR$V(p#i!S'o'w#jm#h#klz'p(W'p'v$X$Z$X~",
    goto: "$'X)OPPPP)PPP)SP)eP*t.xPPPP5`PP5vP;r>yP?^P?^PPP?^PAOP?^P?^P?^PASPPAXPArPFjPPPFnPPPPFnIoPPPIuJpPFnPMOPPPP! ^FnPPPFnPFnP!#lFnP!'Q!(S!(]P!)P!)T!)PPPPPP!,`!(SPP!,|!-vP!0jFnFn!0o!3y!8`!8`!<UPPP!<]FnPPPPPPPPPPP!?jP!@{PPFn!BYPFnPFnFnFnFnPFn!ClPP!FtP!IxP!I|!JW!J[!J[P!FqP!J`!J`P!MdP!MhFnFn!Mn#!q?^P?^P?^?^P##|?^?^#%x?^#(X?^#)}?^?^#*l#,j#,j#,n#,v#,j#-OP#,jP?^#-h?^#.q?^?^5`PPP#/}PPP#0h#0hP#0hP#1O#0hPP#1UP#0{P#0{#1i#0{#2T#2Z5])S#2^)SP#2e#2e#2eP)SP)SP)SP)SPP)SP#2k#2nP#2n)SP#2rP#2uP)SP)SP)SP)SP)SP)S)SPP#2{#3R#3^#3d#3j#3p#3v#4U#4[#4b#4l#4r#4|#5]#5c#6T#6g#6m#6s#7R#7h#8y#9X#9_#9e#9k#9q#9{#:R#:X#:c#:u#:{PPPPPPPPPP#;RPPPPPPP#;v#>}P#@^#@e#@mPPPP#D{#Gr#NZ#N^#Na$ Y$ ]$ `$ g$ oPP$ u$ y$!q$#p$#t$$YPP$$^$$d$$hP$$k$$o$$r$%h$&P$&h$&l$&o$&r$&x$&{$'P$'TR!{RoqOXst!Z#c%f&i&k&l&n,b,g1g1jY!uQ'V-S0z4uQ%lvQ%tyQ%{|Q&a!VS&}!e,zQ']!iS'c!r!xS*_$|*dQ+`%uQ+m%}Q,R&ZQ-Q'UQ-['^Q-d'dQ/p*fQ1U,SR:d9u%OdOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%f%l%y&b&e&i&k&l&n&r&z'X'i'y'{(R(Y(n(r(v)u*x*|,_,b,g-W-`-n-t.b.i/z0P0a0}1_1`1b1d1g1j1l2]2c2w4r4|5^5_5b5u7Z7`7o7yS#p]9r!r)W$[$m'O)j,s,v.q1{3^4p5l8h8y9q9t9u9x9y9z9{9|9}:O:P:Q:R:S:T:U:V:Z:d:e:f:h:o:p:u:v;cQ*o%VQ+e%wQ,T&^Q,[&fQ.X:[Q0W+WQ0[+YQ0g+fQ1^,YQ2k.UQ4`0bQ5T1VQ6R2oQ6X:]Q6z4aR8P6S&|kOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%f%l%y&b&e&f&i&k&l&n&r&z'O'X'i'y'{(R(Y(n(r(v)j)u*x*|+W,_,b,g,s,v-W-`-n-t.U.b.i.q/z0P0a0}1_1`1b1d1g1j1l1{2]2c2o2w3^4p4r4|5^5_5b5l5u6S7Z7`7o7y8h8y9q9t9u9x9y9z9{9|9}:O:P:Q:R:S:T:U:V:Z:d:e:f:h:o:p:u:v;ct!nQ!r!u!x!y&}'U'V'c'd'e,z-Q-S-d0z4u4w$^$si#u#w$c$d$x${%W%X%])q)w)z)|)}*U*[*j*k+V+Y+q+t.T._/P/^/_/a/|0q0t0|2n3f3p3x4O4W4Y4{6P6g6p7]7|8X8l9O9^9f:X:Y:^:_:`:a:b:c:i:j:k:l:m:n:q:r:s:t:w:x;`;h;i;l;mQ&O|Q&{!eS'R%b,}Q+e%wQ,T&^Q/{*sQ0g+fQ0l+lQ1],XQ1^,YQ4`0bQ4i0nQ5T1VQ5W1XQ5X1[Q6z4aQ6}4fQ7h5ZQ8g7OR8r7ernOXst!V!Z#c%f&`&i&k&l&n,b,g1g1jR,V&b&v^OPXYstuvwz!Z!`!g!j!o#R#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%f%l%y&b&e&f&i&k&l&n&r&z'X'i'{(R(Y(n(r(v)j)u*x*|+W,_,b,g,s,v-W-`-n-t.U.b.i.q/z0P0a0}1_1`1b1d1g1j1l1{2]2c2o2w3^4p4r4|5^5_5b5l5u6S7Z7`7o7y8h8y9q9t9u9x9y9z9{9|9}:O:P:Q:R:S:T:U:V:Z:d:e:f:h:o:p:u:v;b;c[#[WZ#V#Y'O'y!S%cm#g#h#k%^%a(S(^(_(`*z*{*},^,t-r-x-y-z-|1o2g2h5k5|Q%oxQ%syS%x|%}Q&U!TQ'Y!hQ'[!iQ(g#rS*R$x*VS+_%t%uQ+c%wQ+|&XQ,Q&ZS-Z']'^Q.W(hQ/Z*SQ0`+`Q0f+fQ0h+gQ0k+kQ1P+}S1T,R,SQ2X-[Q3g/VQ4_0bQ4c0eQ4h0mQ5S1UQ6d3hQ6y4aQ6|4eQ8c6xR9X8dv$zi#w%W%X%])z)|*U*j*k._/^/|3f4O8X;`;h;i!S%qy!i!t%s%t%u&|'[']'^'b'l*^+_+`,w-Z-[-c/h0`2Q2X2`3zQ+X%oQ+r&RQ+u&SQ,P&ZQ.V(gQ1O+|U1S,Q,R,SQ2p.WQ4}1PS5R1T1UQ7d5S#O;d#u$c$d$x${)q)w)}*[+V+Y+q+t.T/P/_/a0q0t0|2n3p3x4W4Y4{6P6g6p7]7|8l9O9^9f:^:`:b:i:k:m:q:s:w;l;mg;e:X:Y:_:a:c:j:l:n:r:t:xW%Pi%R*l;`S&R!Q&`Q&S!RQ&T!SR+p&P$_%Oi#u#w$c$d$x${%W%X%])q)w)z)|)}*U*[*j*k+V+Y+q+t.T._/P/^/_/a/|0q0t0|2n3f3p3x4O4W4Y4{6P6g6p7]7|8X8l9O9^9f:X:Y:^:_:`:a:b:c:i:j:k:l:m:n:q:r:s:t:w:x;`;h;i;l;mT)r$u)sV*p%V:[:]U'R!e%b,}S(u#y#zQ+j%zS.P(c(dQ0u+vQ4P/yR7S4n&|kOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%f%l%y&b&e&f&i&k&l&n&r&z'O'X'i'y'{(R(Y(n(r(v)j)u*x*|+W,_,b,g,s,v-W-`-n-t.U.b.i.q/z0P0a0}1_1`1b1d1g1j1l1{2]2c2o2w3^4p4r4|5^5_5b5l5u6S7Z7`7o7y8h8y9q9t9u9x9y9z9{9|9}:O:P:Q:R:S:T:U:V:Z:d:e:f:h:o:p:u:v;c$i$`c#X#d%j%k%m'x(O(j(q(y(z({(|(})O)P)Q)R)S)T)V)Y)^)h+T+i,x-g-l-q-s.^.d.h.j.k.l.{/}1v1y2Z2b2v2{2|2}3O3P3Q3R3S3T3U3V3W3X3[3]3b4T4]5n5t5y6V6W6]6^7U7s7w8Q8U8V8{9Z9b9s;VT#SV#T&}kOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%f%l%y&b&e&f&i&k&l&n&r&z'O'X'i'y'{(R(Y(n(r(v)j)u*x*|+W,_,b,g,s,v-W-`-n-t.U.b.i.q/z0P0a0}1_1`1b1d1g1j1l1{2]2c2o2w3^4p4r4|5^5_5b5l5u6S7Z7`7o7y8h8y9q9t9u9x9y9z9{9|9}:O:P:Q:R:S:T:U:V:Z:d:e:f:h:o:p:u:v;cQ'P!eR1|,zv!nQ!e!r!u!x!y&}'U'V'c'd'e,z-Q-S-d0z4u4wS*^$|*dS/h*_*fQ/q*gQ0w+xQ3z/pR3}/snqOXst!Z#c%f&i&k&l&n,b,g1g1jQ&p!^Q'm!wS(i#t9yQ+]%rQ+z&UQ+{&WQ-X'ZQ-f'fS.](n:fS0O*x:oQ0^+^Q0y+yQ1n,iQ1p,jQ1x,uQ2V-YQ2Y-^S4U0P:uQ4Z0_S4^0a:vQ5m1zQ5q2WQ5v2_Q6w4[Q7t5oQ7u5rQ7x5wR8x7q$d$_c#X#d%k%m'x(O(j(q(y(z({(|(})O)P)Q)R)S)T)V)Y)^)h+T+i,x-g-l-q-s.^.d.h.k.l.{/}1v1y2Z2b2v2{2|2}3O3P3Q3R3S3T3U3V3W3X3[3]3b4T4]5n5t5y6V6W6]6^7U7s7w8Q8U8V8{9Z9b9s;VS(f#o'`U*i$}(m3ZS+S%j.jQ2l0WQ6O2kQ8O6RR9P8P$d$^c#X#d%k%m'x(O(j(q(y(z({(|(})O)P)Q)R)S)T)V)Y)^)h+T+i,x-g-l-q-s.^.d.h.k.l.{/}1v1y2Z2b2v2{2|2}3O3P3Q3R3S3T3U3V3W3X3[3]3b4T4]5n5t5y6V6W6]6^7U7s7w8Q8U8V8{9Z9b9s;VS(e#o'`S(w#z$_S+R%j.jS.Q(d(fQ.m)XQ0T+SR2i.R&|kOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%f%l%y&b&e&f&i&k&l&n&r&z'O'X'i'y'{(R(Y(n(r(v)j)u*x*|+W,_,b,g,s,v-W-`-n-t.U.b.i.q/z0P0a0}1_1`1b1d1g1j1l1{2]2c2o2w3^4p4r4|5^5_5b5l5u6S7Z7`7o7y8h8y9q9t9u9x9y9z9{9|9}:O:P:Q:R:S:T:U:V:Z:d:e:f:h:o:p:u:v;cS#p]9rQ&k!XQ&l!YQ&n![Q&o!]R1f,eQ'W!hQ+U%oQ-V'YS.S(g+XQ2T-UW2m.V.W0V0XQ5p2UU5}2j2l2pS7{6O6QS8}7}8OS9d8|9PQ9l9eR9o9mU!vQ'V-ST4s0z4u!Q_OXZ`st!V!Z#c#g%^%f&`&b&i&k&l&n(`,b,g-y1g1j]!pQ!r'V-S0z4uT#p]9r%Y{OPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%f%l%y&b&e&f&i&k&l&n&r&z'X'i'y'{(R(Y(n(r(v)u*x*|+W,_,b,g-W-`-n-t.U.b.i/z0P0a0}1_1`1b1d1g1j1l2]2c2o2w4r4|5^5_5b5u6S7Z7`7o7yS(u#y#zS.P(c(d!s:|$[$m'O)j,s,v.q1{3^4p5l8h8y9q9t9u9x9y9z9{9|9}:O:P:Q:R:S:T:U:V:Z:d:e:f:h:o:p:u:v;cY!tQ'V-S0z4uQ'b!rS'l!u!xS'n!y4wS-c'c'dQ-e'eR2`-dQ'k!tS([#f1aS-b'b'nQ/Y*RQ/f*^Q2a-eQ3l/ZS3u/g/qQ6c3gS6n3{3}Q8Z6dR8b6qQ#vbQ'j!tS(Z#f1aS(]#l*wQ*y%_Q+Z%pQ+a%vU-a'b'k'nQ-u([Q/X*RQ/e*^Q/k*aQ0]+[Q1Q,OS2^-b-eQ2f-}S3k/Y/ZS3t/f/qQ3w/jQ3y/lQ5P1RQ5x2aQ6b3gQ6f3lS6j3u3}Q6o3|Q7b5QS8Y6c6dQ8^6kQ8`6nQ8o7cQ9T8ZQ9U8_Q9W8bQ9`8pQ9h9VQ;P:zQ;[;TR;];UV!vQ'V-S%YaOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%f%l%y&b&e&f&i&k&l&n&r&z'X'i'y'{(R(Y(n(r(v)u*x*|+W,_,b,g-W-`-n-t.U.b.i/z0P0a0}1_1`1b1d1g1j1l2]2c2o2w4r4|5^5_5b5u6S7Z7`7o7yS#vz!j!r:y$[$m'O)j,s,v.q1{3^4p5l8h8y9q9t9u9x9y9z9{9|9}:O:P:Q:R:S:T:U:V:Z:d:e:f:h:o:p:u:v;cR;P;b%YbOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%f%l%y&b&e&f&i&k&l&n&r&z'X'i'y'{(R(Y(n(r(v)u*x*|+W,_,b,g-W-`-n-t.U.b.i/z0P0a0}1_1`1b1d1g1j1l2]2c2o2w4r4|5^5_5b5u6S7Z7`7o7yQ%_j!S%py!i!t%s%t%u&|'[']'^'b'l*^+_+`,w-Z-[-c/h0`2Q2X2`3zS%vz!jQ+[%qQ,O&ZW1R,P,Q,R,SU5Q1S1T1US7c5R5SQ8p7d!r:z$[$m'O)j,s,v.q1{3^4p5l8h8y9q9t9u9x9y9z9{9|9}:O:P:Q:R:S:T:U:V:Z:d:e:f:h:o:p:u:v;cQ;T;aR;U;b$|eOPXYstuvw!Z!`!g!o#R#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%f%l%y&b&e&i&k&l&n&r&z'X'i'{(R(Y(n(r(v)u*x*|+W,_,b,g-W-`-n-t.U.b.i/z0P0a0}1_1`1b1d1g1j1l2]2c2o2w4r4|5^5_5b5u6S7Z7`7o7yY#aWZ#V#Y'y!S%cm#g#h#k%^%a(S(^(_(`*z*{*},^,t-r-x-y-z-|1o2g2h5k5|Q,]&f!p:{$[$m)j,s,v.q1{3^4p5l8h8y9q9t9u9x9y9z9{9|9}:O:P:Q:R:S:T:U:V:Z:d:e:f:h:o:p:u:v;cR;O'OS'S!e%bR2O,}%OdOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%f%l%y&b&e&i&k&l&n&r&z'X'i'y'{(R(Y(n(r(v)u*x*|,_,b,g-W-`-n-t.b.i/z0P0a0}1_1`1b1d1g1j1l2]2c2w4r4|5^5_5b5u7Z7`7o7y!r)W$[$m'O)j,s,v.q1{3^4p5l8h8y9q9t9u9x9y9z9{9|9}:O:P:Q:R:S:T:U:V:Z:d:e:f:h:o:p:u:v;cQ,[&fQ0W+WQ2k.UQ6R2oR8P6S!f$Uc#X%j'x(O(j(q)Q)R)S)T)Y)^+i-g-l-q-s.^.d.{/}2Z2b2v3X4T4]5t5y6V7w8{9s!T:Q)V)h,x.j1v1y2{3T3U3V3W3[3b5n6W6]6^7U7s8Q8U8V9Z9b;V!b$Wc#X%j'x(O(j(q)S)T)Y)^+i-g-l-q-s.^.d.{/}2Z2b2v3X4T4]5t5y6V7w8{9s!P:S)V)h,x.j1v1y2{3V3W3[3b5n6W6]6^7U7s8Q8U8V9Z9b;V!^$[c#X%j'x(O(j(q)Y)^+i-g-l-q-s.^.d.{/}2Z2b2v3X4T4]5t5y6V7w8{9sQ3f/Tz;c)V)h,x.j1v1y2{3[3b5n6W6]6^7U7s8Q8U8V9Z9b;VQ;h;jR;i;k&|kOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m%f%l%y&b&e&f&i&k&l&n&r&z'O'X'i'y'{(R(Y(n(r(v)j)u*x*|+W,_,b,g,s,v-W-`-n-t.U.b.i.q/z0P0a0}1_1`1b1d1g1j1l1{2]2c2o2w3^4p4r4|5^5_5b5l5u6S7Z7`7o7y8h8y9q9t9u9x9y9z9{9|9}:O:P:Q:R:S:T:U:V:Z:d:e:f:h:o:p:u:v;cS$nh$oR3_.p'TgOPWXYZhstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m$o%f%l%y&b&e&f&i&k&l&n&r&z'O'X'i'y'{(R(Y(n(r(v)j)u*x*|+W,_,b,g,s,v-W-`-n-t.U.b.i.p.q/z0P0a0}1_1`1b1d1g1j1l1{2]2c2o2w3^4p4r4|5^5_5b5l5u6S7Z7`7o7y8h8y9q9t9u9x9y9z9{9|9}:O:P:Q:R:S:T:U:V:Z:d:e:f:h:o:p:u:v;cT$jf$pQ$hfS)a$k)eR)m$pT$if$pT)c$k)e'ThOPWXYZhstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$[$a$e$m$o%f%l%y&b&e&f&i&k&l&n&r&z'O'X'i'y'{(R(Y(n(r(v)j)u*x*|+W,_,b,g,s,v-W-`-n-t.U.b.i.p.q/z0P0a0}1_1`1b1d1g1j1l1{2]2c2o2w3^4p4r4|5^5_5b5l5u6S7Z7`7o7y8h8y9q9t9u9x9y9z9{9|9}:O:P:Q:R:S:T:U:V:Z:d:e:f:h:o:p:u:v;cT$nh$oQ$qhR)l$o%YjOPWXYZstuvw!Z!`!g!o#R#V#Y#c#n#t#x#{$O$P$Q$R$S$T$U$V$W$X$Y$a$e%f%l%y&b&e&f&i&k&l&n&r&z'X'i'y'{(R(Y(n(r(v)u*x*|+W,_,b,g-W-`-n-t.U.b.i/z0P0a0}1_1`1b1d1g1j1l2]2c2o2w4r4|5^5_5b5u6S7Z7`7o7y!s;a$[$m'O)j,s,v.q1{3^4p5l8h8y9q9t9u9x9y9z9{9|9}:O:P:Q:R:S:T:U:V:Z:d:e:f:h:o:p:u:v;c#clOPXZst!Z!`!o#R#c#n#{$m%f&b&e&f&i&k&l&n&r&z'X(v)j*|+W,_,b,g-W.U.q/z0}1_1`1b1d1g1j1l2o3^4r4|5^5_5b6S7Z7`7ov$}i#w%W%X%])z)|*U*j*k._/^/|3f4O8X;`;h;i#O(m#u$c$d$x${)q)w)}*[+V+Y+q+t.T/P/_/a0q0t0|2n3p3x4W4Y4{6P6g6p7]7|8l9O9^9f:^:`:b:i:k:m:q:s:w;l;mQ*t%ZQ.|)vg3Z:X:Y:_:a:c:j:l:n:r:t:xv$yi#w%W%X%])z)|*U*j*k._/^/|3f4O8X;`;h;iQ*W$zS*a$|*dQ*u%[Q/l*b#O;R#u$c$d$x${)q)w)}*[+V+Y+q+t.T/P/_/a0q0t0|2n3p3x4W4Y4{6P6g6p7]7|8l9O9^9f:^:`:b:i:k:m:q:s:w;l;mf;S:X:Y:_:a:c:j:l:n:r:t:xQ;W;dQ;X;eQ;Y;fR;Z;gv$}i#w%W%X%])z)|*U*j*k._/^/|3f4O8X;`;h;i#O(m#u$c$d$x${)q)w)}*[+V+Y+q+t.T/P/_/a0q0t0|2n3p3x4W4Y4{6P6g6p7]7|8l9O9^9f:^:`:b:i:k:m:q:s:w;l;mg3Z:X:Y:_:a:c:j:l:n:r:t:xnoOXst!Z#c%f&i&k&l&n,b,g1g1jQ*Z${Q,p&uQ,q&wR3o/_$^%Oi#u#w$c$d$x${%W%X%])q)w)z)|)}*U*[*j*k+V+Y+q+t.T._/P/^/_/a/|0q0t0|2n3f3p3x4O4W4Y4{6P6g6p7]7|8X8l9O9^9f:X:Y:^:_:`:a:b:c:i:j:k:l:m:n:q:r:s:t:w:x;`;h;i;l;mQ+s&SQ0s+uQ4l0rR7R4mT*c$|*dS*c$|*dT4t0z4uS/j*`4rT3|/r7ZQ+Z%pQ/k*aQ0]+[Q1Q,OQ5P1RQ7b5QQ8o7cR9`8pn)z$v(o*v/]/t/u2t3m4S6a6r9S;Q;^;_!Y:i(k)[*Q*Y.[.x.}/T/b0U0p0r2s3n3r4k4m6T6U6h6l6t6v8]8a9g;j;k]:j3Y6[8R9Q9R9pp)|$v(o*v/R/]/t/u2t3m4S6a6r9S;Q;^;_![:k(k)[*Q*Y.[.x.}/T/b0U0p0r2q2s3n3r4k4m6T6U6h6l6t6v8]8a9g;j;k_:l3Y6[8R8S9Q9R9prnOXst!V!Z#c%f&`&i&k&l&n,b,g1g1jQ&]!UR,_&frnOXst!V!Z#c%f&`&i&k&l&n,b,g1g1jR&]!UQ+w&TR0o+psnOXst!V!Z#c%f&`&i&k&l&n,b,g1g1jQ0{+|S4z1O1PU7[4x4y4}S8k7^7_S9[8j8mQ9i9]R9n9jQ&d!VR,W&`R5W1XS%x|%}R0h+gQ&i!WR,b&jR,h&oT1h,g1jR,l&pQ,k&pR1q,lQ'p!zR-h'pSsOtQ#cXT%is#cQ!}TR'r!}Q#QUR't#QQ)s$uR.y)sQ#TVR'v#TQ#WWU'|#W'}-oQ'}#XR-o(OQ,{'PR1},{Q.`(oR2u.`Q.c(qS2x.c2yR2y.dQ-S'VR2R-SY!rQ'V-S0z4uR'a!rS#^W%aU(T#^(U-pQ(U#_R-p(PQ-O'SR2P-Ot`OXst!V!Z#c%f&`&b&i&k&l&n,b,g1g1jS#gZ%^U#q`#g-yR-y(`Q(a#iQ-v(]W.O(a-v2d5zQ2d-wR5z2eQ)e$kR.r)eQ$ohR)k$oQ$bcU)Z$b-k:WQ-k9sR:W)hQ/W*RW3i/W3j6e8[U3j/X/Y/ZS6e3k3lR8[6f#o)x$v(k(o)[*Q*Y*q*r*v.Y.Z.[.x.}/R/S/T/]/b/t/u0U0p0r2q2r2s2t3Y3m3n3r4S4k4m6T6U6Y6Z6[6a6h6l6r6t6v8R8S8T8]8a9Q9R9S9g9p;Q;^;_;j;kQ/`*YU3q/`3s6iQ3s/bR6i3rQ*d$|R/n*dQ*m%QR/w*mQ4X0UR6u4XQ+O%dR0S+OQ4o0uS7T4o8iR8i7UQ+y&UR0x+yQ4u0zR7X4uQ1W,TS5U1W7fR7f5WQ0c+cW4b0c4d6{8eQ4d0fQ6{4cR8e6|Q+h%xR0i+hQ1j,gR5f1jYrOXst#cQ&m!ZQ+Q%fQ,a&iQ,c&kQ,d&lQ,f&nQ1e,bS1h,g1jR5e1gQ%hpQ&q!_Q&t!aQ&v!bQ&x!cQ'h!tQ+P%eQ+]%rQ+o&OQ,V&dQ,n&sW-_'b'j'k'nQ-f'fQ/m*cQ0^+^S1Z,W,ZQ1r,mQ1s,pQ1t,qQ2Y-^W2[-a-b-e-gQ4Z0_Q4g0lQ4j0pQ5O1QQ5Y1]Q5d1fU5s2Z2^2aQ5v2_Q6w4[Q7P4iQ7Q4kQ7W4tQ7a5PQ7g5XS7v5t5xQ7x5wQ8f6}Q8n7bQ8s7hQ8z7wQ9Y8gQ9_8oQ9c8{R9k9`Q%ryQ'Z!iQ'f!tU+^%s%t%uQ,u&|U-Y'[']'^S-^'b'lQ/d*^S0_+_+`Q1z,wS2W-Z-[Q2_-cQ3v/hQ4[0`Q5o2QQ5r2XQ5w2`R6m3zS$wi;`R*n%RU%Qi%R;`R/v*lQ$viS(k#u+YQ(o#wS)[$c$dQ*Q$xQ*Y${Q*q%WQ*r%XQ*v%]Q.Y:^Q.Z:`Q.[:bQ.x)qS.})w/PQ/R)zQ/S)|Q/T)}Q/]*UQ/b*[Q/t*jQ/u*kh0U+V.T0|2n4{6P7]7|8l9O9^9fQ0p+qQ0r+tQ2q:iQ2r:kQ2s:mQ2t._S3Y:X:YQ3m/^Q3n/_Q3r/aQ4S/|Q4k0qQ4m0tQ6T:qQ6U:sQ6Y:_Q6Z:aQ6[:cQ6a3fQ6h3pQ6l3xQ6r4OQ6t4WQ6v4YQ8R:nQ8S:jQ8T:lQ8]6gQ8a6pQ9Q:rQ9R:tQ9S8XQ9g:wQ9p:xQ;Q;`Q;^;hQ;_;iQ;j;lR;k;mnpOXst!Z#c%f&i&k&l&n,b,g1g1jQ!fPS#eZ#nQ&s!`U'_!o4r7ZQ'u#RQ(x#{Q)i$mS,Z&b&eQ,`&fQ,m&rQ,r&zQ-U'XQ.f(vQ.v)jQ0Q*|Q0X+WQ1c,_Q2U-WQ2l.UQ3a.qQ4Q/zQ4y0}Q5[1_Q5]1`Q5a1bQ5c1dQ5h1lQ6O2oQ6_3^Q7_4|Q7k5^Q7l5_Q7n5bQ8O6SQ8m7`R8w7o#WcOPXZst!Z!`!o#c#n#{%f&b&e&f&i&k&l&n&r&z'X(v*|+W,_,b,g-W.U/z0}1_1`1b1d1g1j1l2o4r4|5^5_5b6S7Z7`7oQ#XWQ#dYQ%juQ%kvS%mw!gS'x#V'{Q(O#YQ(j#tQ(q#xQ(y$OQ(z$PQ({$QQ(|$RQ(}$SQ)O$TQ)P$UQ)Q$VQ)R$WQ)S$XQ)T$YQ)V$[Q)Y$aQ)^$eW)h$m)j.q3^Q+T%lQ+i%yS,x'O1{Q-g'iS-l'y-nQ-q(RQ-s(YQ.^(nQ.d(rQ.h9qQ.j9tQ.k9uQ.l9xQ.{)uQ/}*xQ1v,sQ1y,vQ2Z-`Q2b-tQ2v.bQ2{9yQ2|9zQ2}9{Q3O9|Q3P9}Q3Q:OQ3R:PQ3S:QQ3T:RQ3U:SQ3V:TQ3W:UQ3X.iQ3[:ZQ3]:dQ3b:VQ4T0PQ4]0aQ5n:eQ5t2]Q5y2cQ6V2wQ6W:fQ6]:hQ6^:oQ7U4pQ7s5lQ7w5uQ8Q:pQ8U:uQ8V:vQ8{7yQ9Z8hQ9b8yQ9s#RR;V;cR#ZWR'Q!eY!tQ'V-S0z4uS&|!e,zQ'b!rS'l!u!xS'n!y4wS,w&}'US-c'c'dQ-e'eQ2Q-QR2`-dR(p#wR(s#xQ!fQT-R'V-S]!qQ!r'V-S0z4uQ#o]R'`9rT#jZ%^S#iZ%^S%dm,^U(]#g#h#kS-w(^(_Q-{(`Q0R*}Q2e-xU2f-y-z-|S5{2g2hR7z5|`#]W#V#Y%a'y(S*z-rr#fZm#g#h#k%^(^(_(`*}-x-y-z-|2g2h5|Q1a,^Q1w,tQ5j1oQ7r5kT:}'O*{T#`W%aS#_W%aS'z#V(SS(P#Y*zS,y'O*{T-m'y-rT'T!e%bQ$kfR)o$pT)d$k)eR3`.pT*T$x*VR*]${Q0V+VQ2j.TQ4x0|Q6Q2nQ7^4{Q7}6PQ8j7]Q8|7|Q9]8lQ9e9OQ9j9^R9m9fnqOXst!Z#c%f&i&k&l&n,b,g1g1jQ&c!VR,V&`tmOXst!U!V!Z#c%f&`&i&k&l&n,b,g1g1jR,^&fT%em,^R0v+vR,U&^Q%||R+n%}R+d%wT&g!W&jT&h!W&jT1i,g1j",
    nodeNames:
      '⚠ ArithOp ArithOp LineComment BlockComment Script Hashbang ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > TypeParamList TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . ?. PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewExpression new TypeArgList CompareOp < ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies in const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXStartTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var using TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem',
    maxTerm: 367,
    context: Q2,
    nodeProps: [
      [
        'group',
        -26,
        7,
        15,
        17,
        63,
        200,
        204,
        208,
        209,
        211,
        214,
        217,
        227,
        229,
        235,
        237,
        239,
        241,
        244,
        250,
        256,
        258,
        260,
        262,
        264,
        266,
        267,
        'Statement',
        -32,
        11,
        12,
        26,
        29,
        30,
        36,
        46,
        49,
        50,
        52,
        57,
        65,
        73,
        77,
        79,
        81,
        82,
        104,
        105,
        114,
        115,
        132,
        135,
        137,
        138,
        139,
        140,
        142,
        143,
        163,
        164,
        166,
        'Expression',
        -23,
        25,
        27,
        31,
        35,
        37,
        39,
        167,
        169,
        171,
        172,
        174,
        175,
        176,
        178,
        179,
        180,
        182,
        183,
        184,
        194,
        196,
        198,
        199,
        'Type',
        -3,
        85,
        97,
        103,
        'ClassItem'
      ],
      [
        'openedBy',
        32,
        'InterpolationStart',
        51,
        '[',
        55,
        '{',
        70,
        '(',
        144,
        'JSXStartTag',
        156,
        'JSXStartTag JSXStartCloseTag'
      ],
      [
        'closedBy',
        34,
        'InterpolationEnd',
        45,
        ']',
        56,
        '}',
        71,
        ')',
        145,
        'JSXSelfCloseEndTag JSXEndTag',
        161,
        'JSXEndTag'
      ]
    ],
    propSources: [_2],
    skippedNodes: [0, 3, 4, 270],
    repeatNodeCount: 33,
    tokenData:
      "$Fl(CSR!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tuEruvJSvwLkwx! Yxy!'iyz!(sz{!)}{|!,q|}!.O}!O!,q!O!P!/Y!P!Q!9j!Q!R#8g!R![#:v![!]#Gv!]!^#IS!^!_#J^!_!`#Nu!`!a$#a!a!b$(n!b!c$,m!c!}Er!}#O$-w#O#P$/R#P#Q$4j#Q#R$5t#R#SEr#S#T$7R#T#o$8]#o#p$<m#p#q$=c#q#r$>s#r#s$@P#s$f%Z$f$g+g$g#BYEr#BY#BZ$AZ#BZ$ISEr$IS$I_$AZ$I_$I|Er$I|$I}$Df$I}$JO$Df$JO$JTEr$JT$JU$AZ$JU$KVEr$KV$KW$AZ$KW&FUEr&FU&FV$AZ&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$AZ?HUOEr(n%d_$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$e&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$e&j'|!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU'|!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$e&j'ypOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU'ypOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX'yp'|!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z(CS+rq$e&j'yp'|!b'o(;dOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z(CS.ST'z#S$e&j'p(;dO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c(CS.n_$e&j'yp'|!b'p(;dOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`/x`$e&j!m$Ip'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S1V`#r$Id$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S2d_#r$Id$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$2b3l_'x$(n$e&j'|!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k*r4r_$e&j'|!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k)`5vX$e&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q)`6jT$`#t$e&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#t6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y#t7bO$`#t#t7eP;=`<%l6y)`7kP;=`<%l5q*r7w]$`#t$e&j'|!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}%W8uZ'|!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p%W9oU$`#t'|!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}%W:UP;=`<%l8p*r:[P;=`<%l4k#%|:hh$e&j'yp'|!bOY%ZYZ&cZq%Zqr<Srs&}st%ZtuCruw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr(r<__US$e&j'yp'|!bOY<SYZ&cZr<Srs=^sw<Swx@nx!^<S!^!_Bm!_#O<S#O#P>`#P#o<S#o#pBm#p;'S<S;'S;=`Cl<%lO<S(Q=g]US$e&j'|!bOY=^YZ&cZw=^wx>`x!^=^!^!_?q!_#O=^#O#P>`#P#o=^#o#p?q#p;'S=^;'S;=`@h<%lO=^&n>gXUS$e&jOY>`YZ&cZ!^>`!^!_?S!_#o>`#o#p?S#p;'S>`;'S;=`?k<%lO>`S?XSUSOY?SZ;'S?S;'S;=`?e<%lO?SS?hP;=`<%l?S&n?nP;=`<%l>`!f?xWUS'|!bOY?qZw?qwx?Sx#O?q#O#P?S#P;'S?q;'S;=`@b<%lO?q!f@eP;=`<%l?q(Q@kP;=`<%l=^'`@w]US$e&j'ypOY@nYZ&cZr@nrs>`s!^@n!^!_Ap!_#O@n#O#P>`#P#o@n#o#pAp#p;'S@n;'S;=`Bg<%lO@ntAwWUS'ypOYApZrAprs?Ss#OAp#O#P?S#P;'SAp;'S;=`Ba<%lOAptBdP;=`<%lAp'`BjP;=`<%l@n#WBvYUS'yp'|!bOYBmZrBmrs?qswBmwxApx#OBm#O#P?S#P;'SBm;'S;=`Cf<%lOBm#WCiP;=`<%lBm(rCoP;=`<%l<S#%|C}i$e&j(c!L^'yp'|!bOY%ZYZ&cZr%Zrs&}st%ZtuCruw%Zwx(rx!Q%Z!Q![Cr![!^%Z!^!_*g!_!c%Z!c!}Cr!}#O%Z#O#P&c#P#R%Z#R#SCr#S#T%Z#T#oCr#o#p*g#p$g%Z$g;'SCr;'S;=`El<%lOCr#%|EoP;=`<%lCr(CSFRk$e&j'yp'|!b(W!LY'v&;d$X#tOY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr+dHRk$e&j'yp'|!b$X#tOY%ZYZ&cZr%Zrs&}st%ZtuGvuw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Gv![!^%Z!^!_*g!_!c%Z!c!}Gv!}#O%Z#O#P&c#P#R%Z#R#SGv#S#T%Z#T#oGv#o#p*g#p$g%Z$g;'SGv;'S;=`Iv<%lOGv+dIyP;=`<%lGv(CSJPP;=`<%lEr%#SJ_`$e&j'yp'|!b#j$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#SKl_$e&j#|$Id'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%DfLva(l%<v$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sv%ZvwM{wx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#SNW`$e&j#v$Id'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$2b! c_'{$)`$e&j'ypOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b*Q!!i_$e&j'ypOY!!bYZ!#hZr!!brs!#hsw!!bwx!$xx!^!!b!^!_!%z!_#O!!b#O#P!#h#P#o!!b#o#p!%z#p;'S!!b;'S;=`!'c<%lO!!b)`!#mX$e&jOw!#hwx6cx!^!#h!^!_!$Y!_#o!#h#o#p!$Y#p;'S!#h;'S;=`!$r<%lO!#h#t!$]TOw!$Ywx7]x;'S!$Y;'S;=`!$l<%lO!$Y#t!$oP;=`<%l!$Y)`!$uP;=`<%l!#h*Q!%R]$`#t$e&j'ypOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r$f!&PZ'ypOY!%zYZ!$YZr!%zrs!$Ysw!%zwx!&rx#O!%z#O#P!$Y#P;'S!%z;'S;=`!']<%lO!%z$f!&yU$`#t'ypOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r$f!'`P;=`<%l!%z*Q!'fP;=`<%l!!b(*Q!'t_!i(!b$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'l!)O_!hM|$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+h!*[b$e&j'yp'|!b'w#)d#k$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!+d{!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S!+o`$e&j'yp'|!b#h$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&-O!,|`$e&j'yp'|!bl&%`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&C[!.Z_!W&;l$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS!/ec$e&j'yp'|!bz'<nOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!0p!P!Q%Z!Q![!3Y![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'d!0ya$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!2O!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'d!2Z_!VMt$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!3eg$e&j'yp'|!bm$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!3Y![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S!3Y#S#X%Z#X#Y!4|#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!5Vg$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!6n|}%Z}!O!6n!O!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!6wc$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!8_c$e&j'yp'|!bm$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!8S![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!8S#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS!9uf$e&j'yp'|!b#i$IdOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Kpxz!;Zz{#,f{!P!;Z!P!Q#-{!Q!^!;Z!^!_#'Z!_!`#5k!`!a#7Q!a!}!;Z!}#O#*}#O#P!Dj#P#o!;Z#o#p#'Z#p;'S!;Z;'S;=`#,`<%lO!;Z(r!;fb$e&j'yp'|!b!SSOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Kpx!P!;Z!P!Q#%Z!Q!^!;Z!^!_#'Z!_!}!;Z!}#O#*}#O#P!Dj#P#o!;Z#o#p#'Z#p;'S!;Z;'S;=`#,`<%lO!;Z(Q!<w`$e&j'|!b!SSOY!<nYZ&cZw!<nwx!=yx!P!<n!P!Q!Eb!Q!^!<n!^!_!GY!_!}!<n!}#O!Ja#O#P!Dj#P#o!<n#o#p!GY#p;'S!<n;'S;=`!Kj<%lO!<n&n!>Q^$e&j!SSOY!=yYZ&cZ!P!=y!P!Q!>|!Q!^!=y!^!_!@Y!_!}!=y!}#O!Bw#O#P!Dj#P#o!=y#o#p!@Y#p;'S!=y;'S;=`!E[<%lO!=y&n!?Ta$e&j!SSO!^&c!_#Z&c#Z#[!>|#[#]&c#]#^!>|#^#a&c#a#b!>|#b#g&c#g#h!>|#h#i&c#i#j!>|#j#m&c#m#n!>|#n#o&c#p;'S&c;'S;=`&w<%lO&cS!@_X!SSOY!@YZ!P!@Y!P!Q!@z!Q!}!@Y!}#O!Ac#O#P!Bb#P;'S!@Y;'S;=`!Bq<%lO!@YS!APU!SS#Z#[!@z#]#^!@z#a#b!@z#g#h!@z#i#j!@z#m#n!@zS!AfVOY!AcZ#O!Ac#O#P!A{#P#Q!@Y#Q;'S!Ac;'S;=`!B[<%lO!AcS!BOSOY!AcZ;'S!Ac;'S;=`!B[<%lO!AcS!B_P;=`<%l!AcS!BeSOY!@YZ;'S!@Y;'S;=`!Bq<%lO!@YS!BtP;=`<%l!@Y&n!B|[$e&jOY!BwYZ&cZ!^!Bw!^!_!Ac!_#O!Bw#O#P!Cr#P#Q!=y#Q#o!Bw#o#p!Ac#p;'S!Bw;'S;=`!Dd<%lO!Bw&n!CwX$e&jOY!BwYZ&cZ!^!Bw!^!_!Ac!_#o!Bw#o#p!Ac#p;'S!Bw;'S;=`!Dd<%lO!Bw&n!DgP;=`<%l!Bw&n!DoX$e&jOY!=yYZ&cZ!^!=y!^!_!@Y!_#o!=y#o#p!@Y#p;'S!=y;'S;=`!E[<%lO!=y&n!E_P;=`<%l!=y(Q!Eki$e&j'|!b!SSOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#Z&}#Z#[!Eb#[#]&}#]#^!Eb#^#a&}#a#b!Eb#b#g&}#g#h!Eb#h#i&}#i#j!Eb#j#m&}#m#n!Eb#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!f!GaZ'|!b!SSOY!GYZw!GYwx!@Yx!P!GY!P!Q!HS!Q!}!GY!}#O!Ic#O#P!Bb#P;'S!GY;'S;=`!JZ<%lO!GY!f!HZb'|!b!SSOY'}Zw'}x#O'}#P#Z'}#Z#[!HS#[#]'}#]#^!HS#^#a'}#a#b!HS#b#g'}#g#h!HS#h#i'}#i#j!HS#j#m'}#m#n!HS#n;'S'};'S;=`(f<%lO'}!f!IhX'|!bOY!IcZw!Icwx!Acx#O!Ic#O#P!A{#P#Q!GY#Q;'S!Ic;'S;=`!JT<%lO!Ic!f!JWP;=`<%l!Ic!f!J^P;=`<%l!GY(Q!Jh^$e&j'|!bOY!JaYZ&cZw!Jawx!Bwx!^!Ja!^!_!Ic!_#O!Ja#O#P!Cr#P#Q!<n#Q#o!Ja#o#p!Ic#p;'S!Ja;'S;=`!Kd<%lO!Ja(Q!KgP;=`<%l!Ja(Q!KmP;=`<%l!<n'`!Ky`$e&j'yp!SSOY!KpYZ&cZr!Kprs!=ys!P!Kp!P!Q!L{!Q!^!Kp!^!_!Ns!_!}!Kp!}#O##z#O#P!Dj#P#o!Kp#o#p!Ns#p;'S!Kp;'S;=`#%T<%lO!Kp'`!MUi$e&j'yp!SSOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#Z(r#Z#[!L{#[#](r#]#^!L{#^#a(r#a#b!L{#b#g(r#g#h!L{#h#i(r#i#j!L{#j#m(r#m#n!L{#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rt!NzZ'yp!SSOY!NsZr!Nsrs!@Ys!P!Ns!P!Q# m!Q!}!Ns!}#O#!|#O#P!Bb#P;'S!Ns;'S;=`##t<%lO!Nst# tb'yp!SSOY)rZr)rs#O)r#P#Z)r#Z#[# m#[#])r#]#^# m#^#a)r#a#b# m#b#g)r#g#h# m#h#i)r#i#j# m#j#m)r#m#n# m#n;'S)r;'S;=`*Z<%lO)rt##RX'ypOY#!|Zr#!|rs!Acs#O#!|#O#P!A{#P#Q!Ns#Q;'S#!|;'S;=`##n<%lO#!|t##qP;=`<%l#!|t##wP;=`<%l!Ns'`#$R^$e&j'ypOY##zYZ&cZr##zrs!Bws!^##z!^!_#!|!_#O##z#O#P!Cr#P#Q!Kp#Q#o##z#o#p#!|#p;'S##z;'S;=`#$}<%lO##z'`#%QP;=`<%l##z'`#%WP;=`<%l!Kp(r#%fk$e&j'yp'|!b!SSOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#Z%Z#Z#[#%Z#[#]%Z#]#^#%Z#^#a%Z#a#b#%Z#b#g%Z#g#h#%Z#h#i%Z#i#j#%Z#j#m%Z#m#n#%Z#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#W#'d]'yp'|!b!SSOY#'ZZr#'Zrs!GYsw#'Zwx!Nsx!P#'Z!P!Q#(]!Q!}#'Z!}#O#)w#O#P!Bb#P;'S#'Z;'S;=`#*w<%lO#'Z#W#(fe'yp'|!b!SSOY*gZr*grs'}sw*gwx)rx#O*g#P#Z*g#Z#[#(]#[#]*g#]#^#(]#^#a*g#a#b#(]#b#g*g#g#h#(]#h#i*g#i#j#(]#j#m*g#m#n#(]#n;'S*g;'S;=`+Z<%lO*g#W#*OZ'yp'|!bOY#)wZr#)wrs!Icsw#)wwx#!|x#O#)w#O#P!A{#P#Q#'Z#Q;'S#)w;'S;=`#*q<%lO#)w#W#*tP;=`<%l#)w#W#*zP;=`<%l#'Z(r#+W`$e&j'yp'|!bOY#*}YZ&cZr#*}rs!Jasw#*}wx##zx!^#*}!^!_#)w!_#O#*}#O#P!Cr#P#Q!;Z#Q#o#*}#o#p#)w#p;'S#*};'S;=`#,Y<%lO#*}(r#,]P;=`<%l#*}(r#,cP;=`<%l!;Z(CS#,sb$e&j'yp'|!b'q(;d!SSOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Kpx!P!;Z!P!Q#%Z!Q!^!;Z!^!_#'Z!_!}!;Z!}#O#*}#O#P!Dj#P#o!;Z#o#p#'Z#p;'S!;Z;'S;=`#,`<%lO!;Z(CS#.W_$e&j'yp'|!bR(;dOY#-{YZ&cZr#-{rs#/Vsw#-{wx#2gx!^#-{!^!_#4f!_#O#-{#O#P#0X#P#o#-{#o#p#4f#p;'S#-{;'S;=`#5e<%lO#-{(Bb#/`]$e&j'|!bR(;dOY#/VYZ&cZw#/Vwx#0Xx!^#/V!^!_#1j!_#O#/V#O#P#0X#P#o#/V#o#p#1j#p;'S#/V;'S;=`#2a<%lO#/V(AO#0`X$e&jR(;dOY#0XYZ&cZ!^#0X!^!_#0{!_#o#0X#o#p#0{#p;'S#0X;'S;=`#1d<%lO#0X(;d#1QSR(;dOY#0{Z;'S#0{;'S;=`#1^<%lO#0{(;d#1aP;=`<%l#0{(AO#1gP;=`<%l#0X(<v#1qW'|!bR(;dOY#1jZw#1jwx#0{x#O#1j#O#P#0{#P;'S#1j;'S;=`#2Z<%lO#1j(<v#2^P;=`<%l#1j(Bb#2dP;=`<%l#/V(Ap#2p]$e&j'ypR(;dOY#2gYZ&cZr#2grs#0Xs!^#2g!^!_#3i!_#O#2g#O#P#0X#P#o#2g#o#p#3i#p;'S#2g;'S;=`#4`<%lO#2g(<U#3pW'ypR(;dOY#3iZr#3irs#0{s#O#3i#O#P#0{#P;'S#3i;'S;=`#4Y<%lO#3i(<U#4]P;=`<%l#3i(Ap#4cP;=`<%l#2g(=h#4oY'yp'|!bR(;dOY#4fZr#4frs#1jsw#4fwx#3ix#O#4f#O#P#0{#P;'S#4f;'S;=`#5_<%lO#4f(=h#5bP;=`<%l#4f(CS#5hP;=`<%l#-{%#W#5xb$e&j#|$Id'yp'|!b!SSOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Kpx!P!;Z!P!Q#%Z!Q!^!;Z!^!_#'Z!_!}!;Z!}#O#*}#O#P!Dj#P#o!;Z#o#p#'Z#p;'S!;Z;'S;=`#,`<%lO!;Z+h#7_b$U#t$e&j'yp'|!b!SSOY!;ZYZ&cZr!;Zrs!<nsw!;Zwx!Kpx!P!;Z!P!Q#%Z!Q!^!;Z!^!_#'Z!_!}!;Z!}#O#*}#O#P!Dj#P#o!;Z#o#p#'Z#p;'S!;Z;'S;=`#,`<%lO!;Z$/l#8rp$e&j'yp'|!bm$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#:v![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#:v#S#U%Z#U#V#>Q#V#X%Z#X#Y!4|#Y#b%Z#b#c#<v#c#d#AY#d#l%Z#l#m#D[#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#;Rk$e&j'yp'|!bm$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!3Y!P!Q%Z!Q![#:v![!^%Z!^!_*g!_!g%Z!g!h!4|!h#O%Z#O#P&c#P#R%Z#R#S#:v#S#X%Z#X#Y!4|#Y#b%Z#b#c#<v#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#=R_$e&j'yp'|!bm$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#>Zd$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#?i!R!S#?i!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#?i#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#?tf$e&j'yp'|!bm$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#?i!R!S#?i!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#?i#S#b%Z#b#c#<v#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#Acc$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#Bn!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#Bn#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#Bye$e&j'yp'|!bm$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#Bn!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#Bn#S#b%Z#b#c#<v#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#Deg$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#E|![!^%Z!^!_*g!_!c%Z!c!i#E|!i#O%Z#O#P&c#P#R%Z#R#S#E|#S#T%Z#T#Z#E|#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#FXi$e&j'yp'|!bm$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#E|![!^%Z!^!_*g!_!c%Z!c!i#E|!i#O%Z#O#P&c#P#R%Z#R#S#E|#S#T%Z#T#Z#E|#Z#b%Z#b#c#<v#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%Gh#HT_!b$b$e&j#z%<f'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#I___l$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS#Jm^(P!*v!f'.r'yp'|!b$V)d(pSOY*gZr*grs'}sw*gwx)rx!P*g!P!Q#Ki!Q!^*g!^!_#L_!_!`#NP!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#KrX$g&j'yp'|!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#LhZ#l$Id'yp'|!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#MZ!`#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#MdX#|$Id'yp'|!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#NYX#m$Id'yp'|!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g%Gh$ Qa#Y%?x$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a$!V!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#W$!b_#e$Ih$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%Gh$#paeBf#m$Id$b#|$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`$$u!`!a$&P!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$%Q_#m$Id$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$&[a#l$Id$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`!a$'a!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$'l`#l$Id$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+h$(yc(d$Ip$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P$*U!P!^%Z!^!_*g!_!a%Z!a!b$+`!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+`$*a_{'#p$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$+k`$e&j#w$Id'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&^$,x_!y!Ln$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(@^$.S_}(8n$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$/WZ$e&jO!^$/y!^!_$0a!_#i$/y#i#j$0f#j#l$/y#l#m$2X#m#o$/y#o#p$0a#p;'S$/y;'S;=`$4d<%lO$/y(n$0QT]#S$e&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$0fO]#S(n$0k[$e&jO!Q&c!Q![$1a![!^&c!_!c&c!c!i$1a!i#T&c#T#Z$1a#Z#o&c#o#p$3w#p;'S&c;'S;=`&w<%lO&c(n$1fZ$e&jO!Q&c!Q![$2X![!^&c!_!c&c!c!i$2X!i#T&c#T#Z$2X#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$2^Z$e&jO!Q&c!Q![$3P![!^&c!_!c&c!c!i$3P!i#T&c#T#Z$3P#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$3UZ$e&jO!Q&c!Q![$/y![!^&c!_!c&c!c!i$/y!i#T&c#T#Z$/y#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$3zR!Q![$4T!c!i$4T#T#Z$4T#S$4WS!Q![$4T!c!i$4T#T#Z$4T#q#r$0a(n$4gP;=`<%l$/y!2r$4u_!T!+S$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$6P`#t$Id$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&,v$7^_$e&j'yp'|!b(T&%WOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS$8lk$e&j'yp'|!b(W!LY'v&;d$Z#tOY%ZYZ&cZr%Zrs&}st%Ztu$8]uw%Zwx(rx}%Z}!O$:a!O!Q%Z!Q![$8]![!^%Z!^!_*g!_!c%Z!c!}$8]!}#O%Z#O#P&c#P#R%Z#R#S$8]#S#T%Z#T#o$8]#o#p*g#p$g%Z$g;'S$8];'S;=`$<g<%lO$8]+d$:lk$e&j'yp'|!b$Z#tOY%ZYZ&cZr%Zrs&}st%Ztu$:auw%Zwx(rx}%Z}!O$:a!O!Q%Z!Q![$:a![!^%Z!^!_*g!_!c%Z!c!}$:a!}#O%Z#O#P&c#P#R%Z#R#S$:a#S#T%Z#T#o$:a#o#p*g#p$g%Z$g;'S$:a;'S;=`$<a<%lO$:a+d$<dP;=`<%l$:a(CS$<jP;=`<%l$8]!5p$<vX!Y!3l'yp'|!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g%Df$=na(k%<v$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Ka!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$+`#q;'S%Z;'S;=`+a<%lO%Z%#`$?Q_!X$I`p`$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(r$@[_!nS$e&j'yp'|!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS$Al|$e&j'yp'|!b'o(;d(W!LY'v&;d$X#tOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$f%Z$f$g+g$g#BYEr#BY#BZ$AZ#BZ$ISEr$IS$I_$AZ$I_$JTEr$JT$JU$AZ$JU$KVEr$KV$KW$AZ$KW&FUEr&FU&FV$AZ&FV;'SEr;'S;=`I|<%l?HTEr?HT?HU$AZ?HUOEr(CS$Dwk$e&j'yp'|!b'p(;d(W!LY'v&;d$X#tOY%ZYZ&cZr%Zrs&}st%ZtuEruw%Zwx(rx}%Z}!OGv!O!Q%Z!Q![Er![!^%Z!^!_*g!_!c%Z!c!}Er!}#O%Z#O#P&c#P#R%Z#R#SEr#S#T%Z#T#oEr#o#p*g#p$g%Z$g;'SEr;'S;=`I|<%lOEr",
    tokenizers: [
      T2,
      C2,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      k2,
      new Ha(
        "$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOr~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!P~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(V~~",
        141,
        328
      ),
      new Ha("j~RQYZXz{^~^O's~~aP!P!Qd~iO't~~", 25, 310)
    ],
    topRules: {
      Script: [0, 5],
      SingleExpression: [1, 268],
      SingleClassItem: [2, 269]
    },
    dialects: { jsx: 12842, ts: 12844 },
    dynamicPrecedences: { 67: 1, 77: 1, 79: 1, 164: 1, 192: 1 },
    specialized: [
      { term: 314, get: (n) => Z2[n] || -1 },
      { term: 330, get: (n) => A2[n] || -1 },
      { term: 68, get: (n) => R2[n] || -1 }
    ],
    tokenPrec: 12868
  }),
  oS = [
    /* @__PURE__ */ ct('function ${name}(${params}) {\n	${}\n}', {
      label: 'function',
      detail: 'definition',
      type: 'keyword'
    }),
    /* @__PURE__ */ ct(
      'for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n	${}\n}',
      {
        label: 'for',
        detail: 'loop',
        type: 'keyword'
      }
    ),
    /* @__PURE__ */ ct('for (let ${name} of ${collection}) {\n	${}\n}', {
      label: 'for',
      detail: 'of loop',
      type: 'keyword'
    }),
    /* @__PURE__ */ ct('do {\n	${}\n} while (${})', {
      label: 'do',
      detail: 'loop',
      type: 'keyword'
    }),
    /* @__PURE__ */ ct('while (${}) {\n	${}\n}', {
      label: 'while',
      detail: 'loop',
      type: 'keyword'
    }),
    /* @__PURE__ */ ct(
      `try {
	\${}
} catch (\${error}) {
	\${}
}`,
      {
        label: 'try',
        detail: '/ catch block',
        type: 'keyword'
      }
    ),
    /* @__PURE__ */ ct('if (${}) {\n	${}\n}', {
      label: 'if',
      detail: 'block',
      type: 'keyword'
    }),
    /* @__PURE__ */ ct(
      `if (\${}) {
	\${}
} else {
	\${}
}`,
      {
        label: 'if',
        detail: '/ else block',
        type: 'keyword'
      }
    ),
    /* @__PURE__ */ ct(
      `class \${name} {
	constructor(\${params}) {
		\${}
	}
}`,
      {
        label: 'class',
        detail: 'definition',
        type: 'keyword'
      }
    ),
    /* @__PURE__ */ ct('import {${names}} from "${module}"\n${}', {
      label: 'import',
      detail: 'named',
      type: 'keyword'
    }),
    /* @__PURE__ */ ct('import ${name} from "${module}"\n${}', {
      label: 'import',
      detail: 'default',
      type: 'keyword'
    })
  ],
  D2 = /* @__PURE__ */ oS.concat([
    /* @__PURE__ */ ct('interface ${name} {\n	${}\n}', {
      label: 'interface',
      detail: 'definition',
      type: 'keyword'
    }),
    /* @__PURE__ */ ct('type ${name} = ${type}', {
      label: 'type',
      detail: 'definition',
      type: 'keyword'
    }),
    /* @__PURE__ */ ct('enum ${name} {\n	${}\n}', {
      label: 'enum',
      detail: 'definition',
      type: 'keyword'
    })
  ]),
  rg = /* @__PURE__ */ new Cb(),
  aS = /* @__PURE__ */ new Set([
    'Script',
    'Block',
    'FunctionExpression',
    'FunctionDeclaration',
    'ArrowFunction',
    'MethodDeclaration',
    'ForStatement'
  ])
function Er(n) {
  return (e, t) => {
    let i = e.node.getChild('VariableDefinition')
    return i && t(i, n), !0
  }
}
const X2 = ['FunctionDeclaration'],
  Y2 = {
    FunctionDeclaration: /* @__PURE__ */ Er('function'),
    ClassDeclaration: /* @__PURE__ */ Er('class'),
    ClassExpression: () => !0,
    EnumDeclaration: /* @__PURE__ */ Er('constant'),
    TypeAliasDeclaration: /* @__PURE__ */ Er('type'),
    NamespaceDeclaration: /* @__PURE__ */ Er('namespace'),
    VariableDefinition(n, e) {
      n.matchContext(X2) || e(n, 'variable')
    },
    TypeDefinition(n, e) {
      e(n, 'type')
    },
    __proto__: null
  }
function lS(n, e) {
  let t = rg.get(e)
  if (t) return t
  let i = [],
    r = !0
  function s(o, a) {
    let l = n.sliceString(o.from, o.to)
    i.push({ label: l, type: a })
  }
  return (
    e.cursor(me.IncludeAnonymous).iterate((o) => {
      if (r) r = !1
      else if (o.name) {
        let a = Y2[o.name]
        if ((a && a(o, s)) || aS.has(o.name)) return !1
      } else if (o.to - o.from > 8192) {
        for (let a of lS(n, o.node)) i.push(a)
        return !1
      }
    }),
    rg.set(e, i),
    i
  )
}
const sg = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/,
  cS = [
    'TemplateString',
    'String',
    'RegExp',
    'LineComment',
    'BlockComment',
    'VariableDefinition',
    'TypeDefinition',
    'Label',
    'PropertyDefinition',
    'PropertyName',
    'PrivatePropertyDefinition',
    'PrivatePropertyName',
    '.',
    '?.'
  ]
function I2(n) {
  let e = Ze(n.state).resolveInner(n.pos, -1)
  if (cS.indexOf(e.name) > -1) return null
  let t =
    e.name == 'VariableName' ||
    (e.to - e.from < 20 && sg.test(n.state.sliceDoc(e.from, e.to)))
  if (!t && !n.explicit) return null
  let i = []
  for (let r = e; r; r = r.parent)
    aS.has(r.name) && (i = i.concat(lS(n.state.doc, r)))
  return {
    options: i,
    from: t ? e.from : n.pos,
    validFor: sg
  }
}
const an = /* @__PURE__ */ ir.define({
    name: 'javascript',
    parser: /* @__PURE__ */ E2.configure({
      props: [
        /* @__PURE__ */ kl.add({
          IfStatement: /* @__PURE__ */ zo({ except: /^\s*({|else\b)/ }),
          TryStatement: /* @__PURE__ */ zo({
            except: /^\s*({|catch\b|finally\b)/
          }),
          LabeledStatement: vZ,
          SwitchBody: (n) => {
            let e = n.textAfter,
              t = /^\s*\}/.test(e),
              i = /^\s*(case|default)\b/.test(e)
            return n.baseIndent + (t ? 0 : i ? 1 : 2) * n.unit
          },
          Block: /* @__PURE__ */ bZ({ closing: '}' }),
          ArrowFunction: (n) => n.baseIndent + n.unit,
          'TemplateString BlockComment': () => null,
          'Statement Property': /* @__PURE__ */ zo({ except: /^{/ }),
          JSXElement(n) {
            let e = /^\s*<\//.test(n.textAfter)
            return n.lineIndent(n.node.from) + (e ? 0 : n.unit)
          },
          JSXEscape(n) {
            let e = /\s*\}/.test(n.textAfter)
            return n.lineIndent(n.node.from) + (e ? 0 : n.unit)
          },
          'JSXOpenTag JSXSelfClosingTag'(n) {
            return n.column(n.node.from) + n.unit
          }
        }),
        /* @__PURE__ */ Tl.add({
          'Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType':
            Yb,
          BlockComment(n) {
            return { from: n.from + 2, to: n.to - 2 }
          }
        })
      ]
    }),
    languageData: {
      closeBrackets: { brackets: ['(', '[', '{', "'", '"', '`'] },
      commentTokens: { line: '//', block: { open: '/*', close: '*/' } },
      indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
      wordChars: '$'
    }
  }),
  uS = {
    test: (n) => /^JSX/.test(n.name),
    facet: /* @__PURE__ */ Rb({
      commentTokens: { block: { open: '{/*', close: '*/}' } }
    })
  },
  fS = /* @__PURE__ */ an.configure({ dialect: 'ts' }, 'typescript'),
  hS = /* @__PURE__ */ an.configure({
    dialect: 'jsx',
    props: [/* @__PURE__ */ Hf.add((n) => (n.isTop ? [uS] : void 0))]
  }),
  dS = /* @__PURE__ */ an.configure(
    {
      dialect: 'jsx ts',
      props: [/* @__PURE__ */ Hf.add((n) => (n.isTop ? [uS] : void 0))]
    },
    'typescript'
  )
let pS = (n) => ({ label: n, type: 'keyword' })
const OS =
    /* @__PURE__ */ 'break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield'
      .split(' ')
      .map(pS),
  N2 = /* @__PURE__ */ OS.concat(
    /* @__PURE__ */ [
      'declare',
      'implements',
      'private',
      'protected',
      'public'
    ].map(pS)
  )
function gS(n = {}) {
  let e = n.jsx ? (n.typescript ? dS : hS) : n.typescript ? fS : an,
    t = n.typescript ? D2.concat(N2) : oS.concat(OS)
  return new Kf(e, [
    an.data.of({
      autocomplete: IR(cS, Nv(t))
    }),
    an.data.of({
      autocomplete: I2
    }),
    n.jsx ? W2 : []
  ])
}
function M2(n) {
  for (;;) {
    if (
      n.name == 'JSXOpenTag' ||
      n.name == 'JSXSelfClosingTag' ||
      n.name == 'JSXFragmentTag'
    )
      return n
    if (n.name == 'JSXEscape' || !n.parent) return null
    n = n.parent
  }
}
function og(n, e, t = n.length) {
  for (let i = e == null ? void 0 : e.firstChild; i; i = i.nextSibling)
    if (
      i.name == 'JSXIdentifier' ||
      i.name == 'JSXBuiltin' ||
      i.name == 'JSXNamespacedName' ||
      i.name == 'JSXMemberExpression'
    )
      return n.sliceString(i.from, Math.min(i.to, t))
  return ''
}
const V2 =
    typeof navigator == 'object' &&
    /* @__PURE__ */ /Android\b/.test(navigator.userAgent),
  W2 = /* @__PURE__ */ M.inputHandler.of((n, e, t, i, r) => {
    if (
      (V2 ? n.composing : n.compositionStarted) ||
      n.state.readOnly ||
      e != t ||
      (i != '>' && i != '/') ||
      !an.isActiveAt(n.state, e, -1)
    )
      return !1
    let s = r(),
      { state: o } = s,
      a = o.changeByRange((l) => {
        var c
        let { head: u } = l,
          f = Ze(o).resolveInner(u - 1, -1),
          h
        if (
          (f.name == 'JSXStartTag' && (f = f.parent),
          !(
            o.doc.sliceString(u - 1, u) != i ||
            (f.name == 'JSXAttributeValue' && f.to > u)
          ))
        ) {
          if (i == '>' && f.name == 'JSXFragmentTag')
            return { range: l, changes: { from: u, insert: '</>' } }
          if (i == '/' && f.name == 'JSXStartCloseTag') {
            let d = f.parent,
              O = d.parent
            if (
              O &&
              d.from == u - 2 &&
              ((h = og(o.doc, O.firstChild, u)) ||
                ((c = O.firstChild) === null || c === void 0
                  ? void 0
                  : c.name) == 'JSXFragmentTag')
            ) {
              let m = `${h}>`
              return {
                range: _.cursor(u + m.length, -1),
                changes: { from: u, insert: m }
              }
            }
          } else if (i == '>') {
            let d = M2(f)
            if (
              d &&
              !/^\/?>|^<\//.test(o.doc.sliceString(u, u + 2)) &&
              (h = og(o.doc, d, u))
            )
              return { range: l, changes: { from: u, insert: `</${h}>` } }
          }
        }
        return { range: l }
      })
    return a.changes.empty
      ? !1
      : (n.dispatch([
          s,
          o.update(a, { userEvent: 'input.complete', scrollIntoView: !0 })
        ]),
        !0)
  }),
  j2 = 54,
  B2 = 1,
  L2 = 55,
  U2 = 2,
  q2 = 56,
  z2 = 3,
  ag = 4,
  F2 = 5,
  Ka = 6,
  mS = 7,
  yS = 8,
  bS = 9,
  vS = 10,
  G2 = 11,
  H2 = 12,
  K2 = 13,
  Cc = 57,
  J2 = 14,
  lg = 58,
  SS = 20,
  eD = 22,
  xS = 23,
  tD = 24,
  df = 26,
  wS = 27,
  nD = 28,
  iD = 31,
  rD = 34,
  sD = 36,
  oD = 37,
  aD = 0,
  lD = 1,
  cD = {
    area: !0,
    base: !0,
    br: !0,
    col: !0,
    command: !0,
    embed: !0,
    frame: !0,
    hr: !0,
    img: !0,
    input: !0,
    keygen: !0,
    link: !0,
    meta: !0,
    param: !0,
    source: !0,
    track: !0,
    wbr: !0,
    menuitem: !0
  },
  uD = {
    dd: !0,
    li: !0,
    optgroup: !0,
    option: !0,
    p: !0,
    rp: !0,
    rt: !0,
    tbody: !0,
    td: !0,
    tfoot: !0,
    th: !0,
    tr: !0
  },
  cg = {
    dd: { dd: !0, dt: !0 },
    dt: { dd: !0, dt: !0 },
    li: { li: !0 },
    option: { option: !0, optgroup: !0 },
    optgroup: { optgroup: !0 },
    p: {
      address: !0,
      article: !0,
      aside: !0,
      blockquote: !0,
      dir: !0,
      div: !0,
      dl: !0,
      fieldset: !0,
      footer: !0,
      form: !0,
      h1: !0,
      h2: !0,
      h3: !0,
      h4: !0,
      h5: !0,
      h6: !0,
      header: !0,
      hgroup: !0,
      hr: !0,
      menu: !0,
      nav: !0,
      ol: !0,
      p: !0,
      pre: !0,
      section: !0,
      table: !0,
      ul: !0
    },
    rp: { rp: !0, rt: !0 },
    rt: { rp: !0, rt: !0 },
    tbody: { tbody: !0, tfoot: !0 },
    td: { td: !0, th: !0 },
    tfoot: { tbody: !0 },
    th: { td: !0, th: !0 },
    thead: { tbody: !0, tfoot: !0 },
    tr: { tr: !0 }
  }
function fD(n) {
  return (
    n == 45 ||
    n == 46 ||
    n == 58 ||
    (n >= 65 && n <= 90) ||
    n == 95 ||
    (n >= 97 && n <= 122) ||
    n >= 161
  )
}
function $S(n) {
  return n == 9 || n == 10 || n == 13 || n == 32
}
let ug = null,
  fg = null,
  hg = 0
function pf(n, e) {
  let t = n.pos + e
  if (hg == t && fg == n) return ug
  let i = n.peek(e)
  for (; $S(i); ) i = n.peek(++e)
  let r = ''
  for (; fD(i); ) (r += String.fromCharCode(i)), (i = n.peek(++e))
  return (
    (fg = n),
    (hg = t),
    (ug = r ? r.toLowerCase() : i == hD || i == dD ? void 0 : null)
  )
}
const PS = 60,
  Ja = 62,
  gh = 47,
  hD = 63,
  dD = 33,
  pD = 45
function dg(n, e) {
  ;(this.name = n), (this.parent = e), (this.hash = e ? e.hash : 0)
  for (let t = 0; t < n.length; t++)
    this.hash += (this.hash << 4) + n.charCodeAt(t) + (n.charCodeAt(t) << 8)
}
const OD = [Ka, vS, mS, yS, bS],
  gD = new rS({
    start: null,
    shift(n, e, t, i) {
      return OD.indexOf(e) > -1 ? new dg(pf(i, 1) || '', n) : n
    },
    reduce(n, e) {
      return e == SS && n ? n.parent : n
    },
    reuse(n, e, t, i) {
      let r = e.type.id
      return r == Ka || r == sD ? new dg(pf(i, 1) || '', n) : n
    },
    hash(n) {
      return n ? n.hash : 0
    },
    strict: !1
  }),
  mD = new hn(
    (n, e) => {
      if (n.next != PS) {
        n.next < 0 && e.context && n.acceptToken(Cc)
        return
      }
      n.advance()
      let t = n.next == gh
      t && n.advance()
      let i = pf(n, 0)
      if (i === void 0) return
      if (!i) return n.acceptToken(t ? J2 : Ka)
      let r = e.context ? e.context.name : null
      if (t) {
        if (i == r) return n.acceptToken(G2)
        if (r && uD[r]) return n.acceptToken(Cc, -2)
        if (e.dialectEnabled(aD)) return n.acceptToken(H2)
        for (let s = e.context; s; s = s.parent) if (s.name == i) return
        n.acceptToken(K2)
      } else {
        if (i == 'script') return n.acceptToken(mS)
        if (i == 'style') return n.acceptToken(yS)
        if (i == 'textarea') return n.acceptToken(bS)
        if (cD.hasOwnProperty(i)) return n.acceptToken(vS)
        r && cg[r] && cg[r][i] ? n.acceptToken(Cc, -1) : n.acceptToken(Ka)
      }
    },
    { contextual: !0 }
  ),
  yD = new hn((n) => {
    for (let e = 0, t = 0; ; t++) {
      if (n.next < 0) {
        t && n.acceptToken(lg)
        break
      }
      if (n.next == pD) e++
      else if (n.next == Ja && e >= 2) {
        t > 3 && n.acceptToken(lg, -2)
        break
      } else e = 0
      n.advance()
    }
  })
function bD(n) {
  for (; n; n = n.parent) if (n.name == 'svg' || n.name == 'math') return !0
  return !1
}
const vD = new hn((n, e) => {
  if (n.next == gh && n.peek(1) == Ja) {
    let t = e.dialectEnabled(lD) || bD(e.context)
    n.acceptToken(t ? F2 : ag, 2)
  } else n.next == Ja && n.acceptToken(ag, 1)
})
function mh(n, e, t) {
  let i = 2 + n.length
  return new hn((r) => {
    for (let s = 0, o = 0, a = 0; ; a++) {
      if (r.next < 0) {
        a && r.acceptToken(e)
        break
      }
      if (
        (s == 0 && r.next == PS) ||
        (s == 1 && r.next == gh) ||
        (s >= 2 && s < i && r.next == n.charCodeAt(s - 2))
      )
        s++, o++
      else if ((s == 2 || s == i) && $S(r.next)) o++
      else if (s == i && r.next == Ja) {
        a > o ? r.acceptToken(e, -o) : r.acceptToken(t, -(o - 2))
        break
      } else if ((r.next == 10 || r.next == 13) && a) {
        r.acceptToken(e, 1)
        break
      } else s = o = 0
      r.advance()
    }
  })
}
const SD = mh('script', j2, B2),
  xD = mh('style', L2, U2),
  wD = mh('textarea', q2, z2),
  $D = Pl({
    'Text RawText': g.content,
    'StartTag StartCloseTag SelfClosingEndTag EndTag': g.angleBracket,
    TagName: g.tagName,
    'MismatchedCloseTag/TagName': [g.tagName, g.invalid],
    AttributeName: g.attributeName,
    'AttributeValue UnquotedAttributeValue': g.attributeValue,
    Is: g.definitionOperator,
    'EntityReference CharacterReference': g.character,
    Comment: g.blockComment,
    ProcessingInst: g.processingInstruction,
    DoctypeDecl: g.documentMeta
  }),
  PD = ar.deserialize({
    version: 14,
    states:
      ",xOVO!rOOO!WQ#tO'#CqO!]Q#tO'#CzO!bQ#tO'#C}O!gQ#tO'#DQO!lQ#tO'#DSO!qOaO'#CpO!|ObO'#CpO#XOdO'#CpO$eO!rO'#CpOOO`'#Cp'#CpO$lO$fO'#DTO$tQ#tO'#DVO$yQ#tO'#DWOOO`'#Dk'#DkOOO`'#DY'#DYQVO!rOOO%OQ&rO,59]O%WQ&rO,59fO%`Q&rO,59iO%hQ&rO,59lO%sQ&rO,59nOOOa'#D^'#D^O%{OaO'#CxO&WOaO,59[OOOb'#D_'#D_O&`ObO'#C{O&kObO,59[OOOd'#D`'#D`O&sOdO'#DOO'OOdO,59[OOO`'#Da'#DaO'WO!rO,59[O'_Q#tO'#DROOO`,59[,59[OOOp'#Db'#DbO'dO$fO,59oOOO`,59o,59oO'lQ#|O,59qO'qQ#|O,59rOOO`-E7W-E7WO'vQ&rO'#CsOOQW'#DZ'#DZO(UQ&rO1G.wOOOa1G.w1G.wO(^Q&rO1G/QOOOb1G/Q1G/QO(fQ&rO1G/TOOOd1G/T1G/TO(nQ&rO1G/WOOO`1G/W1G/WOOO`1G/Y1G/YO(yQ&rO1G/YOOOa-E7[-E7[O)RQ#tO'#CyOOO`1G.v1G.vOOOb-E7]-E7]O)WQ#tO'#C|OOOd-E7^-E7^O)]Q#tO'#DPOOO`-E7_-E7_O)bQ#|O,59mOOOp-E7`-E7`OOO`1G/Z1G/ZOOO`1G/]1G/]OOO`1G/^1G/^O)gQ,UO,59_OOQW-E7X-E7XOOOa7+$c7+$cOOOb7+$l7+$lOOOd7+$o7+$oOOO`7+$r7+$rOOO`7+$t7+$tO)rQ#|O,59eO)wQ#|O,59hO)|Q#|O,59kOOO`1G/X1G/XO*RO7[O'#CvO*dOMhO'#CvOOQW1G.y1G.yOOO`1G/P1G/POOO`1G/S1G/SOOO`1G/V1G/VOOOO'#D['#D[O*uO7[O,59bOOQW,59b,59bOOOO'#D]'#D]O+WOMhO,59bOOOO-E7Y-E7YOOQW1G.|1G.|OOOO-E7Z-E7Z",
    stateData:
      '+s~O!^OS~OUSOVPOWQOXROYTO[]O][O^^O`^Oa^Ob^Oc^Ox^O{_O!dZO~OfaO~OfbO~OfcO~OfdO~OfeO~O!WfOPlP!ZlP~O!XiOQoP!ZoP~O!YlORrP!ZrP~OUSOVPOWQOXROYTOZqO[]O][O^^O`^Oa^Ob^Oc^Ox^O!dZO~O!ZrO~P#dO![sO!euO~OfvO~OfwO~OS|OhyO~OS!OOhyO~OS!QOhyO~OS!SOT!TOhyO~OS!TOhyO~O!WfOPlX!ZlX~OP!WO!Z!XO~O!XiOQoX!ZoX~OQ!ZO!Z!XO~O!YlORrX!ZrX~OR!]O!Z!XO~O!Z!XO~P#dOf!_O~O![sO!e!aO~OS!bO~OS!cO~Oi!dOSgXhgXTgX~OS!fOhyO~OS!gOhyO~OS!hOhyO~OS!iOT!jOhyO~OS!jOhyO~Of!kO~Of!lO~Of!mO~OS!nO~Ok!qO!`!oO!b!pO~OS!rO~OS!sO~OS!tO~Oa!uOb!uOc!uO!`!wO!a!uO~Oa!xOb!xOc!xO!b!wO!c!xO~Oa!uOb!uOc!uO!`!{O!a!uO~Oa!xOb!xOc!xO!b!{O!c!xO~OT~bac!dx{!d~',
    goto: '%p!`PPPPPPPPPPPPPPPPPPPP!a!gP!mPP!yP!|#P#S#Y#]#`#f#i#l#r#x!aP!a!aP$O$U$l$r$x%O%U%[%bPPPPPPPP%hX^OX`pXUOX`pezabcde{}!P!R!UR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ}bQ!PcQ!RdQ!UeZ!e{}!P!R!UQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp',
    nodeNames:
      '⚠ StartCloseTag StartCloseTag StartCloseTag EndTag SelfClosingEndTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl',
    maxTerm: 67,
    context: gD,
    nodeProps: [
      [
        'closedBy',
        -10,
        1,
        2,
        3,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        'EndTag',
        6,
        'EndTag SelfClosingEndTag',
        -4,
        21,
        30,
        33,
        36,
        'CloseTag'
      ],
      [
        'openedBy',
        4,
        'StartTag StartCloseTag',
        5,
        'StartTag',
        -4,
        29,
        32,
        35,
        37,
        'OpenTag'
      ],
      [
        'group',
        -9,
        14,
        17,
        18,
        19,
        20,
        39,
        40,
        41,
        42,
        'Entity',
        16,
        'Entity TextContent',
        -3,
        28,
        31,
        34,
        'TextContent Entity'
      ]
    ],
    propSources: [$D],
    skippedNodes: [0],
    repeatNodeCount: 9,
    tokenData:
      "!<p!aR!YOX$qXY,QYZ,QZ[$q[]&X]^,Q^p$qpq,Qqr-_rs3_sv-_vw3}wxHYx}-_}!OH{!O!P-_!P!Q$q!Q![-_![!]Mz!]!^-_!^!_!$S!_!`!;x!`!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4U-_4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!Z$|c`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr$qrs&}sv$qvw+Pwx(tx!^$q!^!_*V!_!a&X!a#S$q#S#T&X#T;'S$q;'S;=`+z<%lO$q!R&bX`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&Xq'UV`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}P'pT`POv'kw!^'k!_;'S'k;'S;=`(P<%lO'kP(SP;=`<%l'kp([S!cpOv(Vx;'S(V;'S;=`(h<%lO(Vp(kP;=`<%l(Vq(qP;=`<%l&}a({W`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t`)jT!a`Or)esv)ew;'S)e;'S;=`)y<%lO)e`)|P;=`<%l)ea*SP;=`<%l(t!Q*^V!a`!cpOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!Q*vP;=`<%l*V!R*|P;=`<%l&XW+UYkWOX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+PW+wP;=`<%l+P!Z+}P;=`<%l$q!a,]``P!a`!cp!^^OX&XXY,QYZ,QZ]&X]^,Q^p&Xpq,Qqr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!_-ljhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q[/ebhSkWOX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+PS0rXhSqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0mS1bP;=`<%l0m[1hP;=`<%l/^!V1vchS`P!a`!cpOq&Xqr1krs&}sv1kvw0mwx(tx!P1k!P!Q&X!Q!^1k!^!_*V!_!a&X!a#s1k#s$f&X$f;'S1k;'S;=`3R<%l?Ah1k?Ah?BY&X?BY?Mn1k?MnO&X!V3UP;=`<%l1k!_3[P;=`<%l-_!Z3hV!`h`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}!_4WihSkWc!ROX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst>]tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^/^!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!Z5zbkWOX5uXZ7SZ[5u[^7S^p5uqr5urs7Sst+Ptw5uwx7Sx!]5u!]!^7w!^!a7S!a#S5u#S#T7S#T;'S5u;'S;=`8n<%lO5u!R7VVOp7Sqs7St!]7S!]!^7l!^;'S7S;'S;=`7q<%lO7S!R7qOa!R!R7tP;=`<%l7S!Z8OYkWa!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!Z8qP;=`<%l5u!_8{ihSkWOX5uXZ7SZ[5u[^7S^p5uqr8trs7Sst/^tw8twx7Sx!P8t!P!Q5u!Q!]8t!]!^:j!^!a7S!a#S8t#S#T;{#T#s8t#s$f5u$f;'S8t;'S;=`>V<%l?Ah8t?Ah?BY5u?BY?Mn8t?MnO5u!_:sbhSkWa!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!V<QchSOp7Sqr;{rs7Sst0mtw;{wx7Sx!P;{!P!Q7S!Q!];{!]!^=]!^!a7S!a#s;{#s$f7S$f;'S;{;'S;=`>P<%l?Ah;{?Ah?BY7S?BY?Mn;{?MnO7S!V=dXhSa!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!V>SP;=`<%l;{!_>YP;=`<%l8t!_>dhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^/^!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!Z@TakWOX@OXZAYZ[@O[^AY^p@Oqr@OrsAYsw@OwxAYx!]@O!]!^Az!^!aAY!a#S@O#S#TAY#T;'S@O;'S;=`Bq<%lO@O!RA]UOpAYq!]AY!]!^Ao!^;'SAY;'S;=`At<%lOAY!RAtOb!R!RAwP;=`<%lAY!ZBRYkWb!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!ZBtP;=`<%l@O!_COhhSkWOX@OXZAYZ[@O[^AY^p@OqrBwrsAYswBwwxAYx!PBw!P!Q@O!Q!]Bw!]!^Dj!^!aAY!a#SBw#S#TE{#T#sBw#s$f@O$f;'SBw;'S;=`HS<%l?AhBw?Ah?BY@O?BY?MnBw?MnO@O!_DsbhSkWb!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!a#S/^#S#T0m#T#s/^#s$f+P$f;'S/^;'S;=`1e<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!VFQbhSOpAYqrE{rsAYswE{wxAYx!PE{!P!QAY!Q!]E{!]!^GY!^!aAY!a#sE{#s$fAY$f;'SE{;'S;=`G|<%l?AhE{?Ah?BYAY?BY?MnE{?MnOAY!VGaXhSb!Rqr0msw0mx!P0m!Q!^0m!a#s0m$f;'S0m;'S;=`1_<%l?Ah0m?BY?Mn0m!VHPP;=`<%lE{!_HVP;=`<%lBw!ZHcW!bx`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t!aIYlhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OKQ!O!P-_!P!Q$q!Q!^-_!^!_*V!_!a&X!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!aK_khS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_*V!_!`&X!`!aMS!a#S-_#S#T1k#T#s-_#s$f$q$f;'S-_;'S;=`3X<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!TM_X`P!a`!cp!eQOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!aNZ!ZhSfQ`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OMz!O!PMz!P!Q$q!Q![Mz![!]Mz!]!^-_!^!_*V!_!a&X!a!c-_!c!}Mz!}#R-_#R#SMz#S#T1k#T#oMz#o#s-_#s$f$q$f$}-_$}%OMz%O%W-_%W%oMz%o%p-_%p&aMz&a&b-_&b1pMz1p4UMz4U4dMz4d4e-_4e$ISMz$IS$I`-_$I`$IbMz$Ib$Je-_$Je$JgMz$Jg$Kh-_$Kh%#tMz%#t&/x-_&/x&EtMz&Et&FV-_&FV;'SMz;'S;:j!#|;:j;=`3X<%l?&r-_?&r?AhMz?Ah?BY$q?BY?MnMz?MnO$q!a!$PP;=`<%lMz!R!$ZY!a`!cpOq*Vqr!$yrs(Vsv*Vwx)ex!a*V!a!b!4t!b;'S*V;'S;=`*s<%lO*V!R!%Q]!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!%y!O!f*V!f!g!']!g#W*V#W#X!0`#X;'S*V;'S;=`*s<%lO*V!R!&QX!a`!cpOr*Vrs(Vsv*Vwx)ex}*V}!O!&m!O;'S*V;'S;=`*s<%lO*V!R!&vV!a`!cp!dPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!'dX!a`!cpOr*Vrs(Vsv*Vwx)ex!q*V!q!r!(P!r;'S*V;'S;=`*s<%lO*V!R!(WX!a`!cpOr*Vrs(Vsv*Vwx)ex!e*V!e!f!(s!f;'S*V;'S;=`*s<%lO*V!R!(zX!a`!cpOr*Vrs(Vsv*Vwx)ex!v*V!v!w!)g!w;'S*V;'S;=`*s<%lO*V!R!)nX!a`!cpOr*Vrs(Vsv*Vwx)ex!{*V!{!|!*Z!|;'S*V;'S;=`*s<%lO*V!R!*bX!a`!cpOr*Vrs(Vsv*Vwx)ex!r*V!r!s!*}!s;'S*V;'S;=`*s<%lO*V!R!+UX!a`!cpOr*Vrs(Vsv*Vwx)ex!g*V!g!h!+q!h;'S*V;'S;=`*s<%lO*V!R!+xY!a`!cpOr!+qrs!,hsv!+qvw!-Swx!.[x!`!+q!`!a!/j!a;'S!+q;'S;=`!0Y<%lO!+qq!,mV!cpOv!,hvx!-Sx!`!,h!`!a!-q!a;'S!,h;'S;=`!.U<%lO!,hP!-VTO!`!-S!`!a!-f!a;'S!-S;'S;=`!-k<%lO!-SP!-kO{PP!-nP;=`<%l!-Sq!-xS!cp{POv(Vx;'S(V;'S;=`(h<%lO(Vq!.XP;=`<%l!,ha!.aX!a`Or!.[rs!-Ssv!.[vw!-Sw!`!.[!`!a!.|!a;'S!.[;'S;=`!/d<%lO!.[a!/TT!a`{POr)esv)ew;'S)e;'S;=`)y<%lO)ea!/gP;=`<%l!.[!R!/sV!a`!cp{POr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!0]P;=`<%l!+q!R!0gX!a`!cpOr*Vrs(Vsv*Vwx)ex#c*V#c#d!1S#d;'S*V;'S;=`*s<%lO*V!R!1ZX!a`!cpOr*Vrs(Vsv*Vwx)ex#V*V#V#W!1v#W;'S*V;'S;=`*s<%lO*V!R!1}X!a`!cpOr*Vrs(Vsv*Vwx)ex#h*V#h#i!2j#i;'S*V;'S;=`*s<%lO*V!R!2qX!a`!cpOr*Vrs(Vsv*Vwx)ex#m*V#m#n!3^#n;'S*V;'S;=`*s<%lO*V!R!3eX!a`!cpOr*Vrs(Vsv*Vwx)ex#d*V#d#e!4Q#e;'S*V;'S;=`*s<%lO*V!R!4XX!a`!cpOr*Vrs(Vsv*Vwx)ex#X*V#X#Y!+q#Y;'S*V;'S;=`*s<%lO*V!R!4{Y!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!a!4t!a!b!:]!b;'S!4t;'S;=`!;r<%lO!4tq!5pV!cpOv!5kvx!6Vx!a!5k!a!b!7W!b;'S!5k;'S;=`!8V<%lO!5kP!6YTO!a!6V!a!b!6i!b;'S!6V;'S;=`!7Q<%lO!6VP!6lTO!`!6V!`!a!6{!a;'S!6V;'S;=`!7Q<%lO!6VP!7QOxPP!7TP;=`<%l!6Vq!7]V!cpOv!5kvx!6Vx!`!5k!`!a!7r!a;'S!5k;'S;=`!8V<%lO!5kq!7yS!cpxPOv(Vx;'S(V;'S;=`(h<%lO(Vq!8YP;=`<%l!5ka!8bX!a`Or!8]rs!6Vsv!8]vw!6Vw!a!8]!a!b!8}!b;'S!8];'S;=`!:V<%lO!8]a!9SX!a`Or!8]rs!6Vsv!8]vw!6Vw!`!8]!`!a!9o!a;'S!8];'S;=`!:V<%lO!8]a!9vT!a`xPOr)esv)ew;'S)e;'S;=`)y<%lO)ea!:YP;=`<%l!8]!R!:dY!a`!cpOr!4trs!5ksv!4tvw!6Vwx!8]x!`!4t!`!a!;S!a;'S!4t;'S;=`!;r<%lO!4t!R!;]V!a`!cpxPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!;uP;=`<%l!4t!V!<TXiS`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X",
    tokenizers: [SD, xD, wD, vD, mD, yD, 0, 1, 2, 3, 4, 5],
    topRules: { Document: [0, 15] },
    dialects: { noMatch: 0, selfClosing: 485 },
    tokenPrec: 487
  })
function QS(n, e) {
  let t = /* @__PURE__ */ Object.create(null)
  for (let i of n.getChildren(xS)) {
    let r = i.getChild(tD),
      s = i.getChild(df) || i.getChild(wS)
    r &&
      (t[e.read(r.from, r.to)] = s
        ? s.type.id == df
          ? e.read(s.from + 1, s.to - 1)
          : e.read(s.from, s.to)
        : '')
  }
  return t
}
function pg(n, e) {
  let t = n.getChild(eD)
  return t ? e.read(t.from, t.to) : ' '
}
function _c(n, e, t) {
  let i
  for (let r of t)
    if (!r.attrs || r.attrs(i || (i = QS(n.node.parent.firstChild, e))))
      return { parser: r.parser }
  return null
}
function kS(n = [], e = []) {
  let t = [],
    i = [],
    r = [],
    s = []
  for (let a of n)
    (a.tag == 'script'
      ? t
      : a.tag == 'style'
        ? i
        : a.tag == 'textarea'
          ? r
          : s
    ).push(a)
  let o = e.length ? /* @__PURE__ */ Object.create(null) : null
  for (let a of e) (o[a.name] || (o[a.name] = [])).push(a)
  return F_((a, l) => {
    let c = a.type.id
    if (c == nD) return _c(a, l, t)
    if (c == iD) return _c(a, l, i)
    if (c == rD) return _c(a, l, r)
    if (c == SS && s.length) {
      let u = a.node,
        f = u.firstChild,
        h = f && pg(f, l),
        d
      if (h) {
        for (let O of s)
          if (O.tag == h && (!O.attrs || O.attrs(d || (d = QS(u, l))))) {
            let m = u.lastChild
            return {
              parser: O.parser,
              overlay: [{ from: f.to, to: m.type.id == oD ? m.from : u.to }]
            }
          }
      }
    }
    if (o && c == xS) {
      let u = a.node,
        f
      if ((f = u.firstChild)) {
        let h = o[l.read(f.from, f.to)]
        if (h)
          for (let d of h) {
            if (d.tagName && d.tagName != pg(u.parent, l)) continue
            let O = u.lastChild
            if (O.type.id == df) {
              let m = O.from + 1,
                b = O.lastChild,
                x = O.to - (b && b.isError ? 0 : 1)
              if (x > m)
                return { parser: d.parser, overlay: [{ from: m, to: x }] }
            } else if (O.type.id == wS)
              return { parser: d.parser, overlay: [{ from: O.from, to: O.to }] }
          }
      }
    }
    return null
  })
}
const QD = 96,
  Og = 1,
  kD = 97,
  TD = 98,
  gg = 2,
  TS = [
    9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197,
    8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288
  ],
  CD = 58,
  _D = 40,
  CS = 95,
  ZD = 91,
  Ho = 45,
  AD = 46,
  RD = 35,
  ED = 37,
  DD = 38,
  XD = 92,
  YD = 10
function el(n) {
  return (n >= 65 && n <= 90) || (n >= 97 && n <= 122) || n >= 161
}
function ID(n) {
  return n >= 48 && n <= 57
}
const ND = new hn((n, e) => {
    for (let t = !1, i = 0, r = 0; ; r++) {
      let { next: s } = n
      if (el(s) || s == Ho || s == CS || (t && ID(s)))
        !t && (s != Ho || r > 0) && (t = !0),
          i === r && s == Ho && i++,
          n.advance()
      else if (s == XD && n.peek(1) != YD)
        n.advance(), n.next > -1 && n.advance(), (t = !0)
      else {
        t && n.acceptToken(s == _D ? kD : i == 2 && e.canShift(gg) ? gg : TD)
        break
      }
    }
  }),
  MD = new hn((n) => {
    if (TS.includes(n.peek(-1))) {
      let { next: e } = n
      ;(el(e) ||
        e == CS ||
        e == RD ||
        e == AD ||
        e == ZD ||
        e == CD ||
        e == Ho ||
        e == DD) &&
        n.acceptToken(QD)
    }
  }),
  VD = new hn((n) => {
    if (!TS.includes(n.peek(-1))) {
      let { next: e } = n
      if ((e == ED && (n.advance(), n.acceptToken(Og)), el(e))) {
        do n.advance()
        while (el(n.next))
        n.acceptToken(Og)
      }
    }
  }),
  WD = Pl({
    'AtKeyword import charset namespace keyframes media supports':
      g.definitionKeyword,
    'from to selector': g.keyword,
    NamespaceName: g.namespace,
    KeyframeName: g.labelName,
    KeyframeRangeName: g.operatorKeyword,
    TagName: g.tagName,
    ClassName: g.className,
    PseudoClassName: g.constant(g.className),
    IdName: g.labelName,
    'FeatureName PropertyName': g.propertyName,
    AttributeName: g.attributeName,
    NumberLiteral: g.number,
    KeywordQuery: g.keyword,
    UnaryQueryOp: g.operatorKeyword,
    'CallTag ValueName': g.atom,
    VariableName: g.variableName,
    Callee: g.operatorKeyword,
    Unit: g.unit,
    'UniversalSelector NestingSelector': g.definitionOperator,
    MatchOp: g.compareOperator,
    'ChildOp SiblingOp, LogicOp': g.logicOperator,
    BinOp: g.arithmeticOperator,
    Important: g.modifier,
    Comment: g.blockComment,
    ColorLiteral: g.color,
    'ParenthesizedContent StringLiteral': g.string,
    ':': g.punctuation,
    'PseudoOp #': g.derefOperator,
    '; ,': g.separator,
    '( )': g.paren,
    '[ ]': g.squareBracket,
    '{ }': g.brace
  }),
  jD = {
    __proto__: null,
    lang: 32,
    'nth-child': 32,
    'nth-last-child': 32,
    'nth-of-type': 32,
    'nth-last-of-type': 32,
    dir: 32,
    'host-context': 32,
    url: 60,
    'url-prefix': 60,
    domain: 60,
    regexp: 60,
    selector: 134
  },
  BD = {
    __proto__: null,
    '@import': 114,
    '@media': 138,
    '@charset': 142,
    '@namespace': 146,
    '@keyframes': 152,
    '@supports': 164
  },
  LD = { __proto__: null, not: 128, only: 128 },
  UD = ar.deserialize({
    version: 14,
    states:
      "9bQYQ[OOO#_Q[OOP#fOWOOOOQP'#Cd'#CdOOQP'#Cc'#CcO#kQ[O'#CfO$_QXO'#CaO$fQ[O'#ChO$qQ[O'#DPO$vQ[O'#DTOOQP'#Ej'#EjO${QdO'#DeO%gQ[O'#DrO${QdO'#DtO%xQ[O'#DvO&TQ[O'#DyO&]Q[O'#EPO&kQ[O'#EROOQS'#Ei'#EiOOQS'#EU'#EUQYQ[OOO&rQXO'#CdO'gQWO'#DaO'lQWO'#EpO'wQ[O'#EpQOQWOOP(RO#tO'#C_POOO)C@X)C@XOOQP'#Cg'#CgOOQP,59Q,59QO#kQ[O,59QO(^Q[O'#EXO(xQWO,58{O)QQ[O,59SO$qQ[O,59kO$vQ[O,59oO(^Q[O,59sO(^Q[O,59uO(^Q[O,59vO)]Q[O'#D`OOQS,58{,58{OOQP'#Ck'#CkOOQO'#C}'#C}OOQP,59S,59SO)dQWO,59SO)iQWO,59SOOQP'#DR'#DROOQP,59k,59kOOQO'#DV'#DVO)nQ`O,59oOOQS'#Cp'#CpO${QdO'#CqO)vQvO'#CsO+TQtO,5:POOQO'#Cx'#CxO)iQWO'#CwO+iQWO'#CyOOQS'#Em'#EmOOQO'#Dh'#DhO+nQ[O'#DoO+|QWO'#EqO&]Q[O'#DmO,[QWO'#DpOOQO'#Er'#ErO({QWO,5:^O,aQpO,5:`OOQS'#Dx'#DxO,iQWO,5:bO,nQ[O,5:bOOQO'#D{'#D{O,vQWO,5:eO,{QWO,5:kO-TQWO,5:mOOQS-E8S-E8SO${QdO,59{O-]Q[O'#EZO-jQWO,5;[O-jQWO,5;[POOO'#ET'#ETP-uO#tO,58yPOOO,58y,58yOOQP1G.l1G.lO.lQXO,5:sOOQO-E8V-E8VOOQS1G.g1G.gOOQP1G.n1G.nO)dQWO1G.nO)iQWO1G.nOOQP1G/V1G/VO.yQ`O1G/ZO/dQXO1G/_O/zQXO1G/aO0bQXO1G/bO0xQWO,59zO0}Q[O'#DOO1UQdO'#CoOOQP1G/Z1G/ZO${QdO1G/ZO1]QpO,59]OOQS,59_,59_O${QdO,59aO1eQWO1G/kOOQS,59c,59cO1jQ!bO,59eO1rQWO'#DhO1}QWO,5:TO2SQWO,5:ZO&]Q[O,5:VO&]Q[O'#E[O2[QWO,5;]O2gQWO,5:XO(^Q[O,5:[OOQS1G/x1G/xOOQS1G/z1G/zOOQS1G/|1G/|O2xQWO1G/|O2}QdO'#D|OOQS1G0P1G0POOQS1G0V1G0VOOQS1G0X1G0XO3YQtO1G/gOOQO,5:u,5:uO3pQ[O,5:uOOQO-E8X-E8XO3}QWO1G0vPOOO-E8R-E8RPOOO1G.e1G.eOOQP7+$Y7+$YOOQP7+$u7+$uO${QdO7+$uOOQS1G/f1G/fO4YQXO'#EoO4aQWO,59jO4fQtO'#EVO5ZQdO'#ElO5eQWO,59ZO5jQpO7+$uOOQS1G.w1G.wOOQS1G.{1G.{OOQS7+%V7+%VO5rQWO1G/PO${QdO1G/oOOQO1G/u1G/uOOQO1G/q1G/qO5wQWO,5:vOOQO-E8Y-E8YO6VQXO1G/vOOQS7+%h7+%hO6^QYO'#CsOOQO'#EO'#EOO6iQ`O'#D}OOQO'#D}'#D}O6tQWO'#E]O6|QdO,5:hOOQS,5:h,5:hO7XQtO'#EYO${QdO'#EYO8VQdO7+%ROOQO7+%R7+%ROOQO1G0a1G0aO8jQpO<<HaO8rQWO,5;ZOOQP1G/U1G/UOOQS-E8T-E8TO${QdO'#EWO8zQWO,5;WOOQT1G.u1G.uOOQP<<Ha<<HaOOQS7+$k7+$kO9SQdO7+%ZOOQO7+%b7+%bOOQO,5:i,5:iO3QQdO'#E^O6tQWO,5:wOOQS,5:w,5:wOOQS-E8Z-E8ZOOQS1G0S1G0SO9ZQtO,5:tOOQS-E8W-E8WOOQO<<Hm<<HmOOQPAN={AN={O:XQdO,5:rOOQO-E8U-E8UOOQO<<Hu<<HuOOQO,5:x,5:xOOQO-E8[-E8[OOQS1G0c1G0c",
    stateData:
      ':k~O#WOS#XQQ~OUYOXYO]VO^VOtWOxXO!YaO!ZZO!g[O!i]O!k^O!n_O!t`O#URO#_TO~OQfOUYOXYO]VO^VOtWOxXO!YaO!ZZO!g[O!i]O!k^O!n_O!t`O#UeO#_TO~O#R#dP~P!ZO#XjO~O#UlO~O]qO^qOpoOtrOxsO|tO!PvO#SuO#_nO~O!RwO~P#pO`}O#TzO#UyO~O#U!OO~O#U!QO~OQ!ZOb!TOf!ZOh!ZOn!YO#T!WO#U!SO#b!UO~Ob!]O!b!_O!e!`O#U![O!R#eP~Oh!eOn!YO#U!dO~Oh!gO#U!gO~Ob!]O!b!_O!e!`O#U![O~O!W#eP~P%gO]WX]!UX^WXpWXtWXxWX|WX!PWX!RWX#SWX#_WX~O]!lO~O!W!mO#R#dX!Q#dX~O#R#dX!Q#dX~P!ZO#Y!pO#Z!pO#[!rO~OUYOXYO]VO^VOtWOxXO#URO#_TO~OpoO!RwO~O`!yO#TzO#UyO~O!Q#dP~P!ZOb#QO~Ob#RO~Ov#SOz#TO~OP#VObgXjgX!WgX!bgX!egX#UgXagXQgXfgXhgXngXpgX!VgX#RgX#TgX#bgXvgX!QgX~Ob!]Oj#WO!b!_O!e!`O#U![O!W#eP~Ob#ZO~Ob!]O!b!_O!e!`O#U#[O~Op#`O!`#_O!R#eX!W#eX~Ob#cO~Oj#WO!W#eO~O!W#fO~Oh#gOn!YO~O!R#hO~O!RwO!`#_O~O!RwO!W#kO~O!W!}X#R!}X!Q!}X~P!ZO!W!mO#R#da!Q#da~O#Y!pO#Z!pO#[#rO~O]qO^qOtrOxsO|tO!PvO#SuO#_nO~Op!{a!R!{aa!{a~P.QOv#tOz#uO~O]qO^qOtrOxsO#_nO~Op{i|{i!P{i!R{i#S{ia{i~P/ROp}i|}i!P}i!R}i#S}ia}i~P/ROp!Oi|!Oi!P!Oi!R!Oi#S!Oia!Oi~P/RO!Q#vO~Oa#cP~P(^Oa#`P~P${Oa#}Oj#WO~O!W$PO~Oh$QOo$QO~O]!^Xa![X!`![X~O]$RO~Oa$SO!`#_O~Op#`O!R#ea!W#ea~O!`#_Op!aa!R!aa!W!aaa!aa~O!W$XO~O!Q$`O#U$ZO#b$YO~Oj#WOp$bO!V$dO!W!Ti#R!Ti!Q!Ti~P${O!W!}a#R!}a!Q!}a~P!ZO!W!mO#R#di!Q#di~Oa#cX~P#pOa$hO~Oj#WOQ!yXa!yXb!yXf!yXh!yXn!yXp!yX#T!yX#U!yX#b!yX~Op$jOa#`X~P${Oa$lO~Oj#WOv$mO~Oa$nO~O!`#_Op#Oa!R#Oa!W#Oa~Oa$pO~P.QOP#VOpgX!RgX~O#b$YOp!qX!R!qX~Op$rO!RwO~O!Q$vO#U$ZO#b$YO~Oj#WOQ!|Xb!|Xf!|Xh!|Xn!|Xp!|X!V!|X!W!|X#R!|X#T!|X#U!|X#b!|X!Q!|X~Op$bO!V$yO!W!Tq#R!Tq!Q!Tq~P${Oj#WOv$zO~OpoOa#ca~Op$jOa#`a~Oa$}O~P${Oj#WOQ!|ab!|af!|ah!|an!|ap!|a!V!|a!W!|a#R!|a#T!|a#U!|a#b!|a!Q!|a~Oa!zap!za~P${O#Wo#X#bj!P#b~',
    goto: "-Y#gPPP#hP#kP#t$TP#t$d#tPP$jPPP$p$y$yP%]P$yP$y%w&ZPPP&s&y#tP'PP#tP'VP#tP#t#tPPP']'r(PPP#kPP(W(W(b(WP(WP(W(WP#kP#kP#kP(e#kP(h(k(n(u#kP#kP(z)Q)a)o)u*P*V*a*g*mPPPPPPPPPP*s*|P+i+lP,b,e,k,tRkQ_bOPdhw!m#nkYOPdhotuvw!m#Q#c#nkSOPdhotuvw!m#Q#c#nQmTR!snQ{VR!wqQ!w}Q#Y!XR#s!yq!ZZ]!T!l#R#T#W#l#u#z$R$b$c$j$o${p!ZZ]!T!l#R#T#W#l#u#z$R$b$c$j$o${U$]#h$_$rR$q$[q!XZ]!T!l#R#T#W#l#u#z$R$b$c$j$o${p!ZZ]!T!l#R#T#W#l#u#z$R$b$c$j$o${Q!e^R#g!fQ|VR!xqQ!w|R#s!xQ!PWR!zrQ!RXR!{sQxUQ!vpQ#d!bQ#j!iQ#k!jQ$t$^R%Q$sSgPwQ!ohQ#m!mR$e#nZfPhw!m#na!a[`a!V!]!_#_#`R#]!]R!f^R!h_R#i!hS$^#h$_R%O$rV$[#h$_$rQ!qjR#q!qQdOShPwU!kdh#nR#n!mQ#z#RU$i#z$o${Q$o$RR${$jQ$k#zR$|$kQpUS!up$gR$g#wQ$c#lR$x$cQ!ngS#o!n#pR#p!oQ#a!^R$V#aQ$_#hR$u$_Q$s$^R%P$s_cOPdhw!m#n^UOPdhw!m#nQ!toQ!|tQ!}uQ#OvQ#w#QR$W#cR#{#RQ!VZQ!c]Q#U!TQ#l!l[#y#R#z$R$j$o${Q#|#TQ$O#WS$a#l$cQ$f#uR$w$bR#x#QQiPR#PwQ!b[Q!jaR#X!VU!^[a!VQ!i`Q#^!]Q#b!_Q$T#_R$U#`",
    nodeNames:
      '⚠ Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent , PseudoClassName ArgList IdSelector # IdName ] AttributeSelector [ AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList KeyframeSelector KeyframeRangeName SupportsStatement supports AtRule Styles',
    maxTerm: 114,
    nodeProps: [
      ['openedBy', 17, '(', 48, '{'],
      ['closedBy', 18, ')', 49, '}']
    ],
    propSources: [WD],
    skippedNodes: [0, 3, 85],
    repeatNodeCount: 10,
    tokenData:
      "J^~R!^OX$}X^%u^p$}pq%uqr)Xrs.Rst/utu6duv$}vw7^wx7oxy9^yz9oz{9t{|:_|}?Q}!O?c!O!P@Q!P!Q@i!Q![Ab![!]B]!]!^CX!^!_$}!_!`Cj!`!aC{!a!b$}!b!cDw!c!}$}!}#OFa#O#P$}#P#QFr#Q#R6d#R#T$}#T#UGT#U#c$}#c#dHf#d#o$}#o#pH{#p#q6d#q#rI^#r#sIo#s#y$}#y#z%u#z$f$}$f$g%u$g#BY$}#BY#BZ%u#BZ$IS$}$IS$I_%u$I_$I|$}$I|$JO%u$JO$JT$}$JT$JU%u$JU$KV$}$KV$KW%u$KW&FU$}&FU&FV%u&FV;'S$};'S;=`JW<%lO$}`%QSOy%^z;'S%^;'S;=`%o<%lO%^`%cSo`Oy%^z;'S%^;'S;=`%o<%lO%^`%rP;=`<%l%^~%zh#W~OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^~'mh#W~o`OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^l)[UOy%^z#]%^#]#^)n#^;'S%^;'S;=`%o<%lO%^l)sUo`Oy%^z#a%^#a#b*V#b;'S%^;'S;=`%o<%lO%^l*[Uo`Oy%^z#d%^#d#e*n#e;'S%^;'S;=`%o<%lO%^l*sUo`Oy%^z#c%^#c#d+V#d;'S%^;'S;=`%o<%lO%^l+[Uo`Oy%^z#f%^#f#g+n#g;'S%^;'S;=`%o<%lO%^l+sUo`Oy%^z#h%^#h#i,V#i;'S%^;'S;=`%o<%lO%^l,[Uo`Oy%^z#T%^#T#U,n#U;'S%^;'S;=`%o<%lO%^l,sUo`Oy%^z#b%^#b#c-V#c;'S%^;'S;=`%o<%lO%^l-[Uo`Oy%^z#h%^#h#i-n#i;'S%^;'S;=`%o<%lO%^l-uS!V[o`Oy%^z;'S%^;'S;=`%o<%lO%^~.UWOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o<%lO.R~.sOh~~.vRO;'S.R;'S;=`/P;=`O.R~/SXOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o;=`<%l.R<%lO.R~/rP;=`<%l.Rn/zYtQOy%^z!Q%^!Q![0j![!c%^!c!i0j!i#T%^#T#Z0j#Z;'S%^;'S;=`%o<%lO%^l0oYo`Oy%^z!Q%^!Q![1_![!c%^!c!i1_!i#T%^#T#Z1_#Z;'S%^;'S;=`%o<%lO%^l1dYo`Oy%^z!Q%^!Q![2S![!c%^!c!i2S!i#T%^#T#Z2S#Z;'S%^;'S;=`%o<%lO%^l2ZYf[o`Oy%^z!Q%^!Q![2y![!c%^!c!i2y!i#T%^#T#Z2y#Z;'S%^;'S;=`%o<%lO%^l3QYf[o`Oy%^z!Q%^!Q![3p![!c%^!c!i3p!i#T%^#T#Z3p#Z;'S%^;'S;=`%o<%lO%^l3uYo`Oy%^z!Q%^!Q![4e![!c%^!c!i4e!i#T%^#T#Z4e#Z;'S%^;'S;=`%o<%lO%^l4lYf[o`Oy%^z!Q%^!Q![5[![!c%^!c!i5[!i#T%^#T#Z5[#Z;'S%^;'S;=`%o<%lO%^l5aYo`Oy%^z!Q%^!Q![6P![!c%^!c!i6P!i#T%^#T#Z6P#Z;'S%^;'S;=`%o<%lO%^l6WSf[o`Oy%^z;'S%^;'S;=`%o<%lO%^d6gUOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^d7QSzSo`Oy%^z;'S%^;'S;=`%o<%lO%^b7cSXQOy%^z;'S%^;'S;=`%o<%lO%^~7rWOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W<%lO7o~8_RO;'S7o;'S;=`8h;=`O7o~8kXOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W;=`<%l7o<%lO7o~9ZP;=`<%l7on9cSb^Oy%^z;'S%^;'S;=`%o<%lO%^~9tOa~n9{UUQjWOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^n:fWjW!PQOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^l;TUo`Oy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^l;nYo`#b[Oy%^z!Q%^!Q![;g![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^l<cYo`Oy%^z{%^{|=R|}%^}!O=R!O!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=WUo`Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l=qUo`#b[Oy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^l>[[o`#b[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^n?VSp^Oy%^z;'S%^;'S;=`%o<%lO%^l?hWjWOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^n@VU#_QOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^~@nTjWOy%^z{@}{;'S%^;'S;=`%o<%lO%^~AUSo`#X~Oy%^z;'S%^;'S;=`%o<%lO%^lAg[#b[Oy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^bBbU]QOy%^z![%^![!]Bt!];'S%^;'S;=`%o<%lO%^bB{S^Qo`Oy%^z;'S%^;'S;=`%o<%lO%^nC^S!W^Oy%^z;'S%^;'S;=`%o<%lO%^dCoSzSOy%^z;'S%^;'S;=`%o<%lO%^bDQU|QOy%^z!`%^!`!aDd!a;'S%^;'S;=`%o<%lO%^bDkS|Qo`Oy%^z;'S%^;'S;=`%o<%lO%^bDzWOy%^z!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^bEk[!YQo`Oy%^z}%^}!OEd!O!Q%^!Q![Ed![!c%^!c!}Ed!}#T%^#T#oEd#o;'S%^;'S;=`%o<%lO%^bFfSxQOy%^z;'S%^;'S;=`%o<%lO%^lFwSv[Oy%^z;'S%^;'S;=`%o<%lO%^bGWUOy%^z#b%^#b#cGj#c;'S%^;'S;=`%o<%lO%^bGoUo`Oy%^z#W%^#W#XHR#X;'S%^;'S;=`%o<%lO%^bHYS!`Qo`Oy%^z;'S%^;'S;=`%o<%lO%^bHiUOy%^z#f%^#f#gHR#g;'S%^;'S;=`%o<%lO%^fIQS!RUOy%^z;'S%^;'S;=`%o<%lO%^nIcS!Q^Oy%^z;'S%^;'S;=`%o<%lO%^fItU!PQOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^`JZP;=`<%l$}",
    tokenizers: [
      MD,
      VD,
      ND,
      1,
      2,
      3,
      4,
      new Ha('m~RRYZ[z{a~~g~aO#Z~~dP!P!Qg~lO#[~~', 28, 102)
    ],
    topRules: { StyleSheet: [0, 4], Styles: [1, 84] },
    specialized: [
      { term: 97, get: (n) => jD[n] || -1 },
      { term: 56, get: (n) => BD[n] || -1 },
      { term: 98, get: (n) => LD[n] || -1 }
    ],
    tokenPrec: 1169
  })
let Zc = null
function Ac() {
  if (!Zc && typeof document == 'object' && document.body) {
    let { style: n } = document.body,
      e = [],
      t = /* @__PURE__ */ new Set()
    for (let i in n)
      i != 'cssText' &&
        i != 'cssFloat' &&
        typeof n[i] == 'string' &&
        (/[A-Z]/.test(i) &&
          (i = i.replace(/[A-Z]/g, (r) => '-' + r.toLowerCase())),
        t.has(i) || (e.push(i), t.add(i)))
    Zc = e.sort().map((i) => ({ type: 'property', label: i }))
  }
  return Zc || []
}
const mg = /* @__PURE__ */ [
    'active',
    'after',
    'any-link',
    'autofill',
    'backdrop',
    'before',
    'checked',
    'cue',
    'default',
    'defined',
    'disabled',
    'empty',
    'enabled',
    'file-selector-button',
    'first',
    'first-child',
    'first-letter',
    'first-line',
    'first-of-type',
    'focus',
    'focus-visible',
    'focus-within',
    'fullscreen',
    'has',
    'host',
    'host-context',
    'hover',
    'in-range',
    'indeterminate',
    'invalid',
    'is',
    'lang',
    'last-child',
    'last-of-type',
    'left',
    'link',
    'marker',
    'modal',
    'not',
    'nth-child',
    'nth-last-child',
    'nth-last-of-type',
    'nth-of-type',
    'only-child',
    'only-of-type',
    'optional',
    'out-of-range',
    'part',
    'placeholder',
    'placeholder-shown',
    'read-only',
    'read-write',
    'required',
    'right',
    'root',
    'scope',
    'selection',
    'slotted',
    'target',
    'target-text',
    'valid',
    'visited',
    'where'
  ].map((n) => ({ type: 'class', label: n })),
  yg = /* @__PURE__ */ [
    'above',
    'absolute',
    'activeborder',
    'additive',
    'activecaption',
    'after-white-space',
    'ahead',
    'alias',
    'all',
    'all-scroll',
    'alphabetic',
    'alternate',
    'always',
    'antialiased',
    'appworkspace',
    'asterisks',
    'attr',
    'auto',
    'auto-flow',
    'avoid',
    'avoid-column',
    'avoid-page',
    'avoid-region',
    'axis-pan',
    'background',
    'backwards',
    'baseline',
    'below',
    'bidi-override',
    'blink',
    'block',
    'block-axis',
    'bold',
    'bolder',
    'border',
    'border-box',
    'both',
    'bottom',
    'break',
    'break-all',
    'break-word',
    'bullets',
    'button',
    'button-bevel',
    'buttonface',
    'buttonhighlight',
    'buttonshadow',
    'buttontext',
    'calc',
    'capitalize',
    'caps-lock-indicator',
    'caption',
    'captiontext',
    'caret',
    'cell',
    'center',
    'checkbox',
    'circle',
    'cjk-decimal',
    'clear',
    'clip',
    'close-quote',
    'col-resize',
    'collapse',
    'color',
    'color-burn',
    'color-dodge',
    'column',
    'column-reverse',
    'compact',
    'condensed',
    'contain',
    'content',
    'contents',
    'content-box',
    'context-menu',
    'continuous',
    'copy',
    'counter',
    'counters',
    'cover',
    'crop',
    'cross',
    'crosshair',
    'currentcolor',
    'cursive',
    'cyclic',
    'darken',
    'dashed',
    'decimal',
    'decimal-leading-zero',
    'default',
    'default-button',
    'dense',
    'destination-atop',
    'destination-in',
    'destination-out',
    'destination-over',
    'difference',
    'disc',
    'discard',
    'disclosure-closed',
    'disclosure-open',
    'document',
    'dot-dash',
    'dot-dot-dash',
    'dotted',
    'double',
    'down',
    'e-resize',
    'ease',
    'ease-in',
    'ease-in-out',
    'ease-out',
    'element',
    'ellipse',
    'ellipsis',
    'embed',
    'end',
    'ethiopic-abegede-gez',
    'ethiopic-halehame-aa-er',
    'ethiopic-halehame-gez',
    'ew-resize',
    'exclusion',
    'expanded',
    'extends',
    'extra-condensed',
    'extra-expanded',
    'fantasy',
    'fast',
    'fill',
    'fill-box',
    'fixed',
    'flat',
    'flex',
    'flex-end',
    'flex-start',
    'footnotes',
    'forwards',
    'from',
    'geometricPrecision',
    'graytext',
    'grid',
    'groove',
    'hand',
    'hard-light',
    'help',
    'hidden',
    'hide',
    'higher',
    'highlight',
    'highlighttext',
    'horizontal',
    'hsl',
    'hsla',
    'hue',
    'icon',
    'ignore',
    'inactiveborder',
    'inactivecaption',
    'inactivecaptiontext',
    'infinite',
    'infobackground',
    'infotext',
    'inherit',
    'initial',
    'inline',
    'inline-axis',
    'inline-block',
    'inline-flex',
    'inline-grid',
    'inline-table',
    'inset',
    'inside',
    'intrinsic',
    'invert',
    'italic',
    'justify',
    'keep-all',
    'landscape',
    'large',
    'larger',
    'left',
    'level',
    'lighter',
    'lighten',
    'line-through',
    'linear',
    'linear-gradient',
    'lines',
    'list-item',
    'listbox',
    'listitem',
    'local',
    'logical',
    'loud',
    'lower',
    'lower-hexadecimal',
    'lower-latin',
    'lower-norwegian',
    'lowercase',
    'ltr',
    'luminosity',
    'manipulation',
    'match',
    'matrix',
    'matrix3d',
    'medium',
    'menu',
    'menutext',
    'message-box',
    'middle',
    'min-intrinsic',
    'mix',
    'monospace',
    'move',
    'multiple',
    'multiple_mask_images',
    'multiply',
    'n-resize',
    'narrower',
    'ne-resize',
    'nesw-resize',
    'no-close-quote',
    'no-drop',
    'no-open-quote',
    'no-repeat',
    'none',
    'normal',
    'not-allowed',
    'nowrap',
    'ns-resize',
    'numbers',
    'numeric',
    'nw-resize',
    'nwse-resize',
    'oblique',
    'opacity',
    'open-quote',
    'optimizeLegibility',
    'optimizeSpeed',
    'outset',
    'outside',
    'outside-shape',
    'overlay',
    'overline',
    'padding',
    'padding-box',
    'painted',
    'page',
    'paused',
    'perspective',
    'pinch-zoom',
    'plus-darker',
    'plus-lighter',
    'pointer',
    'polygon',
    'portrait',
    'pre',
    'pre-line',
    'pre-wrap',
    'preserve-3d',
    'progress',
    'push-button',
    'radial-gradient',
    'radio',
    'read-only',
    'read-write',
    'read-write-plaintext-only',
    'rectangle',
    'region',
    'relative',
    'repeat',
    'repeating-linear-gradient',
    'repeating-radial-gradient',
    'repeat-x',
    'repeat-y',
    'reset',
    'reverse',
    'rgb',
    'rgba',
    'ridge',
    'right',
    'rotate',
    'rotate3d',
    'rotateX',
    'rotateY',
    'rotateZ',
    'round',
    'row',
    'row-resize',
    'row-reverse',
    'rtl',
    'run-in',
    'running',
    's-resize',
    'sans-serif',
    'saturation',
    'scale',
    'scale3d',
    'scaleX',
    'scaleY',
    'scaleZ',
    'screen',
    'scroll',
    'scrollbar',
    'scroll-position',
    'se-resize',
    'self-start',
    'self-end',
    'semi-condensed',
    'semi-expanded',
    'separate',
    'serif',
    'show',
    'single',
    'skew',
    'skewX',
    'skewY',
    'skip-white-space',
    'slide',
    'slider-horizontal',
    'slider-vertical',
    'sliderthumb-horizontal',
    'sliderthumb-vertical',
    'slow',
    'small',
    'small-caps',
    'small-caption',
    'smaller',
    'soft-light',
    'solid',
    'source-atop',
    'source-in',
    'source-out',
    'source-over',
    'space',
    'space-around',
    'space-between',
    'space-evenly',
    'spell-out',
    'square',
    'start',
    'static',
    'status-bar',
    'stretch',
    'stroke',
    'stroke-box',
    'sub',
    'subpixel-antialiased',
    'svg_masks',
    'super',
    'sw-resize',
    'symbolic',
    'symbols',
    'system-ui',
    'table',
    'table-caption',
    'table-cell',
    'table-column',
    'table-column-group',
    'table-footer-group',
    'table-header-group',
    'table-row',
    'table-row-group',
    'text',
    'text-bottom',
    'text-top',
    'textarea',
    'textfield',
    'thick',
    'thin',
    'threeddarkshadow',
    'threedface',
    'threedhighlight',
    'threedlightshadow',
    'threedshadow',
    'to',
    'top',
    'transform',
    'translate',
    'translate3d',
    'translateX',
    'translateY',
    'translateZ',
    'transparent',
    'ultra-condensed',
    'ultra-expanded',
    'underline',
    'unidirectional-pan',
    'unset',
    'up',
    'upper-latin',
    'uppercase',
    'url',
    'var',
    'vertical',
    'vertical-text',
    'view-box',
    'visible',
    'visibleFill',
    'visiblePainted',
    'visibleStroke',
    'visual',
    'w-resize',
    'wait',
    'wave',
    'wider',
    'window',
    'windowframe',
    'windowtext',
    'words',
    'wrap',
    'wrap-reverse',
    'x-large',
    'x-small',
    'xor',
    'xx-large',
    'xx-small'
  ]
    .map((n) => ({ type: 'keyword', label: n }))
    .concat(
      /* @__PURE__ */ [
        'aliceblue',
        'antiquewhite',
        'aqua',
        'aquamarine',
        'azure',
        'beige',
        'bisque',
        'black',
        'blanchedalmond',
        'blue',
        'blueviolet',
        'brown',
        'burlywood',
        'cadetblue',
        'chartreuse',
        'chocolate',
        'coral',
        'cornflowerblue',
        'cornsilk',
        'crimson',
        'cyan',
        'darkblue',
        'darkcyan',
        'darkgoldenrod',
        'darkgray',
        'darkgreen',
        'darkkhaki',
        'darkmagenta',
        'darkolivegreen',
        'darkorange',
        'darkorchid',
        'darkred',
        'darksalmon',
        'darkseagreen',
        'darkslateblue',
        'darkslategray',
        'darkturquoise',
        'darkviolet',
        'deeppink',
        'deepskyblue',
        'dimgray',
        'dodgerblue',
        'firebrick',
        'floralwhite',
        'forestgreen',
        'fuchsia',
        'gainsboro',
        'ghostwhite',
        'gold',
        'goldenrod',
        'gray',
        'grey',
        'green',
        'greenyellow',
        'honeydew',
        'hotpink',
        'indianred',
        'indigo',
        'ivory',
        'khaki',
        'lavender',
        'lavenderblush',
        'lawngreen',
        'lemonchiffon',
        'lightblue',
        'lightcoral',
        'lightcyan',
        'lightgoldenrodyellow',
        'lightgray',
        'lightgreen',
        'lightpink',
        'lightsalmon',
        'lightseagreen',
        'lightskyblue',
        'lightslategray',
        'lightsteelblue',
        'lightyellow',
        'lime',
        'limegreen',
        'linen',
        'magenta',
        'maroon',
        'mediumaquamarine',
        'mediumblue',
        'mediumorchid',
        'mediumpurple',
        'mediumseagreen',
        'mediumslateblue',
        'mediumspringgreen',
        'mediumturquoise',
        'mediumvioletred',
        'midnightblue',
        'mintcream',
        'mistyrose',
        'moccasin',
        'navajowhite',
        'navy',
        'oldlace',
        'olive',
        'olivedrab',
        'orange',
        'orangered',
        'orchid',
        'palegoldenrod',
        'palegreen',
        'paleturquoise',
        'palevioletred',
        'papayawhip',
        'peachpuff',
        'peru',
        'pink',
        'plum',
        'powderblue',
        'purple',
        'rebeccapurple',
        'red',
        'rosybrown',
        'royalblue',
        'saddlebrown',
        'salmon',
        'sandybrown',
        'seagreen',
        'seashell',
        'sienna',
        'silver',
        'skyblue',
        'slateblue',
        'slategray',
        'snow',
        'springgreen',
        'steelblue',
        'tan',
        'teal',
        'thistle',
        'tomato',
        'turquoise',
        'violet',
        'wheat',
        'white',
        'whitesmoke',
        'yellow',
        'yellowgreen'
      ].map((n) => ({ type: 'constant', label: n }))
    ),
  qD = /* @__PURE__ */ [
    'a',
    'abbr',
    'address',
    'article',
    'aside',
    'b',
    'bdi',
    'bdo',
    'blockquote',
    'body',
    'br',
    'button',
    'canvas',
    'caption',
    'cite',
    'code',
    'col',
    'colgroup',
    'dd',
    'del',
    'details',
    'dfn',
    'dialog',
    'div',
    'dl',
    'dt',
    'em',
    'figcaption',
    'figure',
    'footer',
    'form',
    'header',
    'hgroup',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'hr',
    'html',
    'i',
    'iframe',
    'img',
    'input',
    'ins',
    'kbd',
    'label',
    'legend',
    'li',
    'main',
    'meter',
    'nav',
    'ol',
    'output',
    'p',
    'pre',
    'ruby',
    'section',
    'select',
    'small',
    'source',
    'span',
    'strong',
    'sub',
    'summary',
    'sup',
    'table',
    'tbody',
    'td',
    'template',
    'textarea',
    'tfoot',
    'th',
    'thead',
    'tr',
    'u',
    'ul'
  ].map((n) => ({ type: 'type', label: n })),
  An = /^(\w[\w-]*|-\w[\w-]*|)$/,
  zD = /^-(-[\w-]*)?$/
function FD(n, e) {
  var t
  if (
    ((n.name == '(' || n.type.isError) && (n = n.parent || n),
    n.name != 'ArgList')
  )
    return !1
  let i = (t = n.parent) === null || t === void 0 ? void 0 : t.firstChild
  return (i == null ? void 0 : i.name) != 'Callee'
    ? !1
    : e.sliceString(i.from, i.to) == 'var'
}
const bg = /* @__PURE__ */ new Cb(),
  GD = ['Declaration']
function HD(n) {
  for (let e = n; ; ) {
    if (e.type.isTop) return e
    if (!(e = e.parent)) return n
  }
}
function _S(n, e, t) {
  if (e.to - e.from > 4096) {
    let i = bg.get(e)
    if (i) return i
    let r = [],
      s = /* @__PURE__ */ new Set(),
      o = e.cursor(me.IncludeAnonymous)
    if (o.firstChild())
      do
        for (let a of _S(n, o.node, t))
          s.has(a.label) || (s.add(a.label), r.push(a))
      while (o.nextSibling())
    return bg.set(e, r), r
  } else {
    let i = [],
      r = /* @__PURE__ */ new Set()
    return (
      e.cursor().iterate((s) => {
        var o
        if (
          t(s) &&
          s.matchContext(GD) &&
          ((o = s.node.nextSibling) === null || o === void 0
            ? void 0
            : o.name) == ':'
        ) {
          let a = n.sliceString(s.from, s.to)
          r.has(a) || (r.add(a), i.push({ label: a, type: 'variable' }))
        }
      }),
      i
    )
  }
}
const KD = (n) => (e) => {
    let { state: t, pos: i } = e,
      r = Ze(t).resolveInner(i, -1),
      s =
        r.type.isError &&
        r.from == r.to - 1 &&
        t.doc.sliceString(r.from, r.to) == '-'
    if (
      r.name == 'PropertyName' ||
      ((s || r.name == 'TagName') &&
        /^(Block|Styles)$/.test(r.resolve(r.to).name))
    )
      return { from: r.from, options: Ac(), validFor: An }
    if (r.name == 'ValueName')
      return { from: r.from, options: yg, validFor: An }
    if (r.name == 'PseudoClassName')
      return { from: r.from, options: mg, validFor: An }
    if (n(r) || ((e.explicit || s) && FD(r, t.doc)))
      return {
        from: n(r) || s ? r.from : i,
        options: _S(t.doc, HD(r), n),
        validFor: zD
      }
    if (r.name == 'TagName') {
      for (let { parent: l } = r; l; l = l.parent)
        if (l.name == 'Block')
          return { from: r.from, options: Ac(), validFor: An }
      return { from: r.from, options: qD, validFor: An }
    }
    if (!e.explicit) return null
    let o = r.resolve(i),
      a = o.childBefore(i)
    return a && a.name == ':' && o.name == 'PseudoClassSelector'
      ? { from: i, options: mg, validFor: An }
      : (a && a.name == ':' && o.name == 'Declaration') || o.name == 'ArgList'
        ? { from: i, options: yg, validFor: An }
        : o.name == 'Block' || o.name == 'Styles'
          ? { from: i, options: Ac(), validFor: An }
          : null
  },
  JD = /* @__PURE__ */ KD((n) => n.name == 'VariableName'),
  tl = /* @__PURE__ */ ir.define({
    name: 'css',
    parser: /* @__PURE__ */ UD.configure({
      props: [
        /* @__PURE__ */ kl.add({
          Declaration: /* @__PURE__ */ zo()
        }),
        /* @__PURE__ */ Tl.add({
          'Block KeyframeList': Yb
        })
      ]
    }),
    languageData: {
      commentTokens: { block: { open: '/*', close: '*/' } },
      indentOnInput: /^\s*\}$/,
      wordChars: '-'
    }
  })
function eX() {
  return new Kf(tl, tl.data.of({ autocomplete: JD }))
}
const Dr = ['_blank', '_self', '_top', '_parent'],
  Rc = ['ascii', 'utf-8', 'utf-16', 'latin1', 'latin1'],
  Ec = ['get', 'post', 'put', 'delete'],
  Dc = [
    'application/x-www-form-urlencoded',
    'multipart/form-data',
    'text/plain'
  ],
  gt = ['true', 'false'],
  H = {},
  tX = {
    a: {
      attrs: {
        href: null,
        ping: null,
        type: null,
        media: null,
        target: Dr,
        hreflang: null
      }
    },
    abbr: H,
    address: H,
    area: {
      attrs: {
        alt: null,
        coords: null,
        href: null,
        target: null,
        ping: null,
        media: null,
        hreflang: null,
        type: null,
        shape: ['default', 'rect', 'circle', 'poly']
      }
    },
    article: H,
    aside: H,
    audio: {
      attrs: {
        src: null,
        mediagroup: null,
        crossorigin: ['anonymous', 'use-credentials'],
        preload: ['none', 'metadata', 'auto'],
        autoplay: ['autoplay'],
        loop: ['loop'],
        controls: ['controls']
      }
    },
    b: H,
    base: { attrs: { href: null, target: Dr } },
    bdi: H,
    bdo: H,
    blockquote: { attrs: { cite: null } },
    body: H,
    br: H,
    button: {
      attrs: {
        form: null,
        formaction: null,
        name: null,
        value: null,
        autofocus: ['autofocus'],
        disabled: ['autofocus'],
        formenctype: Dc,
        formmethod: Ec,
        formnovalidate: ['novalidate'],
        formtarget: Dr,
        type: ['submit', 'reset', 'button']
      }
    },
    canvas: { attrs: { width: null, height: null } },
    caption: H,
    center: H,
    cite: H,
    code: H,
    col: { attrs: { span: null } },
    colgroup: { attrs: { span: null } },
    command: {
      attrs: {
        type: ['command', 'checkbox', 'radio'],
        label: null,
        icon: null,
        radiogroup: null,
        command: null,
        title: null,
        disabled: ['disabled'],
        checked: ['checked']
      }
    },
    data: { attrs: { value: null } },
    datagrid: { attrs: { disabled: ['disabled'], multiple: ['multiple'] } },
    datalist: { attrs: { data: null } },
    dd: H,
    del: { attrs: { cite: null, datetime: null } },
    details: { attrs: { open: ['open'] } },
    dfn: H,
    div: H,
    dl: H,
    dt: H,
    em: H,
    embed: { attrs: { src: null, type: null, width: null, height: null } },
    eventsource: { attrs: { src: null } },
    fieldset: { attrs: { disabled: ['disabled'], form: null, name: null } },
    figcaption: H,
    figure: H,
    footer: H,
    form: {
      attrs: {
        action: null,
        name: null,
        'accept-charset': Rc,
        autocomplete: ['on', 'off'],
        enctype: Dc,
        method: Ec,
        novalidate: ['novalidate'],
        target: Dr
      }
    },
    h1: H,
    h2: H,
    h3: H,
    h4: H,
    h5: H,
    h6: H,
    head: {
      children: [
        'title',
        'base',
        'link',
        'style',
        'meta',
        'script',
        'noscript',
        'command'
      ]
    },
    header: H,
    hgroup: H,
    hr: H,
    html: {
      attrs: { manifest: null }
    },
    i: H,
    iframe: {
      attrs: {
        src: null,
        srcdoc: null,
        name: null,
        width: null,
        height: null,
        sandbox: [
          'allow-top-navigation',
          'allow-same-origin',
          'allow-forms',
          'allow-scripts'
        ],
        seamless: ['seamless']
      }
    },
    img: {
      attrs: {
        alt: null,
        src: null,
        ismap: null,
        usemap: null,
        width: null,
        height: null,
        crossorigin: ['anonymous', 'use-credentials']
      }
    },
    input: {
      attrs: {
        alt: null,
        dirname: null,
        form: null,
        formaction: null,
        height: null,
        list: null,
        max: null,
        maxlength: null,
        min: null,
        name: null,
        pattern: null,
        placeholder: null,
        size: null,
        src: null,
        step: null,
        value: null,
        width: null,
        accept: ['audio/*', 'video/*', 'image/*'],
        autocomplete: ['on', 'off'],
        autofocus: ['autofocus'],
        checked: ['checked'],
        disabled: ['disabled'],
        formenctype: Dc,
        formmethod: Ec,
        formnovalidate: ['novalidate'],
        formtarget: Dr,
        multiple: ['multiple'],
        readonly: ['readonly'],
        required: ['required'],
        type: [
          'hidden',
          'text',
          'search',
          'tel',
          'url',
          'email',
          'password',
          'datetime',
          'date',
          'month',
          'week',
          'time',
          'datetime-local',
          'number',
          'range',
          'color',
          'checkbox',
          'radio',
          'file',
          'submit',
          'image',
          'reset',
          'button'
        ]
      }
    },
    ins: { attrs: { cite: null, datetime: null } },
    kbd: H,
    keygen: {
      attrs: {
        challenge: null,
        form: null,
        name: null,
        autofocus: ['autofocus'],
        disabled: ['disabled'],
        keytype: ['RSA']
      }
    },
    label: { attrs: { for: null, form: null } },
    legend: H,
    li: { attrs: { value: null } },
    link: {
      attrs: {
        href: null,
        type: null,
        hreflang: null,
        media: null,
        sizes: ['all', '16x16', '16x16 32x32', '16x16 32x32 64x64']
      }
    },
    map: { attrs: { name: null } },
    mark: H,
    menu: { attrs: { label: null, type: ['list', 'context', 'toolbar'] } },
    meta: {
      attrs: {
        content: null,
        charset: Rc,
        name: [
          'viewport',
          'application-name',
          'author',
          'description',
          'generator',
          'keywords'
        ],
        'http-equiv': [
          'content-language',
          'content-type',
          'default-style',
          'refresh'
        ]
      }
    },
    meter: {
      attrs: {
        value: null,
        min: null,
        low: null,
        high: null,
        max: null,
        optimum: null
      }
    },
    nav: H,
    noscript: H,
    object: {
      attrs: {
        data: null,
        type: null,
        name: null,
        usemap: null,
        form: null,
        width: null,
        height: null,
        typemustmatch: ['typemustmatch']
      }
    },
    ol: {
      attrs: {
        reversed: ['reversed'],
        start: null,
        type: ['1', 'a', 'A', 'i', 'I']
      },
      children: ['li', 'script', 'template', 'ul', 'ol']
    },
    optgroup: { attrs: { disabled: ['disabled'], label: null } },
    option: {
      attrs: {
        disabled: ['disabled'],
        label: null,
        selected: ['selected'],
        value: null
      }
    },
    output: { attrs: { for: null, form: null, name: null } },
    p: H,
    param: { attrs: { name: null, value: null } },
    pre: H,
    progress: { attrs: { value: null, max: null } },
    q: { attrs: { cite: null } },
    rp: H,
    rt: H,
    ruby: H,
    samp: H,
    script: {
      attrs: {
        type: ['text/javascript'],
        src: null,
        async: ['async'],
        defer: ['defer'],
        charset: Rc
      }
    },
    section: H,
    select: {
      attrs: {
        form: null,
        name: null,
        size: null,
        autofocus: ['autofocus'],
        disabled: ['disabled'],
        multiple: ['multiple']
      }
    },
    slot: { attrs: { name: null } },
    small: H,
    source: { attrs: { src: null, type: null, media: null } },
    span: H,
    strong: H,
    style: {
      attrs: {
        type: ['text/css'],
        media: null,
        scoped: null
      }
    },
    sub: H,
    summary: H,
    sup: H,
    table: H,
    tbody: H,
    td: { attrs: { colspan: null, rowspan: null, headers: null } },
    template: H,
    textarea: {
      attrs: {
        dirname: null,
        form: null,
        maxlength: null,
        name: null,
        placeholder: null,
        rows: null,
        cols: null,
        autofocus: ['autofocus'],
        disabled: ['disabled'],
        readonly: ['readonly'],
        required: ['required'],
        wrap: ['soft', 'hard']
      }
    },
    tfoot: H,
    th: {
      attrs: {
        colspan: null,
        rowspan: null,
        headers: null,
        scope: ['row', 'col', 'rowgroup', 'colgroup']
      }
    },
    thead: H,
    time: { attrs: { datetime: null } },
    title: H,
    tr: H,
    track: {
      attrs: {
        src: null,
        label: null,
        default: null,
        kind: ['subtitles', 'captions', 'descriptions', 'chapters', 'metadata'],
        srclang: null
      }
    },
    ul: { children: ['li', 'script', 'template', 'ul', 'ol'] },
    var: H,
    video: {
      attrs: {
        src: null,
        poster: null,
        width: null,
        height: null,
        crossorigin: ['anonymous', 'use-credentials'],
        preload: ['auto', 'metadata', 'none'],
        autoplay: ['autoplay'],
        mediagroup: ['movie'],
        muted: ['muted'],
        controls: ['controls']
      }
    },
    wbr: H
  },
  ZS = {
    accesskey: null,
    class: null,
    contenteditable: gt,
    contextmenu: null,
    dir: ['ltr', 'rtl', 'auto'],
    draggable: ['true', 'false', 'auto'],
    dropzone: ['copy', 'move', 'link', 'string:', 'file:'],
    hidden: ['hidden'],
    id: null,
    inert: ['inert'],
    itemid: null,
    itemprop: null,
    itemref: null,
    itemscope: ['itemscope'],
    itemtype: null,
    lang: [
      'ar',
      'bn',
      'de',
      'en-GB',
      'en-US',
      'es',
      'fr',
      'hi',
      'id',
      'ja',
      'pa',
      'pt',
      'ru',
      'tr',
      'zh'
    ],
    spellcheck: gt,
    autocorrect: gt,
    autocapitalize: gt,
    style: null,
    tabindex: null,
    title: null,
    translate: ['yes', 'no'],
    rel: [
      'stylesheet',
      'alternate',
      'author',
      'bookmark',
      'help',
      'license',
      'next',
      'nofollow',
      'noreferrer',
      'prefetch',
      'prev',
      'search',
      'tag'
    ],
    role: /* @__PURE__ */ 'alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer'.split(
      ' '
    ),
    'aria-activedescendant': null,
    'aria-atomic': gt,
    'aria-autocomplete': ['inline', 'list', 'both', 'none'],
    'aria-busy': gt,
    'aria-checked': ['true', 'false', 'mixed', 'undefined'],
    'aria-controls': null,
    'aria-describedby': null,
    'aria-disabled': gt,
    'aria-dropeffect': null,
    'aria-expanded': ['true', 'false', 'undefined'],
    'aria-flowto': null,
    'aria-grabbed': ['true', 'false', 'undefined'],
    'aria-haspopup': gt,
    'aria-hidden': gt,
    'aria-invalid': ['true', 'false', 'grammar', 'spelling'],
    'aria-label': null,
    'aria-labelledby': null,
    'aria-level': null,
    'aria-live': ['off', 'polite', 'assertive'],
    'aria-multiline': gt,
    'aria-multiselectable': gt,
    'aria-owns': null,
    'aria-posinset': null,
    'aria-pressed': ['true', 'false', 'mixed', 'undefined'],
    'aria-readonly': gt,
    'aria-relevant': null,
    'aria-required': gt,
    'aria-selected': ['true', 'false', 'undefined'],
    'aria-setsize': null,
    'aria-sort': ['ascending', 'descending', 'none', 'other'],
    'aria-valuemax': null,
    'aria-valuemin': null,
    'aria-valuenow': null,
    'aria-valuetext': null
  },
  AS =
    /* @__PURE__ */ 'beforeunload copy cut dragstart dragover dragleave dragenter dragend drag paste focus blur change click load mousedown mouseenter mouseleave mouseup keydown keyup resize scroll unload'
      .split(' ')
      .map((n) => 'on' + n)
for (let n of AS) ZS[n] = null
class nl {
  constructor(e, t) {
    ;(this.tags = Object.assign(Object.assign({}, tX), e)),
      (this.globalAttrs = Object.assign(Object.assign({}, ZS), t)),
      (this.allTags = Object.keys(this.tags)),
      (this.globalAttrNames = Object.keys(this.globalAttrs))
  }
}
nl.default = /* @__PURE__ */ new nl()
function lr(n, e, t = n.length) {
  if (!e) return ''
  let i = e.firstChild,
    r = i && i.getChild('TagName')
  return r ? n.sliceString(r.from, Math.min(r.to, t)) : ''
}
function cr(n, e = !1) {
  for (; n; n = n.parent)
    if (n.name == 'Element')
      if (e) e = !1
      else return n
  return null
}
function RS(n, e, t) {
  let i = t.tags[lr(n, cr(e))]
  return (i == null ? void 0 : i.children) || t.allTags
}
function yh(n, e) {
  let t = []
  for (let i = cr(e); i && !i.type.isTop; i = cr(i.parent)) {
    let r = lr(n, i)
    if (r && i.lastChild.name == 'CloseTag') break
    r &&
      t.indexOf(r) < 0 &&
      (e.name == 'EndTag' || e.from >= i.firstChild.to) &&
      t.push(r)
  }
  return t
}
const ES = /^[:\-\.\w\u00b7-\uffff]*$/
function vg(n, e, t, i, r) {
  let s = /\s*>/.test(n.sliceDoc(r, r + 5)) ? '' : '>',
    o = cr(t, !0)
  return {
    from: i,
    to: r,
    options: RS(n.doc, o, e)
      .map((a) => ({ label: a, type: 'type' }))
      .concat(
        yh(n.doc, t).map((a, l) => ({
          label: '/' + a,
          apply: '/' + a + s,
          type: 'type',
          boost: 99 - l
        }))
      ),
    validFor: /^\/?[:\-\.\w\u00b7-\uffff]*$/
  }
}
function Sg(n, e, t, i) {
  let r = /\s*>/.test(n.sliceDoc(i, i + 5)) ? '' : '>'
  return {
    from: t,
    to: i,
    options: yh(n.doc, e).map((s, o) => ({
      label: s,
      apply: s + r,
      type: 'type',
      boost: 99 - o
    })),
    validFor: ES
  }
}
function nX(n, e, t, i) {
  let r = [],
    s = 0
  for (let o of RS(n.doc, t, e)) r.push({ label: '<' + o, type: 'type' })
  for (let o of yh(n.doc, t))
    r.push({ label: '</' + o + '>', type: 'type', boost: 99 - s++ })
  return {
    from: i,
    to: i,
    options: r,
    validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/
  }
}
function iX(n, e, t, i, r) {
  let s = cr(t),
    o = s ? e.tags[lr(n.doc, s)] : null,
    a = o && o.attrs ? Object.keys(o.attrs) : [],
    l =
      o && o.globalAttrs === !1
        ? a
        : a.length
          ? a.concat(e.globalAttrNames)
          : e.globalAttrNames
  return {
    from: i,
    to: r,
    options: l.map((c) => ({ label: c, type: 'property' })),
    validFor: ES
  }
}
function rX(n, e, t, i, r) {
  var s
  let o =
      (s = t.parent) === null || s === void 0
        ? void 0
        : s.getChild('AttributeName'),
    a = [],
    l
  if (o) {
    let c = n.sliceDoc(o.from, o.to),
      u = e.globalAttrs[c]
    if (!u) {
      let f = cr(t),
        h = f ? e.tags[lr(n.doc, f)] : null
      u = (h == null ? void 0 : h.attrs) && h.attrs[c]
    }
    if (u) {
      let f = n.sliceDoc(i, r).toLowerCase(),
        h = '"',
        d = '"'
      ;/^['"]/.test(f)
        ? ((l = f[0] == '"' ? /^[^"]*$/ : /^[^']*$/),
          (h = ''),
          (d = n.sliceDoc(r, r + 1) == f[0] ? '' : f[0]),
          (f = f.slice(1)),
          i++)
        : (l = /^[^\s<>='"]*$/)
      for (let O of u) a.push({ label: O, apply: h + O + d, type: 'constant' })
    }
  }
  return { from: i, to: r, options: a, validFor: l }
}
function sX(n, e) {
  let { state: t, pos: i } = e,
    r = Ze(t).resolveInner(i, -1),
    s = r.resolve(i)
  for (let o = i, a; s == r && (a = r.childBefore(o)); ) {
    let l = a.lastChild
    if (!l || !l.type.isError || l.from < l.to) break
    ;(s = r = a), (o = l.from)
  }
  return r.name == 'TagName'
    ? r.parent && /CloseTag$/.test(r.parent.name)
      ? Sg(t, r, r.from, i)
      : vg(t, n, r, r.from, i)
    : r.name == 'StartTag'
      ? vg(t, n, r, i, i)
      : r.name == 'StartCloseTag' || r.name == 'IncompleteCloseTag'
        ? Sg(t, r, i, i)
        : (e.explicit && (r.name == 'OpenTag' || r.name == 'SelfClosingTag')) ||
            r.name == 'AttributeName'
          ? iX(t, n, r, r.name == 'AttributeName' ? r.from : i, i)
          : r.name == 'Is' ||
              r.name == 'AttributeValue' ||
              r.name == 'UnquotedAttributeValue'
            ? rX(t, n, r, r.name == 'Is' ? i : r.from, i)
            : e.explicit &&
                (s.name == 'Element' ||
                  s.name == 'Text' ||
                  s.name == 'Document')
              ? nX(t, n, r, i)
              : null
}
function oX(n) {
  let { extraTags: e, extraGlobalAttributes: t } = n,
    i = t || e ? new nl(e, t) : nl.default
  return (r) => sX(i, r)
}
const aX = /* @__PURE__ */ an.parser.configure({ top: 'SingleExpression' }),
  DS = [
    {
      tag: 'script',
      attrs: (n) => n.type == 'text/typescript' || n.lang == 'ts',
      parser: fS.parser
    },
    {
      tag: 'script',
      attrs: (n) => n.type == 'text/babel' || n.type == 'text/jsx',
      parser: hS.parser
    },
    {
      tag: 'script',
      attrs: (n) => n.type == 'text/typescript-jsx',
      parser: dS.parser
    },
    {
      tag: 'script',
      attrs: (n) => n.type == 'importmap' || n.type == 'speculationrules',
      parser: aX
    },
    {
      tag: 'script',
      attrs(n) {
        return (
          !n.type ||
          /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(
            n.type
          )
        )
      },
      parser: an.parser
    },
    {
      tag: 'style',
      attrs(n) {
        return (
          (!n.lang || n.lang == 'css') &&
          (!n.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(n.type))
        )
      },
      parser: tl.parser
    }
  ],
  XS = /* @__PURE__ */ [
    {
      name: 'style',
      parser: /* @__PURE__ */ tl.parser.configure({ top: 'Styles' })
    }
  ].concat(/* @__PURE__ */ AS.map((n) => ({ name: n, parser: an.parser }))),
  YS = /* @__PURE__ */ ir.define({
    name: 'html',
    parser: /* @__PURE__ */ PD.configure({
      props: [
        /* @__PURE__ */ kl.add({
          Element(n) {
            let e = /^(\s*)(<\/)?/.exec(n.textAfter)
            return n.node.to <= n.pos + e[0].length
              ? n.continue()
              : n.lineIndent(n.node.from) + (e[2] ? 0 : n.unit)
          },
          'OpenTag CloseTag SelfClosingTag'(n) {
            return n.column(n.node.from) + n.unit
          },
          Document(n) {
            if (n.pos + /\s*/.exec(n.textAfter)[0].length < n.node.to)
              return n.continue()
            let e = null,
              t
            for (let i = n.node; ; ) {
              let r = i.lastChild
              if (!r || r.name != 'Element' || r.to != i.to) break
              e = i = r
            }
            return e &&
              !(
                (t = e.lastChild) &&
                (t.name == 'CloseTag' || t.name == 'SelfClosingTag')
              )
              ? n.lineIndent(e.from) + n.unit
              : null
          }
        }),
        /* @__PURE__ */ Tl.add({
          Element(n) {
            let e = n.firstChild,
              t = n.lastChild
            return !e || e.name != 'OpenTag'
              ? null
              : { from: e.to, to: t.name == 'CloseTag' ? t.from : n.to }
          }
        }),
        /* @__PURE__ */ zb.add({
          'OpenTag CloseTag': (n) => n.getChild('TagName')
        })
      ]
    }),
    languageData: {
      commentTokens: { block: { open: '<!--', close: '-->' } },
      indentOnInput: /^\s*<\/\w+\W$/,
      wordChars: '-._'
    }
  }),
  Ko = /* @__PURE__ */ YS.configure({
    wrap: /* @__PURE__ */ kS(DS, XS)
  })
function lX(n = {}) {
  let e = '',
    t
  n.matchClosingTags === !1 && (e = 'noMatch'),
    n.selfClosingTags === !0 && (e = (e ? e + ' ' : '') + 'selfClosing'),
    ((n.nestedLanguages && n.nestedLanguages.length) ||
      (n.nestedAttributes && n.nestedAttributes.length)) &&
      (t = kS(
        (n.nestedLanguages || []).concat(DS),
        (n.nestedAttributes || []).concat(XS)
      ))
  let i = t
    ? YS.configure({ wrap: t, dialect: e })
    : e
      ? Ko.configure({ dialect: e })
      : Ko
  return new Kf(i, [
    Ko.data.of({ autocomplete: oX(n) }),
    n.autoCloseTags !== !1 ? cX : [],
    gS().support,
    eX().support
  ])
}
const xg = /* @__PURE__ */ new Set(
    /* @__PURE__ */ 'area base br col command embed frame hr img input keygen link meta param source track wbr menuitem'.split(
      ' '
    )
  ),
  cX = /* @__PURE__ */ M.inputHandler.of((n, e, t, i, r) => {
    if (
      n.composing ||
      n.state.readOnly ||
      e != t ||
      (i != '>' && i != '/') ||
      !Ko.isActiveAt(n.state, e, -1)
    )
      return !1
    let s = r(),
      { state: o } = s,
      a = o.changeByRange((l) => {
        var c, u, f
        let h = o.doc.sliceString(l.from - 1, l.to) == i,
          { head: d } = l,
          O = Ze(o).resolveInner(d - 1, -1),
          m
        if (
          ((O.name == 'TagName' || O.name == 'StartTag') && (O = O.parent),
          h && i == '>' && O.name == 'OpenTag')
        ) {
          if (
            ((u =
              (c = O.parent) === null || c === void 0
                ? void 0
                : c.lastChild) === null || u === void 0
              ? void 0
              : u.name) != 'CloseTag' &&
            (m = lr(o.doc, O.parent, d)) &&
            !xg.has(m)
          ) {
            let b = d + (o.doc.sliceString(d, d + 1) === '>' ? 1 : 0),
              x = `</${m}>`
            return { range: l, changes: { from: d, to: b, insert: x } }
          }
        } else if (h && i == '/' && O.name == 'IncompleteCloseTag') {
          let b = O.parent
          if (
            O.from == d - 2 &&
            ((f = b.lastChild) === null || f === void 0 ? void 0 : f.name) !=
              'CloseTag' &&
            (m = lr(o.doc, b, d)) &&
            !xg.has(m)
          ) {
            let x = d + (o.doc.sliceString(d, d + 1) === '>' ? 1 : 0),
              w = `${m}>`
            return {
              range: _.cursor(d + w.length, -1),
              changes: { from: d, to: x, insert: w }
            }
          }
        }
        return { range: l }
      })
    return a.changes.empty
      ? !1
      : (n.dispatch([
          s,
          o.update(a, {
            userEvent: 'input.complete',
            scrollIntoView: !0
          })
        ]),
        !0)
  })
var IS = (n) => {
    var { theme: e, settings: t = {}, styles: i = [] } = n,
      r = {
        '.cm-gutters': {}
      },
      s = {}
    t.background && (s.backgroundColor = t.background),
      t.backgroundImage && (s.backgroundImage = t.backgroundImage),
      t.foreground && (s.color = t.foreground),
      (t.background || t.foreground) && (r['&'] = s),
      t.fontFamily &&
        (r['&.cm-editor .cm-scroller'] = {
          fontFamily: t.fontFamily
        }),
      t.gutterBackground &&
        (r['.cm-gutters'].backgroundColor = t.gutterBackground),
      t.gutterForeground && (r['.cm-gutters'].color = t.gutterForeground),
      t.gutterBorder && (r['.cm-gutters'].borderRightColor = t.gutterBorder),
      t.caret &&
        ((r['.cm-content'] = {
          caretColor: t.caret
        }),
        (r['.cm-cursor, .cm-dropCursor'] = {
          borderLeftColor: t.caret
        }))
    var o = {}
    t.gutterActiveForeground && (o.color = t.gutterActiveForeground),
      t.lineHighlight &&
        ((r['.cm-activeLine'] = {
          backgroundColor: t.lineHighlight
        }),
        (o.backgroundColor = t.lineHighlight)),
      (r['.cm-activeLineGutter'] = o),
      t.selection &&
        (r[
          '&.cm-focused .cm-selectionBackground, & .cm-line::selection, & .cm-selectionLayer .cm-selectionBackground, .cm-content ::selection'
        ] = {
          background: t.selection + ' !important'
        }),
      t.selectionMatch &&
        (r['& .cm-selectionMatch'] = {
          backgroundColor: t.selectionMatch
        })
    var a = M.theme(r, {
        dark: e === 'dark'
      }),
      l = hr.define(i),
      c = [a, nh(l)]
    return c
  },
  uX = {
    background: '#fff',
    foreground: '#24292e',
    selection: '#BBDFFF',
    selectionMatch: '#BBDFFF',
    gutterBackground: '#fff',
    gutterForeground: '#6e7781'
  },
  fX = (n) => {
    var { theme: e = 'light', settings: t = {}, styles: i = [] } = n || {}
    return IS({
      theme: e,
      settings: Of({}, uX, t),
      styles: [
        {
          tag: [g.standard(g.tagName), g.tagName],
          color: '#116329'
        },
        {
          tag: [g.comment, g.bracket],
          color: '#6a737d'
        },
        {
          tag: [g.className, g.propertyName],
          color: '#6f42c1'
        },
        {
          tag: [g.variableName, g.attributeName, g.number, g.operator],
          color: '#005cc5'
        },
        {
          tag: [g.keyword, g.typeName, g.typeOperator, g.typeName],
          color: '#d73a49'
        },
        {
          tag: [g.string, g.meta, g.regexp],
          color: '#032f62'
        },
        {
          tag: [g.name, g.quote],
          color: '#22863a'
        },
        {
          tag: [g.heading, g.strong],
          color: '#24292e',
          fontWeight: 'bold'
        },
        {
          tag: [g.emphasis],
          color: '#24292e',
          fontStyle: 'italic'
        },
        {
          tag: [g.deleted],
          color: '#b31d28',
          backgroundColor: 'ffeef0'
        },
        {
          tag: [g.atom, g.bool, g.special(g.variableName)],
          color: '#e36209'
        },
        {
          tag: [g.url, g.escape, g.regexp, g.link],
          color: '#032f62'
        },
        {
          tag: g.link,
          textDecoration: 'underline'
        },
        {
          tag: g.strikethrough,
          textDecoration: 'line-through'
        },
        {
          tag: g.invalid,
          color: '#cb2431'
        },
        ...i
      ]
    })
  },
  hX = fX(),
  dX = {
    background: '#0d1117',
    foreground: '#c9d1d9',
    caret: '#c9d1d9',
    selection: '#003d73',
    selectionMatch: '#003d73',
    lineHighlight: '#36334280'
  },
  pX = (n) => {
    var { theme: e = 'dark', settings: t = {}, styles: i = [] } = n || {}
    return IS({
      theme: e,
      settings: Of({}, dX, t),
      styles: [
        {
          tag: [g.standard(g.tagName), g.tagName],
          color: '#7ee787'
        },
        {
          tag: [g.comment, g.bracket],
          color: '#8b949e'
        },
        {
          tag: [g.className, g.propertyName],
          color: '#d2a8ff'
        },
        {
          tag: [g.variableName, g.attributeName, g.number, g.operator],
          color: '#79c0ff'
        },
        {
          tag: [g.keyword, g.typeName, g.typeOperator, g.typeName],
          color: '#ff7b72'
        },
        {
          tag: [g.string, g.meta, g.regexp],
          color: '#a5d6ff'
        },
        {
          tag: [g.name, g.quote],
          color: '#7ee787'
        },
        {
          tag: [g.heading, g.strong],
          color: '#d2a8ff',
          fontWeight: 'bold'
        },
        {
          tag: [g.emphasis],
          color: '#d2a8ff',
          fontStyle: 'italic'
        },
        {
          tag: [g.deleted],
          color: '#ffdcd7',
          backgroundColor: 'ffeef0'
        },
        {
          tag: [g.atom, g.bool, g.special(g.variableName)],
          color: '#ffab70'
        },
        {
          tag: g.link,
          textDecoration: 'underline'
        },
        {
          tag: g.strikethrough,
          textDecoration: 'line-through'
        },
        {
          tag: g.invalid,
          color: '#f97583'
        },
        ...i
      ]
    })
  }
pX()
function OX() {
  const n = {
      theme: hX,
      height: '450px'
    },
    { html: e, react: t, setGeneratedCode: i } = va()
  return /* @__PURE__ */ z.jsxs(ms, {
    children: [
      /* @__PURE__ */ z.jsx(Hi, {
        label: 'HTML / Bootstrap',
        children: /* @__PURE__ */ z.jsx(hf, {
          ...n,
          value: e,
          extensions: [lX()],
          onChange: (r) => {
            i(r, 'html')
          }
        })
      }),
      /* @__PURE__ */ z.jsx(Hi, {
        label: 'React / Chakra',
        children: /* @__PURE__ */ z.jsx(hf, {
          ...n,
          value: t,
          extensions: [gS({ jsx: !0 })],
          onChange: (r) => {
            i(r, 'react')
          }
        })
      })
    ]
  })
}
function gX() {
  const { setSelectedIndex: n } = Wm()
  return /* @__PURE__ */ z.jsxs(z.Fragment, {
    children: [
      /* @__PURE__ */ z.jsx(zk, {}),
      /* @__PURE__ */ z.jsxs('div', {
        className: 'slds-tabs_scoped__content-container',
        children: [
          /* @__PURE__ */ z.jsxs('div', {
            className: 'slds-grid slds-grid_align-spread slds-m-bottom_large',
            children: [
              /* @__PURE__ */ z.jsx('div', {
                className: 'slds-col',
                children: /* @__PURE__ */ z.jsx(ft, {
                  className: 'slds-button_outline-icon',
                  onClick: () => n(0),
                  assistiveText: { icon: 'back' },
                  iconCategory: 'utility',
                  iconName: 'back',
                  iconVariant: 'border',
                  variant: 'icon'
                })
              }),
              /* @__PURE__ */ z.jsx('div', {
                className: 'slds-col',
                children: /* @__PURE__ */ z.jsx(ft, {
                  type: 'button',
                  label: 'Download Files',
                  variant: 'outline-brand',
                  iconCategory: 'utility',
                  iconName: 'download',
                  iconPosition: 'left'
                })
              })
            ]
          }),
          /* @__PURE__ */ z.jsx('div', {
            className: 'slds-border_bottom slds-m-bottom_large',
            children: /* @__PURE__ */ z.jsx(OX, {})
          }),
          /* @__PURE__ */ z.jsxs('div', {
            className: 'slds-grid slds-grid_align-spread',
            children: [
              /* @__PURE__ */ z.jsx('div', { className: 'slds-col' }),
              /* @__PURE__ */ z.jsxs('div', {
                className: 'slds-col',
                children: [
                  /* @__PURE__ */ z.jsx(ft, {
                    assistiveText: { icon: 'Like' },
                    iconCategory: 'utility',
                    iconName: 'like',
                    iconVariant: 'border',
                    variant: 'icon'
                  }),
                  /* @__PURE__ */ z.jsx(ft, {
                    assistiveText: { icon: 'Dislike' },
                    iconCategory: 'utility',
                    iconName: 'dislike',
                    iconVariant: 'border',
                    variant: 'icon'
                  })
                ]
              })
            ]
          })
        ]
      })
    ]
  })
}
function wg(n) {
  return /* @__PURE__ */ z.jsxs('span', {
    children: [
      /* @__PURE__ */ z.jsx(Ve, {
        style: { marginRight: '4px' },
        assistiveText: { label: n.label },
        category: 'utility',
        name: n.icon,
        size: 'x-small'
      }),
      n.label
    ]
  })
}
function mX({ assetUrl: n }) {
  const { selectedIndex: e, setSelectedIndex: t } = Wm(),
    i = n + '/assets/icons'
  return /* @__PURE__ */ z.jsx(rl, {
    iconPath: i,
    children: /* @__PURE__ */ z.jsxs(ms, {
      selectedIndex: e,
      onSelect: t,
      variant: 'scoped',
      children: [
        /* @__PURE__ */ z.jsx(Hi, {
          label: /* @__PURE__ */ z.jsx(wg, {
            label: 'Instructions',
            icon: 'sparkles'
          }),
          children: /* @__PURE__ */ z.jsx(Pk, {})
        }),
        /* @__PURE__ */ z.jsx(Hi, {
          label: /* @__PURE__ */ z.jsx(wg, {
            label: 'Created Components',
            icon: 'favorite'
          }),
          children: /* @__PURE__ */ z.jsx(gX, {})
        })
      ]
    })
  })
}
class yX {
  constructor(e) {
    Zn(this, 'subscribableEvents', ['sfcc:ready'])
    Zn(this, 'emittableEvents', ['sfcc:value'])
    Zn(this, 'render')
    Zn(this, 'getValue')
    Zn(this, 'setValue')
    Zn(this, 'listeners', {
      'sfcc:ready': () => {
        window.subscribe('sfcc:ready', (e) => {
          const { config: t, value: i } = e,
            { assetUrl: r } = t
          this.setValue(i), this.render({ assetUrl: r })
        })
      }
    })
    Zn(this, 'emitters', {
      'sfcc:value': () => {
        window.emit({
          type: 'sfcc:value',
          payload: this.getValue()
        })
      }
    })
    ;(this.render = e.render),
      (this.getValue = e.getValue),
      (this.setValue = e.setValue)
  }
  subscribe(e) {
    this.listeners[e] || console.error('Invalid event', e), this.listeners[e]()
  }
  emit(e) {
    this.emitters[e] || console.error('Invalid event', e)
    const t = this.emitters[e]
    t()
  }
}
const bX = (n) => {
    const e = 'EinsteinAssistedComponentEditor',
      t = document.getElementById(e) ?? document.createElement('div')
    t.id || ((t.id = e), document.body.appendChild(t)),
      N0.createRoot(t).render(
        /* @__PURE__ */ z.jsx($.StrictMode, {
          children: /* @__PURE__ */ z.jsx(mX, { assetUrl: n.assetUrl })
        })
      )
  },
  bh = new yX({
    render: bX,
    getValue: () => {
      const { componentName: n, prompt: e } = Jr.getState(),
        { html: t, react: i } = va.getState()
      return {
        componentName: n,
        prompt: e,
        code: {
          html: t,
          react: i
        }
      }
    },
    setValue: (n) => {
      n &&
        (Jr.setState({
          componentName: n.componentName,
          prompt: n.prompt
        }),
        va.setState({
          html: n.code.html,
          react: n.code.react
        }))
    }
  })
bh.subscribe('sfcc:ready')
Jr.subscribe(() => bh.emit('sfcc:value'))
va.subscribe(() => bh.emit('sfcc:value'))
