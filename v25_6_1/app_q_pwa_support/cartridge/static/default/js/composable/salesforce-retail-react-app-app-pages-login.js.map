{"version":3,"file":"salesforce-retail-react-app-app-pages-login.js","mappings":"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","sources":["webpack://composable-storefront-toolkit/./overlays/passwordless-login/app/pages/login/index.jsx"],"sourcesContent":["/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React, {useEffect} from 'react'\nimport PropTypes from 'prop-types'\nimport {useIntl, defineMessage} from 'react-intl'\nimport {Box, Container} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport {\n    AuthHelpers,\n    useAuthHelper,\n    useCustomerBaskets,\n    useCustomerId,\n    useCustomerType,\n    useShopperBasketsMutation\n} from '@salesforce/commerce-sdk-react'\nimport useNavigation from '@salesforce/retail-react-app/app/hooks/use-navigation'\nimport Seo from '@salesforce/retail-react-app/app/components/seo'\nimport {useForm} from 'react-hook-form'\nimport {useLocation} from 'react-router-dom'\nimport useEinstein from '@salesforce/retail-react-app/app/hooks/use-einstein'\nimport LoginForm from '@salesforce/retail-react-app/app/components/login'\nimport {API_ERROR_MESSAGE} from '@salesforce/retail-react-app/app/constants'\nimport {usePrevious} from '@salesforce/retail-react-app/app/hooks/use-previous'\nimport {isServer} from '@salesforce/retail-react-app/app/utils/utils'\nconst LOGIN_ERROR_MESSAGE = defineMessage({\n    defaultMessage: 'Incorrect username or password, please try again.',\n    id: 'login_page.error.incorrect_username_or_password'\n})\nconst Login = () => {\n    const {formatMessage} = useIntl()\n    const navigate = useNavigation()\n    const form = useForm()\n    const location = useLocation()\n    const einstein = useEinstein()\n    const {isRegistered, customerType} = useCustomerType()\n    const login = useAuthHelper(AuthHelpers.LoginRegisteredUserB2C)\n\n    const customerId = useCustomerId()\n    const prevAuthType = usePrevious(customerType)\n    const {data: baskets} = useCustomerBaskets(\n        {parameters: {customerId}},\n        {enabled: !!customerId && !isServer, keepPreviousData: true}\n    )\n    const mergeBasket = useShopperBasketsMutation('mergeBasket')\n\n    const submitForm = async (data) => {\n        try {\n            await login.mutateAsync({username: data.email, password: data.password})\n            const hasBasketItem = baskets?.baskets?.[0]?.productItems?.length > 0\n            // we only want to merge basket when the user is logged in as a recurring user\n            // only recurring users trigger the login mutation, new user triggers register mutation\n            // this logic needs to stay in this block because this is the only place that tells if a user is a recurring user\n            // if you change logic here, also change it in login page\n            const shouldMergeBasket = hasBasketItem && prevAuthType === 'guest'\n            if (shouldMergeBasket) {\n                mergeBasket.mutate({\n                    headers: {\n                        // This is not required since the request has no body\n                        // but CommerceAPI throws a '419 - Unsupported Media Type' error if this header is removed.\n                        'Content-Type': 'application/json'\n                    },\n                    parameters: {\n                        createDestinationBasket: true\n                    }\n                })\n            }\n        } catch (error) {\n            const message = /Unauthorized/i.test(error.message)\n                ? formatMessage(LOGIN_ERROR_MESSAGE)\n                : formatMessage(API_ERROR_MESSAGE)\n            form.setError('global', {type: 'manual', message})\n        }\n    }\n\n    // If customer is registered push to account page\n    useEffect(() => {\n        if (isRegistered) {\n            if (location?.state?.directedFrom) {\n                navigate(location.state.directedFrom)\n            } else {\n                navigate('/account')\n            }\n        }\n    }, [isRegistered])\n\n    /**************** Einstein ****************/\n    useEffect(() => {\n        einstein.sendViewPage(location.pathname)\n    }, [])\n    return (\n        <Box data-testid=\"login-page\" bg=\"gray.50\" py={[8, 16]}>\n            <Seo title=\"Sign in\" description=\"Customer sign in\" />\n            <Container\n                paddingTop={16}\n                width={['100%', '407px']}\n                bg=\"white\"\n                paddingBottom={14}\n                marginTop={8}\n                marginBottom={8}\n                borderRadius=\"base\"\n            >\n                <LoginForm\n                    form={form}\n                    submitForm={submitForm}\n                    clickCreateAccount={() => navigate('/registration')}\n                    clickForgotPassword={() => navigate('/reset-password')}\n                    clickPasswordlessLogin={() => navigate('/passwordless-login')}\n                />\n            </Container>\n        </Box>\n    )\n}\n\nLogin.getTemplateName = () => 'login'\n\nLogin.propTypes = {\n    match: PropTypes.object\n}\n\nexport default Login\n"],"names":["React","useEffect","PropTypes","useIntl","defineMessage","Box","Container","AuthHelpers","useAuthHelper","useCustomerBaskets","useCustomerId","useCustomerType","useShopperBasketsMutation","useNavigation","Seo","useForm","useLocation","useEinstein","LoginForm","API_ERROR_MESSAGE","usePrevious","isServer","LOGIN_ERROR_MESSAGE","defaultMessage","id","Login","formatMessage","navigate","form","location","einstein","isRegistered","customerType","login","LoginRegisteredUserB2C","customerId","prevAuthType","data","baskets","parameters","enabled","keepPreviousData","mergeBasket","submitForm","_ref","_asyncToGenerator","_baskets$baskets","_baskets$baskets$","_baskets$baskets$$pro","mutateAsync","username","email","password","hasBasketItem","productItems","length","shouldMergeBasket","mutate","headers","createDestinationBasket","error","message","test","setError","type","_x","apply","arguments","_location$state","state","directedFrom","sendViewPage","pathname","createElement","bg","py","title","description","paddingTop","width","paddingBottom","marginTop","marginBottom","borderRadius","clickCreateAccount","clickForgotPassword","clickPasswordlessLogin","getTemplateName","propTypes","match","object"],"sourceRoot":""}