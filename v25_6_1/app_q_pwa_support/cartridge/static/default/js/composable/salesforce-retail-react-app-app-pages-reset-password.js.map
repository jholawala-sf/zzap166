{"version":3,"file":"salesforce-retail-react-app-app-pages-reset-password.js","mappings":"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","sources":["webpack://composable-storefront-toolkit/./app/components/forms/useUpdatePasswordFields.jsx","webpack://composable-storefront-toolkit/./app/pages/reset-password/index.jsx","webpack://composable-storefront-toolkit/./app/pages/reset-password/reset-password-landing.jsx","webpack://composable-storefront-toolkit/./app/hooks/use-password-reset.js","webpack://composable-storefront-toolkit/./app/page-designer/utils.js"],"sourcesContent":["/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport {useIntl} from 'react-intl'\nimport {validatePassword} from '@salesforce/retail-react-app/app/utils/password-utils'\n\nexport default function useUpdatePasswordFields({\n    form: {\n        control,\n        formState: {errors},\n        getValues\n    },\n    prefix = ''\n}) {\n    const {formatMessage} = useIntl()\n\n    const fields = {\n        currentPassword: {\n            name: `${prefix}currentPassword`,\n            label: formatMessage({\n                defaultMessage: 'Current Password',\n                id: 'use_update_password_fields.label.current_password'\n            }),\n            defaultValue: '',\n            type: 'password',\n            autoComplete: 'current-password',\n            rules: {\n                required: formatMessage({\n                    defaultMessage: 'Please enter your password.',\n                    id: 'use_update_password_fields.error.required_password'\n                })\n            },\n            error: errors[`${prefix}currentPassword`],\n            control\n        },\n        password: {\n            name: `${prefix}password`,\n            label: formatMessage({\n                defaultMessage: 'New Password',\n                id: 'use_update_password_fields.label.new_password'\n            }),\n            type: 'password',\n            autoComplete: 'new-password',\n            defaultValue: '',\n            rules: {\n                required: formatMessage({\n                    defaultMessage: 'Please provide a new password.',\n                    id: 'use_update_password_fields.error.required_new_password'\n                }),\n                validate: {\n                    hasMinChars: (val) =>\n                        validatePassword(val).hasMinChars ||\n                        formatMessage({\n                            defaultMessage: 'Password must contain at least 8 characters.',\n                            id: 'use_update_password_fields.error.minimum_characters'\n                        }),\n                    hasUppercase: (val) =>\n                        validatePassword(val).hasUppercase ||\n                        formatMessage({\n                            defaultMessage: 'Password must contain at least one uppercase letter.',\n                            id: 'use_update_password_fields.error.uppercase_letter'\n                        }),\n                    hasLowercase: (val) =>\n                        validatePassword(val).hasLowercase ||\n                        formatMessage({\n                            defaultMessage: 'Password must contain at least one lowercase letter.',\n                            id: 'use_update_password_fields.error.lowercase_letter'\n                        }),\n                    hasNumber: (val) =>\n                        validatePassword(val).hasNumber ||\n                        formatMessage({\n                            defaultMessage: 'Password must contain at least one number.',\n                            id: 'use_update_password_fields.error.contain_number'\n                        }),\n                    hasSpecialChar: (val) =>\n                        validatePassword(val).hasSpecialChar ||\n                        formatMessage({\n                            defaultMessage: 'Password must contain at least one special character.',\n                            id: 'use_update_password_fields.error.special_character'\n                        })\n                }\n            },\n            error: errors[`${prefix}password`],\n            control\n        },\n        confirmPassword: {\n            name: `${prefix}confirmPassword`,\n            label: formatMessage({\n                defaultMessage: 'Confirm New Password',\n                id: 'use_update_password_fields.label.confirm_new_password'\n            }),\n            type: 'password',\n            autoComplete: 'new-password',\n            defaultValue: '',\n            rules: {\n                required: formatMessage({\n                    defaultMessage: 'Please confirm your password.',\n                    id: 'use_update_password_fields.error.required_confirm_password'\n                }),\n                validate: {\n                    matches: (val) =>\n                        val === getValues(`${prefix}password`) ||\n                        formatMessage({\n                            defaultMessage: 'Passwords do not match.',\n                            id: 'use_update_password_fields.error.password_mismatch'\n                        })\n                }\n            },\n            error: errors[`${prefix}confirmPassword`],\n            control\n        }\n    }\n\n    return fields\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React, {useEffect} from 'react'\nimport {useIntl} from 'react-intl'\nimport PropTypes from 'prop-types'\nimport {Box, Container} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport {useForm} from 'react-hook-form'\nimport Seo from '@salesforce/retail-react-app/app/components/seo'\nimport ResetPasswordForm from '@salesforce/retail-react-app/app/components/reset-password'\nimport ResetPasswordLanding from '@salesforce/retail-react-app/app/pages/reset-password/reset-password-landing'\nimport useNavigation from '@salesforce/retail-react-app/app/hooks/use-navigation'\nimport useEinstein from '@salesforce/retail-react-app/app/hooks/use-einstein'\nimport useDataCloud from '@salesforce/retail-react-app/app/hooks/use-datacloud'\nimport {useLocation} from 'react-router-dom'\nimport {useRouteMatch} from 'react-router'\nimport {usePasswordReset} from '@salesforce/retail-react-app/app/hooks/use-password-reset'\nimport {\n    RESET_PASSWORD_LANDING_PATH,\n    API_ERROR_MESSAGE,\n    FEATURE_UNAVAILABLE_ERROR_MESSAGE\n} from '@salesforce/retail-react-app/app/constants'\n\nconst ResetPassword = () => {\n    const {formatMessage} = useIntl()\n    const form = useForm()\n    const navigate = useNavigation()\n    const einstein = useEinstein()\n    const dataCloud = useDataCloud()\n    const {pathname} = useLocation()\n    const {path} = useRouteMatch()\n    const {getPasswordResetToken} = usePasswordReset()\n\n    const submitForm = async ({email}) => {\n        try {\n            await getPasswordResetToken(email)\n        } catch (e) {\n            const message =\n                e.response?.status === 400\n                    ? formatMessage(FEATURE_UNAVAILABLE_ERROR_MESSAGE)\n                    : formatMessage(API_ERROR_MESSAGE)\n            form.setError('global', {type: 'manual', message})\n        }\n    }\n\n    /**************** Einstein ****************/\n    useEffect(() => {\n        einstein.sendViewPage(pathname)\n        dataCloud.sendViewPage(pathname)\n    }, [])\n\n    return (\n        <Box data-testid=\"reset-password-page\" bg=\"gray.50\" py={[8, 16]}>\n            <Seo title=\"Reset password\" description=\"Reset customer password\" />\n            <Container\n                paddingTop={16}\n                width={['100%', '407px']}\n                bg=\"white\"\n                paddingBottom={14}\n                marginTop={8}\n                marginBottom={8}\n                borderRadius=\"base\"\n            >\n                {path === RESET_PASSWORD_LANDING_PATH ? (\n                    <ResetPasswordLanding />\n                ) : (\n                    <ResetPasswordForm\n                        form={form}\n                        submitForm={submitForm}\n                        clickSignIn={() => navigate('/login')}\n                    />\n                )}\n            </Container>\n        </Box>\n    )\n}\n\nResetPassword.getTemplateName = () => 'reset-password'\n\nResetPassword.propTypes = {\n    match: PropTypes.object\n}\n\nexport default ResetPassword\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {useForm} from 'react-hook-form'\nimport {useLocation} from 'react-router-dom'\nimport {useIntl, FormattedMessage} from 'react-intl'\nimport {\n    Alert,\n    Button,\n    Container,\n    Stack,\n    Text\n} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport {AlertIcon, BrandLogo} from '@salesforce/retail-react-app/app/components/icons'\nimport Field from '@salesforce/retail-react-app/app/components/field'\nimport PasswordRequirements from '@salesforce/retail-react-app/app/components/forms/password-requirements'\nimport useUpdatePasswordFields from '@salesforce/retail-react-app/app/components/forms/useUpdatePasswordFields'\nimport {usePasswordReset} from '@salesforce/retail-react-app/app/hooks/use-password-reset'\nimport useNavigation from '@salesforce/retail-react-app/app/hooks/use-navigation'\nimport {\n    API_ERROR_MESSAGE,\n    INVALID_TOKEN_ERROR,\n    INVALID_TOKEN_ERROR_MESSAGE\n} from '@salesforce/retail-react-app/app/constants'\n\nconst ResetPasswordLanding = () => {\n    const form = useForm()\n    const {formatMessage} = useIntl()\n    const {search} = useLocation()\n    const navigate = useNavigation()\n    const queryParams = new URLSearchParams(search)\n    const email = decodeURIComponent(queryParams.get('email'))\n    const token = decodeURIComponent(queryParams.get('token'))\n    const fields = useUpdatePasswordFields({form})\n    const password = form.watch('password')\n    const {resetPassword} = usePasswordReset()\n\n    const submit = async (values) => {\n        form.clearErrors()\n        try {\n            await resetPassword({email, token, newPassword: values.password})\n            navigate('/login')\n        } catch (error) {\n            const errorData = await error.response?.json()\n            const message = INVALID_TOKEN_ERROR.test(errorData.message)\n                ? formatMessage(INVALID_TOKEN_ERROR_MESSAGE)\n                : formatMessage(API_ERROR_MESSAGE)\n            form.setError('global', {type: 'manual', message})\n        }\n    }\n\n    return (\n        <Stack justify=\"center\" align=\"center\" spacing={6}>\n            <BrandLogo width=\"60px\" height=\"auto\" />\n            <Stack spacing={2}>\n                <Text align=\"center\" fontSize=\"xl\" fontWeight=\"semibold\">\n                    <FormattedMessage\n                        defaultMessage=\"Reset Password\"\n                        id=\"reset_password_form.title.reset_password\"\n                    />\n                </Text>\n            </Stack>\n            <Container variant=\"form\">\n                <form onSubmit={form.handleSubmit(submit)}>\n                    <Stack spacing={6} paddingLeft={4} paddingRight={4}>\n                        {form.formState.errors?.global && (\n                            <Alert data-testid=\"password-update-error\" status=\"error\">\n                                <AlertIcon color=\"red.500\" boxSize={4} />\n                                <Text fontSize=\"sm\" ml={3}>\n                                    {form.formState.errors.global.message}\n                                </Text>\n                            </Alert>\n                        )}\n                        <Stack spacing={3} pb={2}>\n                            <Field {...fields.password} />\n                            <Field {...fields.confirmPassword} />\n                            <PasswordRequirements value={password} />\n                        </Stack>\n                        <Button type=\"submit\" isLoading={form.formState.isSubmitting}>\n                            <FormattedMessage\n                                defaultMessage=\"Reset Password\"\n                                id=\"reset_password_form.button.reset_password\"\n                            />\n                        </Button>\n                    </Stack>\n                </form>\n            </Container>\n        </Stack>\n    )\n}\n\nResetPasswordLanding.getTemplateName = () => 'reset-password-landing'\n\nResetPasswordLanding.propTypes = {\n    token: PropTypes.string\n}\n\nexport default ResetPasswordLanding\n","/*\n * Copyright (c) 2024, Salesforce, Inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport {AuthHelpers, useAuthHelper} from '@salesforce/commerce-sdk-react'\nimport {useToast} from '@salesforce/retail-react-app/app/hooks/use-toast'\nimport {useIntl} from 'react-intl'\nimport {useAppOrigin} from '@salesforce/retail-react-app/app/hooks/use-app-origin'\nimport {getConfig} from '@salesforce/pwa-kit-runtime/utils/ssr-config'\nimport {isAbsoluteURL} from '@salesforce/retail-react-app/app/page-designer/utils'\n\n/**\n * This hook provides commerce-react-sdk hooks to simplify the reset password flow.\n */\nexport const usePasswordReset = () => {\n    const showToast = useToast()\n    const {formatMessage} = useIntl()\n    const appOrigin = useAppOrigin()\n    const config = getConfig()\n    const resetPasswordCallback =\n        config.app.login?.resetPassword?.callbackURI || '/reset-password-callback'\n    const callbackURI = isAbsoluteURL(resetPasswordCallback)\n        ? resetPasswordCallback\n        : `${appOrigin}${resetPasswordCallback}`\n\n    const getPasswordResetTokenMutation = useAuthHelper(AuthHelpers.GetPasswordResetToken)\n    const resetPasswordMutation = useAuthHelper(AuthHelpers.ResetPassword)\n\n    const getPasswordResetToken = async (email) => {\n        await getPasswordResetTokenMutation.mutateAsync({\n            user_id: email,\n            callback_uri: callbackURI\n        })\n    }\n\n    const resetPassword = async ({email, token, newPassword}) => {\n        await resetPasswordMutation.mutateAsync(\n            {user_id: email, pwd_action_token: token, new_password: newPassword},\n            {\n                onSuccess: () => {\n                    showToast({\n                        title: formatMessage({\n                            defaultMessage: 'Password Reset Success',\n                            id: 'password_reset_success.toast'\n                        }),\n                        status: 'success',\n                        position: 'bottom-right'\n                    })\n                }\n            }\n        )\n    }\n\n    return {getPasswordResetToken, resetPassword}\n}\n","/*\n * Copyright (c) 2023, Salesforce, Inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nexport const isAbsoluteURL = (url) => /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url)\n"],"names":["useIntl","validatePassword","useUpdatePasswordFields","form","control","formState","errors","getValues","prefix","formatMessage","fields","currentPassword","name","label","defaultMessage","id","defaultValue","type","autoComplete","rules","required","error","password","validate","hasMinChars","val","hasUppercase","hasLowercase","hasNumber","hasSpecialChar","confirmPassword","matches","React","useEffect","PropTypes","Box","Container","useForm","Seo","ResetPasswordForm","ResetPasswordLanding","useNavigation","useEinstein","useDataCloud","useLocation","useRouteMatch","usePasswordReset","RESET_PASSWORD_LANDING_PATH","API_ERROR_MESSAGE","FEATURE_UNAVAILABLE_ERROR_MESSAGE","ResetPassword","navigate","einstein","dataCloud","pathname","path","getPasswordResetToken","submitForm","_ref","_asyncToGenerator","email","e","_e$response","message","response","status","setError","_x","apply","arguments","sendViewPage","createElement","bg","py","title","description","paddingTop","width","paddingBottom","marginTop","marginBottom","borderRadius","clickSignIn","getTemplateName","propTypes","match","object","FormattedMessage","Alert","Button","Stack","Text","AlertIcon","BrandLogo","Field","PasswordRequirements","INVALID_TOKEN_ERROR","INVALID_TOKEN_ERROR_MESSAGE","_form$formState$error","search","queryParams","URLSearchParams","decodeURIComponent","get","token","watch","resetPassword","submit","values","clearErrors","newPassword","_error$response","errorData","json","test","justify","align","spacing","height","fontSize","fontWeight","variant","onSubmit","handleSubmit","paddingLeft","paddingRight","global","color","boxSize","ml","pb","value","isLoading","isSubmitting","string","AuthHelpers","useAuthHelper","useToast","useAppOrigin","getConfig","isAbsoluteURL","_config$app$login","_config$app$login$res","showToast","appOrigin","config","resetPasswordCallback","app","login","callbackURI","getPasswordResetTokenMutation","GetPasswordResetToken","resetPasswordMutation","mutateAsync","user_id","callback_uri","_ref2","pwd_action_token","new_password","onSuccess","position","_x2","url"],"sourceRoot":""}