{"version":3,"file":"salesforce-retail-react-app-app-pages-passwordless-login.js","mappings":"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","sources":["webpack://composable-storefront-toolkit/./overlays/passwordless-login/app/pages/passwordless-login/index.jsx"],"sourcesContent":["/*\n * Copyright (c) 2024, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport React, {useState, useEffect, useMemo} from 'react'\nimport {useIntl} from 'react-intl'\nimport {useLocation} from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport {Box, Container} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport {useForm} from 'react-hook-form'\nimport {\n    useAccessToken,\n    useCustomerBaskets,\n    useCustomerId,\n    useCustomerType,\n    useShopperBasketsMutation,\n    useUsid\n} from '@salesforce/commerce-sdk-react'\nimport {getConfig} from '@salesforce/pwa-kit-runtime/utils/ssr-config'\nimport Seo from '@salesforce/retail-react-app/app/components/seo'\nimport PasswordlessLoginForm from '@salesforce/retail-react-app/app/components/passwordless-login'\nimport PasswordlessTokenForm from '@salesforce/retail-react-app/app/components/passwordless-token'\nimport useNavigation from '@salesforce/retail-react-app/app/hooks/use-navigation'\nimport useEinstein from '@salesforce/retail-react-app/app/hooks/use-einstein'\nimport useMultiSite from '@salesforce/retail-react-app/app/hooks/use-multi-site'\nimport {usePrevious} from '@salesforce/retail-react-app/app/hooks/use-previous'\nimport {isServer} from '@salesforce/retail-react-app/app/utils/utils'\nimport {\n    authorizePasswordlessCustomer,\n    getPasswordlessAccessToken,\n    getPasswordlessAuth\n} from '@salesforce/retail-react-app/app/utils/passwordless-login-utils'\n\nconst PasswordlessLogin = () => {\n    const {app} = getConfig()\n    const authForm = useForm()\n    const tokenForm = useForm()\n    const navigate = useNavigation()\n    const {formatMessage} = useIntl()\n    const [submittedEmail, setSubmittedEmail] = useState('')\n    const [showSubmittedSuccess, setShowSubmittedSuccess] = useState(false)\n    const [token, setToken] = useState('')\n    const [isTokenLoading, setIsTokenLoading] = useState(false)\n    const einstein = useEinstein()\n    const {pathname} = useLocation()\n    const {site} = useMultiSite()\n    const {usid} = useUsid()\n    const {getTokenWhenReady} = useAccessToken()\n    const {isRegistered, customerType} = useCustomerType()\n    const enablePasswordlessLogin = app?.enablePWAKitPrivateClient || false\n    const pinInputMaxLength = 8\n\n    const customerId = useCustomerId()\n    const prevAuthType = usePrevious(customerType)\n    const {data: baskets} = useCustomerBaskets(\n        {parameters: {customerId}},\n        {enabled: !!customerId && !isServer, keepPreviousData: true}\n    )\n    const mergeBasket = useShopperBasketsMutation('mergeBasket')\n\n    // If customer is registered push to account page\n    useEffect(() => {\n        if (isRegistered) {\n            if (location?.state?.directedFrom) {\n                navigate(location.state.directedFrom)\n            } else {\n                navigate('/account')\n            }\n        }\n    }, [isRegistered])\n\n    // if passwordless login is disabled, redirect to login page\n    useEffect(() => {\n        if (!enablePasswordlessLogin) {\n            navigate('/login')\n        }\n    }, [enablePasswordlessLogin])\n\n    const auth = useMemo(() => {\n        return getPasswordlessAuth()\n    }, [])\n\n    const submitAuthForm = async ({email}) => {\n        const accessToken = await getTokenWhenReady()\n        const {error} = await authorizePasswordlessCustomer({\n            email,\n            siteId: site.id,\n            usid,\n            accessToken\n        })\n        if (error) {\n            authForm.setError('global', {type: 'manual', message: formatMessage(error)})\n        } else {\n            setSubmittedEmail(email)\n            setShowSubmittedSuccess(!showSubmittedSuccess)\n        }\n    }\n\n    const submitTokenForm = async () => {\n        const hasBasketItem = baskets?.baskets?.[0]?.productItems?.length > 0\n        const shouldMergeBasket = hasBasketItem && prevAuthType === 'guest'\n        const {error} = await getPasswordlessAccessToken({\n            auth,\n            token,\n            shouldMergeBasket,\n            mergeBasket\n        })\n        if (error) {\n            tokenForm.setError('global', {type: 'manual', message: error.message})\n        }\n    }\n\n    useEffect(() => {\n        setIsTokenLoading(tokenForm.formState.isSubmitting)\n    }, [tokenForm.formState.isSubmitting])\n\n    useEffect(() => {\n        async function submitToken() {\n            if (token.length === pinInputMaxLength) {\n                setIsTokenLoading(true)\n                await submitTokenForm()\n                setIsTokenLoading(false)\n            }\n        }\n        submitToken()\n    }, [token])\n\n    const handleTokenChange = async (value) => {\n        setToken(value)\n    }\n\n    /**************** Einstein ****************/\n    useEffect(() => {\n        einstein.sendViewPage(pathname)\n    }, [])\n\n    return (\n        <Box data-testid=\"reset-password-page\" bg=\"gray.50\" py={[8, 16]}>\n            <Seo title=\"Log in with email\" description=\"Log in with email\" />\n            <Container\n                paddingTop={16}\n                width={['100%', '407px']}\n                bg=\"white\"\n                paddingBottom={14}\n                marginTop={8}\n                marginBottom={8}\n                borderRadius=\"base\"\n            >\n                {!showSubmittedSuccess ? (\n                    <PasswordlessLoginForm\n                        form={authForm}\n                        submitForm={submitAuthForm}\n                        clickSignIn={() => navigate('/login')}\n                    />\n                ) : (\n                    <PasswordlessTokenForm\n                        form={tokenForm}\n                        submitForm={submitTokenForm}\n                        handleTokenChange={handleTokenChange}\n                        pinInputMaxLength={pinInputMaxLength}\n                        isTokenLoading={isTokenLoading}\n                        token={token}\n                        clickSignIn={() => navigate('/login')}\n                        email={submittedEmail}\n                    />\n                )}\n            </Container>\n        </Box>\n    )\n}\n\nPasswordlessLogin.getTemplateName = () => 'passwordless-login'\n\nPasswordlessLogin.propTypes = {\n    match: PropTypes.object\n}\n\nexport default PasswordlessLogin\n"],"names":["React","useState","useEffect","useMemo","useIntl","useLocation","PropTypes","Box","Container","useForm","useAccessToken","useCustomerBaskets","useCustomerId","useCustomerType","useShopperBasketsMutation","useUsid","getConfig","Seo","PasswordlessLoginForm","PasswordlessTokenForm","useNavigation","useEinstein","useMultiSite","usePrevious","isServer","authorizePasswordlessCustomer","getPasswordlessAccessToken","getPasswordlessAuth","PasswordlessLogin","app","authForm","tokenForm","navigate","formatMessage","submittedEmail","setSubmittedEmail","showSubmittedSuccess","setShowSubmittedSuccess","token","setToken","isTokenLoading","setIsTokenLoading","einstein","pathname","site","usid","getTokenWhenReady","isRegistered","customerType","enablePasswordlessLogin","enablePWAKitPrivateClient","pinInputMaxLength","customerId","prevAuthType","data","baskets","parameters","enabled","keepPreviousData","mergeBasket","_location","_location$state","location","state","directedFrom","auth","submitAuthForm","_ref","_asyncToGenerator","email","accessToken","error","siteId","id","setError","type","message","_x","apply","arguments","submitTokenForm","_ref2","_baskets$baskets","_baskets$baskets$","_baskets$baskets$$pro","hasBasketItem","productItems","length","shouldMergeBasket","formState","isSubmitting","submitToken","_submitToken","handleTokenChange","_ref3","value","_x2","sendViewPage","createElement","bg","py","title","description","paddingTop","width","paddingBottom","marginTop","marginBottom","borderRadius","form","submitForm","clickSignIn","getTemplateName","propTypes","match","object"],"sourceRoot":""}