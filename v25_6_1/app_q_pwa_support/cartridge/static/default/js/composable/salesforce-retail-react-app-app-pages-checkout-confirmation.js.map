{"version":3,"file":"salesforce-retail-react-app-app-pages-checkout-confirmation.js","mappings":"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","sources":["webpack://composable-storefront-toolkit/./app/components/address-display/index.jsx","webpack://composable-storefront-toolkit/./app/components/forms/post-checkout-registration-fields.jsx","webpack://composable-storefront-toolkit/./app/pages/checkout/confirmation.jsx","webpack://composable-storefront-toolkit/./app/utils/cc-utils.js"],"sourcesContent":["/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {Box, Text} from '@salesforce/retail-react-app/app/components/shared/ui'\n\nconst AddressDisplay = ({address}) => {\n    return (\n        <Box>\n            <Text>\n                {address.firstName} {address.lastName}\n            </Text>\n            <Text>{address.address1}</Text>\n            <Text>\n                {address.city}, {address.stateCode} {address.postalCode}\n            </Text>\n            <Text>{address.countryCode}</Text>\n        </Box>\n    )\n}\n\nAddressDisplay.propTypes = {\n    address: PropTypes.object\n}\n\nexport default AddressDisplay\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {Stack, Box} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport useRegistrationFields from '@salesforce/retail-react-app/app/components/forms/useRegistrationFields'\nimport PasswordRequirements from '@salesforce/retail-react-app/app/components/forms/password-requirements'\nimport Field from '@salesforce/retail-react-app/app/components/field'\n\nconst PostCheckoutRegistrationFields = ({form, prefix = ''}) => {\n    const fields = useRegistrationFields({form, prefix})\n    const password = form.watch(`${prefix}password`)\n\n    return (\n        <Box>\n            <Stack spacing={5}>\n                <Field {...fields.email} />\n\n                <Stack spacing={3} paddingBottom={2}>\n                    <Field {...fields.password} />\n                    <PasswordRequirements value={password} />\n                </Stack>\n            </Stack>\n\n            <Field {...fields.firstName} type=\"hidden\" />\n            <Field {...fields.lastName} type=\"hidden\" />\n        </Box>\n    )\n}\n\nPostCheckoutRegistrationFields.propTypes = {\n    /** Object returned from `useForm` */\n    form: PropTypes.object.isRequired,\n\n    /** Optional prefix for field names */\n    prefix: PropTypes.string\n}\n\nexport default PostCheckoutRegistrationFields\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport React, {Fragment, useEffect} from 'react'\nimport {FormattedMessage, FormattedNumber} from 'react-intl'\nimport {\n    Box,\n    Button,\n    Container,\n    Flex,\n    Heading,\n    SimpleGrid,\n    Spacer,\n    Stack,\n    Text,\n    Alert,\n    AlertIcon,\n    Divider\n} from '@salesforce/retail-react-app/app/components/shared/ui'\nimport {useForm} from 'react-hook-form'\nimport {useParams} from 'react-router-dom'\nimport {useOrder, useProducts, useAuthHelper, AuthHelpers} from '@salesforce/commerce-sdk-react'\nimport {getCreditCardIcon} from '@salesforce/retail-react-app/app/utils/cc-utils'\nimport useNavigation from '@salesforce/retail-react-app/app/hooks/use-navigation'\nimport Link from '@salesforce/retail-react-app/app/components/link'\nimport AddressDisplay from '@salesforce/retail-react-app/app/components/address-display'\nimport PostCheckoutRegistrationFields from '@salesforce/retail-react-app/app/components/forms/post-checkout-registration-fields'\nimport PromoPopover from '@salesforce/retail-react-app/app/components/promo-popover'\nimport ItemVariantProvider from '@salesforce/retail-react-app/app/components/item-variant'\nimport CartItemVariantImage from '@salesforce/retail-react-app/app/components/item-variant/item-image'\nimport CartItemVariantName from '@salesforce/retail-react-app/app/components/item-variant/item-name'\nimport CartItemVariantAttributes from '@salesforce/retail-react-app/app/components/item-variant/item-attributes'\nimport CartItemVariantPrice from '@salesforce/retail-react-app/app/components/item-variant/item-price'\nimport {useCurrentCustomer} from '@salesforce/retail-react-app/app/hooks/use-current-customer'\nimport {API_ERROR_MESSAGE} from '@salesforce/retail-react-app/app/constants'\nimport {useCurrency} from '@salesforce/retail-react-app/app/hooks'\n\nconst onClient = typeof window !== 'undefined'\n\nconst CheckoutConfirmation = () => {\n    const {orderNo} = useParams()\n    const navigate = useNavigation()\n    const {data: customer} = useCurrentCustomer()\n    const register = useAuthHelper(AuthHelpers.Register)\n    const {data: order} = useOrder(\n        {\n            parameters: {orderNo}\n        },\n        {\n            enabled: !!orderNo && onClient\n        }\n    )\n    const {currency} = useCurrency()\n    const itemIds = order?.productItems.map((item) => item.productId)\n    const {data: products} = useProducts({parameters: {ids: itemIds?.join(',')}})\n    const productItemsMap = products?.data.reduce((map, item) => ({...map, [item.id]: item}), {})\n    const form = useForm()\n\n    useEffect(() => {\n        form.reset({\n            email: order?.customerInfo?.email || '',\n            password: '',\n            firstName: order?.billingAddress?.firstName,\n            lastName: order?.billingAddress?.lastName\n        })\n    }, [order])\n\n    if (!order || !order.orderNo) {\n        return null\n    }\n\n    const CardIcon = getCreditCardIcon(order.paymentInstruments[0].paymentCard?.cardType)\n\n    const submitForm = async (data) => {\n        try {\n            const body = {\n                customer: {\n                    firstName: data.firstName,\n                    lastName: data.lastName,\n                    email: data.email,\n                    login: data.email\n                },\n                password: data.password\n            }\n            await register.mutateAsync(body)\n\n            navigate(`/account`)\n        } catch (error) {\n            if (!error.response) {\n                form.setError('global', {type: 'manual', message: API_ERROR_MESSAGE})\n                return\n            }\n            const json = await error.response.json()\n\n            const existingAccountMessage = (\n                <Fragment>\n                    <FormattedMessage\n                        defaultMessage=\"This email already has an account.\"\n                        id=\"checkout_confirmation.message.already_has_account\"\n                    />\n                    &nbsp;\n                    <Link to=\"/login\" color=\"blue.600\">\n                        <FormattedMessage\n                            defaultMessage=\"Log in here\"\n                            id=\"checkout_confirmation.link.login\"\n                        />\n                    </Link>\n                </Fragment>\n            )\n\n            const message = /the login is already in use/i.test(json.detail)\n                ? existingAccountMessage\n                : API_ERROR_MESSAGE\n\n            form.setError('global', {type: 'manual', message})\n        }\n    }\n\n    return (\n        <Box background=\"gray.50\">\n            <Container\n                maxWidth=\"container.md\"\n                py={{base: 7, md: 16}}\n                px={{base: 0, md: 4}}\n                data-testid=\"sf-checkout-confirmation-container\"\n            >\n                <Stack spacing={4}>\n                    <Box layerStyle=\"card\" rounded={[0, 0, 'base']} px={[4, 4, 6]} py={[6, 6, 8]}>\n                        <Stack spacing={6}>\n                            <Heading align=\"center\" fontSize={['2xl']}>\n                                <FormattedMessage\n                                    defaultMessage=\"Thank you for your order!\"\n                                    id=\"checkout_confirmation.heading.thank_you_for_order\"\n                                />\n                            </Heading>\n\n                            <Box>\n                                <Container variant=\"form\">\n                                    <Stack spacing={3}>\n                                        <Text align=\"center\">\n                                            <FormattedMessage\n                                                defaultMessage=\"Order Number\"\n                                                id=\"checkout_confirmation.label.order_number\"\n                                            />\n                                            :{' '}\n                                            <Text as=\"span\" fontWeight=\"bold\">\n                                                {order.orderNo}\n                                            </Text>\n                                        </Text>\n                                        <Text align=\"center\">\n                                            <FormattedMessage\n                                                defaultMessage=\"We will send an email to <b>{email}</b> with your confirmation number and receipt shortly.\"\n                                                id=\"checkout_confirmation.message.will_email_shortly\"\n                                                values={{\n                                                    b: (chunks) => <b>{chunks}</b>,\n                                                    email: order.customerInfo.email\n                                                }}\n                                            />\n                                        </Text>\n\n                                        <Spacer />\n\n                                        <Button as={Link} href=\"/\" variant=\"outline\">\n                                            <FormattedMessage\n                                                defaultMessage=\"Continue Shopping\"\n                                                id=\"checkout_confirmation.link.continue_shopping\"\n                                            />\n                                        </Button>\n                                    </Stack>\n                                </Container>\n                            </Box>\n                        </Stack>\n                    </Box>\n\n                    {customer.isGuest && (\n                        <Box\n                            layerStyle=\"card\"\n                            rounded={[0, 0, 'base']}\n                            px={[4, 4, 6]}\n                            py={[6, 6, 8]}\n                        >\n                            <Container variant=\"form\">\n                                <Heading fontSize=\"lg\" marginBottom={6}>\n                                    <FormattedMessage\n                                        defaultMessage=\"Create an account for faster checkout\"\n                                        id=\"checkout_confirmation.heading.create_account\"\n                                    />\n                                </Heading>\n\n                                <form onSubmit={form.handleSubmit(submitForm)}>\n                                    <Stack spacing={4}>\n                                        {form.formState.errors?.global && (\n                                            <Alert status=\"error\">\n                                                <AlertIcon />\n                                                {form.formState.errors.global.message}\n                                            </Alert>\n                                        )}\n\n                                        <PostCheckoutRegistrationFields form={form} />\n\n                                        <Button\n                                            type=\"submit\"\n                                            width=\"full\"\n                                            onClick={() => form.clearErrors('global')}\n                                            isLoading={form.formState.isSubmitting}\n                                        >\n                                            <FormattedMessage\n                                                defaultMessage=\"Create Account\"\n                                                id=\"checkout_confirmation.button.create_account\"\n                                            />\n                                        </Button>\n                                    </Stack>\n                                </form>\n                            </Container>\n                        </Box>\n                    )}\n\n                    <Box layerStyle=\"card\" rounded={[0, 0, 'base']} px={[4, 4, 6]} py={[6, 6, 8]}>\n                        <Container variant=\"form\">\n                            <Stack spacing={6}>\n                                <Heading fontSize=\"lg\">\n                                    <FormattedMessage\n                                        defaultMessage=\"Delivery Details\"\n                                        id=\"checkout_confirmation.heading.delivery_details\"\n                                    />\n                                </Heading>\n\n                                <SimpleGrid columns={[1, 1, 2]} spacing={6}>\n                                    <Stack spacing={1}>\n                                        <Heading as=\"h3\" fontSize=\"sm\">\n                                            <FormattedMessage\n                                                defaultMessage=\"Shipping Address\"\n                                                id=\"checkout_confirmation.heading.shipping_address\"\n                                            />\n                                        </Heading>\n                                        <AddressDisplay\n                                            address={order.shipments[0].shippingAddress}\n                                        />\n                                    </Stack>\n\n                                    <Stack spacing={1}>\n                                        <Heading as=\"h3\" fontSize=\"sm\">\n                                            <FormattedMessage\n                                                defaultMessage=\"Shipping Method\"\n                                                id=\"checkout_confirmation.heading.shipping_method\"\n                                            />\n                                        </Heading>\n                                        <Box>\n                                            <Text>{order.shipments[0].shippingMethod.name}</Text>\n                                            <Text>\n                                                {order.shipments[0].shippingMethod.description}\n                                            </Text>\n                                        </Box>\n                                    </Stack>\n                                </SimpleGrid>\n                            </Stack>\n                        </Container>\n                    </Box>\n\n                    <Box layerStyle=\"card\" rounded={[0, 0, 'base']} px={[4, 4, 6]} py={[6, 6, 8]}>\n                        <Container variant=\"form\">\n                            <Stack spacing={6}>\n                                <Heading fontSize=\"lg\">\n                                    <FormattedMessage\n                                        defaultMessage=\"Order Summary\"\n                                        id=\"checkout_confirmation.heading.order_summary\"\n                                    />\n                                </Heading>\n\n                                <Stack spacing={4}>\n                                    <Text>\n                                        <FormattedMessage\n                                            description=\"# item(s) in order\"\n                                            defaultMessage=\"{itemCount, plural, =0 {0 items} one {# item} other {# items}}\"\n                                            values={{\n                                                itemCount: order.productItems.reduce(\n                                                    (a, b) => a + b.quantity,\n                                                    0\n                                                )\n                                            }}\n                                            id=\"checkout_confirmation.message.num_of_items_in_order\"\n                                        />\n                                    </Text>\n\n                                    <Stack spacing={5} align=\"flex-start\">\n                                        <Stack\n                                            spacing={5}\n                                            align=\"flex-start\"\n                                            width=\"full\"\n                                            divider={<Divider />}\n                                        >\n                                            {order.productItems?.map((product, idx) => {\n                                                const productDetail =\n                                                    productItemsMap?.[product.productId] || {}\n                                                const variant = {\n                                                    ...product,\n                                                    ...productDetail,\n                                                    price: product.price\n                                                }\n\n                                                return (\n                                                    <ItemVariantProvider\n                                                        key={product.productId}\n                                                        index={idx}\n                                                        variant={variant}\n                                                    >\n                                                        <Flex width=\"full\" alignItems=\"flex-start\">\n                                                            <CartItemVariantImage\n                                                                width=\"80px\"\n                                                                mr={2}\n                                                            />\n                                                            <Stack\n                                                                spacing={1}\n                                                                marginTop=\"-3px\"\n                                                                flex={1}\n                                                            >\n                                                                <CartItemVariantName />\n                                                                <Flex\n                                                                    width=\"full\"\n                                                                    justifyContent=\"space-between\"\n                                                                    alignItems=\"flex-end\"\n                                                                >\n                                                                    <CartItemVariantAttributes\n                                                                        includeQuantity\n                                                                    />\n                                                                    <CartItemVariantPrice\n                                                                        currency={currency}\n                                                                    />\n                                                                </Flex>\n                                                            </Stack>\n                                                        </Flex>\n                                                    </ItemVariantProvider>\n                                                )\n                                            })}\n                                        </Stack>\n\n                                        <Stack w=\"full\" py={4} borderY=\"1px\" borderColor=\"gray.200\">\n                                            <Flex justify=\"space-between\">\n                                                <Text fontWeight=\"bold\">\n                                                    <FormattedMessage\n                                                        defaultMessage=\"Subtotal\"\n                                                        id=\"checkout_confirmation.label.subtotal\"\n                                                    />\n                                                </Text>\n                                                <Text fontWeight=\"bold\">\n                                                    <FormattedNumber\n                                                        style=\"currency\"\n                                                        currency={order?.currency}\n                                                        value={order?.productSubTotal}\n                                                    />\n                                                </Text>\n                                            </Flex>\n                                            {order.orderPriceAdjustments?.map((adjustment) => (\n                                                <Flex\n                                                    justify=\"space-between\"\n                                                    key={adjustment.priceAdjustmentId}\n                                                >\n                                                    <Text>{adjustment.itemText}</Text>\n                                                    <Text color=\"green.500\">\n                                                        <FormattedNumber\n                                                            style=\"currency\"\n                                                            currency={order?.currency}\n                                                            value={adjustment.price}\n                                                        />\n                                                    </Text>\n                                                </Flex>\n                                            ))}\n                                            <Flex justify=\"space-between\">\n                                                <Flex alignItems=\"center\">\n                                                    <Text lineHeight={1}>\n                                                        <FormattedMessage\n                                                            defaultMessage=\"Shipping\"\n                                                            id=\"checkout_confirmation.label.shipping\"\n                                                        />\n                                                        {order.shippingItems[0].priceAdjustments\n                                                            ?.length > 0 && (\n                                                            <Text as=\"span\" ml={1}>\n                                                                (\n                                                                <FormattedMessage\n                                                                    defaultMessage=\"Promotion applied\"\n                                                                    id=\"checkout_confirmation.label.promo_applied\"\n                                                                />\n                                                                )\n                                                            </Text>\n                                                        )}\n                                                    </Text>\n                                                    {order.shippingItems?.[0]?.priceAdjustments\n                                                        ?.length > 0 && (\n                                                        <PromoPopover ml={2}>\n                                                            <Stack>\n                                                                {order.shippingItems[0].priceAdjustments?.map(\n                                                                    (adjustment) => (\n                                                                        <Text\n                                                                            key={\n                                                                                adjustment.priceAdjustmentId\n                                                                            }\n                                                                            fontSize=\"sm\"\n                                                                        >\n                                                                            {adjustment.itemText}\n                                                                        </Text>\n                                                                    )\n                                                                )}\n                                                            </Stack>\n                                                        </PromoPopover>\n                                                    )}\n                                                </Flex>\n\n                                                {order.shippingItems[0].priceAdjustments?.some(\n                                                    ({appliedDiscount}) =>\n                                                        appliedDiscount?.type === 'free'\n                                                ) ? (\n                                                    <Text\n                                                        as=\"span\"\n                                                        color=\"green.500\"\n                                                        textTransform=\"uppercase\"\n                                                    >\n                                                        <FormattedMessage\n                                                            defaultMessage=\"Free\"\n                                                            id=\"checkout_confirmation.label.free\"\n                                                        />\n                                                    </Text>\n                                                ) : (\n                                                    <Text>\n                                                        <FormattedNumber\n                                                            value={order.shippingTotal}\n                                                            style=\"currency\"\n                                                            currency={order.currency}\n                                                        />\n                                                    </Text>\n                                                )}\n                                            </Flex>\n                                            <Flex justify=\"space-between\">\n                                                <Text>\n                                                    <FormattedMessage\n                                                        defaultMessage=\"Tax\"\n                                                        id=\"checkout_confirmation.label.tax\"\n                                                    />\n                                                </Text>\n                                                <Text>\n                                                    <FormattedNumber\n                                                        value={order.taxTotal}\n                                                        style=\"currency\"\n                                                        currency={order.currency}\n                                                    />\n                                                </Text>\n                                            </Flex>\n                                        </Stack>\n\n                                        <Flex w=\"full\" justify=\"space-between\">\n                                            <Text fontWeight=\"bold\">\n                                                <FormattedMessage\n                                                    defaultMessage=\"Order Total\"\n                                                    id=\"checkout_confirmation.label.order_total\"\n                                                />\n                                            </Text>\n                                            <Text fontWeight=\"bold\">\n                                                <FormattedNumber\n                                                    style=\"currency\"\n                                                    currency={order?.currency}\n                                                    value={order?.orderTotal}\n                                                />\n                                            </Text>\n                                        </Flex>\n                                    </Stack>\n                                </Stack>\n                            </Stack>\n                        </Container>\n                    </Box>\n\n                    <Box layerStyle=\"card\" rounded={[0, 0, 'base']} px={[4, 4, 6]} py={[6, 6, 8]}>\n                        <Container variant=\"form\">\n                            <Stack spacing={6}>\n                                <Heading fontSize=\"lg\">\n                                    <FormattedMessage\n                                        defaultMessage=\"Payment Details\"\n                                        id=\"checkout_confirmation.heading.payment_details\"\n                                    />\n                                </Heading>\n\n                                <SimpleGrid columns={[1, 1, 2]} spacing={6}>\n                                    <Stack spacing={1}>\n                                        <Heading as=\"h3\" fontSize=\"sm\">\n                                            <FormattedMessage\n                                                defaultMessage=\"Billing Address\"\n                                                id=\"checkout_confirmation.heading.billing_address\"\n                                            />\n                                        </Heading>\n                                        <AddressDisplay address={order.billingAddress} />\n                                    </Stack>\n\n                                    <Stack spacing={1}>\n                                        <Heading as=\"h3\" fontSize=\"sm\">\n                                            <FormattedMessage\n                                                defaultMessage=\"Credit Card\"\n                                                id=\"checkout_confirmation.heading.credit_card\"\n                                            />\n                                        </Heading>\n\n                                        <Stack direction=\"row\">\n                                            {CardIcon && <CardIcon layerStyle=\"ccIcon\" />}\n\n                                            <Box>\n                                                <Text>\n                                                    {\n                                                        order.paymentInstruments[0].paymentCard\n                                                            ?.cardType\n                                                    }\n                                                </Text>\n                                                <Stack direction=\"row\">\n                                                    <Text>\n                                                        &bull;&bull;&bull;&bull;{' '}\n                                                        {\n                                                            order.paymentInstruments[0].paymentCard\n                                                                ?.numberLastDigits\n                                                        }\n                                                    </Text>\n                                                    <Text>\n                                                        {\n                                                            order.paymentInstruments[0].paymentCard\n                                                                ?.expirationMonth\n                                                        }\n                                                        /\n                                                        {\n                                                            order.paymentInstruments[0].paymentCard\n                                                                ?.expirationYear\n                                                        }\n                                                    </Text>\n                                                </Stack>\n                                            </Box>\n                                        </Stack>\n                                    </Stack>\n                                </SimpleGrid>\n                            </Stack>\n                        </Container>\n                    </Box>\n                </Stack>\n            </Container>\n        </Box>\n    )\n}\n\nexport default CheckoutConfirmation\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport {\n    AmexIcon,\n    DiscoverIcon,\n    MastercardIcon,\n    VisaIcon\n} from '@salesforce/retail-react-app/app/components/icons'\n\n/**\n * Formats a credit card number against given criteria\n * @param {string} cardNumber - The number to be formatted\n * @param {Object} opts\n * @param {number[]} opts.gaps - Indices for space insertion\n * @param {number[]} opts.length - Max number lengths for output\n * @returns {string} Formatted card number for display\n */\nexport const formatCreditCardNumber = (cardNumber = '', opts = {gaps: [], lengths: []}) => {\n    let trimmedNumber = cardNumber.replace(/[^0-9]/g, '')\n    let numberLength = trimmedNumber.length\n\n    if (numberLength === opts.lengths[0] + 1) {\n        trimmedNumber = trimmedNumber.substr(0, opts.lengths[0])\n        numberLength = trimmedNumber.length\n    }\n\n    let numbers = trimmedNumber.split('')\n\n    opts.gaps.forEach((gapIndex, idx) => {\n        if (numberLength > gapIndex) {\n            numbers.splice(gapIndex + idx, 0, ' ')\n        }\n    })\n\n    return numbers.join('')\n}\n\n/**\n * Returns the icon component for a given card type\n * @param {string} type - The card type\n * @returns {Function|undefined} React component\n */\nexport const getCreditCardIcon = (type) => {\n    if (!type) {\n        return undefined\n    }\n    return {\n        // Visa\n        visa: VisaIcon,\n\n        // MasterCard\n        mastercard: MastercardIcon,\n        'master card': MastercardIcon,\n\n        // American Express\n        'american express': AmexIcon,\n        'american-express': AmexIcon,\n        amex: AmexIcon,\n\n        // Discover\n        discover: DiscoverIcon\n    }[type.toLowerCase()]\n}\n\n/**\n * Returns the card type string in the format the SDK expects.\n * @param {string} - The card type as given by our cc validator\n * @returns {string|undefined} - The card type in a format expected by the SDK\n */\nexport const getPaymentInstrumentCardType = (type) => {\n    if (!type) {\n        return undefined\n    }\n    return {\n        visa: 'Visa',\n        mastercard: 'Master Card',\n        'american-express': 'Amex',\n        discover: 'Discover'\n    }[type]\n}\n\n/**\n * Returns the masked credit card number by removing white spaces,\n * replacing all digits except the last 4 using the '*' character.\n * @param cardNumber - The card number unmasked\n * @returns {string} - The masked card number\n */\nexport const getMaskCreditCardNumber = (cardNumber) => {\n    const trimmedCardNumber = cardNumber.replace(/\\s/g, '')\n\n    const maskedDigits = trimmedCardNumber.slice(0, -4).replace(/\\d/g, '*')\n    const lastFourDigits = trimmedCardNumber.slice(-4)\n\n    return maskedDigits + lastFourDigits\n}\n\nexport const createCreditCardPaymentBodyFromForm = (paymentFormData) => {\n    // Using destructuring to omit properties\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {expiry, paymentInstrumentId, ...selectedPayment} = paymentFormData\n\n    // The form gives us the expiration date as `MM/YY` - so we need to split it into\n    // month and year to submit them as individual fields.\n    const [expirationMonth, expirationYear] = expiry.split('/')\n\n    return {\n        paymentMethodId: 'CREDIT_CARD',\n        paymentCard: {\n            ...selectedPayment,\n            number: selectedPayment.number.replace(/ /g, ''),\n            cardType: getPaymentInstrumentCardType(selectedPayment.cardType),\n            expirationMonth: parseInt(expirationMonth),\n            expirationYear: parseInt(`20${expirationYear}`),\n\n            // TODO: These fields are required for saving the card to the customer's\n            // account. Im not sure what they are for or how to get them, so for now\n            // we're just passing some values to make it work. Need to investigate.\n            issueNumber: '',\n            validFromMonth: 1,\n            validFromYear: 2020\n        }\n    }\n}\n"],"names":["React","PropTypes","Box","Text","AddressDisplay","address","createElement","firstName","lastName","address1","city","stateCode","postalCode","countryCode","propTypes","object","Stack","useRegistrationFields","PasswordRequirements","Field","PostCheckoutRegistrationFields","form","prefix","fields","password","watch","spacing","email","paddingBottom","value","_extends","type","isRequired","string","Fragment","useEffect","FormattedMessage","FormattedNumber","Button","Container","Flex","Heading","SimpleGrid","Spacer","Alert","AlertIcon","Divider","useForm","useParams","useOrder","useProducts","useAuthHelper","AuthHelpers","getCreditCardIcon","useNavigation","Link","PromoPopover","ItemVariantProvider","CartItemVariantImage","CartItemVariantName","CartItemVariantAttributes","CartItemVariantPrice","useCurrentCustomer","API_ERROR_MESSAGE","useCurrency","onClient","window","CheckoutConfirmation","_order$paymentInstrum","_form$formState$error","_order$productItems","_order$orderPriceAdju","_order$shippingItems$","_order$shippingItems","_order$shippingItems$2","_order$shippingItems$3","_order$shippingItems$4","_order$shippingItems$5","_order$paymentInstrum2","_order$paymentInstrum3","_order$paymentInstrum4","_order$paymentInstrum5","orderNo","navigate","data","customer","register","Register","order","parameters","enabled","currency","itemIds","productItems","map","item","productId","products","ids","join","productItemsMap","reduce","_objectSpread","id","_order$customerInfo","_order$billingAddress","_order$billingAddress2","reset","customerInfo","billingAddress","CardIcon","paymentInstruments","paymentCard","cardType","submitForm","_ref","_asyncToGenerator","body","login","mutateAsync","error","response","setError","message","json","existingAccountMessage","defaultMessage","to","color","test","detail","_x","apply","arguments","background","maxWidth","py","base","md","px","layerStyle","rounded","align","fontSize","variant","as","fontWeight","values","b","chunks","href","isGuest","marginBottom","onSubmit","handleSubmit","formState","errors","global","status","width","onClick","clearErrors","isLoading","isSubmitting","columns","shipments","shippingAddress","shippingMethod","name","description","itemCount","a","quantity","divider","product","idx","productDetail","price","key","index","alignItems","mr","marginTop","flex","justifyContent","includeQuantity","w","borderY","borderColor","justify","style","productSubTotal","orderPriceAdjustments","adjustment","priceAdjustmentId","itemText","lineHeight","shippingItems","priceAdjustments","length","ml","some","appliedDiscount","textTransform","shippingTotal","taxTotal","orderTotal","direction","numberLastDigits","expirationMonth","expirationYear","AmexIcon","DiscoverIcon","MastercardIcon","VisaIcon","formatCreditCardNumber","cardNumber","opts","gaps","lengths","trimmedNumber","replace","numberLength","substr","numbers","split","forEach","gapIndex","splice","undefined","visa","mastercard","amex","discover","toLowerCase","getPaymentInstrumentCardType","getMaskCreditCardNumber","trimmedCardNumber","maskedDigits","slice","lastFourDigits","createCreditCardPaymentBodyFromForm","paymentFormData","expiry","paymentInstrumentId","selectedPayment","_objectWithoutProperties","_excluded","paymentMethodId","number","parseInt","issueNumber","validFromMonth","validFromYear"],"sourceRoot":""}